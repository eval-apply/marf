
caal3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000027c  20000000  080062a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002027c  2**0
                  CONTENTS
  8 .bss          000008b4  20000280  20000280  00020280  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  20000b34  20000b34  00020280  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012ca6  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002c7e  00000000  00000000  00032f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005e29  00000000  00000000  00035bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  0003ba00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  0003c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014024  00000000  00000000  0003d408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c960  00000000  00000000  0005142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00064911  00000000  00000000  0005dd8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c269d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002084  00000000  00000000  000c2718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000280 	.word	0x20000280
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006250 	.word	0x08006250

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000284 	.word	0x20000284
 80001c4:	08006250 	.word	0x08006250

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_ldivmod>:
 80009a4:	b97b      	cbnz	r3, 80009c6 <__aeabi_ldivmod+0x22>
 80009a6:	b972      	cbnz	r2, 80009c6 <__aeabi_ldivmod+0x22>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bfbe      	ittt	lt
 80009ac:	2000      	movlt	r0, #0
 80009ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80009b2:	e006      	blt.n	80009c2 <__aeabi_ldivmod+0x1e>
 80009b4:	bf08      	it	eq
 80009b6:	2800      	cmpeq	r0, #0
 80009b8:	bf1c      	itt	ne
 80009ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80009be:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c2:	f000 b9a5 	b.w	8000d10 <__aeabi_idiv0>
 80009c6:	f1ad 0c08 	sub.w	ip, sp, #8
 80009ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ce:	2900      	cmp	r1, #0
 80009d0:	db09      	blt.n	80009e6 <__aeabi_ldivmod+0x42>
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db1a      	blt.n	8000a0c <__aeabi_ldivmod+0x68>
 80009d6:	f000 f835 	bl	8000a44 <__udivmoddi4>
 80009da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e2:	b004      	add	sp, #16
 80009e4:	4770      	bx	lr
 80009e6:	4240      	negs	r0, r0
 80009e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db1b      	blt.n	8000a28 <__aeabi_ldivmod+0x84>
 80009f0:	f000 f828 	bl	8000a44 <__udivmoddi4>
 80009f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fc:	b004      	add	sp, #16
 80009fe:	4240      	negs	r0, r0
 8000a00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a04:	4252      	negs	r2, r2
 8000a06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a0a:	4770      	bx	lr
 8000a0c:	4252      	negs	r2, r2
 8000a0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a12:	f000 f817 	bl	8000a44 <__udivmoddi4>
 8000a16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1e:	b004      	add	sp, #16
 8000a20:	4240      	negs	r0, r0
 8000a22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a26:	4770      	bx	lr
 8000a28:	4252      	negs	r2, r2
 8000a2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a2e:	f000 f809 	bl	8000a44 <__udivmoddi4>
 8000a32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a3a:	b004      	add	sp, #16
 8000a3c:	4252      	negs	r2, r2
 8000a3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4688      	mov	r8, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14b      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4615      	mov	r5, r2
 8000a56:	d967      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0720 	rsb	r7, r2, #32
 8000a62:	fa01 f302 	lsl.w	r3, r1, r2
 8000a66:	fa20 f707 	lsr.w	r7, r0, r7
 8000a6a:	4095      	lsls	r5, r2
 8000a6c:	ea47 0803 	orr.w	r8, r7, r3
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a7c:	fa1f fc85 	uxth.w	ip, r5
 8000a80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a88:	fb07 f10c 	mul.w	r1, r7, ip
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18eb      	adds	r3, r5, r3
 8000a92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a96:	f080 811b 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8118 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000aa0:	3f02      	subs	r7, #2
 8000aa2:	442b      	add	r3, r5
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab8:	45a4      	cmp	ip, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	192c      	adds	r4, r5, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ac2:	f080 8107 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	f240 8104 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000acc:	3802      	subs	r0, #2
 8000ace:	442c      	add	r4, r5
 8000ad0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ad4:	eba4 040c 	sub.w	r4, r4, ip
 8000ad8:	2700      	movs	r7, #0
 8000ada:	b11e      	cbz	r6, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae4:	4639      	mov	r1, r7
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0xbe>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80eb 	beq.w	8000cca <__udivmoddi4+0x286>
 8000af4:	2700      	movs	r7, #0
 8000af6:	e9c6 0100 	strd	r0, r1, [r6]
 8000afa:	4638      	mov	r0, r7
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f783 	clz	r7, r3
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d147      	bne.n	8000b9a <__udivmoddi4+0x156>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0xd0>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80fa 	bhi.w	8000d08 <__udivmoddi4+0x2c4>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d0e0      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b22:	e9c6 4800 	strd	r4, r8, [r6]
 8000b26:	e7dd      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b28:	b902      	cbnz	r2, 8000b2c <__udivmoddi4+0xe8>
 8000b2a:	deff      	udf	#255	; 0xff
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	f040 808f 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b36:	1b49      	subs	r1, r1, r5
 8000b38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3c:	fa1f f885 	uxth.w	r8, r5
 8000b40:	2701      	movs	r7, #1
 8000b42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b46:	0c23      	lsrs	r3, r4, #16
 8000b48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb08 f10c 	mul.w	r1, r8, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	f200 80cd 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b66:	4684      	mov	ip, r0
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	b2a3      	uxth	r3, r4
 8000b6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b78:	fb08 f800 	mul.w	r8, r8, r0
 8000b7c:	45a0      	cmp	r8, r4
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x14c>
 8000b80:	192c      	adds	r4, r5, r4
 8000b82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x14a>
 8000b88:	45a0      	cmp	r8, r4
 8000b8a:	f200 80b6 	bhi.w	8000cfa <__udivmoddi4+0x2b6>
 8000b8e:	4618      	mov	r0, r3
 8000b90:	eba4 0408 	sub.w	r4, r4, r8
 8000b94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b98:	e79f      	b.n	8000ada <__udivmoddi4+0x96>
 8000b9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b9e:	40bb      	lsls	r3, r7
 8000ba0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ba4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb8:	4325      	orrs	r5, r4
 8000bba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bbe:	0c2c      	lsrs	r4, r5, #16
 8000bc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bc4:	fa1f fa8e 	uxth.w	sl, lr
 8000bc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bcc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000be0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000be4:	f080 8087 	bcs.w	8000cf6 <__udivmoddi4+0x2b2>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f240 8084 	bls.w	8000cf6 <__udivmoddi4+0x2b2>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4473      	add	r3, lr
 8000bf4:	1b1b      	subs	r3, r3, r4
 8000bf6:	b2ad      	uxth	r5, r5
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c08:	45a2      	cmp	sl, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c14:	d26b      	bcs.n	8000cee <__udivmoddi4+0x2aa>
 8000c16:	45a2      	cmp	sl, r4
 8000c18:	d969      	bls.n	8000cee <__udivmoddi4+0x2aa>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4474      	add	r4, lr
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	fba0 8902 	umull	r8, r9, r0, r2
 8000c26:	eba4 040a 	sub.w	r4, r4, sl
 8000c2a:	454c      	cmp	r4, r9
 8000c2c:	46c2      	mov	sl, r8
 8000c2e:	464b      	mov	r3, r9
 8000c30:	d354      	bcc.n	8000cdc <__udivmoddi4+0x298>
 8000c32:	d051      	beq.n	8000cd8 <__udivmoddi4+0x294>
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d069      	beq.n	8000d0c <__udivmoddi4+0x2c8>
 8000c38:	ebb1 050a 	subs.w	r5, r1, sl
 8000c3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c44:	40fd      	lsrs	r5, r7
 8000c46:	40fc      	lsrs	r4, r7
 8000c48:	ea4c 0505 	orr.w	r5, ip, r5
 8000c4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c50:	2700      	movs	r7, #0
 8000c52:	e747      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000c54:	f1c2 0320 	rsb	r3, r2, #32
 8000c58:	fa20 f703 	lsr.w	r7, r0, r3
 8000c5c:	4095      	lsls	r5, r2
 8000c5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c62:	fa21 f303 	lsr.w	r3, r1, r3
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	4338      	orrs	r0, r7
 8000c6c:	0c01      	lsrs	r1, r0, #16
 8000c6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c72:	fa1f f885 	uxth.w	r8, r5
 8000c76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb07 f308 	mul.w	r3, r7, r8
 8000c82:	428b      	cmp	r3, r1
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x256>
 8000c8a:	1869      	adds	r1, r5, r1
 8000c8c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c90:	d22f      	bcs.n	8000cf2 <__udivmoddi4+0x2ae>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d92d      	bls.n	8000cf2 <__udivmoddi4+0x2ae>
 8000c96:	3f02      	subs	r7, #2
 8000c98:	4429      	add	r1, r5
 8000c9a:	1acb      	subs	r3, r1, r3
 8000c9c:	b281      	uxth	r1, r0
 8000c9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000caa:	fb00 f308 	mul.w	r3, r0, r8
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d907      	bls.n	8000cc2 <__udivmoddi4+0x27e>
 8000cb2:	1869      	adds	r1, r5, r1
 8000cb4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cb8:	d217      	bcs.n	8000cea <__udivmoddi4+0x2a6>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d915      	bls.n	8000cea <__udivmoddi4+0x2a6>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4429      	add	r1, r5
 8000cc2:	1ac9      	subs	r1, r1, r3
 8000cc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc8:	e73b      	b.n	8000b42 <__udivmoddi4+0xfe>
 8000cca:	4637      	mov	r7, r6
 8000ccc:	4630      	mov	r0, r6
 8000cce:	e709      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000cd0:	4607      	mov	r7, r0
 8000cd2:	e6e7      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	e6fb      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd8:	4541      	cmp	r1, r8
 8000cda:	d2ab      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000cdc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce0:	eb69 020e 	sbc.w	r2, r9, lr
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	e7a4      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cea:	4660      	mov	r0, ip
 8000cec:	e7e9      	b.n	8000cc2 <__udivmoddi4+0x27e>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	e795      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf2:	4667      	mov	r7, ip
 8000cf4:	e7d1      	b.n	8000c9a <__udivmoddi4+0x256>
 8000cf6:	4681      	mov	r9, r0
 8000cf8:	e77c      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	442c      	add	r4, r5
 8000cfe:	e747      	b.n	8000b90 <__udivmoddi4+0x14c>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	442b      	add	r3, r5
 8000d06:	e72f      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d08:	4638      	mov	r0, r7
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xda>
 8000d0c:	4637      	mov	r7, r6
 8000d0e:	e6e9      	b.n	8000ae4 <__udivmoddi4+0xa0>

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d14:	78c3      	ldrb	r3, [r0, #3]
 8000d16:	b953      	cbnz	r3, 8000d2e <NVIC_Init+0x1a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d18:	7803      	ldrb	r3, [r0, #0]
 8000d1a:	f003 011f 	and.w	r1, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d1e:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d20:	2201      	movs	r2, #1
 8000d22:	408a      	lsls	r2, r1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d24:	3320      	adds	r3, #32
 8000d26:	4912      	ldr	r1, [pc, #72]	; (8000d70 <NVIC_Init+0x5c>)
 8000d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2c:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <NVIC_Init+0x60>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	f3c3 2202 	ubfx	r2, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000d38:	f1c2 0104 	rsb	r1, r2, #4
 8000d3c:	b2c9      	uxtb	r1, r1
    tmpsub = tmpsub >> tmppriority;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	4113      	asrs	r3, r2
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d42:	7842      	ldrb	r2, [r0, #1]
 8000d44:	408a      	lsls	r2, r1
 8000d46:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000d48:	7881      	ldrb	r1, [r0, #2]
 8000d4a:	400b      	ands	r3, r1
 8000d4c:	4313      	orrs	r3, r2
    tmppriority = tmppriority << 0x04;
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	b2db      	uxtb	r3, r3
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d52:	7802      	ldrb	r2, [r0, #0]
 8000d54:	4906      	ldr	r1, [pc, #24]	; (8000d70 <NVIC_Init+0x5c>)
 8000d56:	440a      	add	r2, r1
 8000d58:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d5c:	7803      	ldrb	r3, [r0, #0]
 8000d5e:	f003 001f 	and.w	r0, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d62:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d64:	2201      	movs	r2, #1
 8000d66:	4082      	lsls	r2, r0
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000d78:	b410      	push	{r4}
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000d7a:	6842      	ldr	r2, [r0, #4]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000d7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000d84:	790c      	ldrb	r4, [r1, #4]
                                   ADC_InitStruct->ADC_Resolution);
 8000d86:	680b      	ldr	r3, [r1, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000d88:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000d8c:	4313      	orrs	r3, r2
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000d8e:	6043      	str	r3, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000d90:	6883      	ldr	r3, [r0, #8]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000d92:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <ADC_Init+0x4c>)
 8000d94:	401a      	ands	r2, r3
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000d96:	690b      	ldr	r3, [r1, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000d98:	68cc      	ldr	r4, [r1, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000d9a:	4323      	orrs	r3, r4
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000d9c:	688c      	ldr	r4, [r1, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000d9e:	4323      	orrs	r3, r4
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000da0:	794c      	ldrb	r4, [r1, #5]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000da2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8000da6:	4313      	orrs	r3, r2
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000da8:	6083      	str	r3, [r0, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000daa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000dac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000db0:	7d0a      	ldrb	r2, [r1, #20]
 8000db2:	3a01      	subs	r2, #1
 8000db4:	b2d2      	uxtb	r2, r2
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000db6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000dba:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8000dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	c0fff7fd 	.word	0xc0fff7fd

08000dc8 <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000dcc:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000dce:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000dd0:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000dd2:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000dd4:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	7503      	strb	r3, [r0, #20]
}
 8000dda:	4770      	bx	lr

08000ddc <ADC_Cmd>:
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ddc:	b921      	cbnz	r1, 8000de8 <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000dde:	6883      	ldr	r3, [r0, #8]
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	6083      	str	r3, [r0, #8]
  }
}
 8000de6:	4770      	bx	lr
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000de8:	6883      	ldr	r3, [r0, #8]
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6083      	str	r3, [r0, #8]
 8000df0:	4770      	bx	lr

08000df2 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000df2:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000df4:	2909      	cmp	r1, #9
 8000df6:	d91d      	bls.n	8000e34 <ADC_RegularChannelConfig+0x42>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000df8:	68c5      	ldr	r5, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000dfa:	f1a1 040a 	sub.w	r4, r1, #10
 8000dfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e02:	2607      	movs	r6, #7
 8000e04:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e06:	ea25 0506 	bic.w	r5, r5, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000e0a:	fa03 f404 	lsl.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e0e:	432c      	orrs	r4, r5
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000e10:	60c4      	str	r4, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e12:	2a06      	cmp	r2, #6
 8000e14:	d91a      	bls.n	8000e4c <ADC_RegularChannelConfig+0x5a>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000e16:	2a0c      	cmp	r2, #12
 8000e18:	d926      	bls.n	8000e68 <ADC_RegularChannelConfig+0x76>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000e1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000e1c:	3a0d      	subs	r2, #13
 8000e1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e22:	241f      	movs	r4, #31
 8000e24:	4094      	lsls	r4, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e26:	ea23 0304 	bic.w	r3, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e2e:	431a      	orrs	r2, r3
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000e30:	62c2      	str	r2, [r0, #44]	; 0x2c
  }
}
 8000e32:	e017      	b.n	8000e64 <ADC_RegularChannelConfig+0x72>
    tmpreg1 = ADCx->SMPR2;
 8000e34:	6905      	ldr	r5, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e36:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000e3a:	2407      	movs	r4, #7
 8000e3c:	40b4      	lsls	r4, r6
    tmpreg1 &= ~tmpreg2;
 8000e3e:	ea25 0504 	bic.w	r5, r5, r4
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e42:	fa03 f406 	lsl.w	r4, r3, r6
    tmpreg1 |= tmpreg2;
 8000e46:	432c      	orrs	r4, r5
    ADCx->SMPR2 = tmpreg1;
 8000e48:	6104      	str	r4, [r0, #16]
 8000e4a:	e7e2      	b.n	8000e12 <ADC_RegularChannelConfig+0x20>
    tmpreg1 = ADCx->SQR3;
 8000e4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e4e:	3a01      	subs	r2, #1
 8000e50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e54:	241f      	movs	r4, #31
 8000e56:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 8000e58:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 8000e60:	431a      	orrs	r2, r3
    ADCx->SQR3 = tmpreg1;
 8000e62:	6342      	str	r2, [r0, #52]	; 0x34
}
 8000e64:	bc70      	pop	{r4, r5, r6}
 8000e66:	4770      	bx	lr
    tmpreg1 = ADCx->SQR2;
 8000e68:	6b03      	ldr	r3, [r0, #48]	; 0x30
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000e6a:	3a07      	subs	r2, #7
 8000e6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e70:	241f      	movs	r4, #31
 8000e72:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 8000e74:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 8000e7c:	431a      	orrs	r2, r3
    ADCx->SQR2 = tmpreg1;
 8000e7e:	6302      	str	r2, [r0, #48]	; 0x30
 8000e80:	e7f0      	b.n	8000e64 <ADC_RegularChannelConfig+0x72>

08000e82 <ADC_ITConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000e82:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 8000e84:	2301      	movs	r3, #1
 8000e86:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
 8000e8a:	b922      	cbnz	r2, 8000e96 <ADC_ITConfig+0x14>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000e8c:	6843      	ldr	r3, [r0, #4]
 8000e8e:	ea23 0101 	bic.w	r1, r3, r1
 8000e92:	6041      	str	r1, [r0, #4]
  }
}
 8000e94:	4770      	bx	lr
    ADCx->CR1 |= itmask;
 8000e96:	6843      	ldr	r3, [r0, #4]
 8000e98:	4319      	orrs	r1, r3
 8000e9a:	6041      	str	r1, [r0, #4]
 8000e9c:	4770      	bx	lr

08000e9e <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000e9e:	6803      	ldr	r3, [r0, #0]
 8000ea0:	4219      	tst	r1, r3
 8000ea2:	d101      	bne.n	8000ea8 <ADC_GetFlagStatus+0xa>
    bitstatus = SET;
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000ea4:	2000      	movs	r0, #0
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8000ea6:	4770      	bx	lr
    bitstatus = SET;
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4770      	bx	lr

08000eac <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000eac:	43c9      	mvns	r1, r1
 8000eae:	6001      	str	r1, [r0, #0]
}
 8000eb0:	4770      	bx	lr

08000eb2 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8000eb2:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000eba:	f000 f9ab 	bl	8001214 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000ec4:	f000 f9a6 	bl	8001214 <RCC_APB1PeriphResetCmd>
}
 8000ec8:	bd08      	pop	{r3, pc}
	...

08000ecc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000ecc:	b430      	push	{r4, r5}
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000ece:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <DAC_Init+0x2c>)
 8000ed0:	6822      	ldr	r2, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000ed2:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000ed6:	4083      	lsls	r3, r0
 8000ed8:	ea22 0203 	bic.w	r2, r2, r3
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000edc:	680b      	ldr	r3, [r1, #0]
 8000ede:	684d      	ldr	r5, [r1, #4]
 8000ee0:	432b      	orrs	r3, r5
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000ee2:	688d      	ldr	r5, [r1, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ee4:	432b      	orrs	r3, r5
             DAC_InitStruct->DAC_OutputBuffer);
 8000ee6:	68c9      	ldr	r1, [r1, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ee8:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000eea:	fa03 f000 	lsl.w	r0, r3, r0
 8000eee:	4310      	orrs	r0, r2
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000ef0:	6020      	str	r0, [r4, #0]
}
 8000ef2:	bc30      	pop	{r4, r5}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40007400 	.word	0x40007400

08000efc <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8000efc:	2300      	movs	r3, #0
 8000efe:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000f00:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8000f02:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000f04:	60c3      	str	r3, [r0, #12]
}
 8000f06:	4770      	bx	lr

08000f08 <DAC_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f08:	b941      	cbnz	r1, 8000f1c <DAC_Cmd+0x14>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <DAC_Cmd+0x24>)
 8000f0c:	680b      	ldr	r3, [r1, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	fa02 f000 	lsl.w	r0, r2, r0
 8000f14:	ea23 0000 	bic.w	r0, r3, r0
 8000f18:	6008      	str	r0, [r1, #0]
  }
}
 8000f1a:	4770      	bx	lr
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000f1c:	4903      	ldr	r1, [pc, #12]	; (8000f2c <DAC_Cmd+0x24>)
 8000f1e:	680b      	ldr	r3, [r1, #0]
 8000f20:	2201      	movs	r2, #1
 8000f22:	fa02 f000 	lsl.w	r0, r2, r0
 8000f26:	4318      	orrs	r0, r3
 8000f28:	6008      	str	r0, [r1, #0]
 8000f2a:	4770      	bx	lr
 8000f2c:	40007400 	.word	0x40007400

08000f30 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000f30:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <DAC_SetChannel1Data+0x1c>)
 8000f38:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000f3a:	9b01      	ldr	r3, [sp, #4]
 8000f3c:	4418      	add	r0, r3
 8000f3e:	3008      	adds	r0, #8
 8000f40:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000f42:	9b01      	ldr	r3, [sp, #4]
 8000f44:	6019      	str	r1, [r3, #0]
}
 8000f46:	b002      	add	sp, #8
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40007400 	.word	0x40007400

08000f50 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8000f50:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <DAC_SetChannel2Data+0x1c>)
 8000f58:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000f5a:	9b01      	ldr	r3, [sp, #4]
 8000f5c:	4418      	add	r0, r3
 8000f5e:	3014      	adds	r0, #20
 8000f60:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8000f62:	9b01      	ldr	r3, [sp, #4]
 8000f64:	6019      	str	r1, [r3, #0]
}
 8000f66:	b002      	add	sp, #8
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40007400 	.word	0x40007400

08000f70 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <EXTI_DeInit+0x14>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8000f76:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8000f78:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8000f7a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8000f7c:	4a02      	ldr	r2, [pc, #8]	; (8000f88 <EXTI_DeInit+0x18>)
 8000f7e:	615a      	str	r2, [r3, #20]
}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40013c00 	.word	0x40013c00
 8000f88:	007fffff 	.word	0x007fffff

08000f8c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000f8c:	7983      	ldrb	r3, [r0, #6]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d036      	beq.n	8001000 <EXTI_Init+0x74>
{
 8000f92:	b410      	push	{r4}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <EXTI_Init+0x8c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	6801      	ldr	r1, [r0, #0]
 8000f9a:	ea22 0201 	bic.w	r2, r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	6801      	ldr	r1, [r0, #0]
 8000fa4:	ea22 0201 	bic.w	r2, r2, r1
 8000fa8:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000faa:	7902      	ldrb	r2, [r0, #4]
 8000fac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000fb0:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000fb4:	6811      	ldr	r1, [r2, #0]
 8000fb6:	6804      	ldr	r4, [r0, #0]
 8000fb8:	4321      	orrs	r1, r4
 8000fba:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	6801      	ldr	r1, [r0, #0]
 8000fc0:	ea22 0201 	bic.w	r2, r2, r1
 8000fc4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	6801      	ldr	r1, [r0, #0]
 8000fca:	ea22 0201 	bic.w	r2, r2, r1
 8000fce:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000fd0:	7943      	ldrb	r3, [r0, #5]
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	d00a      	beq.n	8000fec <EXTI_Init+0x60>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fda:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	6801      	ldr	r1, [r0, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fea:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <EXTI_Init+0x8c>)
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	6801      	ldr	r1, [r0, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	6801      	ldr	r1, [r0, #0]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	e7f2      	b.n	8000fe6 <EXTI_Init+0x5a>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001000:	7903      	ldrb	r3, [r0, #4]
 8001002:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001006:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	6801      	ldr	r1, [r0, #0]
 800100e:	ea22 0201 	bic.w	r2, r2, r1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40013c00 	.word	0x40013c00

0800101c <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <EXTI_ClearITPendingBit+0x8>)
 800101e:	6158      	str	r0, [r3, #20]
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40013c00 	.word	0x40013c00

08001028 <GPIO_Init>:
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001028:	2300      	movs	r3, #0
 800102a:	2b0f      	cmp	r3, #15
 800102c:	d840      	bhi.n	80010b0 <GPIO_Init+0x88>
{
 800102e:	b4f0      	push	{r4, r5, r6, r7}
 8001030:	e010      	b.n	8001054 <GPIO_Init+0x2c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001032:	68c2      	ldr	r2, [r0, #12]
 8001034:	b29c      	uxth	r4, r3
 8001036:	0066      	lsls	r6, r4, #1
 8001038:	2403      	movs	r4, #3
 800103a:	40b4      	lsls	r4, r6
 800103c:	ea22 0204 	bic.w	r2, r2, r4
 8001040:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001042:	68c2      	ldr	r2, [r0, #12]
 8001044:	79cc      	ldrb	r4, [r1, #7]
 8001046:	fa04 f505 	lsl.w	r5, r4, r5
 800104a:	4315      	orrs	r5, r2
 800104c:	60c5      	str	r5, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800104e:	3301      	adds	r3, #1
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d82b      	bhi.n	80010ac <GPIO_Init+0x84>
    pos = ((uint32_t)0x01) << pinpos;
 8001054:	2201      	movs	r2, #1
 8001056:	409a      	lsls	r2, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001058:	680c      	ldr	r4, [r1, #0]
    if (currentpin == pos)
 800105a:	43a2      	bics	r2, r4
 800105c:	d1f7      	bne.n	800104e <GPIO_Init+0x26>
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800105e:	6804      	ldr	r4, [r0, #0]
 8001060:	005d      	lsls	r5, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	40aa      	lsls	r2, r5
 8001066:	43d2      	mvns	r2, r2
 8001068:	4014      	ands	r4, r2
 800106a:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800106c:	6804      	ldr	r4, [r0, #0]
 800106e:	790e      	ldrb	r6, [r1, #4]
 8001070:	40ae      	lsls	r6, r5
 8001072:	4334      	orrs	r4, r6
 8001074:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001076:	790c      	ldrb	r4, [r1, #4]
 8001078:	3c01      	subs	r4, #1
 800107a:	b2e4      	uxtb	r4, r4
 800107c:	2c01      	cmp	r4, #1
 800107e:	d8d8      	bhi.n	8001032 <GPIO_Init+0xa>
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001080:	6884      	ldr	r4, [r0, #8]
 8001082:	4022      	ands	r2, r4
 8001084:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001086:	6882      	ldr	r2, [r0, #8]
 8001088:	794c      	ldrb	r4, [r1, #5]
 800108a:	40ac      	lsls	r4, r5
 800108c:	4322      	orrs	r2, r4
 800108e:	6082      	str	r2, [r0, #8]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001090:	6844      	ldr	r4, [r0, #4]
 8001092:	b29f      	uxth	r7, r3
 8001094:	2601      	movs	r6, #1
 8001096:	40be      	lsls	r6, r7
 8001098:	ea24 0406 	bic.w	r4, r4, r6
 800109c:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800109e:	6844      	ldr	r4, [r0, #4]
 80010a0:	798a      	ldrb	r2, [r1, #6]
 80010a2:	40ba      	lsls	r2, r7
 80010a4:	b292      	uxth	r2, r2
 80010a6:	4322      	orrs	r2, r4
 80010a8:	6042      	str	r2, [r0, #4]
 80010aa:	e7c2      	b.n	8001032 <GPIO_Init+0xa>
    }
  }
}
 80010ac:	bcf0      	pop	{r4, r5, r6, r7}
 80010ae:	4770      	bx	lr
 80010b0:	4770      	bx	lr

080010b2 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80010b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b6:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80010b8:	2300      	movs	r3, #0
 80010ba:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80010bc:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80010be:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80010c0:	71c3      	strb	r3, [r0, #7]
}
 80010c2:	4770      	bx	lr

080010c4 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010c4:	6903      	ldr	r3, [r0, #16]
 80010c6:	4219      	tst	r1, r3
 80010c8:	d101      	bne.n	80010ce <GPIO_ReadInputDataBit+0xa>
  {
    bitstatus = (uint8_t)Bit_SET;
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80010ca:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80010cc:	4770      	bx	lr
    bitstatus = (uint8_t)Bit_SET;
 80010ce:	2001      	movs	r0, #1
 80010d0:	4770      	bx	lr

080010d2 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80010d2:	8301      	strh	r1, [r0, #24]
}
 80010d4:	4770      	bx	lr

080010d6 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80010d6:	8341      	strh	r1, [r0, #26]
}
 80010d8:	4770      	bx	lr

080010da <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80010da:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010dc:	f001 0307 	and.w	r3, r1, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010e4:	08c9      	lsrs	r1, r1, #3
 80010e6:	3108      	adds	r1, #8
 80010e8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 80010ec:	250f      	movs	r5, #15
 80010ee:	fa05 f303 	lsl.w	r3, r5, r3
 80010f2:	ea24 0303 	bic.w	r3, r4, r3
 80010f6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80010fa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80010fe:	431a      	orrs	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001100:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
 8001104:	bc30      	pop	{r4, r5}
 8001106:	4770      	bx	lr

08001108 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001108:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <RCC_GetClocksFreq+0xa8>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001112:	2b04      	cmp	r3, #4
 8001114:	d023      	beq.n	800115e <RCC_GetClocksFreq+0x56>
 8001116:	2b08      	cmp	r3, #8
 8001118:	d024      	beq.n	8001164 <RCC_GetClocksFreq+0x5c>
 800111a:	b113      	cbz	r3, 8001122 <RCC_GetClocksFreq+0x1a>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <RCC_GetClocksFreq+0xac>)
 800111e:	6003      	str	r3, [r0, #0]
      break;
 8001120:	e001      	b.n	8001126 <RCC_GetClocksFreq+0x1e>
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <RCC_GetClocksFreq+0xac>)
 8001124:	6003      	str	r3, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001126:	4c22      	ldr	r4, [pc, #136]	; (80011b0 <RCC_GetClocksFreq+0xa8>)
 8001128:	68a3      	ldr	r3, [r4, #8]
  tmp = tmp >> 4;
 800112a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800112e:	4922      	ldr	r1, [pc, #136]	; (80011b8 <RCC_GetClocksFreq+0xb0>)
 8001130:	5ccb      	ldrb	r3, [r1, r3]
 8001132:	b2da      	uxtb	r2, r3
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001134:	6803      	ldr	r3, [r0, #0]
 8001136:	40d3      	lsrs	r3, r2
 8001138:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800113a:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 10;
 800113c:	f3c2 2282 	ubfx	r2, r2, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001140:	5c8a      	ldrb	r2, [r1, r2]
 8001142:	b2d2      	uxtb	r2, r2
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001144:	fa23 f202 	lsr.w	r2, r3, r2
 8001148:	6082      	str	r2, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800114a:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 13;
 800114c:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001150:	5c8a      	ldrb	r2, [r1, r2]
 8001152:	b2d2      	uxtb	r2, r2
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001154:	40d3      	lsrs	r3, r2
 8001156:	60c3      	str	r3, [r0, #12]
}
 8001158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800115c:	4770      	bx	lr
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <RCC_GetClocksFreq+0xb4>)
 8001160:	6003      	str	r3, [r0, #0]
      break;
 8001162:	e7e0      	b.n	8001126 <RCC_GetClocksFreq+0x1e>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <RCC_GetClocksFreq+0xa8>)
 8001166:	685a      	ldr	r2, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      if (pllsource != 0)
 800116e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001172:	d012      	beq.n	800119a <RCC_GetClocksFreq+0x92>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <RCC_GetClocksFreq+0xb4>)
 8001176:	fbb2 f2f3 	udiv	r2, r2, r3
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <RCC_GetClocksFreq+0xa8>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001182:	fb03 f302 	mul.w	r3, r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <RCC_GetClocksFreq+0xa8>)
 8001188:	6852      	ldr	r2, [r2, #4]
 800118a:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800118e:	3201      	adds	r2, #1
 8001190:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001192:	fbb3 f3f2 	udiv	r3, r3, r2
 8001196:	6003      	str	r3, [r0, #0]
      break;
 8001198:	e7c5      	b.n	8001126 <RCC_GetClocksFreq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <RCC_GetClocksFreq+0xac>)
 800119c:	fbb2 f2f3 	udiv	r2, r2, r3
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <RCC_GetClocksFreq+0xa8>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011a8:	fb03 f302 	mul.w	r3, r3, r2
 80011ac:	e7eb      	b.n	8001186 <RCC_GetClocksFreq+0x7e>
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	00f42400 	.word	0x00f42400
 80011b8:	20000000 	.word	0x20000000
 80011bc:	017d7840 	.word	0x017d7840

080011c0 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011c0:	b929      	cbnz	r1, 80011ce <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <RCC_AHB1PeriphClockCmd+0x18>)
 80011c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011c6:	ea23 0000 	bic.w	r0, r3, r0
 80011ca:	6310      	str	r0, [r2, #48]	; 0x30
  }
}
 80011cc:	4770      	bx	lr
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80011ce:	4a02      	ldr	r2, [pc, #8]	; (80011d8 <RCC_AHB1PeriphClockCmd+0x18>)
 80011d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011d2:	4318      	orrs	r0, r3
 80011d4:	6310      	str	r0, [r2, #48]	; 0x30
 80011d6:	4770      	bx	lr
 80011d8:	40023800 	.word	0x40023800

080011dc <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011dc:	b929      	cbnz	r1, 80011ea <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <RCC_APB1PeriphClockCmd+0x18>)
 80011e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011e2:	ea23 0000 	bic.w	r0, r3, r0
 80011e6:	6410      	str	r0, [r2, #64]	; 0x40
  }
}
 80011e8:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 80011ea:	4a02      	ldr	r2, [pc, #8]	; (80011f4 <RCC_APB1PeriphClockCmd+0x18>)
 80011ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011ee:	4318      	orrs	r0, r3
 80011f0:	6410      	str	r0, [r2, #64]	; 0x40
 80011f2:	4770      	bx	lr
 80011f4:	40023800 	.word	0x40023800

080011f8 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011f8:	b929      	cbnz	r1, 8001206 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <RCC_APB2PeriphClockCmd+0x18>)
 80011fc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80011fe:	ea23 0000 	bic.w	r0, r3, r0
 8001202:	6450      	str	r0, [r2, #68]	; 0x44
  }
}
 8001204:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8001206:	4a02      	ldr	r2, [pc, #8]	; (8001210 <RCC_APB2PeriphClockCmd+0x18>)
 8001208:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800120a:	4318      	orrs	r0, r3
 800120c:	6450      	str	r0, [r2, #68]	; 0x44
 800120e:	4770      	bx	lr
 8001210:	40023800 	.word	0x40023800

08001214 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001214:	b929      	cbnz	r1, 8001222 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <RCC_APB1PeriphResetCmd+0x18>)
 8001218:	6a13      	ldr	r3, [r2, #32]
 800121a:	ea23 0000 	bic.w	r0, r3, r0
 800121e:	6210      	str	r0, [r2, #32]
  }
}
 8001220:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001222:	4a02      	ldr	r2, [pc, #8]	; (800122c <RCC_APB1PeriphResetCmd+0x18>)
 8001224:	6a13      	ldr	r3, [r2, #32]
 8001226:	4318      	orrs	r0, r3
 8001228:	6210      	str	r0, [r2, #32]
 800122a:	4770      	bx	lr
 800122c:	40023800 	.word	0x40023800

08001230 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001230:	b929      	cbnz	r1, 800123e <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <RCC_APB2PeriphResetCmd+0x18>)
 8001234:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001236:	ea23 0000 	bic.w	r0, r3, r0
 800123a:	6250      	str	r0, [r2, #36]	; 0x24
  }
}
 800123c:	4770      	bx	lr
    RCC->APB2RSTR |= RCC_APB2Periph;
 800123e:	4a02      	ldr	r2, [pc, #8]	; (8001248 <RCC_APB2PeriphResetCmd+0x18>)
 8001240:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001242:	4318      	orrs	r0, r3
 8001244:	6250      	str	r0, [r2, #36]	; 0x24
 8001246:	4770      	bx	lr
 8001248:	40023800 	.word	0x40023800

0800124c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800124c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <SPI_I2S_DeInit+0xac>)
 8001250:	4298      	cmp	r0, r3
 8001252:	d00f      	beq.n	8001274 <SPI_I2S_DeInit+0x28>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SPI_I2S_DeInit+0xb0>)
 8001256:	4298      	cmp	r0, r3
 8001258:	d017      	beq.n	800128a <SPI_I2S_DeInit+0x3e>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <SPI_I2S_DeInit+0xb4>)
 800125c:	4298      	cmp	r0, r3
 800125e:	d01f      	beq.n	80012a0 <SPI_I2S_DeInit+0x54>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <SPI_I2S_DeInit+0xb8>)
 8001262:	4298      	cmp	r0, r3
 8001264:	d027      	beq.n	80012b6 <SPI_I2S_DeInit+0x6a>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SPI_I2S_DeInit+0xbc>)
 8001268:	4298      	cmp	r0, r3
 800126a:	d02f      	beq.n	80012cc <SPI_I2S_DeInit+0x80>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <SPI_I2S_DeInit+0xc0>)
 800126e:	4298      	cmp	r0, r3
 8001270:	d037      	beq.n	80012e2 <SPI_I2S_DeInit+0x96>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001272:	bd08      	pop	{r3, pc}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001274:	2101      	movs	r1, #1
 8001276:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800127a:	f7ff ffd9 	bl	8001230 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800127e:	2100      	movs	r1, #0
 8001280:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001284:	f7ff ffd4 	bl	8001230 <RCC_APB2PeriphResetCmd>
 8001288:	e7f3      	b.n	8001272 <SPI_I2S_DeInit+0x26>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800128a:	2101      	movs	r1, #1
 800128c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001290:	f7ff ffc0 	bl	8001214 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001294:	2100      	movs	r1, #0
 8001296:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800129a:	f7ff ffbb 	bl	8001214 <RCC_APB1PeriphResetCmd>
 800129e:	e7e8      	b.n	8001272 <SPI_I2S_DeInit+0x26>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80012a0:	2101      	movs	r1, #1
 80012a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012a6:	f7ff ffb5 	bl	8001214 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80012aa:	2100      	movs	r1, #0
 80012ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012b0:	f7ff ffb0 	bl	8001214 <RCC_APB1PeriphResetCmd>
 80012b4:	e7dd      	b.n	8001272 <SPI_I2S_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80012b6:	2101      	movs	r1, #1
 80012b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012bc:	f7ff ffb8 	bl	8001230 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80012c0:	2100      	movs	r1, #0
 80012c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c6:	f7ff ffb3 	bl	8001230 <RCC_APB2PeriphResetCmd>
 80012ca:	e7d2      	b.n	8001272 <SPI_I2S_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80012cc:	2101      	movs	r1, #1
 80012ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012d2:	f7ff ffad 	bl	8001230 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80012d6:	2100      	movs	r1, #0
 80012d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012dc:	f7ff ffa8 	bl	8001230 <RCC_APB2PeriphResetCmd>
 80012e0:	e7c7      	b.n	8001272 <SPI_I2S_DeInit+0x26>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80012e2:	2101      	movs	r1, #1
 80012e4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012e8:	f7ff ffa2 	bl	8001230 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80012ec:	2100      	movs	r1, #0
 80012ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012f2:	f7ff ff9d 	bl	8001230 <RCC_APB2PeriphResetCmd>
}
 80012f6:	e7bc      	b.n	8001272 <SPI_I2S_DeInit+0x26>
 80012f8:	40013000 	.word	0x40013000
 80012fc:	40003800 	.word	0x40003800
 8001300:	40003c00 	.word	0x40003c00
 8001304:	40013400 	.word	0x40013400
 8001308:	40015000 	.word	0x40015000
 800130c:	40015400 	.word	0x40015400

08001310 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001314:	8803      	ldrh	r3, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001316:	f403 5241 	and.w	r2, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800131a:	f8b1 e000 	ldrh.w	lr, [r1]
 800131e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001322:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8001326:	88cf      	ldrh	r7, [r1, #6]
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001328:	890e      	ldrh	r6, [r1, #8]
 800132a:	894d      	ldrh	r5, [r1, #10]
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800132c:	898c      	ldrh	r4, [r1, #12]
 800132e:	89cb      	ldrh	r3, [r1, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001330:	ea4e 0e08 	orr.w	lr, lr, r8
 8001334:	ea4c 0c0e 	orr.w	ip, ip, lr
 8001338:	ea47 070c 	orr.w	r7, r7, ip
 800133c:	433e      	orrs	r6, r7
 800133e:	4335      	orrs	r5, r6
 8001340:	432c      	orrs	r4, r5
 8001342:	4323      	orrs	r3, r4
 8001344:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001346:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001348:	8b83      	ldrh	r3, [r0, #28]
 800134a:	b29b      	uxth	r3, r3
 800134c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001350:	b29b      	uxth	r3, r3
 8001352:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001354:	8a0b      	ldrh	r3, [r1, #16]
 8001356:	8203      	strh	r3, [r0, #16]
}
 8001358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800135c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800135c:	2300      	movs	r3, #0
 800135e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001360:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001362:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001364:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001366:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001368:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800136a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800136c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800136e:	2307      	movs	r3, #7
 8001370:	8203      	strh	r3, [r0, #16]
}
 8001372:	4770      	bx	lr

08001374 <SPI_Cmd>:
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001374:	b931      	cbnz	r1, 8001384 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001376:	8803      	ldrh	r3, [r0, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800137e:	b29b      	uxth	r3, r3
 8001380:	8003      	strh	r3, [r0, #0]
  }
}
 8001382:	4770      	bx	lr
    SPIx->CR1 |= SPI_CR1_SPE;
 8001384:	8803      	ldrh	r3, [r0, #0]
 8001386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138a:	8003      	strh	r3, [r0, #0]
 800138c:	4770      	bx	lr

0800138e <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800138e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001392:	4299      	cmp	r1, r3
 8001394:	d004      	beq.n	80013a0 <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001396:	8803      	ldrh	r3, [r0, #0]
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	8003      	strh	r3, [r0, #0]
 800139e:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80013a0:	8803      	ldrh	r3, [r0, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	8003      	strh	r3, [r0, #0]
  }
}
 80013ac:	4770      	bx	lr

080013ae <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80013ae:	8980      	ldrh	r0, [r0, #12]
}
 80013b0:	4770      	bx	lr

080013b2 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80013b2:	8181      	strh	r1, [r0, #12]
}
 80013b4:	4770      	bx	lr

080013b6 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80013b6:	8903      	ldrh	r3, [r0, #8]
 80013b8:	4219      	tst	r1, r3
 80013ba:	d101      	bne.n	80013c0 <SPI_I2S_GetFlagStatus+0xa>
    bitstatus = SET;
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80013bc:	2000      	movs	r0, #0
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80013be:	4770      	bx	lr
    bitstatus = SET;
 80013c0:	2001      	movs	r0, #1
 80013c2:	4770      	bx	lr

080013c4 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80013c4:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80013c6:	f001 0303 	and.w	r3, r1, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	240f      	movs	r4, #15
 80013ce:	fa04 f503 	lsl.w	r5, r4, r3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80013d2:	0889      	lsrs	r1, r1, #2
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <SYSCFG_EXTILineConfig+0x30>)
 80013d6:	3102      	adds	r1, #2
 80013d8:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 80013dc:	ea24 0405 	bic.w	r4, r4, r5
 80013e0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80013e4:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 80013e8:	4098      	lsls	r0, r3
 80013ea:	4320      	orrs	r0, r4
 80013ec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
}
 80013f0:	bc30      	pop	{r4, r5}
 80013f2:	4770      	bx	lr
 80013f4:	40013800 	.word	0x40013800

080013f8 <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80013f8:	8803      	ldrh	r3, [r0, #0]
 80013fa:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <TIM_TimeBaseInit+0x74>)
 80013fe:	4290      	cmp	r0, r2
 8001400:	d012      	beq.n	8001428 <TIM_TimeBaseInit+0x30>
 8001402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001406:	4290      	cmp	r0, r2
 8001408:	d00e      	beq.n	8001428 <TIM_TimeBaseInit+0x30>
 800140a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800140e:	d00b      	beq.n	8001428 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001410:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001414:	4290      	cmp	r0, r2
 8001416:	d007      	beq.n	8001428 <TIM_TimeBaseInit+0x30>
 8001418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800141c:	4290      	cmp	r0, r2
 800141e:	d003      	beq.n	8001428 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001424:	4290      	cmp	r0, r2
 8001426:	d103      	bne.n	8001430 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800142c:	884a      	ldrh	r2, [r1, #2]
 800142e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <TIM_TimeBaseInit+0x78>)
 8001432:	4290      	cmp	r0, r2
 8001434:	d008      	beq.n	8001448 <TIM_TimeBaseInit+0x50>
 8001436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800143a:	4290      	cmp	r0, r2
 800143c:	d004      	beq.n	8001448 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800143e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001442:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001444:	890a      	ldrh	r2, [r1, #8]
 8001446:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001448:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800144a:	684b      	ldr	r3, [r1, #4]
 800144c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800144e:	880b      	ldrh	r3, [r1, #0]
 8001450:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <TIM_TimeBaseInit+0x74>)
 8001454:	4298      	cmp	r0, r3
 8001456:	d003      	beq.n	8001460 <TIM_TimeBaseInit+0x68>
 8001458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800145c:	4298      	cmp	r0, r3
 800145e:	d101      	bne.n	8001464 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001460:	7a8b      	ldrb	r3, [r1, #10]
 8001462:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001464:	2301      	movs	r3, #1
 8001466:	8283      	strh	r3, [r0, #20]
}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40010000 	.word	0x40010000
 8001470:	40001000 	.word	0x40001000

08001474 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001478:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800147a:	2300      	movs	r3, #0
 800147c:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800147e:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001480:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001482:	7283      	strb	r3, [r0, #10]
}
 8001484:	4770      	bx	lr

08001486 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001486:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001488:	4770      	bx	lr

0800148a <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800148a:	b931      	cbnz	r1, 800149a <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800148c:	8803      	ldrh	r3, [r0, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001494:	b29b      	uxth	r3, r3
 8001496:	8003      	strh	r3, [r0, #0]
  }
}
 8001498:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_ARPE;
 800149a:	8803      	ldrh	r3, [r0, #0]
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	8003      	strh	r3, [r0, #0]
 80014a2:	4770      	bx	lr

080014a4 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014a4:	b931      	cbnz	r1, 80014b4 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80014a6:	8803      	ldrh	r3, [r0, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	8003      	strh	r3, [r0, #0]
  }
}
 80014b2:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 80014b4:	8803      	ldrh	r3, [r0, #0]
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	8003      	strh	r3, [r0, #0]
 80014bc:	4770      	bx	lr

080014be <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80014be:	6381      	str	r1, [r0, #56]	; 0x38
}
 80014c0:	4770      	bx	lr

080014c2 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80014c2:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 80014c4:	2301      	movs	r3, #1
 80014c6:	408b      	lsls	r3, r1
 80014c8:	b29b      	uxth	r3, r3

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80014ca:	8c04      	ldrh	r4, [r0, #32]
 80014cc:	ea24 0303 	bic.w	r3, r4, r3
 80014d0:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 80014d2:	8c03      	ldrh	r3, [r0, #32]
 80014d4:	fa02 f101 	lsl.w	r1, r2, r1
 80014d8:	b289      	uxth	r1, r1
 80014da:	4319      	orrs	r1, r3
 80014dc:	8401      	strh	r1, [r0, #32]
}
 80014de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014e4:	b922      	cbnz	r2, 80014f0 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80014e6:	8983      	ldrh	r3, [r0, #12]
 80014e8:	ea23 0101 	bic.w	r1, r3, r1
 80014ec:	8181      	strh	r1, [r0, #12]
  }
}
 80014ee:	4770      	bx	lr
    TIMx->DIER |= TIM_IT;
 80014f0:	8983      	ldrh	r3, [r0, #12]
 80014f2:	4319      	orrs	r1, r3
 80014f4:	8181      	strh	r1, [r0, #12]
 80014f6:	4770      	bx	lr

080014f8 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80014f8:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80014fa:	8983      	ldrh	r3, [r0, #12]
 80014fc:	400b      	ands	r3, r1
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80014fe:	4211      	tst	r1, r2
 8001500:	d002      	beq.n	8001508 <TIM_GetITStatus+0x10>
 8001502:	b91b      	cbnz	r3, 800150c <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8001504:	2000      	movs	r0, #0
 8001506:	4770      	bx	lr
 8001508:	2000      	movs	r0, #0
 800150a:	4770      	bx	lr
    bitstatus = SET;
 800150c:	2001      	movs	r0, #1
  }
  return bitstatus;
}
 800150e:	4770      	bx	lr

08001510 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001510:	43c9      	mvns	r1, r1
 8001512:	b289      	uxth	r1, r1
 8001514:	8201      	strh	r1, [r0, #16]
}
 8001516:	4770      	bx	lr

08001518 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001518:	8883      	ldrh	r3, [r0, #4]
 800151a:	b29b      	uxth	r3, r3
 800151c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001520:	b29b      	uxth	r3, r3
 8001522:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001524:	8883      	ldrh	r3, [r0, #4]
 8001526:	4319      	orrs	r1, r3
 8001528:	8081      	strh	r1, [r0, #4]
}
 800152a:	4770      	bx	lr

0800152c <CAT25512_SendByte>:

/*
Send one byte to eeprom via SPI
*/
void CAT25512_SendByte(unsigned char mData)
{
 800152c:	b510      	push	{r4, lr}
 800152e:	4604      	mov	r4, r0
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)); 
 8001530:	2102      	movs	r1, #2
 8001532:	4809      	ldr	r0, [pc, #36]	; (8001558 <CAT25512_SendByte+0x2c>)
 8001534:	f7ff ff3f 	bl	80013b6 <SPI_I2S_GetFlagStatus>
 8001538:	2800      	cmp	r0, #0
 800153a:	d0f9      	beq.n	8001530 <CAT25512_SendByte+0x4>
	SPI_I2S_SendData(SPI3, mData);
 800153c:	4621      	mov	r1, r4
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <CAT25512_SendByte+0x2c>)
 8001540:	f7ff ff37 	bl	80013b2 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE));
 8001544:	2101      	movs	r1, #1
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <CAT25512_SendByte+0x2c>)
 8001548:	f7ff ff35 	bl	80013b6 <SPI_I2S_GetFlagStatus>
 800154c:	2800      	cmp	r0, #0
 800154e:	d0f9      	beq.n	8001544 <CAT25512_SendByte+0x18>
	SPI_I2S_ReceiveData(SPI3);
 8001550:	4801      	ldr	r0, [pc, #4]	; (8001558 <CAT25512_SendByte+0x2c>)
 8001552:	f7ff ff2c 	bl	80013ae <SPI_I2S_ReceiveData>
};
 8001556:	bd10      	pop	{r4, pc}
 8001558:	40003c00 	.word	0x40003c00

0800155c <CAT25512_RecieveData>:

/*
Receive one byte from eeprom via SPI
*/
unsigned short int CAT25512_RecieveData(void)
{
 800155c:	b508      	push	{r3, lr}
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)){}; 
 800155e:	2102      	movs	r1, #2
 8001560:	4809      	ldr	r0, [pc, #36]	; (8001588 <CAT25512_RecieveData+0x2c>)
 8001562:	f7ff ff28 	bl	80013b6 <SPI_I2S_GetFlagStatus>
 8001566:	2800      	cmp	r0, #0
 8001568:	d0f9      	beq.n	800155e <CAT25512_RecieveData+0x2>
	SPI_I2S_SendData(SPI3, 0x00); 
 800156a:	2100      	movs	r1, #0
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <CAT25512_RecieveData+0x2c>)
 800156e:	f7ff ff20 	bl	80013b2 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE)){};
 8001572:	2101      	movs	r1, #1
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <CAT25512_RecieveData+0x2c>)
 8001576:	f7ff ff1e 	bl	80013b6 <SPI_I2S_GetFlagStatus>
 800157a:	2800      	cmp	r0, #0
 800157c:	d0f9      	beq.n	8001572 <CAT25512_RecieveData+0x16>
	return SPI_ReceiveData(SPI3);
 800157e:	4802      	ldr	r0, [pc, #8]	; (8001588 <CAT25512_RecieveData+0x2c>)
 8001580:	f7ff ff15 	bl	80013ae <SPI_I2S_ReceiveData>
};
 8001584:	bd08      	pop	{r3, pc}
 8001586:	bf00      	nop
 8001588:	40003c00 	.word	0x40003c00

0800158c <CAT25512_init>:

/*
Initialization of CAT25512 eeprom
*/
void CAT25512_init(void)
{
 800158c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001590:	b089      	sub	sp, #36	; 0x24
	/* SPI2 setting up*/	
	GPIO_InitTypeDef mGPIO_InitStructure;
	SPI_InitTypeDef mSPI;
		
	/*GPIO Init*/
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001592:	2101      	movs	r1, #1
 8001594:	2004      	movs	r0, #4
 8001596:	f7ff fe13 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	
	GPIO_StructInit(&mGPIO_InitStructure);
 800159a:	a806      	add	r0, sp, #24
 800159c:	f7ff fd89 	bl	80010b2 <GPIO_StructInit>
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12;
 80015a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015a4:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 80015a6:	2702      	movs	r7, #2
 80015a8:	f88d 701c 	strb.w	r7, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 80015ac:	2500      	movs	r5, #0
 80015ae:	f88d 501e 	strb.w	r5, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 80015b2:	2401      	movs	r4, #1
 80015b4:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 80015b8:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOC, &mGPIO_InitStructure);
 80015bc:	4e32      	ldr	r6, [pc, #200]	; (8001688 <CAT25512_init+0xfc>)
 80015be:	a906      	add	r1, sp, #24
 80015c0:	4630      	mov	r0, r6
 80015c2:	f7ff fd31 	bl	8001028 <GPIO_Init>
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80015c6:	4621      	mov	r1, r4
 80015c8:	2008      	movs	r0, #8
 80015ca:	f7ff fdf9 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&mGPIO_InitStructure);
 80015ce:	a806      	add	r0, sp, #24
 80015d0:	f7ff fd6f 	bl	80010b2 <GPIO_StructInit>
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_2;
 80015d4:	f04f 0904 	mov.w	r9, #4
 80015d8:	f8cd 9018 	str.w	r9, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 80015dc:	f88d 401c 	strb.w	r4, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 80015e0:	f88d 501e 	strb.w	r5, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 80015e4:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_100MHz;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f88d 301d 	strb.w	r3, [sp, #29]
	GPIO_Init(GPIOD, &mGPIO_InitStructure);
 80015ee:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800168c <CAT25512_init+0x100>
 80015f2:	a906      	add	r1, sp, #24
 80015f4:	4640      	mov	r0, r8
 80015f6:	f7ff fd17 	bl	8001028 <GPIO_Init>
	
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SPI3);
 80015fa:	2206      	movs	r2, #6
 80015fc:	210a      	movs	r1, #10
 80015fe:	4630      	mov	r0, r6
 8001600:	f7ff fd6b 	bl	80010da <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SPI3);
 8001604:	2206      	movs	r2, #6
 8001606:	210b      	movs	r1, #11
 8001608:	4630      	mov	r0, r6
 800160a:	f7ff fd66 	bl	80010da <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SPI3);	
 800160e:	2206      	movs	r2, #6
 8001610:	210c      	movs	r1, #12
 8001612:	4630      	mov	r0, r6
 8001614:	f7ff fd61 	bl	80010da <GPIO_PinAFConfig>
		
	CAT25512_CS_CLEAR;
 8001618:	4649      	mov	r1, r9
 800161a:	4640      	mov	r0, r8
 800161c:	f7ff fd59 	bl	80010d2 <GPIO_SetBits>
	
	/*SPI init*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001620:	4621      	mov	r1, r4
 8001622:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001626:	f7ff fdd9 	bl	80011dc <RCC_APB1PeriphClockCmd>
	SPI_I2S_DeInit(SPI3);
 800162a:	f5a6 36e6 	sub.w	r6, r6, #117760	; 0x1cc00
 800162e:	4630      	mov	r0, r6
 8001630:	f7ff fe0c 	bl	800124c <SPI_I2S_DeInit>
	SPI_StructInit(&mSPI);
 8001634:	eb0d 0009 	add.w	r0, sp, r9
 8001638:	f7ff fe90 	bl	800135c <SPI_StructInit>
	
	mSPI.SPI_Direction 					= SPI_Direction_2Lines_FullDuplex;
 800163c:	f8ad 5004 	strh.w	r5, [sp, #4]
	mSPI.SPI_BaudRatePrescaler 	= SPI_BaudRatePrescaler_8;
 8001640:	2310      	movs	r3, #16
 8001642:	f8ad 3010 	strh.w	r3, [sp, #16]
	mSPI.SPI_Mode 							= SPI_Mode_Master;
 8001646:	f44f 7382 	mov.w	r3, #260	; 0x104
 800164a:	f8ad 3006 	strh.w	r3, [sp, #6]
	mSPI.SPI_DataSize 					= SPI_DataSize_8b;
 800164e:	f8ad 5008 	strh.w	r5, [sp, #8]
	mSPI.SPI_CPOL 							= SPI_CPOL_High;
 8001652:	f8ad 700a 	strh.w	r7, [sp, #10]
	mSPI.SPI_CPHA 							= SPI_CPHA_2Edge;
 8001656:	f8ad 400c 	strh.w	r4, [sp, #12]
	mSPI.SPI_FirstBit 					= SPI_FirstBit_MSB;	
 800165a:	f8ad 5012 	strh.w	r5, [sp, #18]
	mSPI.SPI_NSS 								= SPI_NSS_Soft;
 800165e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001662:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	SPI_Init(SPI3, &mSPI);
 8001666:	eb0d 0109 	add.w	r1, sp, r9
 800166a:	4630      	mov	r0, r6
 800166c:	f7ff fe50 	bl	8001310 <SPI_Init>
	SPI_Cmd(SPI3, ENABLE);
 8001670:	4621      	mov	r1, r4
 8001672:	4630      	mov	r0, r6
 8001674:	f7ff fe7e 	bl	8001374 <SPI_Cmd>
	SPI_NSSInternalSoftwareConfig(SPI3, SPI_NSSInternalSoft_Set);
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4630      	mov	r0, r6
 800167e:	f7ff fe86 	bl	800138e <SPI_NSSInternalSoftwareConfig>
};
 8001682:	b009      	add	sp, #36	; 0x24
 8001684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00

08001690 <CAT25512_ReadStatusRegister>:

/*Returns the contents of eeprom status register*/
unsigned char CAT25512_ReadStatusRegister()
{
 8001690:	b538      	push	{r3, r4, r5, lr}
	unsigned char mData = 0;
	CAT25512_CS_SET;
 8001692:	4c0b      	ldr	r4, [pc, #44]	; (80016c0 <CAT25512_ReadStatusRegister+0x30>)
 8001694:	2104      	movs	r1, #4
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fd1d 	bl	80010d6 <GPIO_ResetBits>
	CAT25512_SendByte( INTSRUCTION_RDSR );
 800169c:	2005      	movs	r0, #5
 800169e:	f7ff ff45 	bl	800152c <CAT25512_SendByte>
	delay_ns(2);
 80016a2:	2002      	movs	r0, #2
 80016a4:	f004 fbb4 	bl	8005e10 <delay_ns>
	mData = CAT25512_RecieveData();
 80016a8:	f7ff ff58 	bl	800155c <CAT25512_RecieveData>
 80016ac:	b2c5      	uxtb	r5, r0
	delay_ns(200);
 80016ae:	20c8      	movs	r0, #200	; 0xc8
 80016b0:	f004 fbae 	bl	8005e10 <delay_ns>
	CAT25512_CS_CLEAR;
 80016b4:	2104      	movs	r1, #4
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff fd0b 	bl	80010d2 <GPIO_SetBits>
	return mData;
};
 80016bc:	4628      	mov	r0, r5
 80016be:	bd38      	pop	{r3, r4, r5, pc}
 80016c0:	40020c00 	.word	0x40020c00

080016c4 <CAT25512_WREN>:
	CAT25512_CS_CLEAR;
};

/*Write enable command*/
void CAT25512_WREN(void)
{
 80016c4:	b510      	push	{r4, lr}
	CAT25512_CS_SET;
 80016c6:	4c08      	ldr	r4, [pc, #32]	; (80016e8 <CAT25512_WREN+0x24>)
 80016c8:	2104      	movs	r1, #4
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff fd03 	bl	80010d6 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_WREN);
 80016d0:	2006      	movs	r0, #6
 80016d2:	f7ff ff2b 	bl	800152c <CAT25512_SendByte>
	delay_ns(200);
 80016d6:	20c8      	movs	r0, #200	; 0xc8
 80016d8:	f004 fb9a 	bl	8005e10 <delay_ns>
	CAT25512_CS_CLEAR;
 80016dc:	2104      	movs	r1, #4
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff fcf7 	bl	80010d2 <GPIO_SetBits>
};
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	bf00      	nop
 80016e8:	40020c00 	.word	0x40020c00

080016ec <CAT25512_write_block>:
	return Data;
};

/*Writes the Length bytes of Data started from certain Address*/
void CAT25512_write_block(unsigned short int Address, unsigned char *Data, unsigned short int length)
{
 80016ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016f0:	4607      	mov	r7, r0
 80016f2:	460e      	mov	r6, r1
 80016f4:	4615      	mov	r5, r2
	unsigned short int totalcnt=0;
	
	CAT25512_WREN();
 80016f6:	f7ff ffe5 	bl	80016c4 <CAT25512_WREN>
	
	CAT25512_CS_SET;
 80016fa:	2104      	movs	r1, #4
 80016fc:	482c      	ldr	r0, [pc, #176]	; (80017b0 <CAT25512_write_block+0xc4>)
 80016fe:	f7ff fcea 	bl	80010d6 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_WRITE);
 8001702:	2002      	movs	r0, #2
 8001704:	f7ff ff12 	bl	800152c <CAT25512_SendByte>
	CAT25512_SendByte((Address&0xFF00)>>8);
 8001708:	0a38      	lsrs	r0, r7, #8
 800170a:	f7ff ff0f 	bl	800152c <CAT25512_SendByte>
	CAT25512_SendByte((Address&0x00FF));
 800170e:	fa5f f887 	uxtb.w	r8, r7
 8001712:	4640      	mov	r0, r8
 8001714:	f7ff ff0a 	bl	800152c <CAT25512_SendByte>
	unsigned short int totalcnt=0;
 8001718:	2400      	movs	r4, #0
	
	while(totalcnt<length) {
 800171a:	e022      	b.n	8001762 <CAT25512_write_block+0x76>
			CAT25512_CS_CLEAR;
			
			//read status register
			delay_ms(1);
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
				delay_ms(1);
 800171c:	2001      	movs	r0, #1
 800171e:	f003 fdb1 	bl	8005284 <delay_ms>
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 8001722:	f7ff ffb5 	bl	8001690 <CAT25512_ReadStatusRegister>
 8001726:	f010 0f01 	tst.w	r0, #1
 800172a:	d1f7      	bne.n	800171c <CAT25512_write_block+0x30>
			};
			
			delay_ms(1);	
 800172c:	2001      	movs	r0, #1
 800172e:	f003 fda9 	bl	8005284 <delay_ms>

			CAT25512_WREN();			
 8001732:	f7ff ffc7 	bl	80016c4 <CAT25512_WREN>
			
			CAT25512_CS_SET;
 8001736:	2104      	movs	r1, #4
 8001738:	481d      	ldr	r0, [pc, #116]	; (80017b0 <CAT25512_write_block+0xc4>)
 800173a:	f7ff fccc 	bl	80010d6 <GPIO_ResetBits>
			CAT25512_SendByte(INTSRUCTION_WRITE);
 800173e:	2002      	movs	r0, #2
 8001740:	f7ff fef4 	bl	800152c <CAT25512_SendByte>
			CAT25512_SendByte(((Address+totalcnt)&0xFF00)>>8);
 8001744:	19e0      	adds	r0, r4, r7
 8001746:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800174a:	f7ff feef 	bl	800152c <CAT25512_SendByte>
			CAT25512_SendByte(((Address+totalcnt)&0x00FF));			
 800174e:	fa58 f084 	uxtab	r0, r8, r4
 8001752:	b2c0      	uxtb	r0, r0
 8001754:	f7ff feea 	bl	800152c <CAT25512_SendByte>
		};
		
		CAT25512_SendByte(Data[totalcnt]);	
 8001758:	5d30      	ldrb	r0, [r6, r4]
 800175a:	f7ff fee7 	bl	800152c <CAT25512_SendByte>
		
		totalcnt++;
 800175e:	3401      	adds	r4, #1
 8001760:	b2a4      	uxth	r4, r4
	while(totalcnt<length) {
 8001762:	42ac      	cmp	r4, r5
 8001764:	d20f      	bcs.n	8001786 <CAT25512_write_block+0x9a>
		if ( (((/*Address+*/totalcnt)&0x007F) == 0) && (totalcnt != 0) ) {
 8001766:	f014 0f7f 	tst.w	r4, #127	; 0x7f
 800176a:	d1f5      	bne.n	8001758 <CAT25512_write_block+0x6c>
 800176c:	2c00      	cmp	r4, #0
 800176e:	d0f3      	beq.n	8001758 <CAT25512_write_block+0x6c>
			delay_ns(200);
 8001770:	20c8      	movs	r0, #200	; 0xc8
 8001772:	f004 fb4d 	bl	8005e10 <delay_ns>
			CAT25512_CS_CLEAR;
 8001776:	2104      	movs	r1, #4
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <CAT25512_write_block+0xc4>)
 800177a:	f7ff fcaa 	bl	80010d2 <GPIO_SetBits>
			delay_ms(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f003 fd80 	bl	8005284 <delay_ms>
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 8001784:	e7cd      	b.n	8001722 <CAT25512_write_block+0x36>
	};
	
	delay_ns(200);
 8001786:	20c8      	movs	r0, #200	; 0xc8
 8001788:	f004 fb42 	bl	8005e10 <delay_ns>
	CAT25512_CS_CLEAR;
 800178c:	2104      	movs	r1, #4
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <CAT25512_write_block+0xc4>)
 8001790:	f7ff fc9f 	bl	80010d2 <GPIO_SetBits>
	
	delay_ms(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f003 fd75 	bl	8005284 <delay_ms>
	while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 800179a:	f7ff ff79 	bl	8001690 <CAT25512_ReadStatusRegister>
 800179e:	f010 0f01 	tst.w	r0, #1
 80017a2:	d003      	beq.n	80017ac <CAT25512_write_block+0xc0>
		delay_ms(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f003 fd6d 	bl	8005284 <delay_ms>
 80017aa:	e7f6      	b.n	800179a <CAT25512_write_block+0xae>
	};
};
 80017ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b0:	40020c00 	.word	0x40020c00

080017b4 <CAT25512_read_block>:

/*Reads the Length bytes of Data started from certain Address*/
void CAT25512_read_block(unsigned short int Address, unsigned char *Data, unsigned short int length)
{
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	4604      	mov	r4, r0
 80017b8:	460e      	mov	r6, r1
 80017ba:	4615      	mov	r5, r2
	unsigned short int cnt=0, totalcnt=0;
	
	CAT25512_CS_SET;
 80017bc:	2104      	movs	r1, #4
 80017be:	480e      	ldr	r0, [pc, #56]	; (80017f8 <CAT25512_read_block+0x44>)
 80017c0:	f7ff fc89 	bl	80010d6 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_READ);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f7ff feb1 	bl	800152c <CAT25512_SendByte>
	CAT25512_SendByte((Address&0xFF00)>>8);
 80017ca:	0a20      	lsrs	r0, r4, #8
 80017cc:	f7ff feae 	bl	800152c <CAT25512_SendByte>
	CAT25512_SendByte((Address&0x00FF));
 80017d0:	b2e0      	uxtb	r0, r4
 80017d2:	f7ff feab 	bl	800152c <CAT25512_SendByte>
	unsigned short int cnt=0, totalcnt=0;
 80017d6:	2400      	movs	r4, #0
	while(totalcnt<length) {
 80017d8:	e004      	b.n	80017e4 <CAT25512_read_block+0x30>
			CAT25512_SendByte(INTSRUCTION_READ);
			CAT25512_SendByte(((Address+totalcnt)&0xFF00)>>8);
			CAT25512_SendByte(((Address+totalcnt)&0x00FF));	
		};*/
		
		Data[totalcnt] = CAT25512_RecieveData();
 80017da:	f7ff febf 	bl	800155c <CAT25512_RecieveData>
 80017de:	5530      	strb	r0, [r6, r4]
		totalcnt++;
 80017e0:	3401      	adds	r4, #1
 80017e2:	b2a4      	uxth	r4, r4
	while(totalcnt<length) {
 80017e4:	42ac      	cmp	r4, r5
 80017e6:	d3f8      	bcc.n	80017da <CAT25512_read_block+0x26>
		cnt++;
	}
	
	delay_ns(200);
 80017e8:	20c8      	movs	r0, #200	; 0xc8
 80017ea:	f004 fb11 	bl	8005e10 <delay_ns>
	CAT25512_CS_CLEAR;
 80017ee:	2104      	movs	r1, #4
 80017f0:	4801      	ldr	r0, [pc, #4]	; (80017f8 <CAT25512_read_block+0x44>)
 80017f2:	f7ff fc6e 	bl	80010d2 <GPIO_SetBits>
	
};
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
 80017f8:	40020c00 	.word	0x40020c00

080017fc <init_HC165>:

#define _BV(x)  (1<<x);

///Setting up PORTs IO
void init_HC165(void)
{
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	b084      	sub	sp, #16
	
	/* init pins struct*/
	GPIO_InitTypeDef mGPIO_InitStructure;
	GPIO_InitTypeDef mGPIO_InitStructure2;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001800:	2101      	movs	r1, #1
 8001802:	2004      	movs	r0, #4
 8001804:	f7ff fcdc 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	
	memset(&mGPIO_InitStructure, 0, sizeof(mGPIO_InitStructure));
 8001808:	2600      	movs	r6, #0
 800180a:	f8ad 600e 	strh.w	r6, [sp, #14]
	mGPIO_InitStructure.GPIO_Pin 		= SW_CP|SW_PL|SW_CE;
 800180e:	230e      	movs	r3, #14
 8001810:	9302      	str	r3, [sp, #8]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001812:	2501      	movs	r5, #1
 8001814:	f88d 500c 	strb.w	r5, [sp, #12]
	mGPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_100MHz;
 8001818:	2303      	movs	r3, #3
 800181a:	f88d 300d 	strb.w	r3, [sp, #13]
	
	GPIO_Init(GPIOC, &mGPIO_InitStructure);
 800181e:	4c0c      	ldr	r4, [pc, #48]	; (8001850 <init_HC165+0x54>)
 8001820:	a902      	add	r1, sp, #8
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff fc00 	bl	8001028 <GPIO_Init>
	
	memset(&mGPIO_InitStructure2, 0, sizeof(mGPIO_InitStructure2));
 8001828:	9601      	str	r6, [sp, #4]
	mGPIO_InitStructure2.GPIO_Pin 		= SW_DAT;
 800182a:	9500      	str	r5, [sp, #0]
	mGPIO_InitStructure2.GPIO_Mode 		= GPIO_Mode_IN;

	GPIO_Init(GPIOC, &mGPIO_InitStructure2);
 800182c:	4669      	mov	r1, sp
 800182e:	4620      	mov	r0, r4
 8001830:	f7ff fbfa 	bl	8001028 <GPIO_Init>
	
	SS_HIGH;
 8001834:	2108      	movs	r1, #8
 8001836:	4620      	mov	r0, r4
 8001838:	f7ff fc4b 	bl	80010d2 <GPIO_SetBits>
	CE_LOW;
 800183c:	2104      	movs	r1, #4
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff fc49 	bl	80010d6 <GPIO_ResetBits>
	CLK_LOW;
 8001844:	2102      	movs	r1, #2
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fc45 	bl	80010d6 <GPIO_ResetBits>
}
 800184c:	b004      	add	sp, #16
 800184e:	bd70      	pop	{r4, r5, r6, pc}
 8001850:	40020800 	.word	0x40020800

08001854 <HC165_LatchUp>:

//Close latch and load data to internal registers 165
void HC165_LatchUp(void)
{
 8001854:	b510      	push	{r4, lr}
	CE_LOW;
 8001856:	4c0a      	ldr	r4, [pc, #40]	; (8001880 <HC165_LatchUp+0x2c>)
 8001858:	2104      	movs	r1, #4
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fc3b 	bl	80010d6 <GPIO_ResetBits>
	CLK_LOW;
 8001860:	2102      	movs	r1, #2
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff fc37 	bl	80010d6 <GPIO_ResetBits>

	SS_LOW;
 8001868:	2108      	movs	r1, #8
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff fc33 	bl	80010d6 <GPIO_ResetBits>
	delay_us(1);
 8001870:	2001      	movs	r0, #1
 8001872:	f004 f851 	bl	8005918 <delay_us>
	SS_HIGH;	
 8001876:	2108      	movs	r1, #8
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff fc2a 	bl	80010d2 <GPIO_SetBits>
}
 800187e:	bd10      	pop	{r4, pc}
 8001880:	40020800 	.word	0x40020800

08001884 <HC165_GetByte>:


unsigned char HC165_GetByte(void)
{
 8001884:	b570      	push	{r4, r5, r6, lr}
	unsigned char data = 0x00, cnt = 0;	

	if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
 8001886:	2101      	movs	r1, #1
 8001888:	4818      	ldr	r0, [pc, #96]	; (80018ec <HC165_GetByte+0x68>)
 800188a:	f7ff fc1b 	bl	80010c4 <GPIO_ReadInputDataBit>
 800188e:	2801      	cmp	r0, #1
 8001890:	d006      	beq.n	80018a0 <HC165_GetByte+0x1c>
	unsigned char data = 0x00, cnt = 0;	
 8001892:	2500      	movs	r5, #0
		data = data | (0x01);
	};

	CLK_HIGH;	
 8001894:	2102      	movs	r1, #2
 8001896:	4815      	ldr	r0, [pc, #84]	; (80018ec <HC165_GetByte+0x68>)
 8001898:	f7ff fc1b 	bl	80010d2 <GPIO_SetBits>

	for(cnt=0; cnt<7;cnt++)
 800189c:	2400      	movs	r4, #0
 800189e:	e00a      	b.n	80018b6 <HC165_GetByte+0x32>
		data = data | (0x01);
 80018a0:	2501      	movs	r5, #1
 80018a2:	e7f7      	b.n	8001894 <HC165_GetByte+0x10>

		data = data << 1;		
		if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
			data = data | (0x01);
		};
		CLK_HIGH;		
 80018a4:	2102      	movs	r1, #2
 80018a6:	4811      	ldr	r0, [pc, #68]	; (80018ec <HC165_GetByte+0x68>)
 80018a8:	f7ff fc13 	bl	80010d2 <GPIO_SetBits>
		delay_us(1);		
 80018ac:	2001      	movs	r0, #1
 80018ae:	f004 f833 	bl	8005918 <delay_us>
	for(cnt=0; cnt<7;cnt++)
 80018b2:	3401      	adds	r4, #1
 80018b4:	b2e4      	uxtb	r4, r4
 80018b6:	2c06      	cmp	r4, #6
 80018b8:	d812      	bhi.n	80018e0 <HC165_GetByte+0x5c>
		CLK_LOW;
 80018ba:	4e0c      	ldr	r6, [pc, #48]	; (80018ec <HC165_GetByte+0x68>)
 80018bc:	2102      	movs	r1, #2
 80018be:	4630      	mov	r0, r6
 80018c0:	f7ff fc09 	bl	80010d6 <GPIO_ResetBits>
		delay_us(1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f004 f827 	bl	8005918 <delay_us>
		data = data << 1;		
 80018ca:	006d      	lsls	r5, r5, #1
 80018cc:	b2ed      	uxtb	r5, r5
		if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
 80018ce:	2101      	movs	r1, #1
 80018d0:	4630      	mov	r0, r6
 80018d2:	f7ff fbf7 	bl	80010c4 <GPIO_ReadInputDataBit>
 80018d6:	2801      	cmp	r0, #1
 80018d8:	d1e4      	bne.n	80018a4 <HC165_GetByte+0x20>
			data = data | (0x01);
 80018da:	f045 0501 	orr.w	r5, r5, #1
 80018de:	e7e1      	b.n	80018a4 <HC165_GetByte+0x20>
	}

	CLK_LOW;
 80018e0:	2102      	movs	r1, #2
 80018e2:	4802      	ldr	r0, [pc, #8]	; (80018ec <HC165_GetByte+0x68>)
 80018e4:	f7ff fbf7 	bl	80010d6 <GPIO_ResetBits>
	return data;
}
 80018e8:	4628      	mov	r0, r5
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	40020800 	.word	0x40020800

080018f0 <HC165_GetDWord>:

unsigned long int HC165_GetDWord(void)
{
 80018f0:	b570      	push	{r4, r5, r6, lr}
	unsigned char tmp[4] = {0,0,0,0};
	
	tmp[0] = HC165_GetByte();
 80018f2:	f7ff ffc7 	bl	8001884 <HC165_GetByte>
 80018f6:	4605      	mov	r5, r0
	tmp[1] = HC165_GetByte();
 80018f8:	f7ff ffc4 	bl	8001884 <HC165_GetByte>
 80018fc:	4606      	mov	r6, r0
	tmp[2] = HC165_GetByte();
 80018fe:	f7ff ffc1 	bl	8001884 <HC165_GetByte>
 8001902:	4604      	mov	r4, r0
	tmp[3] = HC165_GetByte();
 8001904:	f7ff ffbe 	bl	8001884 <HC165_GetByte>

	return (unsigned long int) ((((unsigned long int) (tmp[3]))<<24)|(((unsigned long int) (tmp[2]))<<16)|((unsigned long int) (tmp[1])<<8)|(unsigned long int) (tmp[0]));
 8001908:	0424      	lsls	r4, r4, #16
 800190a:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 800190e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
}
 8001912:	4328      	orrs	r0, r5
 8001914:	bd70      	pop	{r4, r5, r6, pc}

08001916 <HC165_GetDWord1>:

unsigned long int HC165_GetDWord1(void)
{
 8001916:	b538      	push	{r3, r4, r5, lr}
	unsigned char tmp[4] = {0,0,0,0};

	tmp[0] = HC165_GetByte();
 8001918:	f7ff ffb4 	bl	8001884 <HC165_GetByte>
 800191c:	4605      	mov	r5, r0
	tmp[1] = HC165_GetByte();
 800191e:	f7ff ffb1 	bl	8001884 <HC165_GetByte>
 8001922:	4604      	mov	r4, r0
	tmp[2] = HC165_GetByte();
 8001924:	f7ff ffae 	bl	8001884 <HC165_GetByte>

	return (unsigned long int) ((((unsigned long int) (tmp[3]))<<24)|(((unsigned long int) (tmp[2]))<<16)|((unsigned long int) (tmp[1])<<8)|(unsigned long int) (tmp[0]));
 8001928:	0224      	lsls	r4, r4, #8
 800192a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
}
 800192e:	4328      	orrs	r0, r5
 8001930:	bd38      	pop	{r3, r4, r5, pc}
	...

08001934 <GetButton>:

//Get buttons state
unsigned long long int GetButton(void)
{
 8001934:	b570      	push	{r4, r5, r6, lr}
	unsigned long int keys_state_1, keys_state_2;
	
	CE_LOW;
 8001936:	4c0c      	ldr	r4, [pc, #48]	; (8001968 <GetButton+0x34>)
 8001938:	2104      	movs	r1, #4
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff fbcb 	bl	80010d6 <GPIO_ResetBits>
	delay_us(10);
 8001940:	200a      	movs	r0, #10
 8001942:	f003 ffe9 	bl	8005918 <delay_us>
	HC165_LatchUp();
 8001946:	f7ff ff85 	bl	8001854 <HC165_LatchUp>
	keys_state_1 = HC165_GetDWord();
 800194a:	f7ff ffd1 	bl	80018f0 <HC165_GetDWord>
 800194e:	4605      	mov	r5, r0
	keys_state_2 = HC165_GetDWord1();
 8001950:	f7ff ffe1 	bl	8001916 <HC165_GetDWord1>
 8001954:	4606      	mov	r6, r0
	CE_HIGH;
 8001956:	2104      	movs	r1, #4
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff fbba 	bl	80010d2 <GPIO_SetBits>

	return (unsigned long long int) ( ((unsigned long long int) (keys_state_1)) |  ( ((unsigned long long int) keys_state_2)<<32) );
 800195e:	2300      	movs	r3, #0
}
 8001960:	ea43 0005 	orr.w	r0, r3, r5
 8001964:	4631      	mov	r1, r6
 8001966:	bd70      	pop	{r4, r5, r6, pc}
 8001968:	40020800 	.word	0x40020800

0800196c <SendData>:
#include <stm32f4xx_gpio.h>

#include "MAX5135.h"

void SendData(unsigned char mData)
{
 800196c:	b510      	push	{r4, lr}
 800196e:	4604      	mov	r4, r0
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)); 
 8001970:	2102      	movs	r1, #2
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <SendData+0x2c>)
 8001974:	f7ff fd1f 	bl	80013b6 <SPI_I2S_GetFlagStatus>
 8001978:	2800      	cmp	r0, #0
 800197a:	d0f9      	beq.n	8001970 <SendData+0x4>
	SPI_I2S_SendData(SPI2, mData);
 800197c:	4621      	mov	r1, r4
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <SendData+0x2c>)
 8001980:	f7ff fd17 	bl	80013b2 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE));
 8001984:	2101      	movs	r1, #1
 8001986:	4804      	ldr	r0, [pc, #16]	; (8001998 <SendData+0x2c>)
 8001988:	f7ff fd15 	bl	80013b6 <SPI_I2S_GetFlagStatus>
 800198c:	2800      	cmp	r0, #0
 800198e:	d0f9      	beq.n	8001984 <SendData+0x18>
	SPI_I2S_ReceiveData(SPI2);
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <SendData+0x2c>)
 8001992:	f7ff fd0c 	bl	80013ae <SPI_I2S_ReceiveData>
	;
};
 8001996:	bd10      	pop	{r4, pc}
 8001998:	40003800 	.word	0x40003800

0800199c <MAX5135_SendPack>:

void MAX5135_SendPack(unsigned char _data1, unsigned char _data2)
{
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	4606      	mov	r6, r0
 80019a0:	460d      	mov	r5, r1
	GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 80019a2:	4c09      	ldr	r4, [pc, #36]	; (80019c8 <MAX5135_SendPack+0x2c>)
 80019a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff fb94 	bl	80010d6 <GPIO_ResetBits>
	
	SendData(_data1);
 80019ae:	4630      	mov	r0, r6
 80019b0:	f7ff ffdc 	bl	800196c <SendData>
	SendData(_data2);
 80019b4:	4628      	mov	r0, r5
 80019b6:	f7ff ffd9 	bl	800196c <SendData>
	
	;	
	//delay_us(1);
	
	GPIO_SetBits(GPIOB, GPIO_Pin_12);
 80019ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff fb87 	bl	80010d2 <GPIO_SetBits>
}
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
 80019c6:	bf00      	nop
 80019c8:	40020400 	.word	0x40020400

080019cc <MAX5135init>:

void MAX5135init(void)
{
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	b089      	sub	sp, #36	; 0x24
	/* SPI2 setting up*/
	
	GPIO_InitTypeDef mGPIO_InitStructure;
	SPI_InitTypeDef mSPI;
		
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80019d0:	2101      	movs	r1, #1
 80019d2:	2002      	movs	r0, #2
 80019d4:	f7ff fbf4 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	
	//GPIO_PinAFConfig(GPIOB, GPIO_PinSource12, GPIO_AF_SPI2);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_SPI2);
 80019d8:	4d2f      	ldr	r5, [pc, #188]	; (8001a98 <MAX5135init+0xcc>)
 80019da:	2205      	movs	r2, #5
 80019dc:	210d      	movs	r1, #13
 80019de:	4628      	mov	r0, r5
 80019e0:	f7ff fb7b 	bl	80010da <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_SPI2);
 80019e4:	2205      	movs	r2, #5
 80019e6:	210f      	movs	r1, #15
 80019e8:	4628      	mov	r0, r5
 80019ea:	f7ff fb76 	bl	80010da <GPIO_PinAFConfig>
	
	mGPIO_InitStructure.GPIO_Pin 		= /*GPIO_Pin_12|*/GPIO_Pin_13|GPIO_Pin_15;
 80019ee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80019f2:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 80019f4:	2702      	movs	r7, #2
 80019f6:	f88d 701c 	strb.w	r7, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 80019fa:	2400      	movs	r4, #0
 80019fc:	f88d 401e 	strb.w	r4, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8001a00:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8001a04:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOB, &mGPIO_InitStructure);
 8001a08:	a906      	add	r1, sp, #24
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f7ff fb0c 	bl	8001028 <GPIO_Init>
	
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_12/*|GPIO_Pin_0*/;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001a16:	2601      	movs	r6, #1
 8001a18:	f88d 601c 	strb.w	r6, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 8001a1c:	f88d 401e 	strb.w	r4, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8001a20:	f88d 601f 	strb.w	r6, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8001a24:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOB, &mGPIO_InitStructure);
 8001a28:	a906      	add	r1, sp, #24
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f7ff fafc 	bl	8001028 <GPIO_Init>
	
	//GPIO_SetBits(GPIOB, GPIO_Pin_0);
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001a30:	4631      	mov	r1, r6
 8001a32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a36:	f7ff fbd1 	bl	80011dc <RCC_APB1PeriphClockCmd>
	
	SPI_I2S_DeInit(SPI2);
 8001a3a:	f5a5 35e6 	sub.w	r5, r5, #117760	; 0x1cc00
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f7ff fc04 	bl	800124c <SPI_I2S_DeInit>
	SPI_StructInit(&mSPI);
 8001a44:	a801      	add	r0, sp, #4
 8001a46:	f7ff fc89 	bl	800135c <SPI_StructInit>
	
	mSPI.SPI_Direction = SPI_Direction_Tx;
 8001a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4e:	f8ad 3004 	strh.w	r3, [sp, #4]
	mSPI.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001a52:	f8ad 4010 	strh.w	r4, [sp, #16]
	mSPI.SPI_Mode = SPI_Mode_Master;
 8001a56:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a5a:	f8ad 3006 	strh.w	r3, [sp, #6]
	mSPI.SPI_DataSize = 8;
 8001a5e:	2308      	movs	r3, #8
 8001a60:	f8ad 3008 	strh.w	r3, [sp, #8]
	mSPI.SPI_CPOL = SPI_CPOL_Low;
 8001a64:	f8ad 400a 	strh.w	r4, [sp, #10]
	mSPI.SPI_CPHA = SPI_CPHA_1Edge;
 8001a68:	f8ad 400c 	strh.w	r4, [sp, #12]
	mSPI.SPI_FirstBit = SPI_FirstBit_MSB;	
 8001a6c:	f8ad 4012 	strh.w	r4, [sp, #18]
	mSPI.SPI_NSS = SPI_NSS_Soft;
 8001a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a74:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	SPI_Init(SPI2, &mSPI);
 8001a78:	a901      	add	r1, sp, #4
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	f7ff fc48 	bl	8001310 <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 8001a80:	4631      	mov	r1, r6
 8001a82:	4628      	mov	r0, r5
 8001a84:	f7ff fc76 	bl	8001374 <SPI_Cmd>
	SPI_NSSInternalSoftwareConfig(SPI2, SPI_NSSInternalSoft_Set);
 8001a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f7ff fc7e 	bl	800138e <SPI_NSSInternalSoftwareConfig>
	//delay_ms(10);
	////Clr linearity bit
	//MAX5135_SendPack(MAX5135_CMD_LINEARITY, MAX5135_DATA_NONE, MAX5135_DATA_NONE);
	
	//init END
}
 8001a92:	b009      	add	sp, #36	; 0x24
 8001a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40020400 	.word	0x40020400

08001a9c <MAX5135_DAC_send>:


void MAX5135_DAC_send(unsigned char DAC_Ch, unsigned int DAC_val)
{
 8001a9c:	b508      	push	{r3, lr}
	uint8_t msb,lsb;
	if(DAC_val > 1023) DAC_val = 1023;
 8001a9e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001aa2:	d301      	bcc.n	8001aa8 <MAX5135_DAC_send+0xc>
 8001aa4:	f240 31ff 	movw	r1, #1023	; 0x3ff
	
	switch(DAC_Ch)
 8001aa8:	2803      	cmp	r0, #3
 8001aaa:	d80a      	bhi.n	8001ac2 <MAX5135_DAC_send+0x26>
 8001aac:	e8df f000 	tbb	[pc, r0]
 8001ab0:	1e160e02 	.word	0x1e160e02
	{
		case 0:
		{
			msb = 0x30 | ((DAC_val >> 6) & 0x0F);
 8001ab4:	f3c1 1383 	ubfx	r3, r1, #6, #4
 8001ab8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
			lsb = (DAC_val << 2) & 0xFC;
 8001abc:	b2c9      	uxtb	r1, r1
 8001abe:	0089      	lsls	r1, r1, #2
 8001ac0:	b2ca      	uxtb	r2, r1
			msb = 0xF0 | ((DAC_val >> 6) & 0x0F);
			lsb = (DAC_val << 2) & 0xFC;
			break;
		}
	}
	MAX5135_SendPack(msb, lsb);
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff69 	bl	800199c <MAX5135_SendPack>
}
 8001aca:	bd08      	pop	{r3, pc}
			msb = 0x70 | ((DAC_val >> 6) & 0x0F);
 8001acc:	f3c1 1383 	ubfx	r3, r1, #6, #4
 8001ad0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
			lsb = (DAC_val << 2) & 0xFC;
 8001ad4:	b2c9      	uxtb	r1, r1
 8001ad6:	0089      	lsls	r1, r1, #2
 8001ad8:	b2ca      	uxtb	r2, r1
			break;
 8001ada:	e7f2      	b.n	8001ac2 <MAX5135_DAC_send+0x26>
			msb = 0xB0 | ((DAC_val >> 6) & 0x0F);
 8001adc:	f3c1 1383 	ubfx	r3, r1, #6, #4
 8001ae0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
			lsb = (DAC_val << 2) & 0xFC;
 8001ae4:	b2c9      	uxtb	r1, r1
 8001ae6:	0089      	lsls	r1, r1, #2
 8001ae8:	b2ca      	uxtb	r2, r1
			break;
 8001aea:	e7ea      	b.n	8001ac2 <MAX5135_DAC_send+0x26>
			msb = 0xF0 | ((DAC_val >> 6) & 0x0F);
 8001aec:	f3c1 1387 	ubfx	r3, r1, #6, #8
 8001af0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
			lsb = (DAC_val << 2) & 0xFC;
 8001af4:	b2c9      	uxtb	r1, r1
 8001af6:	0089      	lsls	r1, r1, #2
 8001af8:	b2ca      	uxtb	r2, r1
			break;
 8001afa:	e7e2      	b.n	8001ac2 <MAX5135_DAC_send+0x26>

08001afc <ADC_POTS_selector_init>:
};


//Init GPIOs for ADC channels multiplexers
void ADC_POTS_selector_init(void)
{
 8001afc:	b500      	push	{lr}
 8001afe:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Setting up peripherial */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001b00:	2101      	movs	r1, #1
 8001b02:	2004      	movs	r0, #4
 8001b04:	f7ff fb5c 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= ADC_PS_SH_PIN|ADC_PS_ST_PIN|ADC_PS_DS_PIN;
 8001b0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b12:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b14:	2302      	movs	r3, #2
 8001b16:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 8001b20:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b24:	4669      	mov	r1, sp
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <ADC_POTS_selector_init+0x38>)
 8001b28:	f7ff fa7e 	bl	8001028 <GPIO_Init>
}
 8001b2c:	b003      	add	sp, #12
 8001b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b32:	bf00      	nop
 8001b34:	40020800 	.word	0x40020800

08001b38 <ADC_POTS_selector_SendByte>:
void ADC_POTS_selector_SendByte(unsigned char data)
{
	unsigned char dat, cnt;
	
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e00c      	b.n	8001b56 <ADC_POTS_selector_SendByte+0x1e>
	{
		if ((dat & 0x80) > 0) {
			ADC_POTS_SELECTOR_DATA_HIGH;
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <ADC_POTS_selector_SendByte+0x3c>)
 8001b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b42:	8311      	strh	r1, [r2, #24]
		} else {
			ADC_POTS_SELECTOR_DATA_LOW;
		}

		ADC_POTS_SELECTOR_SHIFT_LOW;
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <ADC_POTS_selector_SendByte+0x3c>)
 8001b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4a:	8351      	strh	r1, [r2, #26]
 
		ADC_POTS_SELECTOR_SHIFT_HIGH;
 8001b4c:	8311      	strh	r1, [r2, #24]
   
		dat = dat << 1;
 8001b4e:	0040      	lsls	r0, r0, #1
 8001b50:	b2c0      	uxtb	r0, r0
	for(cnt=0; cnt<8; cnt++)
 8001b52:	3301      	adds	r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b07      	cmp	r3, #7
 8001b58:	d807      	bhi.n	8001b6a <ADC_POTS_selector_SendByte+0x32>
		if ((dat & 0x80) > 0) {
 8001b5a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b5e:	d1ed      	bne.n	8001b3c <ADC_POTS_selector_SendByte+0x4>
			ADC_POTS_SELECTOR_DATA_LOW;
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <ADC_POTS_selector_SendByte+0x3c>)
 8001b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b66:	8351      	strh	r1, [r2, #26]
 8001b68:	e7ec      	b.n	8001b44 <ADC_POTS_selector_SendByte+0xc>
	}
	
	ADC_POTS_SELECTOR_DATA_LOW;
 8001b6a:	4b02      	ldr	r3, [pc, #8]	; (8001b74 <ADC_POTS_selector_SendByte+0x3c>)
 8001b6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b70:	835a      	strh	r2, [r3, #26]
}
 8001b72:	4770      	bx	lr
 8001b74:	40020800 	.word	0x40020800

08001b78 <ADC_POTS_selector_SendDWord>:

//Send 5 bytes to ADC channels multiplexers
void ADC_POTS_selector_SendDWord(unsigned long long int data)
{	
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	4604      	mov	r4, r0
	ADC_POTS_selector_SendByte((unsigned char) ((data&0xFF00000000)>>32));
 8001b7c:	b2c8      	uxtb	r0, r1
 8001b7e:	f7ff ffdb 	bl	8001b38 <ADC_POTS_selector_SendByte>
	ADC_POTS_selector_SendByte((unsigned char) ((data&0xFF000000)>>24));
 8001b82:	0e20      	lsrs	r0, r4, #24
 8001b84:	f7ff ffd8 	bl	8001b38 <ADC_POTS_selector_SendByte>
	ADC_POTS_selector_SendByte((unsigned char) ( data&0x000000FF));
 8001b88:	b2e0      	uxtb	r0, r4
 8001b8a:	f7ff ffd5 	bl	8001b38 <ADC_POTS_selector_SendByte>
	ADC_POTS_selector_SendByte((unsigned char) ((data&0x0000FF00)>>8));
 8001b8e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001b92:	f7ff ffd1 	bl	8001b38 <ADC_POTS_selector_SendByte>
	ADC_POTS_selector_SendByte((unsigned char) ((data&0x00FF0000)>>16));
 8001b96:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001b9a:	f7ff ffcd 	bl	8001b38 <ADC_POTS_selector_SendByte>

	
	ADC_POTS_SELECTOR_STORAGE_LOW;
 8001b9e:	4b03      	ldr	r3, [pc, #12]	; (8001bac <ADC_POTS_selector_SendDWord+0x34>)
 8001ba0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ba4:	835a      	strh	r2, [r3, #26]
	
	ADC_POTS_SELECTOR_STORAGE_HIGH;
 8001ba6:	831a      	strh	r2, [r3, #24]
}
 8001ba8:	bd10      	pop	{r4, pc}
 8001baa:	bf00      	nop
 8001bac:	40020800 	.word	0x40020800

08001bb0 <ADC_POTS_selector_Ch>:

//Select ADC channel
void ADC_POTS_selector_Ch(unsigned char Ch)
{
 8001bb0:	b508      	push	{r3, lr}
	ADC_POTS_selector_SendDWord((unsigned long long int) ChSelData[Ch]);
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <ADC_POTS_selector_Ch+0x14>)
 8001bb4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001bb8:	e9d0 0100 	ldrd	r0, r1, [r0]
 8001bbc:	f7ff ffdc 	bl	8001b78 <ADC_POTS_selector_SendDWord>
}
 8001bc0:	bd08      	pop	{r3, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000010 	.word	0x20000010

08001bc8 <DipConfig_init>:
#define DipConfigPin3 GPIO_Pin_13
#define DipConfigPin4 GPIO_Pin_8

/*Init GPIOs for configuration dip switch*/
void DipConfig_init(void)
{
 8001bc8:	b500      	push	{lr}
 8001bca:	b083      	sub	sp, #12
	GPIO_InitTypeDef mGPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4608      	mov	r0, r1
 8001bd0:	f7ff faf6 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	
	//setup gpio speed


	mGPIO_InitStructure.GPIO_Pin 		= DipConfigPin1|DipConfigPin2|/*DipConfigPin3|*/DipConfigPin4;
 8001bd4:	f44f 4309 	mov.w	r3, #35072	; 0x8900
 8001bd8:	9300      	str	r3, [sp, #0]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IN;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f88d 3004 	strb.w	r3, [sp, #4]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8001be0:	2201      	movs	r2, #1
 8001be2:	f88d 2007 	strb.w	r2, [sp, #7]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;
 8001be6:	f88d 3005 	strb.w	r3, [sp, #5]
	


	GPIO_Init(GPIOA, &mGPIO_InitStructure);
 8001bea:	4669      	mov	r1, sp
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <DipConfig_init+0x30>)
 8001bee:	f7ff fa1b 	bl	8001028 <GPIO_Init>
};
 8001bf2:	b003      	add	sp, #12
 8001bf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bf8:	40020000 	.word	0x40020000

08001bfc <GetDipConfig>:

/*Returns the state of dip switch*/
uDipConfig GetDipConfig(void)
{
 8001bfc:	b538      	push	{r3, r4, r5, lr}
	uDipConfig lDipConfig;
	
	lDipConfig.b.V_OUT_1V2 		= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin1);
 8001bfe:	4d0f      	ldr	r5, [pc, #60]	; (8001c3c <GetDipConfig+0x40>)
 8001c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c04:	4628      	mov	r0, r5
 8001c06:	f7ff fa5d 	bl	80010c4 <GPIO_ReadInputDataBit>
 8001c0a:	43c0      	mvns	r0, r0
 8001c0c:	f04f 0400 	mov.w	r4, #0
 8001c10:	f360 0400 	bfi	r4, r0, #0, #1
	//lDipConfig.b.SAVE_V_LEVEL = ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin3);
	lDipConfig.b.SAVE_V_LEVEL = 1;
 8001c14:	f044 0404 	orr.w	r4, r4, #4
	lDipConfig.b.V_OUT_1V 		= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin2);
 8001c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f7ff fa51 	bl	80010c4 <GPIO_ReadInputDataBit>
 8001c22:	43c0      	mvns	r0, r0
 8001c24:	f360 0441 	bfi	r4, r0, #1, #1
	lDipConfig.b.EXPANDER_ON 	= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin4);
 8001c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f7ff fa49 	bl	80010c4 <GPIO_ReadInputDataBit>
 8001c32:	43c0      	mvns	r0, r0
 8001c34:	f360 04c3 	bfi	r4, r0, #3, #1
	
	return lDipConfig;
}
 8001c38:	4620      	mov	r0, r4
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
 8001c3c:	40020000 	.word	0x40020000

08001c40 <Init_Expander_GPIO>:
#include "expander.h"
#include "dip_config.h"


void Init_Expander_GPIO(void)
{
 8001c40:	b500      	push	{lr}
 8001c42:	b083      	sub	sp, #12
	GPIO_InitTypeDef mGPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001c44:	2101      	movs	r1, #1
 8001c46:	2002      	movs	r0, #2
 8001c48:	f7ff faba 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	
	mGPIO_InitStructure.GPIO_Pin 		= EXPANDER_PIN;
 8001c4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c50:	9300      	str	r3, [sp, #0]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IN;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f88d 3004 	strb.w	r3, [sp, #4]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_DOWN;
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f88d 2007 	strb.w	r2, [sp, #7]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;
 8001c5e:	f88d 3005 	strb.w	r3, [sp, #5]
	
	GPIO_Init(EXPANDER_GPIO, &mGPIO_InitStructure);
 8001c62:	4669      	mov	r1, sp
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <Init_Expander_GPIO+0x30>)
 8001c66:	f7ff f9df 	bl	8001028 <GPIO_Init>
}
 8001c6a:	b003      	add	sp, #12
 8001c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c70:	40020400 	.word	0x40020400

08001c74 <Is_Expander_Present>:

/*Returns 1 if expander is connected, otherwise returns 0*/
uint8_t Is_Expander_Present(void)
{
 8001c74:	b508      	push	{r3, lr}
	uDipConfig DipConfig;
	
	DipConfig = GetDipConfig();
 8001c76:	f7ff ffc1 	bl	8001bfc <GetDipConfig>
	if(DipConfig.b.EXPANDER_ON) return 1;
 8001c7a:	f010 0f08 	tst.w	r0, #8
 8001c7e:	d101      	bne.n	8001c84 <Is_Expander_Present+0x10>
	else return 0;
 8001c80:	2000      	movs	r0, #0
}
 8001c82:	bd08      	pop	{r3, pc}
	if(DipConfig.b.EXPANDER_ON) return 1;
 8001c84:	2001      	movs	r0, #1
 8001c86:	e7fc      	b.n	8001c82 <Is_Expander_Present+0xe>

08001c88 <LEDS_modes_init>:

#define LEDS_MODES_DATA_HIGH		GPIO_SetBits(GPIOC, GPIO_Pin_5)
#define LEDS_MODES_DATA_LOW			GPIO_ResetBits(GPIOC, GPIO_Pin_5)

void LEDS_modes_init(void)
{
 8001c88:	b500      	push	{lr}
 8001c8a:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Setting up peripherial */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2004      	movs	r0, #4
 8001c90:	f7ff fa96 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6;
 8001c9a:	2370      	movs	r3, #112	; 0x70
 8001c9c:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT; 
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 8001caa:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001cae:	4669      	mov	r1, sp
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <LEDS_modes_init+0x34>)
 8001cb2:	f7ff f9b9 	bl	8001028 <GPIO_Init>
}
 8001cb6:	b003      	add	sp, #12
 8001cb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cbc:	40020800 	.word	0x40020800

08001cc0 <LEDS_modes_SendByte>:

void LEDS_modes_SendByte(unsigned char data)
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	4605      	mov	r5, r0
	unsigned char dat, cnt;
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	e010      	b.n	8001cea <LEDS_modes_SendByte+0x2a>
	{
		if ((dat & 0x80) > 0) {
			LEDS_MODES_DATA_HIGH;
 8001cc8:	2120      	movs	r1, #32
 8001cca:	480f      	ldr	r0, [pc, #60]	; (8001d08 <LEDS_modes_SendByte+0x48>)
 8001ccc:	f7ff fa01 	bl	80010d2 <GPIO_SetBits>
		} else {
			LEDS_MODES_DATA_LOW;
		}
		
		LEDS_MODES_SHIFT_LOW;		
 8001cd0:	4e0d      	ldr	r6, [pc, #52]	; (8001d08 <LEDS_modes_SendByte+0x48>)
 8001cd2:	2110      	movs	r1, #16
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f7ff f9fe 	bl	80010d6 <GPIO_ResetBits>
		LEDS_MODES_SHIFT_HIGH;
 8001cda:	2110      	movs	r1, #16
 8001cdc:	4630      	mov	r0, r6
 8001cde:	f7ff f9f8 	bl	80010d2 <GPIO_SetBits>

		dat = dat << 1;
 8001ce2:	006d      	lsls	r5, r5, #1
 8001ce4:	b2ed      	uxtb	r5, r5
	for(cnt=0; cnt<8; cnt++)
 8001ce6:	3401      	adds	r4, #1
 8001ce8:	b2e4      	uxtb	r4, r4
 8001cea:	2c07      	cmp	r4, #7
 8001cec:	d807      	bhi.n	8001cfe <LEDS_modes_SendByte+0x3e>
		if ((dat & 0x80) > 0) {
 8001cee:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001cf2:	d1e9      	bne.n	8001cc8 <LEDS_modes_SendByte+0x8>
			LEDS_MODES_DATA_LOW;
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	4804      	ldr	r0, [pc, #16]	; (8001d08 <LEDS_modes_SendByte+0x48>)
 8001cf8:	f7ff f9ed 	bl	80010d6 <GPIO_ResetBits>
 8001cfc:	e7e8      	b.n	8001cd0 <LEDS_modes_SendByte+0x10>
	}
	LEDS_MODES_DATA_LOW;
 8001cfe:	2120      	movs	r1, #32
 8001d00:	4801      	ldr	r0, [pc, #4]	; (8001d08 <LEDS_modes_SendByte+0x48>)
 8001d02:	f7ff f9e8 	bl	80010d6 <GPIO_ResetBits>
	
}
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
 8001d08:	40020800 	.word	0x40020800

08001d0c <LEDS_modes_SendStruct>:
	LEDS_MODES_STORAGE_HIGH;
}


void LEDS_modes_SendStruct(uLeds *_Leds)
{
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	4604      	mov	r4, r0
	LEDS_modes_SendByte(_Leds->value[0]);
 8001d10:	7800      	ldrb	r0, [r0, #0]
 8001d12:	f7ff ffd5 	bl	8001cc0 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[1]);
 8001d16:	7860      	ldrb	r0, [r4, #1]
 8001d18:	f7ff ffd2 	bl	8001cc0 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[2]);
 8001d1c:	78a0      	ldrb	r0, [r4, #2]
 8001d1e:	f7ff ffcf 	bl	8001cc0 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[3]);
 8001d22:	78e0      	ldrb	r0, [r4, #3]
 8001d24:	f7ff ffcc 	bl	8001cc0 <LEDS_modes_SendByte>

	LEDS_MODES_STORAGE_LOW;
 8001d28:	4c04      	ldr	r4, [pc, #16]	; (8001d3c <LEDS_modes_SendStruct+0x30>)
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff f9d2 	bl	80010d6 <GPIO_ResetBits>
	LEDS_MODES_STORAGE_HIGH;
 8001d32:	2140      	movs	r1, #64	; 0x40
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff f9cc 	bl	80010d2 <GPIO_SetBits>
}
 8001d3a:	bd10      	pop	{r4, pc}
 8001d3c:	40020800 	.word	0x40020800

08001d40 <LED_STEP_init>:
#define LED_STEP_DATA_HIGH			GPIO_SetBits(GPIOC, GPIO_Pin_8)
#define LED_STEP_DATA_LOW				GPIO_ResetBits(GPIOC, GPIO_Pin_8)

/*Init GPIO for LEDs control via HC595 shift registers*/
void LED_STEP_init(void)
{
 8001d40:	b500      	push	{lr}
 8001d42:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001d44:	2101      	movs	r1, #1
 8001d46:	2004      	movs	r0, #4
 8001d48:	f7ff fa3a 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_7|GPIO_Pin_8|GPIO_Pin_9;
 8001d52:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d56:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; //100mhz default
 8001d58:	2303      	movs	r3, #3
 8001d5a:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;	 
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 8001d64:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d68:	4669      	mov	r1, sp
 8001d6a:	4803      	ldr	r0, [pc, #12]	; (8001d78 <LED_STEP_init+0x38>)
 8001d6c:	f7ff f95c 	bl	8001028 <GPIO_Init>
}
 8001d70:	b003      	add	sp, #12
 8001d72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d76:	bf00      	nop
 8001d78:	40020800 	.word	0x40020800

08001d7c <LED_STEP_SendByte>:

/*Shift one byte to HC595 registers which control LEDs*/
void LED_STEP_SendByte(unsigned char data)
{
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	4605      	mov	r5, r0
	unsigned char dat, cnt;
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 8001d80:	2400      	movs	r4, #0
 8001d82:	e011      	b.n	8001da8 <LED_STEP_SendByte+0x2c>
	{
		if ((dat & 0x80) > 0) {
			LED_STEP_DATA_HIGH;
 8001d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d88:	4810      	ldr	r0, [pc, #64]	; (8001dcc <LED_STEP_SendByte+0x50>)
 8001d8a:	f7ff f9a2 	bl	80010d2 <GPIO_SetBits>
		} else {
			LED_STEP_DATA_LOW;
		}

		LED_STEP_SHIFT_LOW;
 8001d8e:	4e0f      	ldr	r6, [pc, #60]	; (8001dcc <LED_STEP_SendByte+0x50>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	4630      	mov	r0, r6
 8001d94:	f7ff f99f 	bl	80010d6 <GPIO_ResetBits>
		LED_STEP_SHIFT_HIGH;
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	f7ff f999 	bl	80010d2 <GPIO_SetBits>

		dat = dat << 1;
 8001da0:	006d      	lsls	r5, r5, #1
 8001da2:	b2ed      	uxtb	r5, r5
	for(cnt=0; cnt<8; cnt++)
 8001da4:	3401      	adds	r4, #1
 8001da6:	b2e4      	uxtb	r4, r4
 8001da8:	2c07      	cmp	r4, #7
 8001daa:	d808      	bhi.n	8001dbe <LED_STEP_SendByte+0x42>
		if ((dat & 0x80) > 0) {
 8001dac:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001db0:	d1e8      	bne.n	8001d84 <LED_STEP_SendByte+0x8>
			LED_STEP_DATA_LOW;
 8001db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <LED_STEP_SendByte+0x50>)
 8001db8:	f7ff f98d 	bl	80010d6 <GPIO_ResetBits>
 8001dbc:	e7e7      	b.n	8001d8e <LED_STEP_SendByte+0x12>
	}
	LED_STEP_DATA_LOW;
 8001dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc2:	4802      	ldr	r0, [pc, #8]	; (8001dcc <LED_STEP_SendByte+0x50>)
 8001dc4:	f7ff f987 	bl	80010d6 <GPIO_ResetBits>
}
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
 8001dca:	bf00      	nop
 8001dcc:	40020800 	.word	0x40020800

08001dd0 <LED_STEP_SendWord>:

/*Shift two bytes to HC595 registers which control LEDs*/
void LED_STEP_SendWord(unsigned long int data)
{
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	4604      	mov	r4, r0
	LED_STEP_SendByte((unsigned char) ((data&0xFF00)>>8) );
 8001dd4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001dd8:	f7ff ffd0 	bl	8001d7c <LED_STEP_SendByte>
	LED_STEP_SendByte((unsigned char) (data&0x00FF) );
 8001ddc:	b2e0      	uxtb	r0, r4
 8001dde:	f7ff ffcd 	bl	8001d7c <LED_STEP_SendByte>

	LED_STEP_STORAGE_LOW;
 8001de2:	4c06      	ldr	r4, [pc, #24]	; (8001dfc <LED_STEP_SendWord+0x2c>)
 8001de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff f974 	bl	80010d6 <GPIO_ResetBits>
	LED_STEP_STORAGE_HIGH;
 8001dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff f96d 	bl	80010d2 <GPIO_SetBits>
}
 8001df8:	bd10      	pop	{r4, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40020800 	.word	0x40020800

08001e00 <LED_STEP_LightStep>:

/*Turn on the LED which indicates the step number StepNum*/
void LED_STEP_LightStep(unsigned int StepNum)
{
 8001e00:	b538      	push	{r3, r4, r5, lr}
	unsigned long dat = 0xFFFFFFFF;
	unsigned char cnt, tmp1, tmp2;
	
	dat &= ~(1<<0);
	for(cnt=0;cnt<StepNum;cnt++)
 8001e02:	2300      	movs	r3, #0
	dat &= ~(1<<0);
 8001e04:	f06f 0401 	mvn.w	r4, #1
	for(cnt=0;cnt<StepNum;cnt++)
 8001e08:	e004      	b.n	8001e14 <LED_STEP_LightStep+0x14>
	{		
		dat = dat<<1;
 8001e0a:	0064      	lsls	r4, r4, #1
		dat |= (1<<0);		
 8001e0c:	f044 0401 	orr.w	r4, r4, #1
	for(cnt=0;cnt<StepNum;cnt++)
 8001e10:	3301      	adds	r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4283      	cmp	r3, r0
 8001e16:	d3f8      	bcc.n	8001e0a <LED_STEP_LightStep+0xa>
	};
		
	if(!Is_Expander_Present())
 8001e18:	f7ff ff2c 	bl	8001c74 <Is_Expander_Present>
 8001e1c:	b1d0      	cbz	r0, 8001e54 <LED_STEP_LightStep+0x54>
		LED_STEP_SendWord(dat & 0xFFFF);
	}
	else
	{
		//if expander is presented we should control 32 LEDs instead of 16
		tmp1 = dat >> 24;
 8001e1e:	0e25      	lsrs	r5, r4, #24
		tmp2 = dat >> 16;
		
		LED_STEP_SendByte((unsigned char) (tmp2) );
 8001e20:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001e24:	f7ff ffaa 	bl	8001d7c <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (tmp1) );
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f7ff ffa7 	bl	8001d7c <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (dat >> 8) );
 8001e2e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001e32:	f7ff ffa3 	bl	8001d7c <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (dat) );
 8001e36:	b2e0      	uxtb	r0, r4
 8001e38:	f7ff ffa0 	bl	8001d7c <LED_STEP_SendByte>
		
		LED_STEP_STORAGE_LOW;
 8001e3c:	4c07      	ldr	r4, [pc, #28]	; (8001e5c <LED_STEP_LightStep+0x5c>)
 8001e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff f947 	bl	80010d6 <GPIO_ResetBits>
		LED_STEP_STORAGE_HIGH;
 8001e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff f940 	bl	80010d2 <GPIO_SetBits>
		
	}
};
 8001e52:	bd38      	pop	{r3, r4, r5, pc}
		LED_STEP_SendWord(dat & 0xFFFF);
 8001e54:	b2a0      	uxth	r0, r4
 8001e56:	f7ff ffbb 	bl	8001dd0 <LED_STEP_SendWord>
 8001e5a:	e7fa      	b.n	8001e52 <LED_STEP_LightStep+0x52>
 8001e5c:	40020800 	.word	0x40020800

08001e60 <mADC_init>:
/*
	Setting up acts Timer 2 as source for ADC start conversion
	with 40 ksamples per second.
*/
void mADC_init(void)
{
 8001e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e64:	b08c      	sub	sp, #48	; 0x30
	ADC_InitTypeDef ADC_InitType;
	TIM_TimeBaseInitTypeDef TimeBaseInit;
	NVIC_InitTypeDef nvicStructure;
	
	//Timer init
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); 
 8001e66:	2101      	movs	r1, #1
 8001e68:	4608      	mov	r0, r1
 8001e6a:	f7ff f9b7 	bl	80011dc <RCC_APB1PeriphClockCmd>
		
	TIM_TimeBaseStructInit(&TimeBaseInit);
 8001e6e:	a801      	add	r0, sp, #4
 8001e70:	f7ff fb00 	bl	8001474 <TIM_TimeBaseStructInit>
  TimeBaseInit.TIM_Prescaler 			= 0;	//ADC1 Timer
 8001e74:	2400      	movs	r4, #0
 8001e76:	f8ad 4004 	strh.w	r4, [sp, #4]
	TimeBaseInit.TIM_CounterMode 		= TIM_CounterMode_Up;
 8001e7a:	f8ad 4006 	strh.w	r4, [sp, #6]
  TimeBaseInit.TIM_Period 				= 4200-1;// for 40kHz
 8001e7e:	f241 0367 	movw	r3, #4199	; 0x1067
 8001e82:	9302      	str	r3, [sp, #8]
	TimeBaseInit.TIM_ClockDivision 	= TIM_CKD_DIV1;	
 8001e84:	f8ad 400c 	strh.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM2, &TimeBaseInit); 
 8001e88:	a901      	add	r1, sp, #4
 8001e8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e8e:	f7ff fab3 	bl	80013f8 <TIM_TimeBaseInit>

	TIM_SelectOutputTrigger(TIM2, TIM_TRGOSource_OC2Ref);
 8001e92:	2150      	movs	r1, #80	; 0x50
 8001e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e98:	f7ff fb3e 	bl	8001518 <TIM_SelectOutputTrigger>
	TIM_CCxCmd(TIM2, TIM_Channel_2, TIM_CCx_Enable);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ea4:	f7ff fb0d 	bl	80014c2 <TIM_CCxCmd>
	TIM_SetCompare2(TIM2, 1);	
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eae:	f7ff fb06 	bl	80014be <TIM_SetCompare2>
	TIM2->CCMR1 |= TIM_CCMR1_OC2M;
 8001eb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eb6:	8b03      	ldrh	r3, [r0, #24]
 8001eb8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001ebc:	8303      	strh	r3, [r0, #24]
  TIM_Cmd(TIM2, ENABLE); 
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	f7ff faf0 	bl	80014a4 <TIM_Cmd>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001ec4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8001fb4 <mADC_init+0x154>
 8001ec8:	2310      	movs	r3, #16
 8001eca:	f888 3312 	strb.w	r3, [r8, #786]	; 0x312
	
	//ADC Init
	NVIC_SetPriority (ADC_IRQn, 1);  
	
	//ADC GPIO Init
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	f7ff f975 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Init_user, 0, sizeof(GPIO_Init_user));
 8001ed6:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_Init_user.GPIO_Pin 	= GPIO_Pin_0|GPIO_Pin_1;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_Init_user.GPIO_Mode 	= GPIO_Mode_AN; //Analog mode
 8001edc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	GPIO_Init(GPIOA, & GPIO_Init_user);	
 8001ee0:	a90a      	add	r1, sp, #40	; 0x28
 8001ee2:	4830      	ldr	r0, [pc, #192]	; (8001fa4 <mADC_init+0x144>)
 8001ee4:	f7ff f8a0 	bl	8001028 <GPIO_Init>
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001ee8:	2101      	movs	r1, #1
 8001eea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001eee:	f7ff f983 	bl	80011f8 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ef8:	f7ff f97e 	bl	80011f8 <RCC_APB2PeriphClockCmd>
	
	ADC_StructInit(&ADC_InitType);
 8001efc:	a804      	add	r0, sp, #16
 8001efe:	f7fe ff63 	bl	8000dc8 <ADC_StructInit>
	ADC_InitType.ADC_ContinuousConvMode 	= DISABLE;
 8001f02:	f88d 4015 	strb.w	r4, [sp, #21]
	ADC_InitType.ADC_DataAlign 						= ADC_DataAlign_Right;
 8001f06:	9408      	str	r4, [sp, #32]
	ADC_InitType.ADC_ExternalTrigConv 		= ADC_ExternalTrigConv_T2_TRGO;
 8001f08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001f0c:	9307      	str	r3, [sp, #28]
	ADC_InitType.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8001f0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f12:	9306      	str	r3, [sp, #24]
	ADC_InitType.ADC_NbrOfConversion 			= 1;
 8001f14:	2501      	movs	r5, #1
 8001f16:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	ADC_InitType.ADC_Resolution 					= ADC_Resolution_12b;
 8001f1a:	9404      	str	r4, [sp, #16]
	ADC_InitType.ADC_ScanConvMode 				= DISABLE;
 8001f1c:	f88d 4014 	strb.w	r4, [sp, #20]

	ADC_Init(ADC1, &ADC_InitType);
 8001f20:	4f21      	ldr	r7, [pc, #132]	; (8001fa8 <mADC_init+0x148>)
 8001f22:	a904      	add	r1, sp, #16
 8001f24:	4638      	mov	r0, r7
 8001f26:	f7fe ff27 	bl	8000d78 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitType);	
 8001f2a:	4e20      	ldr	r6, [pc, #128]	; (8001fac <mADC_init+0x14c>)
 8001f2c:	a904      	add	r1, sp, #16
 8001f2e:	4630      	mov	r0, r6
 8001f30:	f7fe ff22 	bl	8000d78 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0 ,1, ADC_SampleTime_480Cycles);
 8001f34:	2307      	movs	r3, #7
 8001f36:	462a      	mov	r2, r5
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4638      	mov	r0, r7
 8001f3c:	f7fe ff59 	bl	8000df2 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1 ,1, ADC_SampleTime_480Cycles);
 8001f40:	2307      	movs	r3, #7
 8001f42:	462a      	mov	r2, r5
 8001f44:	4629      	mov	r1, r5
 8001f46:	4630      	mov	r0, r6
 8001f48:	f7fe ff53 	bl	8000df2 <ADC_RegularChannelConfig>
	
	//ADC interrupts init
	nvicStructure.NVIC_IRQChannel = ADC_IRQn;
 8001f4c:	2312      	movs	r3, #18
 8001f4e:	f88d 3000 	strb.w	r3, [sp]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8001f52:	f88d 5001 	strb.w	r5, [sp, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8001f56:	f88d 4002 	strb.w	r4, [sp, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8001f5a:	f88d 5003 	strb.w	r5, [sp, #3]
	NVIC_Init(&nvicStructure);
 8001f5e:	4668      	mov	r0, sp
 8001f60:	f7fe fed8 	bl	8000d14 <NVIC_Init>
	
	ADC_POT_sel_cnt = 0;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <mADC_init+0x150>)
 8001f66:	701c      	strb	r4, [r3, #0]
	ADC_POTS_selector_Ch(0);
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f7ff fe21 	bl	8001bb0 <ADC_POTS_selector_Ch>
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001f6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f72:	f8c8 3000 	str.w	r3, [r8]
	
	NVIC_EnableIRQ(ADC_IRQn);
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8001f76:	462a      	mov	r2, r5
 8001f78:	f240 2105 	movw	r1, #517	; 0x205
 8001f7c:	4638      	mov	r0, r7
 8001f7e:	f7fe ff80 	bl	8000e82 <ADC_ITConfig>
	ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
 8001f82:	462a      	mov	r2, r5
 8001f84:	f240 2105 	movw	r1, #517	; 0x205
 8001f88:	4630      	mov	r0, r6
 8001f8a:	f7fe ff7a 	bl	8000e82 <ADC_ITConfig>
	ADC_Cmd(ADC1, ENABLE);	
 8001f8e:	4629      	mov	r1, r5
 8001f90:	4638      	mov	r0, r7
 8001f92:	f7fe ff23 	bl	8000ddc <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);	
 8001f96:	4629      	mov	r1, r5
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f7fe ff1f 	bl	8000ddc <ADC_Cmd>
};
 8001f9e:	b00c      	add	sp, #48	; 0x30
 8001fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40012000 	.word	0x40012000
 8001fac:	40012100 	.word	0x40012100
 8001fb0:	2000029c 	.word	0x2000029c
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <ADCPause>:
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <ADCPause+0xc>)
 8001fba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


void ADCPause(void)
{
	NVIC_DisableIRQ(ADC_IRQn);
};
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <mInterruptInit>:
	NVIC_EnableIRQ(ADC_IRQn);
};

//External interrupts init for start and stop switches
void mInterruptInit(void)
{
 8001fc8:	b530      	push	{r4, r5, lr}
 8001fca:	b087      	sub	sp, #28
	GPIO_InitTypeDef mGPIO;
	EXTI_InitTypeDef mInt;
	NVIC_InitTypeDef NVIC_InitStructure;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fd2:	f7ff f911 	bl	80011f8 <RCC_APB2PeriphClockCmd>
	
	mGPIO.GPIO_Mode = GPIO_Mode_IN;
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	f88d 4014 	strb.w	r4, [sp, #20]
	mGPIO.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8;
 8001fdc:	f240 15e3 	movw	r5, #483	; 0x1e3
 8001fe0:	9504      	str	r5, [sp, #16]
	mGPIO.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001fe2:	f88d 4017 	strb.w	r4, [sp, #23]
	mGPIO.GPIO_Speed = GPIO_Speed_100MHz;	
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_Init(GPIOB, &mGPIO);
 8001fec:	a904      	add	r1, sp, #16
 8001fee:	4831      	ldr	r0, [pc, #196]	; (80020b4 <mInterruptInit+0xec>)
 8001ff0:	f7ff f81a 	bl	8001028 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource0);
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7ff f9e4 	bl	80013c4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource1);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4608      	mov	r0, r1
 8002000:	f7ff f9e0 	bl	80013c4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource5);
 8002004:	2105      	movs	r1, #5
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff f9dc 	bl	80013c4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource6);
 800200c:	2106      	movs	r1, #6
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff f9d8 	bl	80013c4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource7);
 8002014:	2107      	movs	r1, #7
 8002016:	2001      	movs	r0, #1
 8002018:	f7ff f9d4 	bl	80013c4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource8);
 800201c:	2108      	movs	r1, #8
 800201e:	2001      	movs	r0, #1
 8002020:	f7ff f9d0 	bl	80013c4 <SYSCFG_EXTILineConfig>

	
	//START-STOP LINE INIT Interrupt
	EXTI_DeInit();
 8002024:	f7fe ffa4 	bl	8000f70 <EXTI_DeInit>
	mInt.EXTI_Line = EXTI_Line0|EXTI_Line1|EXTI_Line5|EXTI_Line6|EXTI_Line7|EXTI_Line8;
 8002028:	9502      	str	r5, [sp, #8]
	mInt.EXTI_Mode = EXTI_Mode_Interrupt;
 800202a:	f88d 400c 	strb.w	r4, [sp, #12]
	mInt.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 800202e:	2310      	movs	r3, #16
 8002030:	f88d 300d 	strb.w	r3, [sp, #13]
	mInt.EXTI_LineCmd = ENABLE;	
 8002034:	2501      	movs	r5, #1
 8002036:	f88d 500e 	strb.w	r5, [sp, #14]
	EXTI_Init(&mInt);
 800203a:	a802      	add	r0, sp, #8
 800203c:	f7fe ffa6 	bl	8000f8c <EXTI_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn; 						
 8002040:	2306      	movs	r3, #6
 8002042:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00; 
 8002046:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00; 
 800204a:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 800204e:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002052:	a801      	add	r0, sp, #4
 8002054:	f7fe fe5e 	bl	8000d14 <NVIC_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn; 						
 8002058:	2307      	movs	r3, #7
 800205a:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00; 
 800205e:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00; 
 8002062:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 8002066:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 800206a:	a801      	add	r0, sp, #4
 800206c:	f7fe fe52 	bl	8000d14 <NVIC_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; 						
 8002070:	2317      	movs	r3, #23
 8002072:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00; 
 8002076:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00; 
 800207a:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 800207e:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002082:	a801      	add	r0, sp, #4
 8002084:	f7fe fe46 	bl	8000d14 <NVIC_Init>
	
	EXTI_ClearITPendingBit(EXTI_Line0);	
 8002088:	4628      	mov	r0, r5
 800208a:	f7fe ffc7 	bl	800101c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line1);	
 800208e:	2002      	movs	r0, #2
 8002090:	f7fe ffc4 	bl	800101c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line5);	
 8002094:	2020      	movs	r0, #32
 8002096:	f7fe ffc1 	bl	800101c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line6);	
 800209a:	2040      	movs	r0, #64	; 0x40
 800209c:	f7fe ffbe 	bl	800101c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line7);	
 80020a0:	2080      	movs	r0, #128	; 0x80
 80020a2:	f7fe ffbb 	bl	800101c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line8);
 80020a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020aa:	f7fe ffb7 	bl	800101c <EXTI_ClearITPendingBit>
};
 80020ae:	b007      	add	sp, #28
 80020b0:	bd30      	pop	{r4, r5, pc}
 80020b2:	bf00      	nop
 80020b4:	40020400 	.word	0x40020400

080020b8 <EXTI0_IRQHandler>:


//STOP KEY-BANANA Interrupt handler
//1 SECTION
void EXTI0_IRQHandler()
{
 80020b8:	b508      	push	{r3, lr}
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_0) && 
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <EXTI0_IRQHandler+0x50>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f013 0f01 	tst.w	r3, #1
 80020c2:	d11d      	bne.n	8002100 <EXTI0_IRQHandler+0x48>
		(gSequencerMode_1 != SEQUENCER_MODE_WAIT && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z)
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <EXTI0_IRQHandler+0x54>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_0) && 
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d018      	beq.n	8002100 <EXTI0_IRQHandler+0x48>
		(gSequencerMode_1 != SEQUENCER_MODE_WAIT && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z)
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <EXTI0_IRQHandler+0x54>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d013      	beq.n	8002100 <EXTI0_IRQHandler+0x48>
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <EXTI0_IRQHandler+0x54>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d00e      	beq.n	8002100 <EXTI0_IRQHandler+0x48>
	) {
		gPrevSequencerMode_1 = SEQUENCER_MODE_RUN;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <EXTI0_IRQHandler+0x58>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
		gSequencerMode_1 = SEQUENCER_MODE_STOP;	
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <EXTI0_IRQHandler+0x54>)
 80020ea:	2202      	movs	r2, #2
 80020ec:	701a      	strb	r2, [r3, #0]
		
		DisplayUpdateFlags.b.MainDisplay 	= 1;
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <EXTI0_IRQHandler+0x5c>)
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	f042 0202 	orr.w	r2, r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
	};
	
	EXTI_ClearITPendingBit(EXTI_Line0);	
 8002100:	2001      	movs	r0, #1
 8002102:	f7fe ff8b 	bl	800101c <EXTI_ClearITPendingBit>
};
 8002106:	bd08      	pop	{r3, pc}
 8002108:	40020400 	.word	0x40020400
 800210c:	200002c1 	.word	0x200002c1
 8002110:	200002bd 	.word	0x200002bd
 8002114:	200002f0 	.word	0x200002f0

08002118 <InitStart_1_SignalTimer>:

/*
	Init timer for start pulse (section 1) duration measurement 
*/
void InitStart_1_SignalTimer()
{
 8002118:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800211a:	2101      	movs	r1, #1
 800211c:	2002      	movs	r0, #2
 800211e:	f7ff f85d 	bl	80011dc <RCC_APB1PeriphClockCmd>
	
	TIM3->PSC = STEP_TIMER_PRESCALER;
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <InitStart_1_SignalTimer+0x30>)
 8002124:	f642 1204 	movw	r2, #10500	; 0x2904
 8002128:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->ARR = START_TIMER_SUSTAIN;
 800212a:	2228      	movs	r2, #40	; 0x28
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0;
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->DIER = TIM_DIER_UIE;
 8002132:	2201      	movs	r2, #1
 8002134:	819a      	strh	r2, [r3, #12]
	TIM3->CR1 |= TIM_CR1_CEN;
 8002136:	881a      	ldrh	r2, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	801a      	strh	r2, [r3, #0]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800213e:	4b03      	ldr	r3, [pc, #12]	; (800214c <InitStart_1_SignalTimer+0x34>)
 8002140:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002144:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(TIM3_IRQn);	
};
 8002146:	bd08      	pop	{r3, pc}
 8002148:	40000400 	.word	0x40000400
 800214c:	e000e100 	.word	0xe000e100

08002150 <InitStart_2_SignalTimer>:

/*
	Init timer for start pulse (section 2) duration measurement 
*/
void InitStart_2_SignalTimer()
{
 8002150:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002152:	2101      	movs	r1, #1
 8002154:	2020      	movs	r0, #32
 8002156:	f7ff f841 	bl	80011dc <RCC_APB1PeriphClockCmd>
	
	TIM7->PSC = STEP_TIMER_PRESCALER;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <InitStart_2_SignalTimer+0x30>)
 800215c:	f642 1204 	movw	r2, #10500	; 0x2904
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM7->ARR = START_TIMER_SUSTAIN;
 8002162:	2228      	movs	r2, #40	; 0x28
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM7->CNT = 0;
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
	TIM7->DIER = TIM_DIER_UIE;
 800216a:	2201      	movs	r2, #1
 800216c:	819a      	strh	r2, [r3, #12]
	TIM7->CR1 |= TIM_CR1_CEN;
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	801a      	strh	r2, [r3, #0]
 8002176:	4b03      	ldr	r3, [pc, #12]	; (8002184 <InitStart_2_SignalTimer+0x34>)
 8002178:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800217c:	605a      	str	r2, [r3, #4]
	
	NVIC_EnableIRQ(TIM7_IRQn);	
};
 800217e:	bd08      	pop	{r3, pc}
 8002180:	40001400 	.word	0x40001400
 8002184:	e000e100 	.word	0xe000e100

08002188 <InitClear_Timer>:

void InitClear_Timer()
{
 8002188:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 800218a:	2101      	movs	r1, #1
 800218c:	2010      	movs	r0, #16
 800218e:	f7ff f825 	bl	80011dc <RCC_APB1PeriphClockCmd>
	
	TIM6->PSC = 21000;
 8002192:	480a      	ldr	r0, [pc, #40]	; (80021bc <InitClear_Timer+0x34>)
 8002194:	f245 2308 	movw	r3, #21000	; 0x5208
 8002198:	8503      	strh	r3, [r0, #40]	; 0x28
	TIM6->ARR = 200;
 800219a:	23c8      	movs	r3, #200	; 0xc8
 800219c:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIM6->CNT = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	6243      	str	r3, [r0, #36]	; 0x24
	TIM6->DIER = TIM_DIER_UIE;
 80021a2:	2101      	movs	r1, #1
 80021a4:	8181      	strh	r1, [r0, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 80021a6:	8803      	ldrh	r3, [r0, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	8003      	strh	r3, [r0, #0]
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <InitClear_Timer+0x38>)
 80021ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021b2:	605a      	str	r2, [r3, #4]
	
	NVIC_EnableIRQ(TIM6_DAC_IRQn);	
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 80021b4:	460a      	mov	r2, r1
 80021b6:	f7ff f995 	bl	80014e4 <TIM_ITConfig>
};
 80021ba:	bd08      	pop	{r3, pc}
 80021bc:	40001000 	.word	0x40001000
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <EXTI1_IRQHandler>:

//STOP KEY-BANANA Interrupt handler
//2 SECTION
void EXTI1_IRQHandler()
{
 80021c4:	b508      	push	{r3, lr}
	//if we are not in wait condition then stop the sequenser
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_1)  && 
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <EXTI1_IRQHandler+0x50>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f013 0f02 	tst.w	r3, #2
 80021ce:	d11d      	bne.n	800220c <EXTI1_IRQHandler+0x48>
		(gSequencerMode_2 != SEQUENCER_MODE_WAIT && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <EXTI1_IRQHandler+0x54>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_1)  && 
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d018      	beq.n	800220c <EXTI1_IRQHandler+0x48>
		(gSequencerMode_2 != SEQUENCER_MODE_WAIT && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <EXTI1_IRQHandler+0x54>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d013      	beq.n	800220c <EXTI1_IRQHandler+0x48>
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <EXTI1_IRQHandler+0x54>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d00e      	beq.n	800220c <EXTI1_IRQHandler+0x48>
	) {
		gPrevSequencerMode_2 = SEQUENCER_MODE_RUN;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <EXTI1_IRQHandler+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
		gSequencerMode_2 = SEQUENCER_MODE_STOP;	
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <EXTI1_IRQHandler+0x54>)
 80021f6:	2202      	movs	r2, #2
 80021f8:	701a      	strb	r2, [r3, #0]
		
		//Update both
		DisplayUpdateFlags.b.MainDisplay = 1;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <EXTI1_IRQHandler+0x5c>)
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	f042 0202 	orr.w	r2, r2, #2
 800220a:	701a      	strb	r2, [r3, #0]
	};
	
	EXTI_ClearITPendingBit(EXTI_Line1);
 800220c:	2002      	movs	r0, #2
 800220e:	f7fe ff05 	bl	800101c <EXTI_ClearITPendingBit>
};
 8002212:	bd08      	pop	{r3, pc}
 8002214:	40020400 	.word	0x40020400
 8002218:	200002c2 	.word	0x200002c2
 800221c:	200002be 	.word	0x200002be
 8002220:	200002f0 	.word	0x200002f0

08002224 <EXTI9_5_IRQHandler>:

//START KEY-BANANA Interrupt handler
//1 & 2 SECTION
void EXTI9_5_IRQHandler()
{
 8002224:	b510      	push	{r4, lr}
	//1 Section
	//1 LH

//printf("StartPulse \n");

	if (EXTI->PR & (1<<8)) {	 
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <EXTI9_5_IRQHandler+0x1d0>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800222e:	d01e      	beq.n	800226e <EXTI9_5_IRQHandler+0x4a>
		  
		if((gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z) && (gSequencerMode_1 != SEQUENCER_MODE_WAIT) && (gSequencerMode_1 != SEQUENCER_MODE_RUN))
 8002230:	4b71      	ldr	r3, [pc, #452]	; (80023f8 <EXTI9_5_IRQHandler+0x1d4>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b05      	cmp	r3, #5
 8002238:	d00f      	beq.n	800225a <EXTI9_5_IRQHandler+0x36>
 800223a:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <EXTI9_5_IRQHandler+0x1d4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b04      	cmp	r3, #4
 8002242:	d00a      	beq.n	800225a <EXTI9_5_IRQHandler+0x36>
 8002244:	4b6c      	ldr	r3, [pc, #432]	; (80023f8 <EXTI9_5_IRQHandler+0x1d4>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <EXTI9_5_IRQHandler+0x36>
 800224e:	4b6a      	ldr	r3, [pc, #424]	; (80023f8 <EXTI9_5_IRQHandler+0x1d4>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b113      	cbz	r3, 800225a <EXTI9_5_IRQHandler+0x36>
		{
			gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8002254:	4b68      	ldr	r3, [pc, #416]	; (80023f8 <EXTI9_5_IRQHandler+0x1d4>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
			//gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
		}
		if(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z)
 800225a:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <EXTI9_5_IRQHandler+0x1d4>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b04      	cmp	r3, #4
 8002262:	f000 80a0 	beq.w	80023a6 <EXTI9_5_IRQHandler+0x182>
		{
			InitStart_1_SignalTimer();
		}
		
		EXTI_ClearITPendingBit(EXTI_Line8);
 8002266:	f44f 7080 	mov.w	r0, #256	; 0x100
 800226a:	f7fe fed7 	bl	800101c <EXTI_ClearITPendingBit>
	};
	 
	 //2 Section
	 
	 if (EXTI->PR & (1<<6)) {
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <EXTI9_5_IRQHandler+0x1d0>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002276:	d01c      	beq.n	80022b2 <EXTI9_5_IRQHandler+0x8e>
		 
		 if((gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z) && (gSequencerMode_2 != SEQUENCER_MODE_WAIT) && (gSequencerMode_2 != SEQUENCER_MODE_RUN))
 8002278:	4b60      	ldr	r3, [pc, #384]	; (80023fc <EXTI9_5_IRQHandler+0x1d8>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b05      	cmp	r3, #5
 8002280:	d00f      	beq.n	80022a2 <EXTI9_5_IRQHandler+0x7e>
 8002282:	4b5e      	ldr	r3, [pc, #376]	; (80023fc <EXTI9_5_IRQHandler+0x1d8>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b04      	cmp	r3, #4
 800228a:	d00a      	beq.n	80022a2 <EXTI9_5_IRQHandler+0x7e>
 800228c:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <EXTI9_5_IRQHandler+0x1d8>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d005      	beq.n	80022a2 <EXTI9_5_IRQHandler+0x7e>
 8002296:	4b59      	ldr	r3, [pc, #356]	; (80023fc <EXTI9_5_IRQHandler+0x1d8>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b113      	cbz	r3, 80022a2 <EXTI9_5_IRQHandler+0x7e>
		{
			gSequencerMode_2 = SEQUENCER_MODE_RUN;
 800229c:	4b57      	ldr	r3, [pc, #348]	; (80023fc <EXTI9_5_IRQHandler+0x1d8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
			//gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
		}
		if(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z)
 80022a2:	4b56      	ldr	r3, [pc, #344]	; (80023fc <EXTI9_5_IRQHandler+0x1d8>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d07f      	beq.n	80023ac <EXTI9_5_IRQHandler+0x188>
		{
			InitStart_2_SignalTimer();
		}
		
		EXTI_ClearITPendingBit(EXTI_Line6);
 80022ac:	2040      	movs	r0, #64	; 0x40
 80022ae:	f7fe feb5 	bl	800101c <EXTI_ClearITPendingBit>
	 };
	 
	 //Strobe jack A
	 	if (EXTI->PR & (1<<5)) {
 80022b2:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <EXTI9_5_IRQHandler+0x1d0>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f013 0f20 	tst.w	r3, #32
 80022ba:	d034      	beq.n	8002326 <EXTI9_5_IRQHandler+0x102>
		 
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 80022bc:	4b50      	ldr	r3, [pc, #320]	; (8002400 <EXTI9_5_IRQHandler+0x1dc>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4a4f      	ldr	r2, [pc, #316]	; (8002404 <EXTI9_5_IRQHandler+0x1e0>)
 80022c6:	7013      	strb	r3, [r2, #0]
			
			if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 80022c8:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <EXTI9_5_IRQHandler+0x1e4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b943      	cbnz	r3, 80022e0 <EXTI9_5_IRQHandler+0xbc>
				DisplayUpdateFlags.b.MainDisplay = 1;
 80022ce:	4b4f      	ldr	r3, [pc, #316]	; (800240c <EXTI9_5_IRQHandler+0x1e8>)
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	f042 0202 	orr.w	r2, r2, #2
 80022de:	701a      	strb	r2, [r3, #0]
			};
			
				PULSE_LED_I_ALL_ON;
 80022e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e4:	484a      	ldr	r0, [pc, #296]	; (8002410 <EXTI9_5_IRQHandler+0x1ec>)
 80022e6:	f7fe fef6 	bl	80010d6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <EXTI9_5_IRQHandler+0x1e0>)
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	4b49      	ldr	r3, [pc, #292]	; (8002414 <EXTI9_5_IRQHandler+0x1f0>)
 80022f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80022fa:	d15a      	bne.n	80023b2 <EXTI9_5_IRQHandler+0x18e>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 80022fc:	4b41      	ldr	r3, [pc, #260]	; (8002404 <EXTI9_5_IRQHandler+0x1e0>)
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	4b44      	ldr	r3, [pc, #272]	; (8002414 <EXTI9_5_IRQHandler+0x1f0>)
 8002302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800230c:	d157      	bne.n	80023be <EXTI9_5_IRQHandler+0x19a>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 800230e:	4c42      	ldr	r4, [pc, #264]	; (8002418 <EXTI9_5_IRQHandler+0x1f4>)
 8002310:	2101      	movs	r1, #1
 8002312:	4620      	mov	r0, r4
 8002314:	f7ff f8c6 	bl	80014a4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8002318:	2100      	movs	r1, #0
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff f8b3 	bl	8001486 <TIM_SetCounter>
				
		EXTI_ClearITPendingBit(EXTI_Line5);
 8002320:	2020      	movs	r0, #32
 8002322:	f7fe fe7b 	bl	800101c <EXTI_ClearITPendingBit>
	 };
		
	 	 //Strobe jack B
	 	if (EXTI->PR & (1<<7)) {
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <EXTI9_5_IRQHandler+0x1d0>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800232e:	d030      	beq.n	8002392 <EXTI9_5_IRQHandler+0x16e>
		 
		gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <EXTI9_5_IRQHandler+0x1dc>)
 8002332:	785b      	ldrb	r3, [r3, #1]
 8002334:	3b01      	subs	r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4a38      	ldr	r2, [pc, #224]	; (800241c <EXTI9_5_IRQHandler+0x1f8>)
 800233a:	7013      	strb	r3, [r2, #0]
		if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <EXTI9_5_IRQHandler+0x1e4>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d041      	beq.n	80023ca <EXTI9_5_IRQHandler+0x1a6>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};
			
				PULSE_LED_II_ALL_ON;
 8002346:	2104      	movs	r1, #4
 8002348:	4835      	ldr	r0, [pc, #212]	; (8002420 <EXTI9_5_IRQHandler+0x1fc>)
 800234a:	f7fe fec4 	bl	80010d6 <GPIO_ResetBits>
				
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 800234e:	4b33      	ldr	r3, [pc, #204]	; (800241c <EXTI9_5_IRQHandler+0x1f8>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f103 0220 	add.w	r2, r3, #32
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <EXTI9_5_IRQHandler+0x1f0>)
 8002358:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002362:	d13c      	bne.n	80023de <EXTI9_5_IRQHandler+0x1ba>
					PULSE_LED_II_1_ON;
				};
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8002364:	4b2d      	ldr	r3, [pc, #180]	; (800241c <EXTI9_5_IRQHandler+0x1f8>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f103 0220 	add.w	r2, r3, #32
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <EXTI9_5_IRQHandler+0x1f0>)
 800236e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002378:	d136      	bne.n	80023e8 <EXTI9_5_IRQHandler+0x1c4>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 800237a:	4c2a      	ldr	r4, [pc, #168]	; (8002424 <EXTI9_5_IRQHandler+0x200>)
 800237c:	2101      	movs	r1, #1
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff f890 	bl	80014a4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8002384:	2100      	movs	r1, #0
 8002386:	4620      	mov	r0, r4
 8002388:	f7ff f87d 	bl	8001486 <TIM_SetCounter>
				
		EXTI_ClearITPendingBit(EXTI_Line7);
 800238c:	2080      	movs	r0, #128	; 0x80
 800238e:	f7fe fe45 	bl	800101c <EXTI_ClearITPendingBit>
	 };
	 
	DisplayUpdateFlags.b.MainDisplay = 1;
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <EXTI9_5_IRQHandler+0x1e8>)
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.StepsDisplay = 1;	 
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	f042 0202 	orr.w	r2, r2, #2
 80023a2:	701a      	strb	r2, [r3, #0]
};
 80023a4:	bd10      	pop	{r4, pc}
			InitStart_1_SignalTimer();
 80023a6:	f7ff feb7 	bl	8002118 <InitStart_1_SignalTimer>
 80023aa:	e75c      	b.n	8002266 <EXTI9_5_IRQHandler+0x42>
			InitStart_2_SignalTimer();
 80023ac:	f7ff fed0 	bl	8002150 <InitStart_2_SignalTimer>
 80023b0:	e77c      	b.n	80022ac <EXTI9_5_IRQHandler+0x88>
					PULSE_LED_I_1_ON;
 80023b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023b6:	4816      	ldr	r0, [pc, #88]	; (8002410 <EXTI9_5_IRQHandler+0x1ec>)
 80023b8:	f7fe fe8d 	bl	80010d6 <GPIO_ResetBits>
 80023bc:	e79e      	b.n	80022fc <EXTI9_5_IRQHandler+0xd8>
					PULSE_LED_I_2_ON;
 80023be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023c2:	4813      	ldr	r0, [pc, #76]	; (8002410 <EXTI9_5_IRQHandler+0x1ec>)
 80023c4:	f7fe fe87 	bl	80010d6 <GPIO_ResetBits>
 80023c8:	e7a1      	b.n	800230e <EXTI9_5_IRQHandler+0xea>
		DisplayUpdateFlags.b.MainDisplay = 1;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <EXTI9_5_IRQHandler+0x1e8>)
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	f042 0202 	orr.w	r2, r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e7b3      	b.n	8002346 <EXTI9_5_IRQHandler+0x122>
					PULSE_LED_II_1_ON;
 80023de:	2108      	movs	r1, #8
 80023e0:	480f      	ldr	r0, [pc, #60]	; (8002420 <EXTI9_5_IRQHandler+0x1fc>)
 80023e2:	f7fe fe78 	bl	80010d6 <GPIO_ResetBits>
 80023e6:	e7bd      	b.n	8002364 <EXTI9_5_IRQHandler+0x140>
					PULSE_LED_II_2_ON;
 80023e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ec:	480c      	ldr	r0, [pc, #48]	; (8002420 <EXTI9_5_IRQHandler+0x1fc>)
 80023ee:	f7fe fe72 	bl	80010d6 <GPIO_ResetBits>
 80023f2:	e7c2      	b.n	800237a <EXTI9_5_IRQHandler+0x156>
 80023f4:	40013c00 	.word	0x40013c00
 80023f8:	200002c1 	.word	0x200002c1
 80023fc:	200002c2 	.word	0x200002c2
 8002400:	20000274 	.word	0x20000274
 8002404:	200002bf 	.word	0x200002bf
 8002408:	200002b0 	.word	0x200002b0
 800240c:	200002f0 	.word	0x200002f0
 8002410:	40020400 	.word	0x40020400
 8002414:	200008a4 	.word	0x200008a4
 8002418:	40002000 	.word	0x40002000
 800241c:	200002c0 	.word	0x200002c0
 8002420:	40020000 	.word	0x40020000
 8002424:	40010400 	.word	0x40010400

08002428 <SaveSequence>:

/*
	Save current sequence to memory
*/
unsigned char SaveSequence(unsigned char SequenceCell)
{	
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	4604      	mov	r4, r0
	ADCPause();
 800242c:	f7ff fdc4 	bl	8001fb8 <ADCPause>
	if(!Is_Expander_Present())
 8002430:	f7ff fc20 	bl	8001c74 <Is_Expander_Present>
 8002434:	b1b0      	cbz	r0, 8002464 <SaveSequence+0x3c>
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
	}
	else
	{
		CAT25512_write_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 8002436:	3420      	adds	r4, #32
 8002438:	0264      	lsls	r4, r4, #9
 800243a:	b2a4      	uxth	r4, r4
 800243c:	4d17      	ldr	r5, [pc, #92]	; (800249c <SaveSequence+0x74>)
 800243e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002442:	4629      	mov	r1, r5
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff f951 	bl	80016ec <CAT25512_write_block>
		CAT25512_write_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));		
 800244a:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800244e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002452:	18a9      	adds	r1, r5, r2
 8002454:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8002458:	f7ff f948 	bl	80016ec <CAT25512_write_block>
	}
	mADC_init();
 800245c:	f7ff fd00 	bl	8001e60 <mADC_init>
	return 0;
};
 8002460:	2000      	movs	r0, #0
 8002462:	bd70      	pop	{r4, r5, r6, pc}
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 8002464:	4e0e      	ldr	r6, [pc, #56]	; (80024a0 <SaveSequence+0x78>)
 8002466:	7830      	ldrb	r0, [r6, #0]
 8002468:	b2a4      	uxth	r4, r4
 800246a:	4d0c      	ldr	r5, [pc, #48]	; (800249c <SaveSequence+0x74>)
 800246c:	fb00 f004 	mul.w	r0, r0, r4
 8002470:	0240      	lsls	r0, r0, #9
 8002472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002476:	4629      	mov	r1, r5
 8002478:	f400 407e 	and.w	r0, r0, #65024	; 0xfe00
 800247c:	f7ff f936 	bl	80016ec <CAT25512_write_block>
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 8002480:	7830      	ldrb	r0, [r6, #0]
 8002482:	fb00 f004 	mul.w	r0, r0, r4
 8002486:	0240      	lsls	r0, r0, #9
 8002488:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800248c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002490:	18a9      	adds	r1, r5, r2
 8002492:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8002496:	f7ff f929 	bl	80016ec <CAT25512_write_block>
 800249a:	e7df      	b.n	800245c <SaveSequence+0x34>
 800249c:	200008a4 	.word	0x200008a4
 80024a0:	20000270 	.word	0x20000270

080024a4 <LoadSequence>:

//Load a sequence from cell number SequenceCell
void LoadSequence(unsigned char SequenceCell)
{
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	4604      	mov	r4, r0
	unsigned char cnt;

	ADCPause();
 80024a8:	f7ff fd86 	bl	8001fb8 <ADCPause>
	if(!Is_Expander_Present())
 80024ac:	f7ff fbe2 	bl	8001c74 <Is_Expander_Present>
 80024b0:	bb38      	cbnz	r0, 8002502 <LoadSequence+0x5e>
	{
		CAT25512_read_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 80024b2:	4e39      	ldr	r6, [pc, #228]	; (8002598 <LoadSequence+0xf4>)
 80024b4:	7830      	ldrb	r0, [r6, #0]
 80024b6:	b2a4      	uxth	r4, r4
 80024b8:	4d38      	ldr	r5, [pc, #224]	; (800259c <LoadSequence+0xf8>)
 80024ba:	fb00 f004 	mul.w	r0, r0, r4
 80024be:	0240      	lsls	r0, r0, #9
 80024c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c4:	4629      	mov	r1, r5
 80024c6:	f400 407e 	and.w	r0, r0, #65024	; 0xfe00
 80024ca:	f7ff f973 	bl	80017b4 <CAT25512_read_block>
		CAT25512_read_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 80024ce:	7830      	ldrb	r0, [r6, #0]
 80024d0:	fb00 f004 	mul.w	r0, r0, r4
 80024d4:	0240      	lsls	r0, r0, #9
 80024d6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80024da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024de:	18a9      	adds	r1, r5, r2
 80024e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80024e4:	f7ff f966 	bl	80017b4 <CAT25512_read_block>
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
	}
	
	//Block sliders scanning while voltages from slider and preset aren't equal
	if (gDipConfig.b.SAVE_V_LEVEL == 1) {
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <LoadSequence+0xfc>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f013 0f04 	tst.w	r3, #4
 80024f0:	d14f      	bne.n	8002592 <LoadSequence+0xee>
			Steps[1][cnt+16].b.WaitVoltageSlider = 1;
			Steps[1][cnt+16].b.WaitTimeSlider = 1;				
		};		
	};
	
	gSequencerMode_1 = SEQUENCER_MODE_STOP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <LoadSequence+0x100>)
 80024f6:	7013      	strb	r3, [r2, #0]
	gSequencerMode_2 = SEQUENCER_MODE_STOP;
 80024f8:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <LoadSequence+0x104>)
 80024fa:	7013      	strb	r3, [r2, #0]
	
	mADC_init();
 80024fc:	f7ff fcb0 	bl	8001e60 <mADC_init>
};
 8002500:	bd70      	pop	{r4, r5, r6, pc}
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 8002502:	3420      	adds	r4, #32
 8002504:	0264      	lsls	r4, r4, #9
 8002506:	b2a4      	uxth	r4, r4
 8002508:	4d24      	ldr	r5, [pc, #144]	; (800259c <LoadSequence+0xf8>)
 800250a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250e:	4629      	mov	r1, r5
 8002510:	4620      	mov	r0, r4
 8002512:	f7ff f94f 	bl	80017b4 <CAT25512_read_block>
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 8002516:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800251a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251e:	18a9      	adds	r1, r5, r2
 8002520:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8002524:	f7ff f946 	bl	80017b4 <CAT25512_read_block>
 8002528:	e7de      	b.n	80024e8 <LoadSequence+0x44>
			Steps[0][cnt].b.WaitVoltageSlider = 1;
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <LoadSequence+0xf8>)
 800252c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8002530:	6848      	ldr	r0, [r1, #4]
 8002532:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8002536:	6048      	str	r0, [r1, #4]
			Steps[0][cnt].b.WaitTimeSlider = 1;
 8002538:	6848      	ldr	r0, [r1, #4]
 800253a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800253e:	6048      	str	r0, [r1, #4]
			Steps[1][cnt].b.WaitVoltageSlider = 1;
 8002540:	f102 0120 	add.w	r1, r2, #32
 8002544:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002548:	6848      	ldr	r0, [r1, #4]
 800254a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800254e:	6048      	str	r0, [r1, #4]
			Steps[1][cnt].b.WaitTimeSlider = 1;	
 8002550:	6848      	ldr	r0, [r1, #4]
 8002552:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8002556:	6048      	str	r0, [r1, #4]
			Steps[0][cnt+16].b.WaitVoltageSlider = 1;
 8002558:	f102 0110 	add.w	r1, r2, #16
 800255c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002560:	6848      	ldr	r0, [r1, #4]
 8002562:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8002566:	6048      	str	r0, [r1, #4]
			Steps[0][cnt+16].b.WaitTimeSlider = 1;
 8002568:	6848      	ldr	r0, [r1, #4]
 800256a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800256e:	6048      	str	r0, [r1, #4]
			Steps[1][cnt+16].b.WaitVoltageSlider = 1;
 8002570:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8002574:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800257e:	6059      	str	r1, [r3, #4]
			Steps[1][cnt+16].b.WaitTimeSlider = 1;				
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002586:	6059      	str	r1, [r3, #4]
		for(cnt=0; cnt<16; cnt++)
 8002588:	3201      	adds	r2, #1
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	2a0f      	cmp	r2, #15
 800258e:	d9cc      	bls.n	800252a <LoadSequence+0x86>
 8002590:	e7af      	b.n	80024f2 <LoadSequence+0x4e>
 8002592:	2200      	movs	r2, #0
 8002594:	e7fa      	b.n	800258c <LoadSequence+0xe8>
 8002596:	bf00      	nop
 8002598:	20000270 	.word	0x20000270
 800259c:	200008a4 	.word	0x200008a4
 80025a0:	200002e8 	.word	0x200002e8
 80025a4:	200002c1 	.word	0x200002c1
 80025a8:	200002c2 	.word	0x200002c2

080025ac <GetStepWidth>:
	Returns the duration of step number _StepNum in section _Section
*/
	#define EXT_VOLTAGE_STEP_SELECT	1023

unsigned long int GetStepWidth(unsigned char _Section, unsigned char _StepNum)
{
 80025ac:	b082      	sub	sp, #8
	unsigned long int ret_val = 0;
	unsigned long int time_level = 0;
	unsigned char ext_ban_num = 0;

	if (Steps[_Section][_StepNum].b.TimeSource) {
 80025ae:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <GetStepWidth+0x160>)
 80025b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025be:	d04d      	beq.n	800265c <GetStepWidth+0xb0>
		
		//Step time is set externally
		ext_ban_num = Steps[_Section][_StepNum].b.TLevel/EXT_VOLTAGE_STEP_SELECT;
 80025c0:	4613      	mov	r3, r2
 80025c2:	4a52      	ldr	r2, [pc, #328]	; (800270c <GetStepWidth+0x160>)
 80025c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80025c8:	f3c2 320b 	ubfx	r2, r2, #12, #12
 80025cc:	4b50      	ldr	r3, [pc, #320]	; (8002710 <GetStepWidth+0x164>)
 80025ce:	fb83 c302 	smull	ip, r3, r3, r2
 80025d2:	4413      	add	r3, r2
 80025d4:	f3c3 2347 	ubfx	r3, r3, #9, #8
		if(ext_ban_num > 3) ext_ban_num = 3;
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d900      	bls.n	80025de <GetStepWidth+0x32>
 80025dc:	2303      	movs	r3, #3
		
		time_level = AddData[ext_ban_num]*(4095.0f/((float)CalConstants[ext_ban_num]));
 80025de:	4a4d      	ldr	r2, [pc, #308]	; (8002714 <GetStepWidth+0x168>)
 80025e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025e4:	ee07 2a90 	vmov	s15, r2
 80025e8:	4a4b      	ldr	r2, [pc, #300]	; (8002718 <GetStepWidth+0x16c>)
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	ee07 3a10 	vmov	s14, r3
 80025f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80025f6:	ed9f 6a49 	vldr	s12, [pc, #292]	; 800271c <GetStepWidth+0x170>
 80025fa:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80025fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002602:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	} else {
		//Step time is set on panel
		time_level = (Steps[_Section][_StepNum].b.TLevel + 1);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_p03 == 1) {
 800260a:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 800260e:	4a3f      	ldr	r2, [pc, #252]	; (800270c <GetStepWidth+0x160>)
 8002610:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f013 0f40 	tst.w	r3, #64	; 0x40
 800261a:	d12a      	bne.n	8002672 <GetStepWidth+0xc6>
	unsigned long int ret_val = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	9301      	str	r3, [sp, #4]
		ret_val = (unsigned long int) ((((float) time_level * 112)/4095) +8);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_p3 == 1) {
 8002620:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002624:	4a39      	ldr	r2, [pc, #228]	; (800270c <GetStepWidth+0x160>)
 8002626:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002630:	d132      	bne.n	8002698 <GetStepWidth+0xec>
		ret_val = (unsigned long int) ((((float) time_level * 1120)/4095) +80);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_3 == 1) {
 8002632:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002636:	4a35      	ldr	r2, [pc, #212]	; (800270c <GetStepWidth+0x160>)
 8002638:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002642:	d13c      	bne.n	80026be <GetStepWidth+0x112>
		ret_val = (unsigned long int) ((((float) time_level * 11200)/4095) +800);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_30 == 1) {
 8002644:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 8002648:	4830      	ldr	r0, [pc, #192]	; (800270c <GetStepWidth+0x160>)
 800264a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800264e:	684b      	ldr	r3, [r1, #4]
 8002650:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002654:	d146      	bne.n	80026e4 <GetStepWidth+0x138>
		ret_val = (unsigned long int) ((((float) time_level * 112000)/4095) +8000);
	};
	
	return ret_val;
};
 8002656:	9801      	ldr	r0, [sp, #4]
 8002658:	b002      	add	sp, #8
 800265a:	4770      	bx	lr
		time_level = (Steps[_Section][_StepNum].b.TLevel + 1);
 800265c:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002660:	4a2a      	ldr	r2, [pc, #168]	; (800270c <GetStepWidth+0x160>)
 8002662:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002666:	f3c3 330b 	ubfx	r3, r3, #12, #12
 800266a:	3301      	adds	r3, #1
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	e7cb      	b.n	800260a <GetStepWidth+0x5e>
		ret_val = (unsigned long int) ((((float) time_level * 112)/4095) +8);
 8002672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002676:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002720 <GetStepWidth+0x174>
 800267a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800267e:	ed9f 6a27 	vldr	s12, [pc, #156]	; 800271c <GetStepWidth+0x170>
 8002682:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002686:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800268a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800268e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002692:	ed8d 7a01 	vstr	s14, [sp, #4]
 8002696:	e7c3      	b.n	8002620 <GetStepWidth+0x74>
		ret_val = (unsigned long int) ((((float) time_level * 1120)/4095) +80);
 8002698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800269c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002724 <GetStepWidth+0x178>
 80026a0:	ee66 6a87 	vmul.f32	s13, s13, s14
 80026a4:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 800271c <GetStepWidth+0x170>
 80026a8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80026ac:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002728 <GetStepWidth+0x17c>
 80026b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80026b4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80026b8:	ed8d 7a01 	vstr	s14, [sp, #4]
 80026bc:	e7b9      	b.n	8002632 <GetStepWidth+0x86>
		ret_val = (unsigned long int) ((((float) time_level * 11200)/4095) +800);
 80026be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800272c <GetStepWidth+0x180>
 80026c6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80026ca:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800271c <GetStepWidth+0x170>
 80026ce:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80026d2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002730 <GetStepWidth+0x184>
 80026d6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80026da:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80026de:	ed8d 7a01 	vstr	s14, [sp, #4]
 80026e2:	e7af      	b.n	8002644 <GetStepWidth+0x98>
		ret_val = (unsigned long int) ((((float) time_level * 112000)/4095) +8000);
 80026e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002734 <GetStepWidth+0x188>
 80026ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800271c <GetStepWidth+0x170>
 80026f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002738 <GetStepWidth+0x18c>
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002704:	edcd 7a01 	vstr	s15, [sp, #4]
	return ret_val;
 8002708:	e7a5      	b.n	8002656 <GetStepWidth+0xaa>
 800270a:	bf00      	nop
 800270c:	200008a4 	.word	0x200008a4
 8002710:	80200803 	.word	0x80200803
 8002714:	200007f8 	.word	0x200007f8
 8002718:	20000250 	.word	0x20000250
 800271c:	457ff000 	.word	0x457ff000
 8002720:	42e00000 	.word	0x42e00000
 8002724:	448c0000 	.word	0x448c0000
 8002728:	42a00000 	.word	0x42a00000
 800272c:	462f0000 	.word	0x462f0000
 8002730:	44480000 	.word	0x44480000
 8002734:	47dac000 	.word	0x47dac000
 8002738:	45fa0000 	.word	0x45fa0000

0800273c <GetStepVoltage>:
	#define MAX_DAC_VALUE			0xFFF
	#define FULL_RANGE_STEPS	60
	#define QUANTIZE_DIVIDER	MAX_DAC_VALUE/FULL_RANGE_STEPS 
	
unsigned int GetStepVoltage(unsigned char _Section, unsigned char _StepNum)
{
 800273c:	b430      	push	{r4, r5}
	unsigned int ret_val = 0;
	unsigned int voltage_level = 0;
	unsigned char ext_ban_num = 0;

	if (Steps[_Section][_StepNum].b.VoltageSource) {
 800273e:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002742:	4ba0      	ldr	r3, [pc, #640]	; (80029c4 <GetStepVoltage+0x288>)
 8002744:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002748:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800274c:	d051      	beq.n	80027f2 <GetStepVoltage+0xb6>
		//Step voltage is set externally
		ext_ban_num = Steps[_Section][_StepNum].b.VLevel/EXT_VOLTAGE_STEP_SELECT;
 800274e:	4613      	mov	r3, r2
 8002750:	4a9c      	ldr	r2, [pc, #624]	; (80029c4 <GetStepVoltage+0x288>)
 8002752:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002756:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800275a:	4b9b      	ldr	r3, [pc, #620]	; (80029c8 <GetStepVoltage+0x28c>)
 800275c:	fb83 4302 	smull	r4, r3, r3, r2
 8002760:	4413      	add	r3, r2
 8002762:	f3c3 2347 	ubfx	r3, r3, #9, #8
		if(ext_ban_num > 3) ext_ban_num = 3;
 8002766:	2b03      	cmp	r3, #3
 8002768:	d900      	bls.n	800276c <GetStepVoltage+0x30>
 800276a:	2303      	movs	r3, #3
		
		voltage_level = AddData[ext_ban_num]*(4095.0f/((float)CalConstants[ext_ban_num]));
 800276c:	4a97      	ldr	r2, [pc, #604]	; (80029cc <GetStepVoltage+0x290>)
 800276e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002772:	ee07 2a90 	vmov	s15, r2
 8002776:	4a96      	ldr	r2, [pc, #600]	; (80029d0 <GetStepVoltage+0x294>)
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	ee07 3a10 	vmov	s14, r3
 8002780:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002784:	ed9f 6a93 	vldr	s12, [pc, #588]	; 80029d4 <GetStepVoltage+0x298>
 8002788:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800278c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	} else {
		//Step voltage is set on panel
		voltage_level = Steps[_Section][_StepNum].b.VLevel;
	};
	
	if(voltage_level > 4095) voltage_level = 4095;
 8002798:	ee17 3a90 	vmov	r3, s15
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a0:	d301      	bcc.n	80027a6 <GetStepVoltage+0x6a>
 80027a2:	eddf 7a8d 	vldr	s15, [pc, #564]	; 80029d8 <GetStepVoltage+0x29c>

	if (Steps[_Section][_StepNum].b.FullRange) {		
 80027a6:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 80027aa:	4a86      	ldr	r2, [pc, #536]	; (80029c4 <GetStepVoltage+0x288>)
 80027ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027b0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80027b4:	d027      	beq.n	8002806 <GetStepVoltage+0xca>
		ret_val = voltage_level;
		// if quantization mode is on
		if (Steps[_Section][_StepNum].b.Quantize) {
 80027b6:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 80027ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027be:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80027c2:	f000 80fc 	beq.w	80029be <GetStepVoltage+0x282>
		//Calculate the quantized voltage
			ret_val =  (ret_val / (12*divider)) ;
 80027c6:	4b85      	ldr	r3, [pc, #532]	; (80029dc <GetStepVoltage+0x2a0>)
 80027c8:	ed93 7a00 	vldr	s14, [r3]
 80027cc:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80027d0:	ee67 6a26 	vmul.f32	s13, s14, s13
 80027d4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80027d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80027dc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
			ret_val = ret_val * (12*divider);
 80027e0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80027e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80027e8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80027ec:	ee17 3a10 	vmov	r3, s14
 80027f0:	e00a      	b.n	8002808 <GetStepVoltage+0xcc>
		voltage_level = Steps[_Section][_StepNum].b.VLevel;
 80027f2:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 80027f6:	4a73      	ldr	r2, [pc, #460]	; (80029c4 <GetStepVoltage+0x288>)
 80027f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	e7c8      	b.n	8002798 <GetStepVoltage+0x5c>
	unsigned int ret_val = 0;
 8002806:	2300      	movs	r3, #0
		};
	};
	
	if (Steps[_Section][_StepNum].b.Voltage0) {	
 8002808:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800280c:	4c6d      	ldr	r4, [pc, #436]	; (80029c4 <GetStepVoltage+0x288>)
 800280e:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002812:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002816:	d01f      	beq.n	8002858 <GetStepVoltage+0x11c>
		ret_val = (voltage_level/divider);
 8002818:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800281c:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <GetStepVoltage+0x2a0>)
 800281e:	ed93 6a00 	vldr	s12, [r3]
 8002822:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8002826:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800282a:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 800282e:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002832:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002836:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800283a:	d00d      	beq.n	8002858 <GetStepVoltage+0x11c>

			ret_val =  (ret_val / (offset/12)) ;
 800283c:	4d68      	ldr	r5, [pc, #416]	; (80029e0 <GetStepVoltage+0x2a4>)
 800283e:	682a      	ldr	r2, [r5, #0]
 8002840:	4c68      	ldr	r4, [pc, #416]	; (80029e4 <GetStepVoltage+0x2a8>)
 8002842:	fba4 c202 	umull	ip, r2, r4, r2
 8002846:	08d2      	lsrs	r2, r2, #3
 8002848:	fbb3 f3f2 	udiv	r3, r3, r2
			ret_val = ret_val * (offset/12);
 800284c:	682a      	ldr	r2, [r5, #0]
 800284e:	fba4 4202 	umull	r4, r2, r4, r2
 8002852:	08d2      	lsrs	r2, r2, #3
 8002854:	fb03 f302 	mul.w	r3, r3, r2
		};
	};
	
	if (Steps[_Section][_StepNum].b.Voltage2) {		
 8002858:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800285c:	4c59      	ldr	r4, [pc, #356]	; (80029c4 <GetStepVoltage+0x288>)
 800285e:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002862:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002866:	d022      	beq.n	80028ae <GetStepVoltage+0x172>
		ret_val = (voltage_level/divider);
 8002868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286c:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <GetStepVoltage+0x2a0>)
 800286e:	ed93 6a00 	vldr	s12, [r3]
 8002872:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002876:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800287a:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 800287e:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002882:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002886:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800288a:	d00d      	beq.n	80028a8 <GetStepVoltage+0x16c>
			ret_val =  (ret_val / (offset/12)) ;
 800288c:	4a54      	ldr	r2, [pc, #336]	; (80029e0 <GetStepVoltage+0x2a4>)
 800288e:	6814      	ldr	r4, [r2, #0]
 8002890:	4d54      	ldr	r5, [pc, #336]	; (80029e4 <GetStepVoltage+0x2a8>)
 8002892:	fba5 c404 	umull	ip, r4, r5, r4
 8002896:	08e4      	lsrs	r4, r4, #3
 8002898:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	fba5 4202 	umull	r4, r2, r5, r2
 80028a2:	08d2      	lsrs	r2, r2, #3
 80028a4:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset;
 80028a8:	4a4d      	ldr	r2, [pc, #308]	; (80029e0 <GetStepVoltage+0x2a4>)
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4413      	add	r3, r2
	};
	
	if (Steps[_Section][_StepNum].b.Voltage4) {		
 80028ae:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 80028b2:	4c44      	ldr	r4, [pc, #272]	; (80029c4 <GetStepVoltage+0x288>)
 80028b4:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80028b8:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 80028bc:	d023      	beq.n	8002906 <GetStepVoltage+0x1ca>
		ret_val = (voltage_level/divider);
 80028be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c2:	4b46      	ldr	r3, [pc, #280]	; (80029dc <GetStepVoltage+0x2a0>)
 80028c4:	ed93 6a00 	vldr	s12, [r3]
 80028c8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80028cc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80028d0:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 80028d4:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 80028d8:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80028dc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80028e0:	d00d      	beq.n	80028fe <GetStepVoltage+0x1c2>
			ret_val =  (ret_val / (offset/12)) ;
 80028e2:	4a3f      	ldr	r2, [pc, #252]	; (80029e0 <GetStepVoltage+0x2a4>)
 80028e4:	6814      	ldr	r4, [r2, #0]
 80028e6:	4d3f      	ldr	r5, [pc, #252]	; (80029e4 <GetStepVoltage+0x2a8>)
 80028e8:	fba5 c404 	umull	ip, r4, r5, r4
 80028ec:	08e4      	lsrs	r4, r4, #3
 80028ee:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	fba5 4202 	umull	r4, r2, r5, r2
 80028f8:	08d2      	lsrs	r2, r2, #3
 80028fa:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset*2;
 80028fe:	4a38      	ldr	r2, [pc, #224]	; (80029e0 <GetStepVoltage+0x2a4>)
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	};
	
	if (Steps[_Section][_StepNum].b.Voltage6) {		
 8002906:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800290a:	4c2e      	ldr	r4, [pc, #184]	; (80029c4 <GetStepVoltage+0x288>)
 800290c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002910:	2a00      	cmp	r2, #0
 8002912:	da24      	bge.n	800295e <GetStepVoltage+0x222>
		ret_val = (voltage_level/divider);
 8002914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <GetStepVoltage+0x2a0>)
 800291a:	ed93 6a00 	vldr	s12, [r3]
 800291e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002922:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002926:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 800292a:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800292e:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002932:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002936:	d00d      	beq.n	8002954 <GetStepVoltage+0x218>
			ret_val =  (ret_val / (offset/12)) ;
 8002938:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <GetStepVoltage+0x2a4>)
 800293a:	6814      	ldr	r4, [r2, #0]
 800293c:	4d29      	ldr	r5, [pc, #164]	; (80029e4 <GetStepVoltage+0x2a8>)
 800293e:	fba5 c404 	umull	ip, r4, r5, r4
 8002942:	08e4      	lsrs	r4, r4, #3
 8002944:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	fba5 4202 	umull	r4, r2, r5, r2
 800294e:	08d2      	lsrs	r2, r2, #3
 8002950:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset*3;
 8002954:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <GetStepVoltage+0x2a4>)
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800295c:	4413      	add	r3, r2
	};
	
	if (Steps[_Section][_StepNum].b.Voltage8) {		
 800295e:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002962:	4c18      	ldr	r4, [pc, #96]	; (80029c4 <GetStepVoltage+0x288>)
 8002964:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002968:	6852      	ldr	r2, [r2, #4]
 800296a:	f012 0f01 	tst.w	r2, #1
 800296e:	d023      	beq.n	80029b8 <GetStepVoltage+0x27c>
		ret_val = (voltage_level/divider);
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <GetStepVoltage+0x2a0>)
 8002976:	edd3 6a00 	vldr	s13, [r3]
 800297a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800297e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002982:	ee17 3a90 	vmov	r3, s15
		if (Steps[_Section][_StepNum].b.Quantize) {
 8002986:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 800298a:	f854 2031 	ldr.w	r2, [r4, r1, lsl #3]
 800298e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002992:	d00d      	beq.n	80029b0 <GetStepVoltage+0x274>
			ret_val =  (ret_val / (offset/12)) ;
 8002994:	4812      	ldr	r0, [pc, #72]	; (80029e0 <GetStepVoltage+0x2a4>)
 8002996:	6802      	ldr	r2, [r0, #0]
 8002998:	4912      	ldr	r1, [pc, #72]	; (80029e4 <GetStepVoltage+0x2a8>)
 800299a:	fba1 4202 	umull	r4, r2, r1, r2
 800299e:	08d2      	lsrs	r2, r2, #3
 80029a0:	fbb3 f3f2 	udiv	r3, r3, r2
			ret_val = ret_val * (offset/12);
 80029a4:	6800      	ldr	r0, [r0, #0]
 80029a6:	fba1 2000 	umull	r2, r0, r1, r0
 80029aa:	08c0      	lsrs	r0, r0, #3
 80029ac:	fb03 f300 	mul.w	r3, r3, r0
		};
		ret_val +=offset*4;
 80029b0:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <GetStepVoltage+0x2a4>)
 80029b2:	6810      	ldr	r0, [r2, #0]
 80029b4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	};

	return ret_val;
};
 80029b8:	4618      	mov	r0, r3
 80029ba:	bc30      	pop	{r4, r5}
 80029bc:	4770      	bx	lr
		ret_val = voltage_level;
 80029be:	ee17 3a90 	vmov	r3, s15
 80029c2:	e721      	b.n	8002808 <GetStepVoltage+0xcc>
 80029c4:	200008a4 	.word	0x200008a4
 80029c8:	80200803 	.word	0x80200803
 80029cc:	200007f8 	.word	0x200007f8
 80029d0:	20000250 	.word	0x20000250
 80029d4:	457ff000 	.word	0x457ff000
 80029d8:	00000fff 	.word	0x00000fff
 80029dc:	20000898 	.word	0x20000898
 80029e0:	200008a0 	.word	0x200008a0
 80029e4:	aaaaaaab 	.word	0xaaaaaaab

080029e8 <GetNextStep>:
/*
	Calculate the number of next step
	_StepNum - current step number in section _Section
*/
unsigned char GetNextStep(unsigned char _Section, unsigned char _StepNum)
{
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	4605      	mov	r5, r0
 80029ec:	460c      	mov	r4, r1
	unsigned char ret_val = 0;
	unsigned char isLastStage = 0;
	unsigned char tmp=0;
	unsigned char max_step;

	if(Is_Expander_Present()) max_step = 31;
 80029ee:	f7ff f941 	bl	8001c74 <Is_Expander_Present>
 80029f2:	b918      	cbnz	r0, 80029fc <GetNextStep+0x14>
	else 
	{
		max_step = 15;
		if(_StepNum > 15) return 0;
 80029f4:	2c0f      	cmp	r4, #15
 80029f6:	d842      	bhi.n	8002a7e <GetNextStep+0x96>
		max_step = 15;
 80029f8:	210f      	movs	r1, #15
 80029fa:	e000      	b.n	80029fe <GetNextStep+0x16>
	if(Is_Expander_Present()) max_step = 31;
 80029fc:	211f      	movs	r1, #31
	}
	
	isLastStage = Steps[_Section][_StepNum].b.CycleLast;
 80029fe:	462e      	mov	r6, r5
 8002a00:	4627      	mov	r7, r4
 8002a02:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <GetNextStep+0xa0>)
 8002a08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002a0c:	6868      	ldr	r0, [r5, #4]
 8002a0e:	f3c0 1040 	ubfx	r0, r0, #5, #1
	
	if (isLastStage != 0) {      
 8002a12:	bb78      	cbnz	r0, 8002a74 <GetNextStep+0x8c>
	isLastStage = Steps[_Section][_StepNum].b.CycleLast;
 8002a14:	4602      	mov	r2, r0
			  isLastStage = 0;
			};
		};
    } 

    if (isLastStage == 0) {		
 8002a16:	bb9a      	cbnz	r2, 8002a80 <GetNextStep+0x98>
		if ( _StepNum >= max_step ) {
 8002a18:	42a1      	cmp	r1, r4
 8002a1a:	d932      	bls.n	8002a82 <GetNextStep+0x9a>
			ret_val = 0;
		} else {
			ret_val = _StepNum+1;
 8002a1c:	3401      	adds	r4, #1
 8002a1e:	b2e0      	uxtb	r0, r4
 8002a20:	e02e      	b.n	8002a80 <GetNextStep+0x98>
			  if (Steps[_Section][max_step-(tmp-_StepNum)].b.CycleFirst) {
 8002a22:	1bda      	subs	r2, r3, r7
 8002a24:	1a8a      	subs	r2, r1, r2
 8002a26:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8002a2a:	4d17      	ldr	r5, [pc, #92]	; (8002a88 <GetNextStep+0xa0>)
 8002a2c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002a30:	6852      	ldr	r2, [r2, #4]
 8002a32:	f012 0f10 	tst.w	r2, #16
 8002a36:	d115      	bne.n	8002a64 <GetNextStep+0x7c>
			if (tmp == max_step) {
 8002a38:	428b      	cmp	r3, r1
 8002a3a:	d019      	beq.n	8002a70 <GetNextStep+0x88>
		for(tmp = 0; tmp <= max_step; tmp++)
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	428b      	cmp	r3, r1
 8002a42:	d819      	bhi.n	8002a78 <GetNextStep+0x90>
			if (tmp<=_StepNum) {
 8002a44:	42a3      	cmp	r3, r4
 8002a46:	d8ec      	bhi.n	8002a22 <GetNextStep+0x3a>
			  if (Steps[_Section][_StepNum-tmp].b.CycleFirst) {
 8002a48:	1afa      	subs	r2, r7, r3
 8002a4a:	eb02 1546 	add.w	r5, r2, r6, lsl #5
 8002a4e:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <GetNextStep+0xa0>)
 8002a50:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8002a54:	6852      	ldr	r2, [r2, #4]
 8002a56:	f012 0f10 	tst.w	r2, #16
 8002a5a:	d0ed      	beq.n	8002a38 <GetNextStep+0x50>
			    ret_val = _StepNum-tmp;
 8002a5c:	1ae3      	subs	r3, r4, r3
			    break;
 8002a5e:	4602      	mov	r2, r0
			    ret_val = _StepNum-tmp;
 8002a60:	b2d8      	uxtb	r0, r3
			    break;
 8002a62:	e7d8      	b.n	8002a16 <GetNextStep+0x2e>
			    ret_val = max_step-(tmp-_StepNum);
 8002a64:	1ae3      	subs	r3, r4, r3
 8002a66:	fa51 f383 	uxtab	r3, r1, r3
			    break;
 8002a6a:	4602      	mov	r2, r0
			    ret_val = max_step-(tmp-_StepNum);
 8002a6c:	b2d8      	uxtb	r0, r3
			    break;
 8002a6e:	e7d2      	b.n	8002a16 <GetNextStep+0x2e>
			  isLastStage = 0;
 8002a70:	2000      	movs	r0, #0
 8002a72:	e7e3      	b.n	8002a3c <GetNextStep+0x54>
		for(tmp = 0; tmp <= max_step; tmp++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	e7e3      	b.n	8002a40 <GetNextStep+0x58>
 8002a78:	4602      	mov	r2, r0
	unsigned char ret_val = 0;
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	e7cb      	b.n	8002a16 <GetNextStep+0x2e>
		if(_StepNum > 15) return 0;
 8002a7e:	2000      	movs	r0, #0
	};
	/* ENDOF: Ã�â€¢Ã‘ï¿½Ã�Â»Ã�Â¸ Ã‘Ë†Ã�Â°Ã�Â³ Ã�Â·Ã�Â°Ã�ÂºÃ�Â¾Ã�Â½Ã‘â€¡Ã�Â¸Ã�Â»Ã‘ï¿½Ã‘ï¿½ - Ã�Â¿Ã�ÂµÃ‘â‚¬Ã�ÂµÃ‘â€¦Ã�Â¾Ã�Â´Ã�Â¸Ã�Â¼ Ã�Â½Ã�Â° Ã‘ï¿½Ã�Â»Ã�ÂµÃ�Â´Ã‘Æ’Ã‘Å½Ã‘â€°Ã�Â¸Ã�Â¹ */

    //printf("GetNextStepReturnValue: %i \n", ret_val);
    return ret_val;
};
 8002a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ret_val = 0;
 8002a82:	4610      	mov	r0, r2
 8002a84:	e7fc      	b.n	8002a80 <GetNextStep+0x98>
 8002a86:	bf00      	nop
 8002a88:	200008a4 	.word	0x200008a4
 8002a8c:	00000000 	.word	0x00000000

08002a90 <TIM4_IRQHandler>:

/*
	Timer interrupt handler for 1 section steps
*/
void TIM4_IRQHandler()
{
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float deltaVoltage;
	unsigned long CurStep;
	
	
	/* Clear interrupt flag */
	TIM4->SR = (uint16_t) ~TIM_IT_Update;
 8002a92:	4e77      	ldr	r6, [pc, #476]	; (8002c70 <TIM4_IRQHandler+0x1e0>)
 8002a94:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002a98:	8233      	strh	r3, [r6, #16]

	/* Calculate next step duration */		
	StepWidth_1 = GetStepWidth(0, gSequenceStepNumber_1);
 8002a9a:	4d76      	ldr	r5, [pc, #472]	; (8002c74 <TIM4_IRQHandler+0x1e4>)
 8002a9c:	7829      	ldrb	r1, [r5, #0]
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7ff fd84 	bl	80025ac <GetStepWidth>
 8002aa4:	4604      	mov	r4, r0
					
					
		/* Calculate prescaler/multiplier*/
		TIM4->PSC = (uint16_t) ((((((float) AddData[ADC_TIMEMULTIPLY_Ch_1])*3.5f)/CalConstants[ADC_TIMEMULTIPLY_Ch_1])+0.5f)*STEP_TIMER_PRESCALER);
 8002aa6:	4b74      	ldr	r3, [pc, #464]	; (8002c78 <TIM4_IRQHandler+0x1e8>)
 8002aa8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002aac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ab0:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8002ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab8:	4b70      	ldr	r3, [pc, #448]	; (8002c7c <TIM4_IRQHandler+0x1ec>)
 8002aba:	edd3 6a04 	vldr	s13, [r3, #16]
 8002abe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ace:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002c80 <TIM4_IRQHandler+0x1f0>
 8002ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ada:	ee17 3a90 	vmov	r3, s15
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8533      	strh	r3, [r6, #40]	; 0x28
		

		if (Steps[0][gSequenceStepNumber_1].b.Sloped) {
 8002ae2:	782b      	ldrb	r3, [r5, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4a67      	ldr	r2, [pc, #412]	; (8002c84 <TIM4_IRQHandler+0x1f4>)
 8002ae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002aec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002af0:	d05c      	beq.n	8002bac <TIM4_IRQHandler+0x11c>
			//Calculate the voltage in slope mode
			CurStep = GetStepVoltage(0, gSequenceStepNumber_1);
 8002af2:	7829      	ldrb	r1, [r5, #0]
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7ff fe21 	bl	800273c <GetStepVoltage>
 8002afa:	4605      	mov	r5, r0
			if(gSequencerMode_1 == SEQUENCER_MODE_RUN || gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)
 8002afc:	4b62      	ldr	r3, [pc, #392]	; (8002c88 <TIM4_IRQHandler+0x1f8>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b123      	cbz	r3, 8002b0c <TIM4_IRQHandler+0x7c>
 8002b02:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <TIM4_IRQHandler+0x1f8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d145      	bne.n	8002b98 <TIM4_IRQHandler+0x108>
			{
				if (PreviousStep>CurStep) {
 8002b0c:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <TIM4_IRQHandler+0x1fc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	42ab      	cmp	r3, r5
 8002b12:	d822      	bhi.n	8002b5a <TIM4_IRQHandler+0xca>
					deltaVoltage =  (float) (PreviousStep-CurStep) / StepWidth_1;
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep - (unsigned int) (deltaVoltage*gStepWidth_1) );
				};
				if (CurStep>PreviousStep) {
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <TIM4_IRQHandler+0x1fc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	42ab      	cmp	r3, r5
 8002b1a:	d250      	bcs.n	8002bbe <TIM4_IRQHandler+0x12e>
					deltaVoltage =  (float) (CurStep-PreviousStep) / StepWidth_1;
 8002b1c:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <TIM4_IRQHandler+0x1fc>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	1aad      	subs	r5, r5, r2
 8002b22:	ee07 5a90 	vmov	s15, r5
 8002b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2a:	ee07 4a10 	vmov	s14, r4
 8002b2e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002b32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep + (unsigned int) (deltaVoltage*gStepWidth_1) );
 8002b36:	4a56      	ldr	r2, [pc, #344]	; (8002c90 <TIM4_IRQHandler+0x200>)
 8002b38:	edd2 7a00 	vldr	s15, [r2]
 8002b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b48:	ee17 1a90 	vmov	r1, s15
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4419      	add	r1, r3
 8002b50:	b289      	uxth	r1, r1
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7fe f9ec 	bl	8000f30 <DAC_SetChannel1Data>
 8002b58:	e031      	b.n	8002bbe <TIM4_IRQHandler+0x12e>
					deltaVoltage =  (float) (PreviousStep-CurStep) / StepWidth_1;
 8002b5a:	4a4c      	ldr	r2, [pc, #304]	; (8002c8c <TIM4_IRQHandler+0x1fc>)
 8002b5c:	6813      	ldr	r3, [r2, #0]
 8002b5e:	1b5b      	subs	r3, r3, r5
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b68:	ee07 4a90 	vmov	s15, r4
 8002b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b70:	eec7 6a27 	vdiv.f32	s13, s14, s15
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep - (unsigned int) (deltaVoltage*gStepWidth_1) );
 8002b74:	6811      	ldr	r1, [r2, #0]
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <TIM4_IRQHandler+0x200>)
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b88:	ee17 3a90 	vmov	r3, s15
 8002b8c:	1ac9      	subs	r1, r1, r3
 8002b8e:	b289      	uxth	r1, r1
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe f9cd 	bl	8000f30 <DAC_SetChannel1Data>
 8002b96:	e7bd      	b.n	8002b14 <TIM4_IRQHandler+0x84>
				};
			}			
			else 
			{
				DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <TIM4_IRQHandler+0x1e4>)
 8002b9a:	7819      	ldrb	r1, [r3, #0]
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff fdcd 	bl	800273c <GetStepVoltage>
 8002ba2:	b281      	uxth	r1, r0
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fe f9c3 	bl	8000f30 <DAC_SetChannel1Data>
 8002baa:	e008      	b.n	8002bbe <TIM4_IRQHandler+0x12e>
			}
		} else {
			//Calculate the voltage in not slope mode
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 8002bac:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <TIM4_IRQHandler+0x1e4>)
 8002bae:	7819      	ldrb	r1, [r3, #0]
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7ff fdc3 	bl	800273c <GetStepVoltage>
 8002bb6:	b281      	uxth	r1, r0
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fe f9b9 	bl	8000f30 <DAC_SetChannel1Data>
		};
		
			/*additional channels - ref and time*/
			MAX5135_DAC_send(EXT_DAC_CH_0, Steps[0][gSequenceStepNumber_1].b.TLevel >> 2);
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <TIM4_IRQHandler+0x1e4>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <TIM4_IRQHandler+0x1f4>)
 8002bc6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8002bca:	f3c1 3189 	ubfx	r1, r1, #14, #10
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe ff64 	bl	8001a9c <MAX5135_DAC_send>
			MAX5135_DAC_send(EXT_DAC_CH_1, 1023 - (unsigned int) (((double) 1023/ (double) StepWidth_1)*((double) gStepWidth_1)) );
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f7fd fc39 	bl	800044c <__aeabi_ui2d>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	a122      	add	r1, pc, #136	; (adr r1, 8002c68 <TIM4_IRQHandler+0x1d8>)
 8002be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002be4:	f7fd fdd6 	bl	8000794 <__aeabi_ddiv>
 8002be8:	4606      	mov	r6, r0
 8002bea:	460f      	mov	r7, r1
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <TIM4_IRQHandler+0x200>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	f7fd fc2c 	bl	800044c <__aeabi_ui2d>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	4639      	mov	r1, r7
 8002bfc:	f7fd fca0 	bl	8000540 <__aeabi_dmul>
 8002c00:	f7fd feb0 	bl	8000964 <__aeabi_d2uiz>
 8002c04:	f5c0 717f 	rsb	r1, r0, #1020	; 0x3fc
 8002c08:	3103      	adds	r1, #3
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7fe ff46 	bl	8001a9c <MAX5135_DAC_send>
		
		
		/* Increment step counter */ 
		if ((gSequencerMode_1 == SEQUENCER_MODE_RUN)|| ((gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)))
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <TIM4_IRQHandler+0x1f8>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b123      	cbz	r3, 8002c20 <TIM4_IRQHandler+0x190>
 8002c16:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <TIM4_IRQHandler+0x1f8>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d103      	bne.n	8002c28 <TIM4_IRQHandler+0x198>
		{
			gStepWidth_1++;
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <TIM4_IRQHandler+0x200>)
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	6013      	str	r3, [r2, #0]
		};

		if ((gStepWidth_1 < StepWidth_1)) {
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <TIM4_IRQHandler+0x200>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	42a3      	cmp	r3, r4
 8002c2e:	d235      	bcs.n	8002c9c <TIM4_IRQHandler+0x20c>
								TIM_Cmd(TIM14, ENABLE);
								TIM_SetCounter(TIM14, 0x00);
							};
		};
	
	if (gSequencerMode_1 == SEQUENCER_MODE_WAIT) {
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <TIM4_IRQHandler+0x1f8>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	f000 8188 	beq.w	8002f4c <TIM4_IRQHandler+0x4bc>
			TIM_Cmd(TIM14, ENABLE);
			TIM_SetCounter(TIM14, 0x00);
		}
	};	

	if (gSequencerMode_1 == SEQUENCER_MODE_WAIT_STROBE) {
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <TIM4_IRQHandler+0x1f8>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	f000 81c5 	beq.w	8002fd2 <TIM4_IRQHandler+0x542>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); //(float) AddData[6]/(float) (CalConstants[6]/15.0)
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
		gSequencerMode_1 = gPrevSequencerMode_1;
	}
		
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <TIM4_IRQHandler+0x204>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b943      	cbnz	r3, 8002c60 <TIM4_IRQHandler+0x1d0>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <TIM4_IRQHandler+0x208>)
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	f042 0202 	orr.w	r2, r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
	};		
	
		return;
};
 8002c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	f3af 8000 	nop.w
 8002c68:	00000000 	.word	0x00000000
 8002c6c:	408ff800 	.word	0x408ff800
 8002c70:	40000800 	.word	0x40000800
 8002c74:	200002bf 	.word	0x200002bf
 8002c78:	200007f8 	.word	0x200007f8
 8002c7c:	20000250 	.word	0x20000250
 8002c80:	46241000 	.word	0x46241000
 8002c84:	200008a4 	.word	0x200008a4
 8002c88:	200002c1 	.word	0x200002c1
 8002c8c:	200002a0 	.word	0x200002a0
 8002c90:	200002c4 	.word	0x200002c4
 8002c94:	200002b0 	.word	0x200002b0
 8002c98:	200002f0 	.word	0x200002f0
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
 8002c9c:	4ba2      	ldr	r3, [pc, #648]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002c9e:	7819      	ldrb	r1, [r3, #0]
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7ff fd4b 	bl	800273c <GetStepVoltage>
 8002ca6:	4ba1      	ldr	r3, [pc, #644]	; (8002f2c <TIM4_IRQHandler+0x49c>)
 8002ca8:	6018      	str	r0, [r3, #0]
			if ( (gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)   ) { 
 8002caa:	4ba1      	ldr	r3, [pc, #644]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	f000 8081 	beq.w	8002db8 <TIM4_IRQHandler+0x328>
			if (Steps[0][gSequenceStepNumber_1].b.OpModeSTOP) {
 8002cb6:	4b9c      	ldr	r3, [pc, #624]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	4b9e      	ldr	r3, [pc, #632]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f013 0f02 	tst.w	r3, #2
 8002cc6:	d006      	beq.n	8002cd6 <TIM4_IRQHandler+0x246>
				gPrevSequencerMode_1 = gSequencerMode_1;
 8002cc8:	4a99      	ldr	r2, [pc, #612]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002cca:	7813      	ldrb	r3, [r2, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	499a      	ldr	r1, [pc, #616]	; (8002f38 <TIM4_IRQHandler+0x4a8>)
 8002cd0:	700b      	strb	r3, [r1, #0]
				gSequencerMode_1 = SEQUENCER_MODE_STOP;				
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	7013      	strb	r3, [r2, #0]
			if ((Steps[0][gSequenceStepNumber_1].b.OpModeENABLE))  {
 8002cd6:	4b94      	ldr	r3, [pc, #592]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	4b96      	ldr	r3, [pc, #600]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f013 0f08 	tst.w	r3, #8
 8002ce6:	d16b      	bne.n	8002dc0 <TIM4_IRQHandler+0x330>
			if((Steps[0][gSequenceStepNumber_1].b.OpModeSUSTAIN))  {
 8002ce8:	4b8f      	ldr	r3, [pc, #572]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	4b91      	ldr	r3, [pc, #580]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f013 0f04 	tst.w	r3, #4
 8002cf8:	d176      	bne.n	8002de8 <TIM4_IRQHandler+0x358>
			if ( (!(Steps[0][gSequenceStepNumber_1].b.OpModeSTOP)) &&
 8002cfa:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	4b8d      	ldr	r3, [pc, #564]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002d00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f013 0f02 	tst.w	r3, #2
 8002d0a:	d10e      	bne.n	8002d2a <TIM4_IRQHandler+0x29a>
					(!(Steps[0][gSequenceStepNumber_1].b.OpModeENABLE)) &&
 8002d0c:	4b86      	ldr	r3, [pc, #536]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d16:	685b      	ldr	r3, [r3, #4]
			if ( (!(Steps[0][gSequenceStepNumber_1].b.OpModeSTOP)) &&
 8002d18:	f013 0f08 	tst.w	r3, #8
 8002d1c:	d105      	bne.n	8002d2a <TIM4_IRQHandler+0x29a>
					(!(Steps[0][gSequenceStepNumber_1].b.OpModeSUSTAIN)) ) {
 8002d1e:	4b82      	ldr	r3, [pc, #520]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d28:	685b      	ldr	r3, [r3, #4]
			gStepWidth_1 = 0;
 8002d2a:	4b84      	ldr	r3, [pc, #528]	; (8002f3c <TIM4_IRQHandler+0x4ac>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
			if (gSequencerMode_1 == SEQUENCER_MODE_RUN) {
 8002d30:	4b7f      	ldr	r3, [pc, #508]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d06e      	beq.n	8002e16 <TIM4_IRQHandler+0x386>
		if (gSequencerMode_1 == SEQUENCER_MODE_STOP) {
 8002d38:	4b7d      	ldr	r3, [pc, #500]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	f000 80a7 	beq.w	8002e92 <TIM4_IRQHandler+0x402>
		if (gSequencerMode_1 == SEQUENCER_MODE_ADVANCE) {
 8002d44:	4b7a      	ldr	r3, [pc, #488]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	f47f af70 	bne.w	8002c30 <TIM4_IRQHandler+0x1a0>
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8002d50:	4c75      	ldr	r4, [pc, #468]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002d52:	7821      	ldrb	r1, [r4, #0]
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff fe47 	bl	80029e8 <GetNextStep>
 8002d5a:	7020      	strb	r0, [r4, #0]
						PulseStatus;
 8002d5c:	7821      	ldrb	r1, [r4, #0]
 8002d5e:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	7823      	ldrb	r3, [r4, #0]
 8002d64:	4d73      	ldr	r5, [pc, #460]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002d66:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8002d70:	4873      	ldr	r0, [pc, #460]	; (8002f40 <TIM4_IRQHandler+0x4b0>)
 8002d72:	f003 fa26 	bl	80061c2 <iprintf>
								PULSE_LED_I_ALL_ON;
 8002d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d7a:	4872      	ldr	r0, [pc, #456]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002d7c:	f7fe f9ab 	bl	80010d6 <GPIO_ResetBits>
								if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002d80:	7823      	ldrb	r3, [r4, #0]
 8002d82:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8002d86:	686b      	ldr	r3, [r5, #4]
 8002d88:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002d8c:	f040 80bf 	bne.w	8002f0e <TIM4_IRQHandler+0x47e>
								if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002d90:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002da0:	f040 80bb 	bne.w	8002f1a <TIM4_IRQHandler+0x48a>
								TIM_Cmd(TIM14, ENABLE);
 8002da4:	4c68      	ldr	r4, [pc, #416]	; (8002f48 <TIM4_IRQHandler+0x4b8>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7fe fb7b 	bl	80014a4 <TIM_Cmd>
								TIM_SetCounter(TIM14, 0x00);
 8002dae:	2100      	movs	r1, #0
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7fe fb68 	bl	8001486 <TIM_SetCounter>
 8002db6:	e73b      	b.n	8002c30 <TIM4_IRQHandler+0x1a0>
				gSequencerMode_1 =  SEQUENCER_MODE_STOP;
 8002db8:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002dba:	2202      	movs	r2, #2
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e77a      	b.n	8002cb6 <TIM4_IRQHandler+0x226>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0)) 
 8002dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dc4:	485f      	ldr	r0, [pc, #380]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002dc6:	f7fe f97d 	bl	80010c4 <GPIO_ReadInputDataBit>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d18c      	bne.n	8002ce8 <TIM4_IRQHandler+0x258>
				if(gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z)
 8002dce:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d087      	beq.n	8002ce8 <TIM4_IRQHandler+0x258>
					gPrevSequencerMode_1 = gSequencerMode_1;
 8002dd8:	4a55      	ldr	r2, [pc, #340]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002dda:	7813      	ldrb	r3, [r2, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4956      	ldr	r1, [pc, #344]	; (8002f38 <TIM4_IRQHandler+0x4a8>)
 8002de0:	700b      	strb	r3, [r1, #0]
					gSequencerMode_1 = SEQUENCER_MODE_WAIT_HI_Z;
 8002de2:	2304      	movs	r3, #4
 8002de4:	7013      	strb	r3, [r2, #0]
 8002de6:	e77f      	b.n	8002ce8 <TIM4_IRQHandler+0x258>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1)) 
 8002de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dec:	4855      	ldr	r0, [pc, #340]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002dee:	f7fe f969 	bl	80010c4 <GPIO_ReadInputDataBit>
 8002df2:	2801      	cmp	r0, #1
 8002df4:	d181      	bne.n	8002cfa <TIM4_IRQHandler+0x26a>
					if(gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z)
 8002df6:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	f43f af7c 	beq.w	8002cfa <TIM4_IRQHandler+0x26a>
						gPrevSequencerMode_1 = gSequencerMode_1;
 8002e02:	4a4b      	ldr	r2, [pc, #300]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002e04:	7813      	ldrb	r3, [r2, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	494b      	ldr	r1, [pc, #300]	; (8002f38 <TIM4_IRQHandler+0x4a8>)
 8002e0a:	700b      	strb	r3, [r1, #0]
						gSequencerMode_1 = SEQUENCER_MODE_STAY_HI_Z;
 8002e0c:	2305      	movs	r3, #5
 8002e0e:	7013      	strb	r3, [r2, #0]
						InitStart_1_SignalTimer();
 8002e10:	f7ff f982 	bl	8002118 <InitStart_1_SignalTimer>
 8002e14:	e771      	b.n	8002cfa <TIM4_IRQHandler+0x26a>
				gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8002e16:	4c44      	ldr	r4, [pc, #272]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002e18:	7821      	ldrb	r1, [r4, #0]
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f7ff fde4 	bl	80029e8 <GetNextStep>
 8002e20:	7020      	strb	r0, [r4, #0]
				PulseStatus;
 8002e22:	7821      	ldrb	r1, [r4, #0]
 8002e24:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	7823      	ldrb	r3, [r4, #0]
 8002e2a:	4d42      	ldr	r5, [pc, #264]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002e2c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8002e36:	4842      	ldr	r0, [pc, #264]	; (8002f40 <TIM4_IRQHandler+0x4b0>)
 8002e38:	f003 f9c3 	bl	80061c2 <iprintf>
				PULSE_LED_I_ALL_ON;
 8002e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e40:	4840      	ldr	r0, [pc, #256]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002e42:	f7fe f948 	bl	80010d6 <GPIO_ResetBits>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002e46:	7823      	ldrb	r3, [r4, #0]
 8002e48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8002e4c:	686b      	ldr	r3, [r5, #4]
 8002e4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e52:	d112      	bne.n	8002e7a <TIM4_IRQHandler+0x3ea>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002e54:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002e64:	d10f      	bne.n	8002e86 <TIM4_IRQHandler+0x3f6>
				TIM_Cmd(TIM14, ENABLE);
 8002e66:	4c38      	ldr	r4, [pc, #224]	; (8002f48 <TIM4_IRQHandler+0x4b8>)
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7fe fb1a 	bl	80014a4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8002e70:	2100      	movs	r1, #0
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7fe fb07 	bl	8001486 <TIM_SetCounter>
 8002e78:	e75e      	b.n	8002d38 <TIM4_IRQHandler+0x2a8>
					PULSE_LED_I_1_ON;
 8002e7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e7e:	4831      	ldr	r0, [pc, #196]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002e80:	f7fe f929 	bl	80010d6 <GPIO_ResetBits>
 8002e84:	e7e6      	b.n	8002e54 <TIM4_IRQHandler+0x3c4>
					PULSE_LED_I_2_ON;
 8002e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e8a:	482e      	ldr	r0, [pc, #184]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002e8c:	f7fe f923 	bl	80010d6 <GPIO_ResetBits>
 8002e90:	e7e9      	b.n	8002e66 <TIM4_IRQHandler+0x3d6>
gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8002e92:	4c25      	ldr	r4, [pc, #148]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002e94:	7821      	ldrb	r1, [r4, #0]
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7ff fda6 	bl	80029e8 <GetNextStep>
 8002e9c:	7020      	strb	r0, [r4, #0]
				PulseStatus;
 8002e9e:	7821      	ldrb	r1, [r4, #0]
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <TIM4_IRQHandler+0x4a0>)
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	7823      	ldrb	r3, [r4, #0]
 8002ea6:	4d23      	ldr	r5, [pc, #140]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002ea8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8002eb2:	4823      	ldr	r0, [pc, #140]	; (8002f40 <TIM4_IRQHandler+0x4b0>)
 8002eb4:	f003 f985 	bl	80061c2 <iprintf>
						PULSE_LED_I_ALL_ON;
 8002eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ebc:	4821      	ldr	r0, [pc, #132]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002ebe:	f7fe f90a 	bl	80010d6 <GPIO_ResetBits>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002ec2:	7823      	ldrb	r3, [r4, #0]
 8002ec4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8002ec8:	686b      	ldr	r3, [r5, #4]
 8002eca:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002ece:	d112      	bne.n	8002ef6 <TIM4_IRQHandler+0x466>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <TIM4_IRQHandler+0x498>)
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <TIM4_IRQHandler+0x4a4>)
 8002ed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002ee0:	d10f      	bne.n	8002f02 <TIM4_IRQHandler+0x472>
						TIM_Cmd(TIM14, ENABLE);
 8002ee2:	4c19      	ldr	r4, [pc, #100]	; (8002f48 <TIM4_IRQHandler+0x4b8>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f7fe fadc 	bl	80014a4 <TIM_Cmd>
						TIM_SetCounter(TIM14, 0x00);
 8002eec:	2100      	movs	r1, #0
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7fe fac9 	bl	8001486 <TIM_SetCounter>
 8002ef4:	e726      	b.n	8002d44 <TIM4_IRQHandler+0x2b4>
							PULSE_LED_I_1_ON;
 8002ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002efa:	4812      	ldr	r0, [pc, #72]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002efc:	f7fe f8eb 	bl	80010d6 <GPIO_ResetBits>
 8002f00:	e7e6      	b.n	8002ed0 <TIM4_IRQHandler+0x440>
							PULSE_LED_I_2_ON;
 8002f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f06:	480f      	ldr	r0, [pc, #60]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002f08:	f7fe f8e5 	bl	80010d6 <GPIO_ResetBits>
 8002f0c:	e7e9      	b.n	8002ee2 <TIM4_IRQHandler+0x452>
									PULSE_LED_I_1_ON;
 8002f0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f12:	480c      	ldr	r0, [pc, #48]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002f14:	f7fe f8df 	bl	80010d6 <GPIO_ResetBits>
 8002f18:	e73a      	b.n	8002d90 <TIM4_IRQHandler+0x300>
									PULSE_LED_I_2_ON;
 8002f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f1e:	4809      	ldr	r0, [pc, #36]	; (8002f44 <TIM4_IRQHandler+0x4b4>)
 8002f20:	f7fe f8d9 	bl	80010d6 <GPIO_ResetBits>
 8002f24:	e73e      	b.n	8002da4 <TIM4_IRQHandler+0x314>
 8002f26:	bf00      	nop
 8002f28:	200002bf 	.word	0x200002bf
 8002f2c:	200002a0 	.word	0x200002a0
 8002f30:	200002c1 	.word	0x200002c1
 8002f34:	200008a4 	.word	0x200008a4
 8002f38:	200002bd 	.word	0x200002bd
 8002f3c:	200002c4 	.word	0x200002c4
 8002f40:	08006268 	.word	0x08006268
 8002f44:	40020400 	.word	0x40020400
 8002f48:	40002000 	.word	0x40002000
		if(gSequenceStepNumber_1 != (unsigned int) (pots_step[0]-1))
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <TIM4_IRQHandler+0x56c>)
 8002f4e:	781a      	ldrb	r2, [r3, #0]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <TIM4_IRQHandler+0x570>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f43f ae6f 	beq.w	8002c3c <TIM4_IRQHandler+0x1ac>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); 
 8002f5e:	4b28      	ldr	r3, [pc, #160]	; (8003000 <TIM4_IRQHandler+0x570>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	4c25      	ldr	r4, [pc, #148]	; (8002ffc <TIM4_IRQHandler+0x56c>)
 8002f68:	7023      	strb	r3, [r4, #0]
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 8002f6a:	7821      	ldrb	r1, [r4, #0]
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7ff fbe5 	bl	800273c <GetStepVoltage>
 8002f72:	b281      	uxth	r1, r0
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fd ffdb 	bl	8000f30 <DAC_SetChannel1Data>
			PULSE_LED_I_ALL_ON;
 8002f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f7e:	4821      	ldr	r0, [pc, #132]	; (8003004 <TIM4_IRQHandler+0x574>)
 8002f80:	f7fe f8a9 	bl	80010d6 <GPIO_ResetBits>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002f84:	7822      	ldrb	r2, [r4, #0]
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <TIM4_IRQHandler+0x578>)
 8002f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002f92:	d112      	bne.n	8002fba <TIM4_IRQHandler+0x52a>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <TIM4_IRQHandler+0x56c>)
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <TIM4_IRQHandler+0x578>)
 8002f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002fa4:	d10f      	bne.n	8002fc6 <TIM4_IRQHandler+0x536>
			TIM_Cmd(TIM14, ENABLE);
 8002fa6:	4c19      	ldr	r4, [pc, #100]	; (800300c <TIM4_IRQHandler+0x57c>)
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7fe fa7a 	bl	80014a4 <TIM_Cmd>
			TIM_SetCounter(TIM14, 0x00);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7fe fa67 	bl	8001486 <TIM_SetCounter>
 8002fb8:	e640      	b.n	8002c3c <TIM4_IRQHandler+0x1ac>
				PULSE_LED_I_1_ON;
 8002fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fbe:	4811      	ldr	r0, [pc, #68]	; (8003004 <TIM4_IRQHandler+0x574>)
 8002fc0:	f7fe f889 	bl	80010d6 <GPIO_ResetBits>
 8002fc4:	e7e6      	b.n	8002f94 <TIM4_IRQHandler+0x504>
				PULSE_LED_I_2_ON;
 8002fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fca:	480e      	ldr	r0, [pc, #56]	; (8003004 <TIM4_IRQHandler+0x574>)
 8002fcc:	f7fe f883 	bl	80010d6 <GPIO_ResetBits>
 8002fd0:	e7e9      	b.n	8002fa6 <TIM4_IRQHandler+0x516>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); //(float) AddData[6]/(float) (CalConstants[6]/15.0)
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <TIM4_IRQHandler+0x570>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <TIM4_IRQHandler+0x56c>)
 8002fdc:	7013      	strb	r3, [r2, #0]
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 8002fde:	7811      	ldrb	r1, [r2, #0]
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff fbab 	bl	800273c <GetStepVoltage>
 8002fe6:	b281      	uxth	r1, r0
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd ffa1 	bl	8000f30 <DAC_SetChannel1Data>
		gSequencerMode_1 = gPrevSequencerMode_1;
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <TIM4_IRQHandler+0x580>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	4a07      	ldr	r2, [pc, #28]	; (8003014 <TIM4_IRQHandler+0x584>)
 8002ff6:	7013      	strb	r3, [r2, #0]
 8002ff8:	e626      	b.n	8002c48 <TIM4_IRQHandler+0x1b8>
 8002ffa:	bf00      	nop
 8002ffc:	200002bf 	.word	0x200002bf
 8003000:	20000274 	.word	0x20000274
 8003004:	40020400 	.word	0x40020400
 8003008:	200008a4 	.word	0x200008a4
 800300c:	40002000 	.word	0x40002000
 8003010:	200002bd 	.word	0x200002bd
 8003014:	200002c1 	.word	0x200002c1

08003018 <TIM5_IRQHandler>:

/*
 Timer interrupt handler for 1 section steps
*/
void TIM5_IRQHandler()
{
 8003018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned long int StepWidth_2=0;	
	float deltaVoltage;
	unsigned long CurStep;

	/* Clear interrupt flag */
	TIM5->SR = (uint16_t) ~TIM_IT_Update;
 800301c:	4e76      	ldr	r6, [pc, #472]	; (80031f8 <TIM5_IRQHandler+0x1e0>)
 800301e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003022:	8233      	strh	r3, [r6, #16]
	
	/* Calculate next step duration */	
	
		/* Calculate next step duration */
		StepWidth_2 = GetStepWidth(1, gSequenceStepNumber_2);
 8003024:	4d75      	ldr	r5, [pc, #468]	; (80031fc <TIM5_IRQHandler+0x1e4>)
 8003026:	7829      	ldrb	r1, [r5, #0]
 8003028:	2001      	movs	r0, #1
 800302a:	f7ff fabf 	bl	80025ac <GetStepWidth>
 800302e:	4604      	mov	r4, r0

		/* Calculate prescaler/multiplier*/
		TIM5->PSC = (uint16_t) (((((AddData[ADC_TIMEMULTIPLY_Ch_2])*3.5)/CalConstants[ADC_TIMEMULTIPLY_Ch_2])+0.5)*STEP_TIMER_PRESCALER);
 8003030:	4b73      	ldr	r3, [pc, #460]	; (8003200 <TIM5_IRQHandler+0x1e8>)
 8003032:	6958      	ldr	r0, [r3, #20]
 8003034:	f7fd fa0a 	bl	800044c <__aeabi_ui2d>
 8003038:	2200      	movs	r2, #0
 800303a:	4b72      	ldr	r3, [pc, #456]	; (8003204 <TIM5_IRQHandler+0x1ec>)
 800303c:	f7fd fa80 	bl	8000540 <__aeabi_dmul>
 8003040:	4680      	mov	r8, r0
 8003042:	4689      	mov	r9, r1
 8003044:	4b70      	ldr	r3, [pc, #448]	; (8003208 <TIM5_IRQHandler+0x1f0>)
 8003046:	6958      	ldr	r0, [r3, #20]
 8003048:	f7fd fa00 	bl	800044c <__aeabi_ui2d>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4640      	mov	r0, r8
 8003052:	4649      	mov	r1, r9
 8003054:	f7fd fb9e 	bl	8000794 <__aeabi_ddiv>
 8003058:	2200      	movs	r2, #0
 800305a:	4b6c      	ldr	r3, [pc, #432]	; (800320c <TIM5_IRQHandler+0x1f4>)
 800305c:	f7fd f8ba 	bl	80001d4 <__adddf3>
 8003060:	a361      	add	r3, pc, #388	; (adr r3, 80031e8 <TIM5_IRQHandler+0x1d0>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd fa6b 	bl	8000540 <__aeabi_dmul>
 800306a:	f7fd fc7b 	bl	8000964 <__aeabi_d2uiz>
 800306e:	b280      	uxth	r0, r0
 8003070:	8530      	strh	r0, [r6, #40]	; 0x28
		
		if (Steps[1][gSequenceStepNumber_2].b.Sloped) {
 8003072:	782b      	ldrb	r3, [r5, #0]
 8003074:	3320      	adds	r3, #32
 8003076:	4a66      	ldr	r2, [pc, #408]	; (8003210 <TIM5_IRQHandler+0x1f8>)
 8003078:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800307c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003080:	d05c      	beq.n	800313c <TIM5_IRQHandler+0x124>
			//Calculate the voltage in slope mode
			CurStep = GetStepVoltage(1, gSequenceStepNumber_2);
 8003082:	7829      	ldrb	r1, [r5, #0]
 8003084:	2001      	movs	r0, #1
 8003086:	f7ff fb59 	bl	800273c <GetStepVoltage>
 800308a:	4605      	mov	r5, r0
			if(gSequencerMode_2 == SEQUENCER_MODE_RUN || gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)
 800308c:	4b61      	ldr	r3, [pc, #388]	; (8003214 <TIM5_IRQHandler+0x1fc>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b123      	cbz	r3, 800309c <TIM5_IRQHandler+0x84>
 8003092:	4b60      	ldr	r3, [pc, #384]	; (8003214 <TIM5_IRQHandler+0x1fc>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b06      	cmp	r3, #6
 800309a:	d145      	bne.n	8003128 <TIM5_IRQHandler+0x110>
			{
				if (PreviousStep_2>CurStep) {
 800309c:	4b5e      	ldr	r3, [pc, #376]	; (8003218 <TIM5_IRQHandler+0x200>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	42ab      	cmp	r3, r5
 80030a2:	d822      	bhi.n	80030ea <TIM5_IRQHandler+0xd2>
					deltaVoltage =  (float) (PreviousStep_2-CurStep) / StepWidth_2;
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 - (unsigned int) (deltaVoltage*gStepWidth_2) );
				};
				if (CurStep>PreviousStep_2) {
 80030a4:	4b5c      	ldr	r3, [pc, #368]	; (8003218 <TIM5_IRQHandler+0x200>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	42ab      	cmp	r3, r5
 80030aa:	d250      	bcs.n	800314e <TIM5_IRQHandler+0x136>
					deltaVoltage =  (float) (CurStep-PreviousStep_2) / StepWidth_2;
 80030ac:	4b5a      	ldr	r3, [pc, #360]	; (8003218 <TIM5_IRQHandler+0x200>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	1aad      	subs	r5, r5, r2
 80030b2:	ee07 5a90 	vmov	s15, r5
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	ee07 4a10 	vmov	s14, r4
 80030be:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80030c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 + (unsigned int) (deltaVoltage*gStepWidth_2) );
 80030c6:	4a55      	ldr	r2, [pc, #340]	; (800321c <TIM5_IRQHandler+0x204>)
 80030c8:	edd2 7a00 	vldr	s15, [r2]
 80030cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d8:	ee17 1a90 	vmov	r1, s15
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4419      	add	r1, r3
 80030e0:	b289      	uxth	r1, r1
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7fd ff34 	bl	8000f50 <DAC_SetChannel2Data>
 80030e8:	e031      	b.n	800314e <TIM5_IRQHandler+0x136>
					deltaVoltage =  (float) (PreviousStep_2-CurStep) / StepWidth_2;
 80030ea:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <TIM5_IRQHandler+0x200>)
 80030ec:	6813      	ldr	r3, [r2, #0]
 80030ee:	1b5b      	subs	r3, r3, r5
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030f8:	ee07 4a90 	vmov	s15, r4
 80030fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003100:	eec7 6a27 	vdiv.f32	s13, s14, s15
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 - (unsigned int) (deltaVoltage*gStepWidth_2) );
 8003104:	6811      	ldr	r1, [r2, #0]
 8003106:	4b45      	ldr	r3, [pc, #276]	; (800321c <TIM5_IRQHandler+0x204>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003110:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003118:	ee17 3a90 	vmov	r3, s15
 800311c:	1ac9      	subs	r1, r1, r3
 800311e:	b289      	uxth	r1, r1
 8003120:	2000      	movs	r0, #0
 8003122:	f7fd ff15 	bl	8000f50 <DAC_SetChannel2Data>
 8003126:	e7bd      	b.n	80030a4 <TIM5_IRQHandler+0x8c>
				};	
			}
			else
			{
				DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003128:	4b34      	ldr	r3, [pc, #208]	; (80031fc <TIM5_IRQHandler+0x1e4>)
 800312a:	7819      	ldrb	r1, [r3, #0]
 800312c:	2001      	movs	r0, #1
 800312e:	f7ff fb05 	bl	800273c <GetStepVoltage>
 8003132:	b281      	uxth	r1, r0
 8003134:	2000      	movs	r0, #0
 8003136:	f7fd ff0b 	bl	8000f50 <DAC_SetChannel2Data>
 800313a:	e008      	b.n	800314e <TIM5_IRQHandler+0x136>
			}
			
		} else {
			//Calculate the voltage in not slope mode
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 800313c:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <TIM5_IRQHandler+0x1e4>)
 800313e:	7819      	ldrb	r1, [r3, #0]
 8003140:	2001      	movs	r0, #1
 8003142:	f7ff fafb 	bl	800273c <GetStepVoltage>
 8003146:	b281      	uxth	r1, r0
 8003148:	2000      	movs	r0, #0
 800314a:	f7fd ff01 	bl	8000f50 <DAC_SetChannel2Data>
		};

			MAX5135_DAC_send(EXT_DAC_CH_2, Steps[1][gSequenceStepNumber_2].b.TLevel >> 2);
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <TIM5_IRQHandler+0x1e4>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	3320      	adds	r3, #32
 8003154:	4a2e      	ldr	r2, [pc, #184]	; (8003210 <TIM5_IRQHandler+0x1f8>)
 8003156:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800315a:	f3c1 3189 	ubfx	r1, r1, #14, #10
 800315e:	2002      	movs	r0, #2
 8003160:	f7fe fc9c 	bl	8001a9c <MAX5135_DAC_send>
			MAX5135_DAC_send(EXT_DAC_CH_3, 0x3FF - (unsigned int) (((double) 0x3FF/ (double) StepWidth_2)*((double) gStepWidth_2)) );
 8003164:	4620      	mov	r0, r4
 8003166:	f7fd f971 	bl	800044c <__aeabi_ui2d>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	a120      	add	r1, pc, #128	; (adr r1, 80031f0 <TIM5_IRQHandler+0x1d8>)
 8003170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003174:	f7fd fb0e 	bl	8000794 <__aeabi_ddiv>
 8003178:	4606      	mov	r6, r0
 800317a:	460f      	mov	r7, r1
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <TIM5_IRQHandler+0x204>)
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	f7fd f964 	bl	800044c <__aeabi_ui2d>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4630      	mov	r0, r6
 800318a:	4639      	mov	r1, r7
 800318c:	f7fd f9d8 	bl	8000540 <__aeabi_dmul>
 8003190:	f7fd fbe8 	bl	8000964 <__aeabi_d2uiz>
 8003194:	f5c0 717f 	rsb	r1, r0, #1020	; 0x3fc
 8003198:	3103      	adds	r1, #3
 800319a:	2003      	movs	r0, #3
 800319c:	f7fe fc7e 	bl	8001a9c <MAX5135_DAC_send>

	/* Increment step counter */
		if ((gSequencerMode_2 == SEQUENCER_MODE_RUN ) || ((gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)))
 80031a0:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <TIM5_IRQHandler+0x1fc>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b123      	cbz	r3, 80031b0 <TIM5_IRQHandler+0x198>
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <TIM5_IRQHandler+0x1fc>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d103      	bne.n	80031b8 <TIM5_IRQHandler+0x1a0>
		{
			gStepWidth_2++;
 80031b0:	4a1a      	ldr	r2, [pc, #104]	; (800321c <TIM5_IRQHandler+0x204>)
 80031b2:	6813      	ldr	r3, [r2, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	6013      	str	r3, [r2, #0]
		};

		if ((gStepWidth_2 < StepWidth_2)) {
 80031b8:	4b18      	ldr	r3, [pc, #96]	; (800321c <TIM5_IRQHandler+0x204>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	42a3      	cmp	r3, r4
 80031be:	d231      	bcs.n	8003224 <TIM5_IRQHandler+0x20c>
							TIM_SetCounter(TIM8, 0x00);
			};
		};
	

	if (gSequencerMode_2 == SEQUENCER_MODE_WAIT) {
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <TIM5_IRQHandler+0x1fc>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f000 811f 	beq.w	800340a <TIM5_IRQHandler+0x3f2>
			TIM_Cmd(TIM8, ENABLE);
			TIM_SetCounter(TIM8, 0x00);
		}
	};	
	
		if (gSequencerMode_2 == SEQUENCER_MODE_WAIT_STROBE) {
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <TIM5_IRQHandler+0x1fc>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	f000 815e 	beq.w	8003494 <TIM5_IRQHandler+0x47c>

		gSequencerMode_2 = gPrevSequencerMode_2;
	}
	
	
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <TIM5_IRQHandler+0x208>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	f000 816c 	beq.w	80034bc <TIM5_IRQHandler+0x4a4>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};	
		return;
};
 80031e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031e8:	00000000 	.word	0x00000000
 80031ec:	40c48200 	.word	0x40c48200
 80031f0:	00000000 	.word	0x00000000
 80031f4:	408ff800 	.word	0x408ff800
 80031f8:	40000c00 	.word	0x40000c00
 80031fc:	200002c0 	.word	0x200002c0
 8003200:	200007f8 	.word	0x200007f8
 8003204:	400c0000 	.word	0x400c0000
 8003208:	20000250 	.word	0x20000250
 800320c:	3fe00000 	.word	0x3fe00000
 8003210:	200008a4 	.word	0x200008a4
 8003214:	200002c2 	.word	0x200002c2
 8003218:	200002a4 	.word	0x200002a4
 800321c:	200002c8 	.word	0x200002c8
 8003220:	200002b0 	.word	0x200002b0
			PreviousStep_2 = GetStepVoltage(1, gSequenceStepNumber_2);	
 8003224:	4baa      	ldr	r3, [pc, #680]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 8003226:	7819      	ldrb	r1, [r3, #0]
 8003228:	2001      	movs	r0, #1
 800322a:	f7ff fa87 	bl	800273c <GetStepVoltage>
 800322e:	4ba9      	ldr	r3, [pc, #676]	; (80034d4 <TIM5_IRQHandler+0x4bc>)
 8003230:	6018      	str	r0, [r3, #0]
			if((gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)) { 
 8003232:	4ba9      	ldr	r3, [pc, #676]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b06      	cmp	r3, #6
 800323a:	d07b      	beq.n	8003334 <TIM5_IRQHandler+0x31c>
			if (Steps[1][gSequenceStepNumber_2].b.OpModeSTOP) {
 800323c:	4ba4      	ldr	r3, [pc, #656]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	f103 0220 	add.w	r2, r3, #32
 8003244:	4ba5      	ldr	r3, [pc, #660]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 8003246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f013 0f02 	tst.w	r3, #2
 8003250:	d006      	beq.n	8003260 <TIM5_IRQHandler+0x248>
				gPrevSequencerMode_2 = gSequencerMode_2;
 8003252:	4aa1      	ldr	r2, [pc, #644]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 8003254:	7813      	ldrb	r3, [r2, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	49a1      	ldr	r1, [pc, #644]	; (80034e0 <TIM5_IRQHandler+0x4c8>)
 800325a:	700b      	strb	r3, [r1, #0]
				gSequencerMode_2 = SEQUENCER_MODE_STOP;				
 800325c:	2302      	movs	r3, #2
 800325e:	7013      	strb	r3, [r2, #0]
			if ( (Steps[1][gSequenceStepNumber_2].b.OpModeENABLE))  {
 8003260:	4b9b      	ldr	r3, [pc, #620]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f103 0220 	add.w	r2, r3, #32
 8003268:	4b9c      	ldr	r3, [pc, #624]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 800326a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f013 0f08 	tst.w	r3, #8
 8003274:	d162      	bne.n	800333c <TIM5_IRQHandler+0x324>
			if ( (Steps[1][gSequenceStepNumber_2].b.OpModeSUSTAIN)) {
 8003276:	4b96      	ldr	r3, [pc, #600]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f103 0220 	add.w	r2, r3, #32
 800327e:	4b97      	ldr	r3, [pc, #604]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 8003280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f013 0f04 	tst.w	r3, #4
 800328a:	d16a      	bne.n	8003362 <TIM5_IRQHandler+0x34a>
			if ( (!(Steps[1][gSequenceStepNumber_2].b.OpModeSTOP)) &&
 800328c:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f103 0220 	add.w	r2, r3, #32
 8003294:	4b91      	ldr	r3, [pc, #580]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 8003296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f013 0f02 	tst.w	r3, #2
 80032a0:	d112      	bne.n	80032c8 <TIM5_IRQHandler+0x2b0>
					(!(Steps[1][gSequenceStepNumber_2].b.OpModeENABLE)) &&
 80032a2:	4b8b      	ldr	r3, [pc, #556]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f103 0220 	add.w	r2, r3, #32
 80032aa:	4b8c      	ldr	r3, [pc, #560]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 80032ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032b0:	685b      	ldr	r3, [r3, #4]
			if ( (!(Steps[1][gSequenceStepNumber_2].b.OpModeSTOP)) &&
 80032b2:	f013 0f08 	tst.w	r3, #8
 80032b6:	d107      	bne.n	80032c8 <TIM5_IRQHandler+0x2b0>
					(!(Steps[1][gSequenceStepNumber_2].b.OpModeSUSTAIN)) ) {
 80032b8:	4b85      	ldr	r3, [pc, #532]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	f103 0220 	add.w	r2, r3, #32
 80032c0:	4b86      	ldr	r3, [pc, #536]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 80032c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032c6:	685b      	ldr	r3, [r3, #4]
			gStepWidth_2 = 0;
 80032c8:	4b86      	ldr	r3, [pc, #536]	; (80034e4 <TIM5_IRQHandler+0x4cc>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
			if (gSequencerMode_2 == SEQUENCER_MODE_RUN) {
 80032ce:	4b82      	ldr	r3, [pc, #520]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d05a      	beq.n	800338c <TIM5_IRQHandler+0x374>
			if (gSequencerMode_2 == SEQUENCER_MODE_STOP) {
 80032d6:	4b80      	ldr	r3, [pc, #512]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	f47f af6f 	bne.w	80031c0 <TIM5_IRQHandler+0x1a8>
								gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 80032e2:	4c7b      	ldr	r4, [pc, #492]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 80032e4:	7821      	ldrb	r1, [r4, #0]
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7ff fb7e 	bl	80029e8 <GetNextStep>
 80032ec:	7020      	strb	r0, [r4, #0]
							PULSE_LED_II_ALL_ON;
 80032ee:	2104      	movs	r1, #4
 80032f0:	487d      	ldr	r0, [pc, #500]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 80032f2:	f7fd fef0 	bl	80010d6 <GPIO_ResetBits>
							if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 80032f6:	7823      	ldrb	r3, [r4, #0]
 80032f8:	f103 0220 	add.w	r2, r3, #32
 80032fc:	4b77      	ldr	r3, [pc, #476]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 80032fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003308:	d174      	bne.n	80033f4 <TIM5_IRQHandler+0x3dc>
							if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 800330a:	4b71      	ldr	r3, [pc, #452]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	f103 0220 	add.w	r2, r3, #32
 8003312:	4b72      	ldr	r3, [pc, #456]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 8003314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800331e:	d16e      	bne.n	80033fe <TIM5_IRQHandler+0x3e6>
							TIM_Cmd(TIM8, ENABLE);
 8003320:	4c72      	ldr	r4, [pc, #456]	; (80034ec <TIM5_IRQHandler+0x4d4>)
 8003322:	2101      	movs	r1, #1
 8003324:	4620      	mov	r0, r4
 8003326:	f7fe f8bd 	bl	80014a4 <TIM_Cmd>
							TIM_SetCounter(TIM8, 0x00);
 800332a:	2100      	movs	r1, #0
 800332c:	4620      	mov	r0, r4
 800332e:	f7fe f8aa 	bl	8001486 <TIM_SetCounter>
 8003332:	e745      	b.n	80031c0 <TIM5_IRQHandler+0x1a8>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8003334:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 8003336:	2202      	movs	r2, #2
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e77f      	b.n	800323c <TIM5_IRQHandler+0x224>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0)) 
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	486c      	ldr	r0, [pc, #432]	; (80034f0 <TIM5_IRQHandler+0x4d8>)
 8003340:	f7fd fec0 	bl	80010c4 <GPIO_ReadInputDataBit>
 8003344:	2800      	cmp	r0, #0
 8003346:	d196      	bne.n	8003276 <TIM5_IRQHandler+0x25e>
					if(gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z)
 8003348:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b04      	cmp	r3, #4
 8003350:	d091      	beq.n	8003276 <TIM5_IRQHandler+0x25e>
						gPrevSequencerMode_2 = gSequencerMode_2;
 8003352:	4a61      	ldr	r2, [pc, #388]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 8003354:	7813      	ldrb	r3, [r2, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4961      	ldr	r1, [pc, #388]	; (80034e0 <TIM5_IRQHandler+0x4c8>)
 800335a:	700b      	strb	r3, [r1, #0]
						gSequencerMode_2 = SEQUENCER_MODE_WAIT_HI_Z;
 800335c:	2304      	movs	r3, #4
 800335e:	7013      	strb	r3, [r2, #0]
 8003360:	e789      	b.n	8003276 <TIM5_IRQHandler+0x25e>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1)) 
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	4862      	ldr	r0, [pc, #392]	; (80034f0 <TIM5_IRQHandler+0x4d8>)
 8003366:	f7fd fead 	bl	80010c4 <GPIO_ReadInputDataBit>
 800336a:	2801      	cmp	r0, #1
 800336c:	d18e      	bne.n	800328c <TIM5_IRQHandler+0x274>
					if(gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 800336e:	4b5a      	ldr	r3, [pc, #360]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b05      	cmp	r3, #5
 8003376:	d089      	beq.n	800328c <TIM5_IRQHandler+0x274>
						gPrevSequencerMode_2 = gSequencerMode_2;
 8003378:	4a57      	ldr	r2, [pc, #348]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 800337a:	7813      	ldrb	r3, [r2, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4958      	ldr	r1, [pc, #352]	; (80034e0 <TIM5_IRQHandler+0x4c8>)
 8003380:	700b      	strb	r3, [r1, #0]
						gSequencerMode_2 = SEQUENCER_MODE_STAY_HI_Z;
 8003382:	2305      	movs	r3, #5
 8003384:	7013      	strb	r3, [r2, #0]
						InitStart_2_SignalTimer();
 8003386:	f7fe fee3 	bl	8002150 <InitStart_2_SignalTimer>
 800338a:	e77f      	b.n	800328c <TIM5_IRQHandler+0x274>
					gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 800338c:	4c50      	ldr	r4, [pc, #320]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 800338e:	7821      	ldrb	r1, [r4, #0]
 8003390:	2001      	movs	r0, #1
 8003392:	f7ff fb29 	bl	80029e8 <GetNextStep>
 8003396:	7020      	strb	r0, [r4, #0]
				PULSE_LED_II_ALL_ON;
 8003398:	2104      	movs	r1, #4
 800339a:	4853      	ldr	r0, [pc, #332]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 800339c:	f7fd fe9b 	bl	80010d6 <GPIO_ResetBits>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 80033a0:	7823      	ldrb	r3, [r4, #0]
 80033a2:	f103 0220 	add.w	r2, r3, #32
 80033a6:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 80033a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80033b2:	d114      	bne.n	80033de <TIM5_IRQHandler+0x3c6>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 80033b4:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	f103 0220 	add.w	r2, r3, #32
 80033bc:	4b47      	ldr	r3, [pc, #284]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 80033be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80033c8:	d10e      	bne.n	80033e8 <TIM5_IRQHandler+0x3d0>
				TIM_Cmd(TIM8, ENABLE);
 80033ca:	4c48      	ldr	r4, [pc, #288]	; (80034ec <TIM5_IRQHandler+0x4d4>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7fe f868 	bl	80014a4 <TIM_Cmd>
				TIM_SetCounter(TIM8, 0x00);
 80033d4:	2100      	movs	r1, #0
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7fe f855 	bl	8001486 <TIM_SetCounter>
 80033dc:	e77b      	b.n	80032d6 <TIM5_IRQHandler+0x2be>
					PULSE_LED_II_1_ON;
 80033de:	2108      	movs	r1, #8
 80033e0:	4841      	ldr	r0, [pc, #260]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 80033e2:	f7fd fe78 	bl	80010d6 <GPIO_ResetBits>
 80033e6:	e7e5      	b.n	80033b4 <TIM5_IRQHandler+0x39c>
					PULSE_LED_II_2_ON;
 80033e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033ec:	483e      	ldr	r0, [pc, #248]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 80033ee:	f7fd fe72 	bl	80010d6 <GPIO_ResetBits>
 80033f2:	e7ea      	b.n	80033ca <TIM5_IRQHandler+0x3b2>
								PULSE_LED_II_1_ON;
 80033f4:	2108      	movs	r1, #8
 80033f6:	483c      	ldr	r0, [pc, #240]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 80033f8:	f7fd fe6d 	bl	80010d6 <GPIO_ResetBits>
 80033fc:	e785      	b.n	800330a <TIM5_IRQHandler+0x2f2>
								PULSE_LED_II_2_ON;
 80033fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003402:	4839      	ldr	r0, [pc, #228]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 8003404:	f7fd fe67 	bl	80010d6 <GPIO_ResetBits>
 8003408:	e78a      	b.n	8003320 <TIM5_IRQHandler+0x308>
		if(gSequenceStepNumber_2 != (unsigned int)(pots_step[1]-1))
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	4b38      	ldr	r3, [pc, #224]	; (80034f4 <TIM5_IRQHandler+0x4dc>)
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	3b01      	subs	r3, #1
 8003416:	429a      	cmp	r2, r3
 8003418:	f43f aed8 	beq.w	80031cc <TIM5_IRQHandler+0x1b4>
			gSequenceStepNumber_2 = (unsigned int)(pots_step[1]-1);
 800341c:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <TIM5_IRQHandler+0x4dc>)
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	3b01      	subs	r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4c2a      	ldr	r4, [pc, #168]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 8003426:	7023      	strb	r3, [r4, #0]
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003428:	7821      	ldrb	r1, [r4, #0]
 800342a:	2001      	movs	r0, #1
 800342c:	f7ff f986 	bl	800273c <GetStepVoltage>
 8003430:	b281      	uxth	r1, r0
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fd8c 	bl	8000f50 <DAC_SetChannel2Data>
			PULSE_LED_II_ALL_ON;
 8003438:	2104      	movs	r1, #4
 800343a:	482b      	ldr	r0, [pc, #172]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 800343c:	f7fd fe4b 	bl	80010d6 <GPIO_ResetBits>
			if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8003440:	7823      	ldrb	r3, [r4, #0]
 8003442:	f103 0220 	add.w	r2, r3, #32
 8003446:	4b25      	ldr	r3, [pc, #148]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 8003448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003452:	d114      	bne.n	800347e <TIM5_IRQHandler+0x466>
			if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	f103 0220 	add.w	r2, r3, #32
 800345c:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <TIM5_IRQHandler+0x4c4>)
 800345e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003468:	d10e      	bne.n	8003488 <TIM5_IRQHandler+0x470>
			TIM_Cmd(TIM8, ENABLE);
 800346a:	4c20      	ldr	r4, [pc, #128]	; (80034ec <TIM5_IRQHandler+0x4d4>)
 800346c:	2101      	movs	r1, #1
 800346e:	4620      	mov	r0, r4
 8003470:	f7fe f818 	bl	80014a4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8003474:	2100      	movs	r1, #0
 8003476:	4620      	mov	r0, r4
 8003478:	f7fe f805 	bl	8001486 <TIM_SetCounter>
 800347c:	e6a6      	b.n	80031cc <TIM5_IRQHandler+0x1b4>
				PULSE_LED_II_1_ON;
 800347e:	2108      	movs	r1, #8
 8003480:	4819      	ldr	r0, [pc, #100]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 8003482:	f7fd fe28 	bl	80010d6 <GPIO_ResetBits>
 8003486:	e7e5      	b.n	8003454 <TIM5_IRQHandler+0x43c>
				PULSE_LED_II_2_ON;
 8003488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800348c:	4816      	ldr	r0, [pc, #88]	; (80034e8 <TIM5_IRQHandler+0x4d0>)
 800348e:	f7fd fe22 	bl	80010d6 <GPIO_ResetBits>
 8003492:	e7ea      	b.n	800346a <TIM5_IRQHandler+0x452>
			gSequenceStepNumber_2 = (unsigned int)(pots_step[1]-1);
 8003494:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <TIM5_IRQHandler+0x4dc>)
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	3b01      	subs	r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <TIM5_IRQHandler+0x4b8>)
 800349e:	7013      	strb	r3, [r2, #0]
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 80034a0:	7811      	ldrb	r1, [r2, #0]
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7ff f94a 	bl	800273c <GetStepVoltage>
 80034a8:	b281      	uxth	r1, r0
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fd fd50 	bl	8000f50 <DAC_SetChannel2Data>
		gSequencerMode_2 = gPrevSequencerMode_2;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <TIM5_IRQHandler+0x4c8>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <TIM5_IRQHandler+0x4c0>)
 80034b8:	7013      	strb	r3, [r2, #0]
 80034ba:	e68d      	b.n	80031d8 <TIM5_IRQHandler+0x1c0>
		DisplayUpdateFlags.b.MainDisplay = 1;
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <TIM5_IRQHandler+0x4e0>)
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	f042 0201 	orr.w	r2, r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	f042 0202 	orr.w	r2, r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
		return;
 80034ce:	e689      	b.n	80031e4 <TIM5_IRQHandler+0x1cc>
 80034d0:	200002c0 	.word	0x200002c0
 80034d4:	200002a4 	.word	0x200002a4
 80034d8:	200002c2 	.word	0x200002c2
 80034dc:	200008a4 	.word	0x200008a4
 80034e0:	200002be 	.word	0x200002be
 80034e4:	200002c8 	.word	0x200002c8
 80034e8:	40020000 	.word	0x40020000
 80034ec:	40010400 	.word	0x40010400
 80034f0:	40020400 	.word	0x40020400
 80034f4:	20000274 	.word	0x20000274
 80034f8:	200002f0 	.word	0x200002f0

080034fc <mTimersInit>:

/*
	Init 2 timers to control steps
*/
void mTimersInit(void)
{
 80034fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003500:	b084      	sub	sp, #16
	TIM_TimeBaseInitTypeDef myTimer;
	NVIC_InitTypeDef nvicStructure;
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003502:	2101      	movs	r1, #1
 8003504:	2004      	movs	r0, #4
 8003506:	f7fd fe69 	bl	80011dc <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseStructInit(&myTimer);
 800350a:	a801      	add	r0, sp, #4
 800350c:	f7fd ffb2 	bl	8001474 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = STEP_TIMER_PRESCALER;
 8003510:	f642 1304 	movw	r3, #10500	; 0x2904
 8003514:	f8ad 3004 	strh.w	r3, [sp, #4]
	myTimer.TIM_Period = 1;
 8003518:	2401      	movs	r4, #1
 800351a:	9402      	str	r4, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 800351c:	2500      	movs	r5, #0
 800351e:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 8003522:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM4, &myTimer);	
 8003526:	4f4d      	ldr	r7, [pc, #308]	; (800365c <mTimersInit+0x160>)
 8003528:	a901      	add	r1, sp, #4
 800352a:	4638      	mov	r0, r7
 800352c:	f7fd ff64 	bl	80013f8 <TIM_TimeBaseInit>
	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8003530:	4621      	mov	r1, r4
 8003532:	4638      	mov	r0, r7
 8003534:	f7fd ffa9 	bl	800148a <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM4, ENABLE);
 8003538:	4621      	mov	r1, r4
 800353a:	4638      	mov	r0, r7
 800353c:	f7fd ffb2 	bl	80014a4 <TIM_Cmd>
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8003540:	4621      	mov	r1, r4
 8003542:	2008      	movs	r0, #8
 8003544:	f7fd fe4a 	bl	80011dc <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInit(TIM5, &myTimer);
 8003548:	4e45      	ldr	r6, [pc, #276]	; (8003660 <mTimersInit+0x164>)
 800354a:	a901      	add	r1, sp, #4
 800354c:	4630      	mov	r0, r6
 800354e:	f7fd ff53 	bl	80013f8 <TIM_TimeBaseInit>
	TIM_ARRPreloadConfig(TIM5, ENABLE);
 8003552:	4621      	mov	r1, r4
 8003554:	4630      	mov	r0, r6
 8003556:	f7fd ff98 	bl	800148a <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM5, ENABLE);
 800355a:	4621      	mov	r1, r4
 800355c:	4630      	mov	r0, r6
 800355e:	f7fd ffa1 	bl	80014a4 <TIM_Cmd>
	
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003562:	4622      	mov	r2, r4
 8003564:	4621      	mov	r1, r4
 8003566:	4638      	mov	r0, r7
 8003568:	f7fd ffbc 	bl	80014e4 <TIM_ITConfig>
	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 800356c:	4622      	mov	r2, r4
 800356e:	4621      	mov	r1, r4
 8003570:	4630      	mov	r0, r6
 8003572:	f7fd ffb7 	bl	80014e4 <TIM_ITConfig>
	
	
	
	nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8003576:	231e      	movs	r3, #30
 8003578:	f88d 3000 	strb.w	r3, [sp]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800357c:	f88d 5001 	strb.w	r5, [sp, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003580:	f88d 5002 	strb.w	r5, [sp, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003584:	f88d 4003 	strb.w	r4, [sp, #3]
	NVIC_Init(&nvicStructure);
 8003588:	4668      	mov	r0, sp
 800358a:	f7fd fbc3 	bl	8000d14 <NVIC_Init>
	
	nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 800358e:	2332      	movs	r3, #50	; 0x32
 8003590:	f88d 3000 	strb.w	r3, [sp]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003594:	f88d 5001 	strb.w	r5, [sp, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003598:	f88d 5002 	strb.w	r5, [sp, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 800359c:	f88d 4003 	strb.w	r4, [sp, #3]
	NVIC_Init(&nvicStructure);
 80035a0:	4668      	mov	r0, sp
 80035a2:	f7fd fbb7 	bl	8000d14 <NVIC_Init>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80035a6:	4e2f      	ldr	r6, [pc, #188]	; (8003664 <mTimersInit+0x168>)
 80035a8:	f886 531e 	strb.w	r5, [r6, #798]	; 0x31e
 80035ac:	f886 5332 	strb.w	r5, [r6, #818]	; 0x332
	
	NVIC_SetPriority (TIM4_IRQn, 0);
	NVIC_SetPriority (TIM5_IRQn, 0);
	
	SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup_0;
 80035b0:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <mTimersInit+0x16c>)
 80035b2:	4a2e      	ldr	r2, [pc, #184]	; (800366c <mTimersInit+0x170>)
 80035b4:	60da      	str	r2, [r3, #12]
	
	gStepWidth_1 = 8;
 80035b6:	2308      	movs	r3, #8
 80035b8:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <mTimersInit+0x174>)
 80035ba:	6013      	str	r3, [r2, #0]
	gStepWidth_2 = 8;
 80035bc:	4a2d      	ldr	r2, [pc, #180]	; (8003674 <mTimersInit+0x178>)
 80035be:	6013      	str	r3, [r2, #0]
	gFullStepWidth_1 = 8;
 80035c0:	4a2d      	ldr	r2, [pc, #180]	; (8003678 <mTimersInit+0x17c>)
 80035c2:	6013      	str	r3, [r2, #0]
	gFullStepWidth_2 = 8;
 80035c4:	4a2d      	ldr	r2, [pc, #180]	; (800367c <mTimersInit+0x180>)
 80035c6:	6013      	str	r3, [r2, #0]
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 80035c8:	4621      	mov	r1, r4
 80035ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035ce:	f7fd fe05 	bl	80011dc <RCC_APB1PeriphClockCmd>
	
	TIM_TimeBaseStructInit(&myTimer);
 80035d2:	a801      	add	r0, sp, #4
 80035d4:	f7fd ff4e 	bl	8001474 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = 210;
 80035d8:	f04f 08d2 	mov.w	r8, #210	; 0xd2
 80035dc:	f8ad 8004 	strh.w	r8, [sp, #4]
	myTimer.TIM_Period = 320;
 80035e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80035e4:	9302      	str	r3, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 80035e6:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 80035ea:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM14, &myTimer);	
 80035ee:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
 80035f2:	a901      	add	r1, sp, #4
 80035f4:	4638      	mov	r0, r7
 80035f6:	f7fd feff 	bl	80013f8 <TIM_TimeBaseInit>
	
	TIM_Cmd(TIM14, DISABLE);
 80035fa:	4629      	mov	r1, r5
 80035fc:	4638      	mov	r0, r7
 80035fe:	f7fd ff51 	bl	80014a4 <TIM_Cmd>
	TIM_ITConfig(TIM14, TIM_IT_Update, ENABLE);
 8003602:	4622      	mov	r2, r4
 8003604:	4621      	mov	r1, r4
 8003606:	4638      	mov	r0, r7
 8003608:	f7fd ff6c 	bl	80014e4 <TIM_ITConfig>
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800360c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003610:	6073      	str	r3, [r6, #4]
	NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8003612:	4621      	mov	r1, r4
 8003614:	2002      	movs	r0, #2
 8003616:	f7fd fdef 	bl	80011f8 <RCC_APB2PeriphClockCmd>
	
	TIM_TimeBaseStructInit(&myTimer);
 800361a:	a801      	add	r0, sp, #4
 800361c:	f7fd ff2a 	bl	8001474 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = 210;
 8003620:	f8ad 8004 	strh.w	r8, [sp, #4]
	myTimer.TIM_Period = 640;// Seq2 pulse duration
 8003624:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003628:	9302      	str	r3, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 800362a:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 800362e:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM8, &myTimer);	
 8003632:	f507 4764 	add.w	r7, r7, #58368	; 0xe400
 8003636:	a901      	add	r1, sp, #4
 8003638:	4638      	mov	r0, r7
 800363a:	f7fd fedd 	bl	80013f8 <TIM_TimeBaseInit>
	
	TIM_Cmd(TIM8, DISABLE);
 800363e:	4629      	mov	r1, r5
 8003640:	4638      	mov	r0, r7
 8003642:	f7fd ff2f 	bl	80014a4 <TIM_Cmd>
	TIM_ITConfig(TIM8, TIM_IT_Update, ENABLE);
 8003646:	4622      	mov	r2, r4
 8003648:	4621      	mov	r1, r4
 800364a:	4638      	mov	r0, r7
 800364c:	f7fd ff4a 	bl	80014e4 <TIM_ITConfig>
 8003650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003654:	6073      	str	r3, [r6, #4]
	NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
	
};
 8003656:	b004      	add	sp, #16
 8003658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800365c:	40000800 	.word	0x40000800
 8003660:	40000c00 	.word	0x40000c00
 8003664:	e000e100 	.word	0xe000e100
 8003668:	e000ed00 	.word	0xe000ed00
 800366c:	05fa0700 	.word	0x05fa0700
 8003670:	200002c4 	.word	0x200002c4
 8003674:	200002c8 	.word	0x200002c8
 8003678:	200002b4 	.word	0x200002b4
 800367c:	200002b8 	.word	0x200002b8

08003680 <TIM8_UP_TIM13_IRQHandler>:

//Turn off pulses
//Section 1
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003680:	b538      	push	{r3, r4, r5, lr}
	if(TIM_GetITStatus(TIM8, TIM_IT_Update) != RESET)
 8003682:	2101      	movs	r1, #1
 8003684:	480e      	ldr	r0, [pc, #56]	; (80036c0 <TIM8_UP_TIM13_IRQHandler+0x40>)
 8003686:	f7fd ff37 	bl	80014f8 <TIM_GetITStatus>
 800368a:	b900      	cbnz	r0, 800368e <TIM8_UP_TIM13_IRQHandler+0xe>
		PULSE_LED_II_ALL_OFF;
		PULSE_LED_II_1_OFF;
		PULSE_LED_II_2_OFF;
		TIM_ClearITPendingBit(TIM8, TIM_IT_Update);
	}		
}
 800368c:	bd38      	pop	{r3, r4, r5, pc}
		TIM_Cmd(TIM8, DISABLE);
 800368e:	4d0c      	ldr	r5, [pc, #48]	; (80036c0 <TIM8_UP_TIM13_IRQHandler+0x40>)
 8003690:	2100      	movs	r1, #0
 8003692:	4628      	mov	r0, r5
 8003694:	f7fd ff06 	bl	80014a4 <TIM_Cmd>
		PULSE_LED_II_ALL_OFF;
 8003698:	4c0a      	ldr	r4, [pc, #40]	; (80036c4 <TIM8_UP_TIM13_IRQHandler+0x44>)
 800369a:	2104      	movs	r1, #4
 800369c:	4620      	mov	r0, r4
 800369e:	f7fd fd18 	bl	80010d2 <GPIO_SetBits>
		PULSE_LED_II_1_OFF;
 80036a2:	2108      	movs	r1, #8
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7fd fd14 	bl	80010d2 <GPIO_SetBits>
		PULSE_LED_II_2_OFF;
 80036aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036ae:	4620      	mov	r0, r4
 80036b0:	f7fd fd0f 	bl	80010d2 <GPIO_SetBits>
		TIM_ClearITPendingBit(TIM8, TIM_IT_Update);
 80036b4:	2101      	movs	r1, #1
 80036b6:	4628      	mov	r0, r5
 80036b8:	f7fd ff2a 	bl	8001510 <TIM_ClearITPendingBit>
}
 80036bc:	e7e6      	b.n	800368c <TIM8_UP_TIM13_IRQHandler+0xc>
 80036be:	bf00      	nop
 80036c0:	40010400 	.word	0x40010400
 80036c4:	40020000 	.word	0x40020000

080036c8 <TIM8_TRG_COM_TIM14_IRQHandler>:

//Section 2
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80036c8:	b538      	push	{r3, r4, r5, lr}
	if(TIM_GetITStatus(TIM14, TIM_IT_Update) != RESET)
 80036ca:	2101      	movs	r1, #1
 80036cc:	480f      	ldr	r0, [pc, #60]	; (800370c <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80036ce:	f7fd ff13 	bl	80014f8 <TIM_GetITStatus>
 80036d2:	b900      	cbnz	r0, 80036d6 <TIM8_TRG_COM_TIM14_IRQHandler+0xe>
		PULSE_LED_I_ALL_OFF;
		PULSE_LED_I_1_OFF;
		PULSE_LED_I_2_OFF;
		TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
	}		
}
 80036d4:	bd38      	pop	{r3, r4, r5, pc}
		TIM_Cmd(TIM14, DISABLE);
 80036d6:	4d0d      	ldr	r5, [pc, #52]	; (800370c <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 80036d8:	2100      	movs	r1, #0
 80036da:	4628      	mov	r0, r5
 80036dc:	f7fd fee2 	bl	80014a4 <TIM_Cmd>
		PULSE_LED_I_ALL_OFF;
 80036e0:	4c0b      	ldr	r4, [pc, #44]	; (8003710 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>)
 80036e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7fd fcf3 	bl	80010d2 <GPIO_SetBits>
		PULSE_LED_I_1_OFF;
 80036ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7fd fcee 	bl	80010d2 <GPIO_SetBits>
		PULSE_LED_I_2_OFF;
 80036f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7fd fce9 	bl	80010d2 <GPIO_SetBits>
		TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
 8003700:	2101      	movs	r1, #1
 8003702:	4628      	mov	r0, r5
 8003704:	f7fd ff04 	bl	8001510 <TIM_ClearITPendingBit>
}
 8003708:	e7e4      	b.n	80036d4 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>
 800370a:	bf00      	nop
 800370c:	40002000 	.word	0x40002000
 8003710:	40020400 	.word	0x40020400

08003714 <TIM3_IRQHandler>:

//Timer Interrupt handler for start switch scan
//Section 1
void TIM3_IRQHandler()
{
 8003714:	b510      	push	{r4, lr}
	TIM3->SR = (uint16_t) ~TIM_IT_Update;	
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <TIM3_IRQHandler+0xb0>)
 8003718:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800371c:	821a      	strh	r2, [r3, #16]
	
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) 
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <TIM3_IRQHandler+0xb4>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b04      	cmp	r3, #4
 8003726:	d00f      	beq.n	8003748 <TIM3_IRQHandler+0x34>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0) ) {
	}
	else if((gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <TIM3_IRQHandler+0xb4>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b04      	cmp	r3, #4
 8003730:	d012      	beq.n	8003758 <TIM3_IRQHandler+0x44>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
		TIM3->CR1 &= ~TIM_CR1_CEN;
	}
	
	if((gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) 
 8003732:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <TIM3_IRQHandler+0xb4>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b05      	cmp	r3, #5
 800373a:	d024      	beq.n	8003786 <TIM3_IRQHandler+0x72>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
	{

	}
	else if((gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) 
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <TIM3_IRQHandler+0xb4>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b05      	cmp	r3, #5
 8003744:	d027      	beq.n	8003796 <TIM3_IRQHandler+0x82>
	{
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
		TIM3->CR1 &= ~TIM_CR1_CEN;
	}
};
 8003746:	bd10      	pop	{r4, pc}
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0) ) {
 8003748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800374c:	481f      	ldr	r0, [pc, #124]	; (80037cc <TIM3_IRQHandler+0xb8>)
 800374e:	f7fd fcb9 	bl	80010c4 <GPIO_ReadInputDataBit>
 8003752:	2800      	cmp	r0, #0
 8003754:	d0ed      	beq.n	8003732 <TIM3_IRQHandler+0x1e>
 8003756:	e7e7      	b.n	8003728 <TIM3_IRQHandler+0x14>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
 8003758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800375c:	481b      	ldr	r0, [pc, #108]	; (80037cc <TIM3_IRQHandler+0xb8>)
 800375e:	f7fd fcb1 	bl	80010c4 <GPIO_ReadInputDataBit>
 8003762:	2801      	cmp	r0, #1
 8003764:	d1e5      	bne.n	8003732 <TIM3_IRQHandler+0x1e>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8003766:	2000      	movs	r0, #0
 8003768:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <TIM3_IRQHandler+0xb4>)
 800376a:	7018      	strb	r0, [r3, #0]
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 800376c:	4c18      	ldr	r4, [pc, #96]	; (80037d0 <TIM3_IRQHandler+0xbc>)
 800376e:	7821      	ldrb	r1, [r4, #0]
 8003770:	f7ff f93a 	bl	80029e8 <GetNextStep>
 8003774:	7020      	strb	r0, [r4, #0]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8003776:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <TIM3_IRQHandler+0xb0>)
 8003778:	8813      	ldrh	r3, [r2, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	8013      	strh	r3, [r2, #0]
 8003784:	e7d5      	b.n	8003732 <TIM3_IRQHandler+0x1e>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
 8003786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800378a:	4810      	ldr	r0, [pc, #64]	; (80037cc <TIM3_IRQHandler+0xb8>)
 800378c:	f7fd fc9a 	bl	80010c4 <GPIO_ReadInputDataBit>
 8003790:	2801      	cmp	r0, #1
 8003792:	d1d3      	bne.n	800373c <TIM3_IRQHandler+0x28>
 8003794:	e7d7      	b.n	8003746 <TIM3_IRQHandler+0x32>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0))
 8003796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800379a:	480c      	ldr	r0, [pc, #48]	; (80037cc <TIM3_IRQHandler+0xb8>)
 800379c:	f7fd fc92 	bl	80010c4 <GPIO_ReadInputDataBit>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d1d0      	bne.n	8003746 <TIM3_IRQHandler+0x32>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <TIM3_IRQHandler+0xb4>)
 80037a6:	7018      	strb	r0, [r3, #0]
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 80037a8:	4c09      	ldr	r4, [pc, #36]	; (80037d0 <TIM3_IRQHandler+0xbc>)
 80037aa:	7821      	ldrb	r1, [r4, #0]
 80037ac:	f7ff f91c 	bl	80029e8 <GetNextStep>
 80037b0:	7020      	strb	r0, [r4, #0]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80037b2:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <TIM3_IRQHandler+0xb0>)
 80037b4:	8813      	ldrh	r3, [r2, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	b29b      	uxth	r3, r3
 80037be:	8013      	strh	r3, [r2, #0]
};
 80037c0:	e7c1      	b.n	8003746 <TIM3_IRQHandler+0x32>
 80037c2:	bf00      	nop
 80037c4:	40000400 	.word	0x40000400
 80037c8:	200002c1 	.word	0x200002c1
 80037cc:	40020400 	.word	0x40020400
 80037d0:	200002bf 	.word	0x200002bf

080037d4 <TIM7_IRQHandler>:

//Section 2
void TIM7_IRQHandler()
{
 80037d4:	b510      	push	{r4, lr}
	TIM7->SR = (uint16_t) ~TIM_IT_Update;	
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <TIM7_IRQHandler+0xac>)
 80037d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037dc:	821a      	strh	r2, [r3, #16]
	
	if ( (gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) 
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <TIM7_IRQHandler+0xb0>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d00f      	beq.n	8003808 <TIM7_IRQHandler+0x34>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0) ) {
	}
	else if((gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) 
 80037e8:	4b26      	ldr	r3, [pc, #152]	; (8003884 <TIM7_IRQHandler+0xb0>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d011      	beq.n	8003816 <TIM7_IRQHandler+0x42>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
		TIM7->CR1 &= ~TIM_CR1_CEN;
	}
	
	if((gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) 
 80037f2:	4b24      	ldr	r3, [pc, #144]	; (8003884 <TIM7_IRQHandler+0xb0>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d022      	beq.n	8003842 <TIM7_IRQHandler+0x6e>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
	{
	}
	else if((gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) 
 80037fc:	4b21      	ldr	r3, [pc, #132]	; (8003884 <TIM7_IRQHandler+0xb0>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b05      	cmp	r3, #5
 8003804:	d024      	beq.n	8003850 <TIM7_IRQHandler+0x7c>
	{
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
		TIM7->CR1 &= ~TIM_CR1_CEN;
	}
};
 8003806:	bd10      	pop	{r4, pc}
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0) ) {
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	481f      	ldr	r0, [pc, #124]	; (8003888 <TIM7_IRQHandler+0xb4>)
 800380c:	f7fd fc5a 	bl	80010c4 <GPIO_ReadInputDataBit>
 8003810:	2800      	cmp	r0, #0
 8003812:	d0ee      	beq.n	80037f2 <TIM7_IRQHandler+0x1e>
 8003814:	e7e8      	b.n	80037e8 <TIM7_IRQHandler+0x14>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
 8003816:	2140      	movs	r1, #64	; 0x40
 8003818:	481b      	ldr	r0, [pc, #108]	; (8003888 <TIM7_IRQHandler+0xb4>)
 800381a:	f7fd fc53 	bl	80010c4 <GPIO_ReadInputDataBit>
 800381e:	2801      	cmp	r0, #1
 8003820:	d1e7      	bne.n	80037f2 <TIM7_IRQHandler+0x1e>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8003822:	4b18      	ldr	r3, [pc, #96]	; (8003884 <TIM7_IRQHandler+0xb0>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8003828:	4c18      	ldr	r4, [pc, #96]	; (800388c <TIM7_IRQHandler+0xb8>)
 800382a:	7821      	ldrb	r1, [r4, #0]
 800382c:	f7ff f8dc 	bl	80029e8 <GetNextStep>
 8003830:	7020      	strb	r0, [r4, #0]
		TIM7->CR1 &= ~TIM_CR1_CEN;
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <TIM7_IRQHandler+0xac>)
 8003834:	8813      	ldrh	r3, [r2, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]
 8003840:	e7d7      	b.n	80037f2 <TIM7_IRQHandler+0x1e>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	4810      	ldr	r0, [pc, #64]	; (8003888 <TIM7_IRQHandler+0xb4>)
 8003846:	f7fd fc3d 	bl	80010c4 <GPIO_ReadInputDataBit>
 800384a:	2801      	cmp	r0, #1
 800384c:	d1d6      	bne.n	80037fc <TIM7_IRQHandler+0x28>
 800384e:	e7da      	b.n	8003806 <TIM7_IRQHandler+0x32>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0))
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	480d      	ldr	r0, [pc, #52]	; (8003888 <TIM7_IRQHandler+0xb4>)
 8003854:	f7fd fc36 	bl	80010c4 <GPIO_ReadInputDataBit>
 8003858:	2800      	cmp	r0, #0
 800385a:	d1d4      	bne.n	8003806 <TIM7_IRQHandler+0x32>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <TIM7_IRQHandler+0xb0>)
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8003862:	4c0a      	ldr	r4, [pc, #40]	; (800388c <TIM7_IRQHandler+0xb8>)
 8003864:	7821      	ldrb	r1, [r4, #0]
 8003866:	2001      	movs	r0, #1
 8003868:	f7ff f8be 	bl	80029e8 <GetNextStep>
 800386c:	7020      	strb	r0, [r4, #0]
		TIM7->CR1 &= ~TIM_CR1_CEN;
 800386e:	4a04      	ldr	r2, [pc, #16]	; (8003880 <TIM7_IRQHandler+0xac>)
 8003870:	8813      	ldrh	r3, [r2, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	8013      	strh	r3, [r2, #0]
};
 800387c:	e7c3      	b.n	8003806 <TIM7_IRQHandler+0x32>
 800387e:	bf00      	nop
 8003880:	40001400 	.word	0x40001400
 8003884:	200002c2 	.word	0x200002c2
 8003888:	40020400 	.word	0x40020400
 800388c:	200002c0 	.word	0x200002c0

08003890 <PulsesInit>:

/*
Init GPIO for pulses generation
*/
void PulsesInit()
{
 8003890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003892:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_Pulses;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003894:	2101      	movs	r1, #1
 8003896:	2002      	movs	r0, #2
 8003898:	f7fd fc92 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Pulses, 0, sizeof(GPIO_Pulses));
 800389c:	2700      	movs	r7, #0
 800389e:	f8ad 7006 	strh.w	r7, [sp, #6]
	GPIO_Pulses.GPIO_Pin 		= PULSE_LED_I_ALL|PULSE_LED_I_1|PULSE_LED_I_2;
 80038a2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80038a6:	9300      	str	r3, [sp, #0]
	GPIO_Pulses.GPIO_Mode 	= GPIO_Mode_OUT;
 80038a8:	2401      	movs	r4, #1
 80038aa:	f88d 4004 	strb.w	r4, [sp, #4]
	GPIO_Pulses.GPIO_OType	= GPIO_OType_PP;
	GPIO_Pulses.GPIO_PuPd		= GPIO_PuPd_NOPULL;
	GPIO_Pulses.GPIO_Speed	= GPIO_Speed_100MHz;
 80038ae:	2603      	movs	r6, #3
 80038b0:	f88d 6005 	strb.w	r6, [sp, #5]
	
	GPIO_Init(GPIOB, &GPIO_Pulses);
 80038b4:	4d1a      	ldr	r5, [pc, #104]	; (8003920 <PulsesInit+0x90>)
 80038b6:	4669      	mov	r1, sp
 80038b8:	4628      	mov	r0, r5
 80038ba:	f7fd fbb5 	bl	8001028 <GPIO_Init>
	
	PULSE_LED_I_ALL_OFF;
 80038be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038c2:	4628      	mov	r0, r5
 80038c4:	f7fd fc05 	bl	80010d2 <GPIO_SetBits>
	PULSE_LED_I_1_OFF;
 80038c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038cc:	4628      	mov	r0, r5
 80038ce:	f7fd fc00 	bl	80010d2 <GPIO_SetBits>
	PULSE_LED_I_2_OFF;
 80038d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038d6:	4628      	mov	r0, r5
 80038d8:	f7fd fbfb 	bl	80010d2 <GPIO_SetBits>
		
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80038dc:	4621      	mov	r1, r4
 80038de:	4620      	mov	r0, r4
 80038e0:	f7fd fc6e 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Pulses, 0, sizeof(GPIO_Pulses));
 80038e4:	f8ad 7006 	strh.w	r7, [sp, #6]
	GPIO_Pulses.GPIO_Pin 		= PULSE_LED_II_ALL|PULSE_LED_II_1|PULSE_LED_II_2;
 80038e8:	f241 030c 	movw	r3, #4108	; 0x100c
 80038ec:	9300      	str	r3, [sp, #0]
	GPIO_Pulses.GPIO_Mode 	= GPIO_Mode_OUT;
 80038ee:	f88d 4004 	strb.w	r4, [sp, #4]
	GPIO_Pulses.GPIO_OType	= GPIO_OType_PP;
	GPIO_Pulses.GPIO_PuPd		= GPIO_PuPd_NOPULL;
	GPIO_Pulses.GPIO_Speed	= GPIO_Speed_100MHz;
 80038f2:	f88d 6005 	strb.w	r6, [sp, #5]
	
	GPIO_Init(GPIOA, &GPIO_Pulses);
 80038f6:	4c0b      	ldr	r4, [pc, #44]	; (8003924 <PulsesInit+0x94>)
 80038f8:	4669      	mov	r1, sp
 80038fa:	4620      	mov	r0, r4
 80038fc:	f7fd fb94 	bl	8001028 <GPIO_Init>
	
	PULSE_LED_II_ALL_OFF;
 8003900:	2104      	movs	r1, #4
 8003902:	4620      	mov	r0, r4
 8003904:	f7fd fbe5 	bl	80010d2 <GPIO_SetBits>
	PULSE_LED_II_1_OFF;
 8003908:	2108      	movs	r1, #8
 800390a:	4620      	mov	r0, r4
 800390c:	f7fd fbe1 	bl	80010d2 <GPIO_SetBits>
	PULSE_LED_II_2_OFF;
 8003910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003914:	4620      	mov	r0, r4
 8003916:	f7fd fbdc 	bl	80010d2 <GPIO_SetBits>
};
 800391a:	b003      	add	sp, #12
 800391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391e:	bf00      	nop
 8003920:	40020400 	.word	0x40020400
 8003924:	40020000 	.word	0x40020000

08003928 <DisplayLedsIOInit>:

/*
Init GPIOs for display leds
*/
void DisplayLedsIOInit(void)
{
 8003928:	b500      	push	{lr}
 800392a:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	//Ã�ËœÃ�Â½Ã�Â¸Ã‘â€ Ã�Â¸Ã�Â°Ã�Â»Ã�Â¸Ã�Â·Ã�Â°Ã‘ï¿½ Ã�Â¿Ã�ÂµÃ‘â‚¬Ã�Â¸Ã‘â€žÃ�ÂµÃ‘â‚¬Ã�Â¸Ã�Â¸ Ã�Â´Ã�Â»Ã‘ï¿½ Ã‘Æ’Ã�Â¿Ã‘â‚¬Ã�Â°Ã�Â²Ã�Â»Ã�ÂµÃ�Â½Ã�Â¸Ã‘ï¿½ Ã‘ï¿½Ã�Â²Ã�ÂµÃ‘â€šÃ�Â¾Ã�Â´Ã�Â¸Ã�Â¾Ã�Â´Ã�Â°Ã�Â¼Ã�Â¸ DISPLAY
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800392c:	2101      	movs	r1, #1
 800392e:	4608      	mov	r0, r1
 8003930:	f7fd fc46 	bl	80011c0 <RCC_AHB1PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin 	= DISPLAY_LED_I|DISPLAY_LED_II;
 8003934:	23c0      	movs	r3, #192	; 0xc0
 8003936:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003938:	2303      	movs	r3, #3
 800393a:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 800393e:	2301      	movs	r3, #1
 8003940:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003944:	2300      	movs	r3, #0
 8003946:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800394a:	4669      	mov	r1, sp
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <DisplayLedsIOInit+0x30>)
 800394e:	f7fd fb6b 	bl	8001028 <GPIO_Init>
};
 8003952:	b003      	add	sp, #12
 8003954:	f85d fb04 	ldr.w	pc, [sp], #4
 8003958:	40020000 	.word	0x40020000

0800395c <InternalDACInit>:

/*
 Init internal DAC
*/
void InternalDACInit(void)
{
 800395c:	b510      	push	{r4, lr}
 800395e:	b086      	sub	sp, #24
	DAC_InitTypeDef mDacInit;
	GPIO_InitTypeDef mGPIO_InitStructure;
	
	DAC_StructInit(&mDacInit);
 8003960:	a802      	add	r0, sp, #8
 8003962:	f7fd facb 	bl	8000efc <DAC_StructInit>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003966:	2101      	movs	r1, #1
 8003968:	4608      	mov	r0, r1
 800396a:	f7fd fc29 	bl	80011c0 <RCC_AHB1PeriphClockCmd>

	//GPIOs init
	
	mGPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_4|GPIO_Pin_5;
 800396e:	2330      	movs	r3, #48	; 0x30
 8003970:	9300      	str	r3, [sp, #0]
	mGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003972:	2303      	movs	r3, #3
 8003974:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_Init(GPIOA, &mGPIO_InitStructure);
 8003978:	4669      	mov	r1, sp
 800397a:	4814      	ldr	r0, [pc, #80]	; (80039cc <InternalDACInit+0x70>)
 800397c:	f7fd fb54 	bl	8001028 <GPIO_Init>
		
	/* DAC Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8003980:	2101      	movs	r1, #1
 8003982:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003986:	f7fd fc29 	bl	80011dc <RCC_APB1PeriphClockCmd>
	
	//DAC init
	mDacInit.DAC_Trigger 				= DAC_Trigger_None;
 800398a:	2400      	movs	r4, #0
 800398c:	9402      	str	r4, [sp, #8]
	mDacInit.DAC_OutputBuffer 	= DAC_OutputBuffer_Disable;
 800398e:	2302      	movs	r3, #2
 8003990:	9305      	str	r3, [sp, #20]
	mDacInit.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8003992:	9403      	str	r4, [sp, #12]

	DAC_DeInit();
 8003994:	f7fd fa8d 	bl	8000eb2 <DAC_DeInit>
	
	DAC_Init(DAC_Channel_1, &mDacInit);
 8003998:	a902      	add	r1, sp, #8
 800399a:	4620      	mov	r0, r4
 800399c:	f7fd fa96 	bl	8000ecc <DAC_Init>
	DAC_Init(DAC_Channel_2, &mDacInit);
 80039a0:	a902      	add	r1, sp, #8
 80039a2:	2010      	movs	r0, #16
 80039a4:	f7fd fa92 	bl	8000ecc <DAC_Init>
	
	DAC_Cmd(DAC_Channel_1, ENABLE);
 80039a8:	2101      	movs	r1, #1
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7fd faac 	bl	8000f08 <DAC_Cmd>
	DAC_Cmd(DAC_Channel_2, ENABLE);
 80039b0:	2101      	movs	r1, #1
 80039b2:	2010      	movs	r0, #16
 80039b4:	f7fd faa8 	bl	8000f08 <DAC_Cmd>
	
	DAC_SetChannel1Data(DAC_Align_12b_R, 0);
 80039b8:	4621      	mov	r1, r4
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7fd fab8 	bl	8000f30 <DAC_SetChannel1Data>
	DAC_SetChannel2Data(DAC_Align_12b_R, 0);
 80039c0:	4621      	mov	r1, r4
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7fd fac4 	bl	8000f50 <DAC_SetChannel2Data>
};
 80039c8:	b006      	add	sp, #24
 80039ca:	bd10      	pop	{r4, pc}
 80039cc:	40020000 	.word	0x40020000

080039d0 <keyb_proc>:

/*
	Scan all switches
*/
unsigned char keyb_proc(uButtons * key)
{
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d2:	b083      	sub	sp, #12
 80039d4:	4604      	mov	r4, r0
	unsigned char StepNum = 0, Section = 0, max_step;
	uStep tmpStep;
	
	if(Is_Expander_Present()) max_step = 31;
 80039d6:	f7fe f94d 	bl	8001c74 <Is_Expander_Present>
 80039da:	2800      	cmp	r0, #0
 80039dc:	f000 82d5 	beq.w	8003f8a <keyb_proc+0x5ba>
 80039e0:	261f      	movs	r6, #31
	else max_step = 15;
			 
	/* Determine step num for different DisplayModes */
	if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 80039e2:	4bc6      	ldr	r3, [pc, #792]	; (8003cfc <keyb_proc+0x32c>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 82d1 	bne.w	8003f8e <keyb_proc+0x5be>
		StepNum = gSequenceStepNumber_1;
 80039ec:	4bc4      	ldr	r3, [pc, #784]	; (8003d00 <keyb_proc+0x330>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b2db      	uxtb	r3, r3
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 80039f2:	4ac2      	ldr	r2, [pc, #776]	; (8003cfc <keyb_proc+0x32c>)
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	2a01      	cmp	r2, #1
 80039fa:	f000 82ca 	beq.w	8003f92 <keyb_proc+0x5c2>
 80039fe:	2200      	movs	r2, #0
		StepNum = gSequenceStepNumber_2;
		Section = 1;
	};
	if (gDisplayMode == DISPLAY_MODE_EDIT_1) {
 8003a00:	49be      	ldr	r1, [pc, #760]	; (8003cfc <keyb_proc+0x32c>)
 8003a02:	7809      	ldrb	r1, [r1, #0]
 8003a04:	b2c9      	uxtb	r1, r1
 8003a06:	2902      	cmp	r1, #2
 8003a08:	f000 82c7 	beq.w	8003f9a <keyb_proc+0x5ca>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_EDIT_2) {
 8003a0c:	49bb      	ldr	r1, [pc, #748]	; (8003cfc <keyb_proc+0x32c>)
 8003a0e:	7809      	ldrb	r1, [r1, #0]
 8003a10:	b2c9      	uxtb	r1, r1
 8003a12:	2903      	cmp	r1, #3
 8003a14:	f000 82c5 	beq.w	8003fa2 <keyb_proc+0x5d2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	
	if (gDisplayMode == DISPLAY_MODE_SAVE_1) {
 8003a18:	49b8      	ldr	r1, [pc, #736]	; (8003cfc <keyb_proc+0x32c>)
 8003a1a:	7809      	ldrb	r1, [r1, #0]
 8003a1c:	b2c9      	uxtb	r1, r1
 8003a1e:	2904      	cmp	r1, #4
 8003a20:	f000 82c3 	beq.w	8003faa <keyb_proc+0x5da>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_SAVE_2) {
 8003a24:	49b5      	ldr	r1, [pc, #724]	; (8003cfc <keyb_proc+0x32c>)
 8003a26:	7809      	ldrb	r1, [r1, #0]
 8003a28:	b2c9      	uxtb	r1, r1
 8003a2a:	2905      	cmp	r1, #5
 8003a2c:	f000 82c1 	beq.w	8003fb2 <keyb_proc+0x5e2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	if (gDisplayMode == DISPLAY_MODE_LOAD_1) {
 8003a30:	49b2      	ldr	r1, [pc, #712]	; (8003cfc <keyb_proc+0x32c>)
 8003a32:	7809      	ldrb	r1, [r1, #0]
 8003a34:	b2c9      	uxtb	r1, r1
 8003a36:	2906      	cmp	r1, #6
 8003a38:	f000 82bf 	beq.w	8003fba <keyb_proc+0x5ea>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_LOAD_2) {
 8003a3c:	49af      	ldr	r1, [pc, #700]	; (8003cfc <keyb_proc+0x32c>)
 8003a3e:	7809      	ldrb	r1, [r1, #0]
 8003a40:	b2c9      	uxtb	r1, r1
 8003a42:	2907      	cmp	r1, #7
 8003a44:	f000 82bd 	beq.w	8003fc2 <keyb_proc+0x5f2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	
	tmpStep = Steps[Section][StepNum];	
 8003a48:	4617      	mov	r7, r2
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8003a50:	4aac      	ldr	r2, [pc, #688]	; (8003d04 <keyb_proc+0x334>)
 8003a52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a5a:	ab02      	add	r3, sp, #8
 8003a5c:	e903 0003 	stmdb	r3, {r0, r1}
				
	
		/* Middle section */
		
		if ( !key->b.Voltage0 ) {
 8003a60:	7862      	ldrb	r2, [r4, #1]
 8003a62:	f012 0f10 	tst.w	r2, #16
 8003a66:	d10f      	bne.n	8003a88 <keyb_proc+0xb8>
			tmpStep.b.Voltage0 = 1;
 8003a68:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
 8003a6c:	f043 0310 	orr.w	r3, r3, #16
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 8003a70:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003a74:	f36f 0100 	bfc	r1, #0, #1
 8003a78:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	f36f 0382 	bfc	r3, #2, #1
 8003a84:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage2 ) {
 8003a88:	f012 0f20 	tst.w	r2, #32
 8003a8c:	d111      	bne.n	8003ab2 <keyb_proc+0xe2>
			tmpStep.b.Voltage0 = 0;
 8003a8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 1;
 8003a92:	f003 03ef 	and.w	r3, r3, #239	; 0xef
			tmpStep.b.Voltage4 = 0;
 8003a96:	f043 0320 	orr.w	r3, r3, #32
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 8003a9a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003a9e:	f36f 0100 	bfc	r1, #0, #1
 8003aa2:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8003aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aaa:	f36f 0382 	bfc	r3, #2, #1
 8003aae:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage4 ) {
 8003ab2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ab6:	d111      	bne.n	8003adc <keyb_proc+0x10c>
			tmpStep.b.Voltage0 = 0;
 8003ab8:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 1;
 8003abc:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
			tmpStep.b.Voltage6 = 0;
 8003ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			tmpStep.b.Voltage8 = 0;
 8003ac4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003ac8:	f36f 0100 	bfc	r1, #0, #1
 8003acc:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8003ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad4:	f36f 0382 	bfc	r3, #2, #1
 8003ad8:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage6 ) {
 8003adc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003ae0:	d10f      	bne.n	8003b02 <keyb_proc+0x132>
			tmpStep.b.Voltage0 = 0;
 8003ae2:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 1;
 8003ae6:	f003 038f 	and.w	r3, r3, #143	; 0x8f
			tmpStep.b.Voltage8 = 0;
 8003aea:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003aee:	f36f 0100 	bfc	r1, #0, #1
 8003af2:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8003af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003afa:	f36f 0382 	bfc	r3, #2, #1
 8003afe:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage8 ) {
 8003b02:	78a3      	ldrb	r3, [r4, #2]
 8003b04:	f013 0f01 	tst.w	r3, #1
 8003b08:	d10d      	bne.n	8003b26 <keyb_proc+0x156>
			tmpStep.b.Voltage0 = 0;
 8003b0a:	f89d 1003 	ldrb.w	r1, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 1;
 8003b0e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003b12:	f040 0001 	orr.w	r0, r0, #1
 8003b16:	f88d 0004 	strb.w	r0, [sp, #4]
			tmpStep.b.FullRange = 0;
 8003b1a:	f001 010f 	and.w	r1, r1, #15
 8003b1e:	f36f 0182 	bfc	r1, #2, #1
 8003b22:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.FullRangeOn ) {
 8003b26:	f012 0f01 	tst.w	r2, #1
 8003b2a:	d10d      	bne.n	8003b48 <keyb_proc+0x178>
			tmpStep.b.Voltage0 = 0;
 8003b2c:	f89d 1003 	ldrb.w	r1, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 8003b30:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003b34:	f36f 0000 	bfc	r0, #0, #1
 8003b38:	f88d 0004 	strb.w	r0, [sp, #4]
			tmpStep.b.FullRange = 1;
 8003b3c:	f001 010f 	and.w	r1, r1, #15
 8003b40:	f041 0104 	orr.w	r1, r1, #4
 8003b44:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.Pulse1On ) {
 8003b48:	78e1      	ldrb	r1, [r4, #3]
 8003b4a:	f011 0f10 	tst.w	r1, #16
 8003b4e:	d105      	bne.n	8003b5c <keyb_proc+0x18c>
			tmpStep.b.OutputPulse1 = 1;
 8003b50:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8003b54:	f040 0008 	orr.w	r0, r0, #8
 8003b58:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse1Off ) {
 8003b5c:	f011 0f20 	tst.w	r1, #32
 8003b60:	d105      	bne.n	8003b6e <keyb_proc+0x19e>
			tmpStep.b.OutputPulse1 = 0;
 8003b62:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8003b66:	f36f 00c3 	bfc	r0, #3, #1
 8003b6a:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse2On ) {
 8003b6e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003b72:	d105      	bne.n	8003b80 <keyb_proc+0x1b0>
			tmpStep.b.OutputPulse2 = 1;
 8003b74:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8003b78:	f040 0010 	orr.w	r0, r0, #16
 8003b7c:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse2Off ) {
 8003b80:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b84:	d105      	bne.n	8003b92 <keyb_proc+0x1c2>
			tmpStep.b.OutputPulse2 = 0;
 8003b86:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8003b8a:	f36f 1104 	bfc	r1, #4, #1
 8003b8e:	f88d 1005 	strb.w	r1, [sp, #5]
		};
		
		if ( !key->b.OutputQuantize ) {
 8003b92:	7821      	ldrb	r1, [r4, #0]
 8003b94:	f011 0f10 	tst.w	r1, #16
 8003b98:	d105      	bne.n	8003ba6 <keyb_proc+0x1d6>
			tmpStep.b.Quantize = 1;
 8003b9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003b9e:	f040 0001 	orr.w	r0, r0, #1
 8003ba2:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.OutputContinuous ) {
 8003ba6:	f011 0f20 	tst.w	r1, #32
 8003baa:	d105      	bne.n	8003bb8 <keyb_proc+0x1e8>
			tmpStep.b.Quantize = 0;
 8003bac:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003bb0:	f36f 0000 	bfc	r0, #0, #1
 8003bb4:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.IntegrationSloped ) {
 8003bb8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003bbc:	d105      	bne.n	8003bca <keyb_proc+0x1fa>
			tmpStep.b.Sloped = 1;
 8003bbe:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003bc2:	f040 0002 	orr.w	r0, r0, #2
 8003bc6:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.IntegrationStepped ) {
 8003bca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003bce:	d105      	bne.n	8003bdc <keyb_proc+0x20c>
			tmpStep.b.Sloped = 0;
 8003bd0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003bd4:	f36f 0141 	bfc	r1, #1, #1
 8003bd8:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.SourceExternal ) {
 8003bdc:	f012 0f04 	tst.w	r2, #4
 8003be0:	d105      	bne.n	8003bee <keyb_proc+0x21e>
			tmpStep.b.VoltageSource = 1;
 8003be2:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003be6:	f041 0108 	orr.w	r1, r1, #8
 8003bea:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.SourceInternal ) {
 8003bee:	f012 0f08 	tst.w	r2, #8
 8003bf2:	d105      	bne.n	8003c00 <keyb_proc+0x230>
			tmpStep.b.VoltageSource = 0;
 8003bf4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003bf8:	f36f 02c3 	bfc	r2, #3, #1
 8003bfc:	f88d 2003 	strb.w	r2, [sp, #3]
		};
		
		if ( !key->b.StopOn ) {
 8003c00:	f013 0f02 	tst.w	r3, #2
 8003c04:	d13d      	bne.n	8003c82 <keyb_proc+0x2b2>
			tmpStep.b.OpModeSTOP = 1;
 8003c06:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeENABLE = 0;
 8003c0a:	f042 0202 	orr.w	r2, r2, #2
			tmpStep.b.OpModeSUSTAIN = 0;
 8003c0e:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8003c12:	f36f 0282 	bfc	r2, #2, #1
 8003c16:	f88d 2004 	strb.w	r2, [sp, #4]
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 8003c1a:	4a38      	ldr	r2, [pc, #224]	; (8003cfc <keyb_proc+0x32c>)
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	b122      	cbz	r2, 8003c2a <keyb_proc+0x25a>
 8003c20:	4a36      	ldr	r2, [pc, #216]	; (8003cfc <keyb_proc+0x32c>)
 8003c22:	7812      	ldrb	r2, [r2, #0]
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	2a02      	cmp	r2, #2
 8003c28:	d105      	bne.n	8003c36 <keyb_proc+0x266>
 8003c2a:	4a37      	ldr	r2, [pc, #220]	; (8003d08 <keyb_proc+0x338>)
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	2a05      	cmp	r2, #5
 8003c32:	f000 81ca 	beq.w	8003fca <keyb_proc+0x5fa>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8003c36:	4a31      	ldr	r2, [pc, #196]	; (8003cfc <keyb_proc+0x32c>)
 8003c38:	7812      	ldrb	r2, [r2, #0]
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	2a01      	cmp	r2, #1
 8003c3e:	f000 81c8 	beq.w	8003fd2 <keyb_proc+0x602>
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <keyb_proc+0x32c>)
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	2a03      	cmp	r2, #3
 8003c4a:	f000 81c2 	beq.w	8003fd2 <keyb_proc+0x602>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 8003c4e:	4a2b      	ldr	r2, [pc, #172]	; (8003cfc <keyb_proc+0x32c>)
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	b122      	cbz	r2, 8003c5e <keyb_proc+0x28e>
 8003c54:	4a29      	ldr	r2, [pc, #164]	; (8003cfc <keyb_proc+0x32c>)
 8003c56:	7812      	ldrb	r2, [r2, #0]
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	2a02      	cmp	r2, #2
 8003c5c:	d105      	bne.n	8003c6a <keyb_proc+0x29a>
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <keyb_proc+0x338>)
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	2a04      	cmp	r2, #4
 8003c66:	f000 81cd 	beq.w	8004004 <keyb_proc+0x634>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <keyb_proc+0x32c>)
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	2a01      	cmp	r2, #1
 8003c72:	f000 81cb 	beq.w	800400c <keyb_proc+0x63c>
 8003c76:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <keyb_proc+0x32c>)
 8003c78:	7812      	ldrb	r2, [r2, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	2a03      	cmp	r2, #3
 8003c7e:	f000 81c5 	beq.w	800400c <keyb_proc+0x63c>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
				};
		};
		
		if ( !key->b.StopOff ) {
 8003c82:	f013 0f04 	tst.w	r3, #4
 8003c86:	d105      	bne.n	8003c94 <keyb_proc+0x2c4>
			tmpStep.b.OpModeSTOP = 0;
 8003c88:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003c8c:	f36f 0241 	bfc	r2, #1, #1
 8003c90:	f88d 2004 	strb.w	r2, [sp, #4]
			/* Determine step num for different DisplayModes */
		};
		
		if ( !key->b.SustainOn ) {
 8003c94:	f013 0f08 	tst.w	r3, #8
 8003c98:	d123      	bne.n	8003ce2 <keyb_proc+0x312>
			tmpStep.b.OpModeSUSTAIN = 1;
 8003c9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeSTOP = 0;
 8003c9e:	f042 0204 	orr.w	r2, r2, #4
			tmpStep.b.OpModeENABLE = 0;
 8003ca2:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8003ca6:	f36f 02c3 	bfc	r2, #3, #1
 8003caa:	f88d 2004 	strb.w	r2, [sp, #4]
				if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 8003cae:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <keyb_proc+0x32c>)
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	b122      	cbz	r2, 8003cbe <keyb_proc+0x2ee>
 8003cb4:	4a11      	ldr	r2, [pc, #68]	; (8003cfc <keyb_proc+0x32c>)
 8003cb6:	7812      	ldrb	r2, [r2, #0]
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	2a02      	cmp	r2, #2
 8003cbc:	d105      	bne.n	8003cca <keyb_proc+0x2fa>
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <keyb_proc+0x338>)
 8003cc0:	7812      	ldrb	r2, [r2, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	2a04      	cmp	r2, #4
 8003cc6:	f000 81ab 	beq.w	8004020 <keyb_proc+0x650>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8003cca:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <keyb_proc+0x32c>)
 8003ccc:	7812      	ldrb	r2, [r2, #0]
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	2a01      	cmp	r2, #1
 8003cd2:	f000 81ab 	beq.w	800402c <keyb_proc+0x65c>
 8003cd6:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <keyb_proc+0x32c>)
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	2a03      	cmp	r2, #3
 8003cde:	f000 81a5 	beq.w	800402c <keyb_proc+0x65c>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.SustainOff ) {
 8003ce2:	f013 0f10 	tst.w	r3, #16
 8003ce6:	d128      	bne.n	8003d3a <keyb_proc+0x36a>
			tmpStep.b.OpModeSUSTAIN = 0;
 8003ce8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003cec:	f36f 0282 	bfc	r2, #2, #1
 8003cf0:	f88d 2004 	strb.w	r2, [sp, #4]
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 8003cf4:	4a01      	ldr	r2, [pc, #4]	; (8003cfc <keyb_proc+0x32c>)
 8003cf6:	7812      	ldrb	r2, [r2, #0]
 8003cf8:	b16a      	cbz	r2, 8003d16 <keyb_proc+0x346>
 8003cfa:	e007      	b.n	8003d0c <keyb_proc+0x33c>
 8003cfc:	200002b0 	.word	0x200002b0
 8003d00:	200002bf 	.word	0x200002bf
 8003d04:	200008a4 	.word	0x200008a4
 8003d08:	200002c1 	.word	0x200002c1
 8003d0c:	4ab6      	ldr	r2, [pc, #728]	; (8003fe8 <keyb_proc+0x618>)
 8003d0e:	7812      	ldrb	r2, [r2, #0]
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	2a02      	cmp	r2, #2
 8003d14:	d105      	bne.n	8003d22 <keyb_proc+0x352>
 8003d16:	4ab5      	ldr	r2, [pc, #724]	; (8003fec <keyb_proc+0x61c>)
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	2a05      	cmp	r2, #5
 8003d1e:	f000 8191 	beq.w	8004044 <keyb_proc+0x674>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8003d22:	4ab1      	ldr	r2, [pc, #708]	; (8003fe8 <keyb_proc+0x618>)
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	2a01      	cmp	r2, #1
 8003d2a:	f000 8191 	beq.w	8004050 <keyb_proc+0x680>
 8003d2e:	4aae      	ldr	r2, [pc, #696]	; (8003fe8 <keyb_proc+0x618>)
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	2a03      	cmp	r2, #3
 8003d36:	f000 818b 	beq.w	8004050 <keyb_proc+0x680>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.EnableOn ) {
 8003d3a:	f013 0f20 	tst.w	r3, #32
 8003d3e:	d123      	bne.n	8003d88 <keyb_proc+0x3b8>
			tmpStep.b.OpModeENABLE = 1;
 8003d40:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeSTOP = 0;
 8003d44:	f042 0208 	orr.w	r2, r2, #8
			tmpStep.b.OpModeSUSTAIN = 0;
 8003d48:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8003d4c:	f36f 0282 	bfc	r2, #2, #1
 8003d50:	f88d 2004 	strb.w	r2, [sp, #4]
						if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 8003d54:	4aa4      	ldr	r2, [pc, #656]	; (8003fe8 <keyb_proc+0x618>)
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	b122      	cbz	r2, 8003d64 <keyb_proc+0x394>
 8003d5a:	4aa3      	ldr	r2, [pc, #652]	; (8003fe8 <keyb_proc+0x618>)
 8003d5c:	7812      	ldrb	r2, [r2, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	2a02      	cmp	r2, #2
 8003d62:	d105      	bne.n	8003d70 <keyb_proc+0x3a0>
 8003d64:	4aa1      	ldr	r2, [pc, #644]	; (8003fec <keyb_proc+0x61c>)
 8003d66:	7812      	ldrb	r2, [r2, #0]
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	2a05      	cmp	r2, #5
 8003d6c:	f000 817c 	beq.w	8004068 <keyb_proc+0x698>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8003d70:	4a9d      	ldr	r2, [pc, #628]	; (8003fe8 <keyb_proc+0x618>)
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	2a01      	cmp	r2, #1
 8003d78:	f000 817c 	beq.w	8004074 <keyb_proc+0x6a4>
 8003d7c:	4a9a      	ldr	r2, [pc, #616]	; (8003fe8 <keyb_proc+0x618>)
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	2a03      	cmp	r2, #3
 8003d84:	f000 8176 	beq.w	8004074 <keyb_proc+0x6a4>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.EnableOff ) {
 8003d88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d8c:	d11f      	bne.n	8003dce <keyb_proc+0x3fe>
			tmpStep.b.OpModeENABLE = 0;
 8003d8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003d92:	f36f 02c3 	bfc	r2, #3, #1
 8003d96:	f88d 2004 	strb.w	r2, [sp, #4]
				if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 8003d9a:	4a93      	ldr	r2, [pc, #588]	; (8003fe8 <keyb_proc+0x618>)
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	b122      	cbz	r2, 8003daa <keyb_proc+0x3da>
 8003da0:	4a91      	ldr	r2, [pc, #580]	; (8003fe8 <keyb_proc+0x618>)
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	2a02      	cmp	r2, #2
 8003da8:	d105      	bne.n	8003db6 <keyb_proc+0x3e6>
 8003daa:	4a90      	ldr	r2, [pc, #576]	; (8003fec <keyb_proc+0x61c>)
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	2a04      	cmp	r2, #4
 8003db2:	f000 816b 	beq.w	800408c <keyb_proc+0x6bc>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8003db6:	4a8c      	ldr	r2, [pc, #560]	; (8003fe8 <keyb_proc+0x618>)
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	2a01      	cmp	r2, #1
 8003dbe:	f000 816b 	beq.w	8004098 <keyb_proc+0x6c8>
 8003dc2:	4a89      	ldr	r2, [pc, #548]	; (8003fe8 <keyb_proc+0x618>)
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	2a03      	cmp	r2, #3
 8003dca:	f000 8165 	beq.w	8004098 <keyb_proc+0x6c8>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.FirstOn ) {
 8003dce:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003dd2:	d107      	bne.n	8003de4 <keyb_proc+0x414>
			tmpStep.b.CycleFirst = 1;
 8003dd4:	f89d 3004 	ldrb.w	r3, [sp, #4]
			tmpStep.b.CycleLast = 0;
 8003dd8:	f043 0310 	orr.w	r3, r3, #16
 8003ddc:	f36f 1345 	bfc	r3, #5, #1
 8003de0:	f88d 3004 	strb.w	r3, [sp, #4]
		};
		
		if ( !key->b.FirstOff ) {
 8003de4:	79a3      	ldrb	r3, [r4, #6]
 8003de6:	f013 0f01 	tst.w	r3, #1
 8003dea:	d105      	bne.n	8003df8 <keyb_proc+0x428>
			tmpStep.b.CycleFirst = 0;
 8003dec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003df0:	f36f 1204 	bfc	r2, #4, #1
 8003df4:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.LastOn ) {		
 8003df8:	f013 0f02 	tst.w	r3, #2
 8003dfc:	d107      	bne.n	8003e0e <keyb_proc+0x43e>
			tmpStep.b.CycleLast = 1;
 8003dfe:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.CycleFirst = 0;
 8003e02:	f042 0220 	orr.w	r2, r2, #32
 8003e06:	f36f 1204 	bfc	r2, #4, #1
 8003e0a:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.LastOff ) {
 8003e0e:	f013 0f04 	tst.w	r3, #4
 8003e12:	d105      	bne.n	8003e20 <keyb_proc+0x450>
			tmpStep.b.CycleLast = 0;
 8003e14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003e18:	f36f 1245 	bfc	r2, #5, #1
 8003e1c:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.TimeSourceExternal ) {
 8003e20:	7922      	ldrb	r2, [r4, #4]
 8003e22:	f012 0f01 	tst.w	r2, #1
 8003e26:	d105      	bne.n	8003e34 <keyb_proc+0x464>
			tmpStep.b.TimeSource = 1;
 8003e28:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8003e2c:	f041 0104 	orr.w	r1, r1, #4
 8003e30:	f88d 1005 	strb.w	r1, [sp, #5]
		};
		
		if ( !key->b.TimeSourceInternal ) {
 8003e34:	f012 0f02 	tst.w	r2, #2
 8003e38:	d105      	bne.n	8003e46 <keyb_proc+0x476>
			tmpStep.b.TimeSource = 0;
 8003e3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003e3e:	f36f 0282 	bfc	r2, #2, #1
 8003e42:	f88d 2005 	strb.w	r2, [sp, #5]
		};
		
		if (!key->b.TimeRange1) {
 8003e46:	f013 0f08 	tst.w	r3, #8
 8003e4a:	d10f      	bne.n	8003e6c <keyb_proc+0x49c>
			tmpStep.b.TimeRange_p03 = 1;
 8003e4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 8003e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e54:	f36f 12c7 	bfc	r2, #7, #1
 8003e58:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 8003e5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0;                        
 8003e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e64:	f36f 0241 	bfc	r2, #1, #1
 8003e68:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange2) {
 8003e6c:	f013 0f10 	tst.w	r3, #16
 8003e70:	d10f      	bne.n	8003e92 <keyb_proc+0x4c2>
			tmpStep.b.TimeRange_p03 = 0;
 8003e72:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  1;
 8003e76:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 8003e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e7e:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 8003e82:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0; 
 8003e86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e8a:	f36f 0241 	bfc	r2, #1, #1
 8003e8e:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange3) {
 8003e92:	f013 0f20 	tst.w	r3, #32
 8003e96:	d10f      	bne.n	8003eb8 <keyb_proc+0x4e8>
			tmpStep.b.TimeRange_p03 = 0;
 8003e98:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 8003e9c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 8003ea0:	f36f 12c7 	bfc	r2, #7, #1
 8003ea4:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   1;
 8003ea8:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0; 
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	f36f 0241 	bfc	r2, #1, #1
 8003eb4:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange4) {
 8003eb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ebc:	d10f      	bne.n	8003ede <keyb_proc+0x50e>
			tmpStep.b.TimeRange_p03 = 0;
 8003ebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 8003ec2:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 8003ec6:	f36f 13c7 	bfc	r3, #7, #1
 8003eca:	f88d 3004 	strb.w	r3, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 8003ece:	f89d 3005 	ldrb.w	r3, [sp, #5]
			tmpStep.b.TimeRange_30 =  1; 
 8003ed2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ed6:	f043 0302 	orr.w	r3, r3, #2
 8003eda:	f88d 3005 	strb.w	r3, [sp, #5]
		};
		
		if (!key->b.ClearUp)  {
 8003ede:	7823      	ldrb	r3, [r4, #0]
 8003ee0:	f013 0f01 	tst.w	r3, #1
 8003ee4:	f000 80e4 	beq.w	80040b0 <keyb_proc+0x6e0>
				DisplayUpdateFlags.b.StepsDisplay = 1;
				DisplayUpdateFlags.b.MainDisplay = 1;
			};			
		};
		
		if (!key->b.ClearDown)  {
 8003ee8:	7823      	ldrb	r3, [r4, #0]
 8003eea:	f013 0f02 	tst.w	r3, #2
 8003eee:	f000 813d 	beq.w	800416c <keyb_proc+0x79c>
		};
		

		
		//switch to edit mode
		if ( !key->b.StepLeft ) {
 8003ef2:	7823      	ldrb	r3, [r4, #0]
 8003ef4:	f013 0f04 	tst.w	r3, #4
 8003ef8:	f040 8234 	bne.w	8004364 <keyb_proc+0x994>
			if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 8003efc:	4b3a      	ldr	r3, [pc, #232]	; (8003fe8 <keyb_proc+0x618>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b92b      	cbnz	r3, 8003f0e <keyb_proc+0x53e>
				gDisplayMode = DISPLAY_MODE_EDIT_1;
 8003f02:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <keyb_proc+0x618>)
 8003f04:	2202      	movs	r2, #2
 8003f06:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 1;
 8003f08:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <keyb_proc+0x620>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
			};
			if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 8003f0e:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <keyb_proc+0x618>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	f000 816e 	beq.w	80041f6 <keyb_proc+0x826>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
				gEditModeStepNum = 1;
			};
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 8003f1a:	4b33      	ldr	r3, [pc, #204]	; (8003fe8 <keyb_proc+0x618>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	f000 816f 	beq.w	8004204 <keyb_proc+0x834>
						(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 8003f26:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <keyb_proc+0x618>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	f000 8169 	beq.w	8004204 <keyb_proc+0x834>
					DisplayUpdateFlags.b.StepsDisplay = 1;
				};
			};
			
			//if in save or load mode left buttons select memory cell for save/recall
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8003f32:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <keyb_proc+0x618>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d00f      	beq.n	8003f5c <keyb_proc+0x58c>
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <keyb_proc+0x618>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d00a      	beq.n	8003f5c <keyb_proc+0x58c>
				 (gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 8003f46:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <keyb_proc+0x618>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8003f4c:	2b06      	cmp	r3, #6
 8003f4e:	d005      	beq.n	8003f5c <keyb_proc+0x58c>
				 (gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <keyb_proc+0x618>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b07      	cmp	r3, #7
 8003f58:	f040 8207 	bne.w	800436a <keyb_proc+0x99a>
				if (gEditModeStepNum > 0) {
 8003f5c:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <keyb_proc+0x620>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 81ba 	beq.w	80042da <keyb_proc+0x90a>
					if(counterL == 0) gEditModeStepNum--;
 8003f66:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <keyb_proc+0x624>)
 8003f68:	8812      	ldrh	r2, [r2, #0]
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	f040 81a5 	bne.w	80042ba <keyb_proc+0x8ea>
 8003f70:	3b01      	subs	r3, #1
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <keyb_proc+0x620>)
 8003f74:	7013      	strb	r3, [r2, #0]
						{
							counterL = 500;
							gEditModeStepNum--;
						}
					}
					counterL++;
 8003f76:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <keyb_proc+0x624>)
 8003f78:	8813      	ldrh	r3, [r2, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <keyb_proc+0x628>)
 8003f80:	7813      	ldrb	r3, [r2, #0]
 8003f82:	f043 0302 	orr.w	r3, r3, #2
 8003f86:	7013      	strb	r3, [r2, #0]
 8003f88:	e1ef      	b.n	800436a <keyb_proc+0x99a>
	else max_step = 15;
 8003f8a:	260f      	movs	r6, #15
 8003f8c:	e529      	b.n	80039e2 <keyb_proc+0x12>
	unsigned char StepNum = 0, Section = 0, max_step;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e52f      	b.n	80039f2 <keyb_proc+0x22>
		StepNum = gSequenceStepNumber_2;
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <keyb_proc+0x62c>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e532      	b.n	8003a00 <keyb_proc+0x30>
		StepNum = gEditModeStepNum;
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <keyb_proc+0x620>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	e534      	b.n	8003a0c <keyb_proc+0x3c>
		StepNum = gEditModeStepNum;
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <keyb_proc+0x620>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	e536      	b.n	8003a18 <keyb_proc+0x48>
		StepNum = gEditModeStepNum;
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <keyb_proc+0x620>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 8003fae:	2200      	movs	r2, #0
 8003fb0:	e538      	b.n	8003a24 <keyb_proc+0x54>
		StepNum = gEditModeStepNum;
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <keyb_proc+0x620>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	e53a      	b.n	8003a30 <keyb_proc+0x60>
		StepNum = gEditModeStepNum;
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <keyb_proc+0x620>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	e53c      	b.n	8003a3c <keyb_proc+0x6c>
		StepNum = gEditModeStepNum;
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <keyb_proc+0x620>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	e53e      	b.n	8003a48 <keyb_proc+0x78>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <keyb_proc+0x61c>)
 8003fcc:	2102      	movs	r1, #2
 8003fce:	7011      	strb	r1, [r2, #0]
 8003fd0:	e631      	b.n	8003c36 <keyb_proc+0x266>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <keyb_proc+0x630>)
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	2a05      	cmp	r2, #5
 8003fda:	f47f ae38 	bne.w	8003c4e <keyb_proc+0x27e>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <keyb_proc+0x630>)
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	7011      	strb	r1, [r2, #0]
 8003fe4:	e633      	b.n	8003c4e <keyb_proc+0x27e>
 8003fe6:	bf00      	nop
 8003fe8:	200002b0 	.word	0x200002b0
 8003fec:	200002c1 	.word	0x200002c1
 8003ff0:	200002b1 	.word	0x200002b1
 8003ff4:	200002ac 	.word	0x200002ac
 8003ff8:	200002f0 	.word	0x200002f0
 8003ffc:	200002c0 	.word	0x200002c0
 8004000:	200002c2 	.word	0x200002c2
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8004004:	4a9b      	ldr	r2, [pc, #620]	; (8004274 <keyb_proc+0x8a4>)
 8004006:	2102      	movs	r1, #2
 8004008:	7011      	strb	r1, [r2, #0]
 800400a:	e62e      	b.n	8003c6a <keyb_proc+0x29a>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 800400c:	4a9a      	ldr	r2, [pc, #616]	; (8004278 <keyb_proc+0x8a8>)
 800400e:	7812      	ldrb	r2, [r2, #0]
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	2a04      	cmp	r2, #4
 8004014:	f47f ae35 	bne.w	8003c82 <keyb_proc+0x2b2>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8004018:	4a97      	ldr	r2, [pc, #604]	; (8004278 <keyb_proc+0x8a8>)
 800401a:	2102      	movs	r1, #2
 800401c:	7011      	strb	r1, [r2, #0]
 800401e:	e630      	b.n	8003c82 <keyb_proc+0x2b2>
				gSequencerMode_1 = gPrevSequencerMode_1;
 8004020:	4a96      	ldr	r2, [pc, #600]	; (800427c <keyb_proc+0x8ac>)
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	4993      	ldr	r1, [pc, #588]	; (8004274 <keyb_proc+0x8a4>)
 8004028:	700a      	strb	r2, [r1, #0]
 800402a:	e64e      	b.n	8003cca <keyb_proc+0x2fa>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 800402c:	4a92      	ldr	r2, [pc, #584]	; (8004278 <keyb_proc+0x8a8>)
 800402e:	7812      	ldrb	r2, [r2, #0]
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	2a04      	cmp	r2, #4
 8004034:	f47f ae55 	bne.w	8003ce2 <keyb_proc+0x312>
				gSequencerMode_2 = gPrevSequencerMode_2;
 8004038:	4a91      	ldr	r2, [pc, #580]	; (8004280 <keyb_proc+0x8b0>)
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	498e      	ldr	r1, [pc, #568]	; (8004278 <keyb_proc+0x8a8>)
 8004040:	700a      	strb	r2, [r1, #0]
 8004042:	e64e      	b.n	8003ce2 <keyb_proc+0x312>
				gSequencerMode_1 = gPrevSequencerMode_1;
 8004044:	4a8d      	ldr	r2, [pc, #564]	; (800427c <keyb_proc+0x8ac>)
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	498a      	ldr	r1, [pc, #552]	; (8004274 <keyb_proc+0x8a4>)
 800404c:	700a      	strb	r2, [r1, #0]
 800404e:	e668      	b.n	8003d22 <keyb_proc+0x352>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8004050:	4a89      	ldr	r2, [pc, #548]	; (8004278 <keyb_proc+0x8a8>)
 8004052:	7812      	ldrb	r2, [r2, #0]
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	2a05      	cmp	r2, #5
 8004058:	f47f ae6f 	bne.w	8003d3a <keyb_proc+0x36a>
				gSequencerMode_2 = gPrevSequencerMode_2;
 800405c:	4a88      	ldr	r2, [pc, #544]	; (8004280 <keyb_proc+0x8b0>)
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	4985      	ldr	r1, [pc, #532]	; (8004278 <keyb_proc+0x8a8>)
 8004064:	700a      	strb	r2, [r1, #0]
 8004066:	e668      	b.n	8003d3a <keyb_proc+0x36a>
				gSequencerMode_1 = gPrevSequencerMode_1;
 8004068:	4a84      	ldr	r2, [pc, #528]	; (800427c <keyb_proc+0x8ac>)
 800406a:	7812      	ldrb	r2, [r2, #0]
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	4981      	ldr	r1, [pc, #516]	; (8004274 <keyb_proc+0x8a4>)
 8004070:	700a      	strb	r2, [r1, #0]
 8004072:	e67d      	b.n	8003d70 <keyb_proc+0x3a0>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8004074:	4a80      	ldr	r2, [pc, #512]	; (8004278 <keyb_proc+0x8a8>)
 8004076:	7812      	ldrb	r2, [r2, #0]
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	2a05      	cmp	r2, #5
 800407c:	f47f ae84 	bne.w	8003d88 <keyb_proc+0x3b8>
				gSequencerMode_2 = gPrevSequencerMode_2;
 8004080:	4a7f      	ldr	r2, [pc, #508]	; (8004280 <keyb_proc+0x8b0>)
 8004082:	7812      	ldrb	r2, [r2, #0]
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	497c      	ldr	r1, [pc, #496]	; (8004278 <keyb_proc+0x8a8>)
 8004088:	700a      	strb	r2, [r1, #0]
 800408a:	e67d      	b.n	8003d88 <keyb_proc+0x3b8>
				gSequencerMode_1 = gPrevSequencerMode_1;
 800408c:	4a7b      	ldr	r2, [pc, #492]	; (800427c <keyb_proc+0x8ac>)
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4978      	ldr	r1, [pc, #480]	; (8004274 <keyb_proc+0x8a4>)
 8004094:	700a      	strb	r2, [r1, #0]
 8004096:	e68e      	b.n	8003db6 <keyb_proc+0x3e6>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004098:	4a77      	ldr	r2, [pc, #476]	; (8004278 <keyb_proc+0x8a8>)
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	2a04      	cmp	r2, #4
 80040a0:	f47f ae95 	bne.w	8003dce <keyb_proc+0x3fe>
				gSequencerMode_2 = gPrevSequencerMode_2;
 80040a4:	4a76      	ldr	r2, [pc, #472]	; (8004280 <keyb_proc+0x8b0>)
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	4973      	ldr	r1, [pc, #460]	; (8004278 <keyb_proc+0x8a8>)
 80040ac:	700a      	strb	r2, [r1, #0]
 80040ae:	e68e      	b.n	8003dce <keyb_proc+0x3fe>
			InitClear_Timer();
 80040b0:	f7fe f86a 	bl	8002188 <InitClear_Timer>
			if (gDisplayMode == DISPLAY_MODE_LOAD_1) {
 80040b4:	4b73      	ldr	r3, [pc, #460]	; (8004284 <keyb_proc+0x8b4>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	d018      	beq.n	80040f0 <keyb_proc+0x720>
			else if (gDisplayMode == DISPLAY_MODE_LOAD_2) {
 80040be:	4b71      	ldr	r3, [pc, #452]	; (8004284 <keyb_proc+0x8b4>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b07      	cmp	r3, #7
 80040c6:	d027      	beq.n	8004118 <keyb_proc+0x748>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 80040c8:	4b6e      	ldr	r3, [pc, #440]	; (8004284 <keyb_proc+0x8b4>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d137      	bne.n	8004140 <keyb_proc+0x770>
				gDisplayMode = DISPLAY_MODE_LOAD_1;
 80040d0:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <keyb_proc+0x8b4>)
 80040d2:	2206      	movs	r2, #6
 80040d4:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 80040d6:	4b6c      	ldr	r3, [pc, #432]	; (8004288 <keyb_proc+0x8b8>)
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 80040dc:	4b6b      	ldr	r3, [pc, #428]	; (800428c <keyb_proc+0x8bc>)
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	f042 0202 	orr.w	r2, r2, #2
 80040e4:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e6fb      	b.n	8003ee8 <keyb_proc+0x518>
				LoadSequence(gEditModeStepNum);
 80040f0:	4b65      	ldr	r3, [pc, #404]	; (8004288 <keyb_proc+0x8b8>)
 80040f2:	7818      	ldrb	r0, [r3, #0]
 80040f4:	f7fe f9d6 	bl	80024a4 <LoadSequence>
				gKeysNotValid = 1;
 80040f8:	4b65      	ldr	r3, [pc, #404]	; (8004290 <keyb_proc+0x8c0>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 80040fe:	2100      	movs	r1, #0
 8004100:	4b60      	ldr	r3, [pc, #384]	; (8004284 <keyb_proc+0x8b4>)
 8004102:	7019      	strb	r1, [r3, #0]
				gPrevSequencerMode_1 = gSequencerMode_1;
 8004104:	4a5b      	ldr	r2, [pc, #364]	; (8004274 <keyb_proc+0x8a4>)
 8004106:	7813      	ldrb	r3, [r2, #0]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	485c      	ldr	r0, [pc, #368]	; (800427c <keyb_proc+0x8ac>)
 800410c:	7003      	strb	r3, [r0, #0]
				gSequenceStepNumber_1 = 0;
 800410e:	4b61      	ldr	r3, [pc, #388]	; (8004294 <keyb_proc+0x8c4>)
 8004110:	7019      	strb	r1, [r3, #0]
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8004112:	2302      	movs	r3, #2
 8004114:	7013      	strb	r3, [r2, #0]
 8004116:	e6e7      	b.n	8003ee8 <keyb_proc+0x518>
				LoadSequence(gEditModeStepNum);
 8004118:	4b5b      	ldr	r3, [pc, #364]	; (8004288 <keyb_proc+0x8b8>)
 800411a:	7818      	ldrb	r0, [r3, #0]
 800411c:	f7fe f9c2 	bl	80024a4 <LoadSequence>
				gKeysNotValid = 1;
 8004120:	2301      	movs	r3, #1
 8004122:	4a5b      	ldr	r2, [pc, #364]	; (8004290 <keyb_proc+0x8c0>)
 8004124:	7013      	strb	r3, [r2, #0]
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 8004126:	4a57      	ldr	r2, [pc, #348]	; (8004284 <keyb_proc+0x8b4>)
 8004128:	7013      	strb	r3, [r2, #0]
				gPrevSequencerMode_2 = gSequencerMode_2;
 800412a:	4a53      	ldr	r2, [pc, #332]	; (8004278 <keyb_proc+0x8a8>)
 800412c:	7813      	ldrb	r3, [r2, #0]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4953      	ldr	r1, [pc, #332]	; (8004280 <keyb_proc+0x8b0>)
 8004132:	700b      	strb	r3, [r1, #0]
				gSequenceStepNumber_2 = 0;
 8004134:	4b58      	ldr	r3, [pc, #352]	; (8004298 <keyb_proc+0x8c8>)
 8004136:	2100      	movs	r1, #0
 8004138:	7019      	strb	r1, [r3, #0]
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 800413a:	2302      	movs	r3, #2
 800413c:	7013      	strb	r3, [r2, #0]
 800413e:	e6d3      	b.n	8003ee8 <keyb_proc+0x518>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <keyb_proc+0x8b4>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	f47f aece 	bne.w	8003ee8 <keyb_proc+0x518>
				gDisplayMode = DISPLAY_MODE_LOAD_2;
 800414c:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <keyb_proc+0x8b4>)
 800414e:	2207      	movs	r2, #7
 8004150:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 8004152:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <keyb_proc+0x8b8>)
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004158:	4b4c      	ldr	r3, [pc, #304]	; (800428c <keyb_proc+0x8bc>)
 800415a:	781a      	ldrb	r2, [r3, #0]
 800415c:	f042 0202 	orr.w	r2, r2, #2
 8004160:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e6bd      	b.n	8003ee8 <keyb_proc+0x518>
			InitClear_Timer();
 800416c:	f7fe f80c 	bl	8002188 <InitClear_Timer>
			if (gDisplayMode == DISPLAY_MODE_SAVE_1) {
 8004170:	4b44      	ldr	r3, [pc, #272]	; (8004284 <keyb_proc+0x8b4>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b04      	cmp	r3, #4
 8004178:	d017      	beq.n	80041aa <keyb_proc+0x7da>
			else if (gDisplayMode == DISPLAY_MODE_SAVE_2) {
 800417a:	4b42      	ldr	r3, [pc, #264]	; (8004284 <keyb_proc+0x8b4>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b05      	cmp	r3, #5
 8004182:	d01a      	beq.n	80041ba <keyb_proc+0x7ea>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 8004184:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <keyb_proc+0x8b4>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	b9fb      	cbnz	r3, 80041ca <keyb_proc+0x7fa>
				gDisplayMode = DISPLAY_MODE_SAVE_1;
 800418a:	4b3e      	ldr	r3, [pc, #248]	; (8004284 <keyb_proc+0x8b4>)
 800418c:	2204      	movs	r2, #4
 800418e:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 8004190:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <keyb_proc+0x8b8>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004196:	4b3d      	ldr	r3, [pc, #244]	; (800428c <keyb_proc+0x8bc>)
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	f042 0202 	orr.w	r2, r2, #2
 800419e:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e6a3      	b.n	8003ef2 <keyb_proc+0x522>
				SaveSequence(gEditModeStepNum);
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <keyb_proc+0x8b8>)
 80041ac:	7818      	ldrb	r0, [r3, #0]
 80041ae:	f7fe f93b 	bl	8002428 <SaveSequence>
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <keyb_proc+0x8b4>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e69b      	b.n	8003ef2 <keyb_proc+0x522>
				SaveSequence(gEditModeStepNum);
 80041ba:	4b33      	ldr	r3, [pc, #204]	; (8004288 <keyb_proc+0x8b8>)
 80041bc:	7818      	ldrb	r0, [r3, #0]
 80041be:	f7fe f933 	bl	8002428 <SaveSequence>
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 80041c2:	4b30      	ldr	r3, [pc, #192]	; (8004284 <keyb_proc+0x8b4>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	e693      	b.n	8003ef2 <keyb_proc+0x522>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <keyb_proc+0x8b4>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	f47f ae8e 	bne.w	8003ef2 <keyb_proc+0x522>
				gDisplayMode = DISPLAY_MODE_SAVE_2;
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <keyb_proc+0x8b4>)
 80041d8:	2205      	movs	r2, #5
 80041da:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 80041dc:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <keyb_proc+0x8b8>)
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 80041e2:	4b2a      	ldr	r3, [pc, #168]	; (800428c <keyb_proc+0x8bc>)
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	f042 0202 	orr.w	r2, r2, #2
 80041ea:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	e67d      	b.n	8003ef2 <keyb_proc+0x522>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <keyb_proc+0x8b4>)
 80041f8:	2203      	movs	r2, #3
 80041fa:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 1;
 80041fc:	4b22      	ldr	r3, [pc, #136]	; (8004288 <keyb_proc+0x8b8>)
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e68a      	b.n	8003f1a <keyb_proc+0x54a>
				if (gEditModeStepNum > 0) {
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <keyb_proc+0x8b8>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	b30b      	cbz	r3, 800424e <keyb_proc+0x87e>
					if(counterL == 0) gEditModeStepNum--;
 800420a:	4a24      	ldr	r2, [pc, #144]	; (800429c <keyb_proc+0x8cc>)
 800420c:	8812      	ldrh	r2, [r2, #0]
 800420e:	b982      	cbnz	r2, 8004232 <keyb_proc+0x862>
 8004210:	3b01      	subs	r3, #1
 8004212:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <keyb_proc+0x8b8>)
 8004214:	7013      	strb	r3, [r2, #0]
					counterL++;
 8004216:	4a21      	ldr	r2, [pc, #132]	; (800429c <keyb_proc+0x8cc>)
 8004218:	8813      	ldrh	r3, [r2, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 800421e:	4b1b      	ldr	r3, [pc, #108]	; (800428c <keyb_proc+0x8bc>)
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	f042 0202 	orr.w	r2, r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e67f      	b.n	8003f32 <keyb_proc+0x562>
					else if(counterL >= 500)
 8004232:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004236:	d3ee      	bcc.n	8004216 <keyb_proc+0x846>
						if(counterL > 600)
 8004238:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 800423c:	d9eb      	bls.n	8004216 <keyb_proc+0x846>
							counterL = 500;
 800423e:	4a17      	ldr	r2, [pc, #92]	; (800429c <keyb_proc+0x8cc>)
 8004240:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004244:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum--;
 8004246:	3b01      	subs	r3, #1
 8004248:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <keyb_proc+0x8b8>)
 800424a:	7013      	strb	r3, [r2, #0]
 800424c:	e7e3      	b.n	8004216 <keyb_proc+0x846>
					if(counterL == 0) gEditModeStepNum = max_step;
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <keyb_proc+0x8cc>)
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	bb2b      	cbnz	r3, 80042a0 <keyb_proc+0x8d0>
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <keyb_proc+0x8b8>)
 8004256:	701e      	strb	r6, [r3, #0]
					counterL++;
 8004258:	4a10      	ldr	r2, [pc, #64]	; (800429c <keyb_proc+0x8cc>)
 800425a:	8813      	ldrh	r3, [r2, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <keyb_proc+0x8bc>)
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	f042 0202 	orr.w	r2, r2, #2
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e65e      	b.n	8003f32 <keyb_proc+0x562>
 8004274:	200002c1 	.word	0x200002c1
 8004278:	200002c2 	.word	0x200002c2
 800427c:	200002bd 	.word	0x200002bd
 8004280:	200002be 	.word	0x200002be
 8004284:	200002b0 	.word	0x200002b0
 8004288:	200002b1 	.word	0x200002b1
 800428c:	200002f0 	.word	0x200002f0
 8004290:	200002bc 	.word	0x200002bc
 8004294:	200002bf 	.word	0x200002bf
 8004298:	200002c0 	.word	0x200002c0
 800429c:	200002ac 	.word	0x200002ac
					else if(counterL >= 500)
 80042a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042a4:	d3d8      	bcc.n	8004258 <keyb_proc+0x888>
						if(counterL > 600)
 80042a6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80042aa:	d9d5      	bls.n	8004258 <keyb_proc+0x888>
							counterL = 500;
 80042ac:	4b95      	ldr	r3, [pc, #596]	; (8004504 <keyb_proc+0xb34>)
 80042ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042b2:	801a      	strh	r2, [r3, #0]
							gEditModeStepNum = max_step;
 80042b4:	4b94      	ldr	r3, [pc, #592]	; (8004508 <keyb_proc+0xb38>)
 80042b6:	701e      	strb	r6, [r3, #0]
 80042b8:	e7ce      	b.n	8004258 <keyb_proc+0x888>
					else if(counterL >= 500)
 80042ba:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80042be:	f4ff ae5a 	bcc.w	8003f76 <keyb_proc+0x5a6>
						if(counterL > 600)
 80042c2:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 80042c6:	f67f ae56 	bls.w	8003f76 <keyb_proc+0x5a6>
							counterL = 500;
 80042ca:	4a8e      	ldr	r2, [pc, #568]	; (8004504 <keyb_proc+0xb34>)
 80042cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80042d0:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum--;
 80042d2:	3b01      	subs	r3, #1
 80042d4:	4a8c      	ldr	r2, [pc, #560]	; (8004508 <keyb_proc+0xb38>)
 80042d6:	7013      	strb	r3, [r2, #0]
 80042d8:	e64d      	b.n	8003f76 <keyb_proc+0x5a6>
				} else {
					if(counterL == 0) 
 80042da:	4b8a      	ldr	r3, [pc, #552]	; (8004504 <keyb_proc+0xb34>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b17b      	cbz	r3, 8004300 <keyb_proc+0x930>
								bank = 1;
							}
							}
							else gEditModeStepNum = 31;
					}
					else if(counterL >= 500)
 80042e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042e4:	d302      	bcc.n	80042ec <keyb_proc+0x91c>
					{
						if(counterL > 600)
 80042e6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80042ea:	d820      	bhi.n	800432e <keyb_proc+0x95e>
								}
							}
							else gEditModeStepNum = 31;
						}
					}
					counterL++;
 80042ec:	4a85      	ldr	r2, [pc, #532]	; (8004504 <keyb_proc+0xb34>)
 80042ee:	8813      	ldrh	r3, [r2, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	8013      	strh	r3, [r2, #0]

					DisplayUpdateFlags.b.StepsDisplay = 1;
 80042f4:	4a85      	ldr	r2, [pc, #532]	; (800450c <keyb_proc+0xb3c>)
 80042f6:	7813      	ldrb	r3, [r2, #0]
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	7013      	strb	r3, [r2, #0]
 80042fe:	e034      	b.n	800436a <keyb_proc+0x99a>
							if(!Is_Expander_Present())
 8004300:	f7fd fcb8 	bl	8001c74 <Is_Expander_Present>
 8004304:	b978      	cbnz	r0, 8004326 <keyb_proc+0x956>
							gEditModeStepNum = 15;
 8004306:	4b80      	ldr	r3, [pc, #512]	; (8004508 <keyb_proc+0xb38>)
 8004308:	220f      	movs	r2, #15
 800430a:	701a      	strb	r2, [r3, #0]
							if(bank == 1) 
 800430c:	4b80      	ldr	r3, [pc, #512]	; (8004510 <keyb_proc+0xb40>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d003      	beq.n	800431e <keyb_proc+0x94e>
								bank = 1;
 8004316:	4b7e      	ldr	r3, [pc, #504]	; (8004510 <keyb_proc+0xb40>)
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e7e6      	b.n	80042ec <keyb_proc+0x91c>
								bank = 2;
 800431e:	4b7c      	ldr	r3, [pc, #496]	; (8004510 <keyb_proc+0xb40>)
 8004320:	2202      	movs	r2, #2
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	e7e2      	b.n	80042ec <keyb_proc+0x91c>
							else gEditModeStepNum = 31;
 8004326:	4b78      	ldr	r3, [pc, #480]	; (8004508 <keyb_proc+0xb38>)
 8004328:	221f      	movs	r2, #31
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e7de      	b.n	80042ec <keyb_proc+0x91c>
							counterL = 500;
 800432e:	4b75      	ldr	r3, [pc, #468]	; (8004504 <keyb_proc+0xb34>)
 8004330:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004334:	801a      	strh	r2, [r3, #0]
							if(!Is_Expander_Present())
 8004336:	f7fd fc9d 	bl	8001c74 <Is_Expander_Present>
 800433a:	b978      	cbnz	r0, 800435c <keyb_proc+0x98c>
								gEditModeStepNum = 15;
 800433c:	4b72      	ldr	r3, [pc, #456]	; (8004508 <keyb_proc+0xb38>)
 800433e:	220f      	movs	r2, #15
 8004340:	701a      	strb	r2, [r3, #0]
								if(bank == 1) 
 8004342:	4b73      	ldr	r3, [pc, #460]	; (8004510 <keyb_proc+0xb40>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d003      	beq.n	8004354 <keyb_proc+0x984>
									bank = 1;
 800434c:	4b70      	ldr	r3, [pc, #448]	; (8004510 <keyb_proc+0xb40>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e7cb      	b.n	80042ec <keyb_proc+0x91c>
									bank = 2;
 8004354:	4b6e      	ldr	r3, [pc, #440]	; (8004510 <keyb_proc+0xb40>)
 8004356:	2202      	movs	r2, #2
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e7c7      	b.n	80042ec <keyb_proc+0x91c>
							else gEditModeStepNum = 31;
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <keyb_proc+0xb38>)
 800435e:	221f      	movs	r2, #31
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e7c3      	b.n	80042ec <keyb_proc+0x91c>
				};
			};
		}
		else 
		{
			counterL = 0;
 8004364:	4b67      	ldr	r3, [pc, #412]	; (8004504 <keyb_proc+0xb34>)
 8004366:	2200      	movs	r2, #0
 8004368:	801a      	strh	r2, [r3, #0]
		};
		
		if ( !key->b.StepRight ) {
 800436a:	7823      	ldrb	r3, [r4, #0]
 800436c:	f013 0f08 	tst.w	r3, #8
 8004370:	f040 80f6 	bne.w	8004560 <keyb_proc+0xb90>
			if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 8004374:	4b67      	ldr	r3, [pc, #412]	; (8004514 <keyb_proc+0xb44>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	b923      	cbnz	r3, 8004384 <keyb_proc+0x9b4>
				gDisplayMode = DISPLAY_MODE_EDIT_1;
 800437a:	4b66      	ldr	r3, [pc, #408]	; (8004514 <keyb_proc+0xb44>)
 800437c:	2202      	movs	r2, #2
 800437e:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = max_step;
 8004380:	4b61      	ldr	r3, [pc, #388]	; (8004508 <keyb_proc+0xb38>)
 8004382:	701e      	strb	r6, [r3, #0]
			};
			if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 8004384:	4b63      	ldr	r3, [pc, #396]	; (8004514 <keyb_proc+0xb44>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d033      	beq.n	80043f6 <keyb_proc+0xa26>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
				gEditModeStepNum = max_step;
			};
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 800438e:	4b61      	ldr	r3, [pc, #388]	; (8004514 <keyb_proc+0xb44>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d034      	beq.n	8004402 <keyb_proc+0xa32>
						(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 8004398:	4b5e      	ldr	r3, [pc, #376]	; (8004514 <keyb_proc+0xb44>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d02f      	beq.n	8004402 <keyb_proc+0xa32>
					DisplayUpdateFlags.b.StepsDisplay = 1;
				};
			};			
						
			//if in save or load mode right buttons select memory cell for save/recall
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <keyb_proc+0xb44>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d00f      	beq.n	80043cc <keyb_proc+0x9fc>
 80043ac:	4b59      	ldr	r3, [pc, #356]	; (8004514 <keyb_proc+0xb44>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d00a      	beq.n	80043cc <keyb_proc+0x9fc>
				(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2)) {
 80043b6:	4b57      	ldr	r3, [pc, #348]	; (8004514 <keyb_proc+0xb44>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d005      	beq.n	80043cc <keyb_proc+0x9fc>
				(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2)) {
 80043c0:	4b54      	ldr	r3, [pc, #336]	; (8004514 <keyb_proc+0xb44>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b07      	cmp	r3, #7
 80043c8:	f040 80cd 	bne.w	8004566 <keyb_proc+0xb96>
				if (gEditModeStepNum < max_step) {
 80043cc:	4b4e      	ldr	r3, [pc, #312]	; (8004508 <keyb_proc+0xb38>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	42b3      	cmp	r3, r6
 80043d2:	d26c      	bcs.n	80044ae <keyb_proc+0xade>
					if(counterR == 0) gEditModeStepNum++;
 80043d4:	4a50      	ldr	r2, [pc, #320]	; (8004518 <keyb_proc+0xb48>)
 80043d6:	8812      	ldrh	r2, [r2, #0]
 80043d8:	2a00      	cmp	r2, #0
 80043da:	d15a      	bne.n	8004492 <keyb_proc+0xac2>
 80043dc:	3301      	adds	r3, #1
 80043de:	4a4a      	ldr	r2, [pc, #296]	; (8004508 <keyb_proc+0xb38>)
 80043e0:	7013      	strb	r3, [r2, #0]
						{
							counterR = 500;
							gEditModeStepNum++;
						}
					}
					counterR++;
 80043e2:	4a4d      	ldr	r2, [pc, #308]	; (8004518 <keyb_proc+0xb48>)
 80043e4:	8813      	ldrh	r3, [r2, #0]
 80043e6:	3301      	adds	r3, #1
 80043e8:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 80043ea:	4a48      	ldr	r2, [pc, #288]	; (800450c <keyb_proc+0xb3c>)
 80043ec:	7813      	ldrb	r3, [r2, #0]
 80043ee:	f043 0302 	orr.w	r3, r3, #2
 80043f2:	7013      	strb	r3, [r2, #0]
 80043f4:	e0b7      	b.n	8004566 <keyb_proc+0xb96>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
 80043f6:	4b47      	ldr	r3, [pc, #284]	; (8004514 <keyb_proc+0xb44>)
 80043f8:	2203      	movs	r2, #3
 80043fa:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = max_step;
 80043fc:	4b42      	ldr	r3, [pc, #264]	; (8004508 <keyb_proc+0xb38>)
 80043fe:	701e      	strb	r6, [r3, #0]
 8004400:	e7c5      	b.n	800438e <keyb_proc+0x9be>
				if (gEditModeStepNum < max_step) {
 8004402:	4b41      	ldr	r3, [pc, #260]	; (8004508 <keyb_proc+0xb38>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	42b3      	cmp	r3, r6
 8004408:	d221      	bcs.n	800444e <keyb_proc+0xa7e>
					if(counterR == 0) gEditModeStepNum++;
 800440a:	4a43      	ldr	r2, [pc, #268]	; (8004518 <keyb_proc+0xb48>)
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	b982      	cbnz	r2, 8004432 <keyb_proc+0xa62>
 8004410:	3301      	adds	r3, #1
 8004412:	4a3d      	ldr	r2, [pc, #244]	; (8004508 <keyb_proc+0xb38>)
 8004414:	7013      	strb	r3, [r2, #0]
					counterR++;
 8004416:	4a40      	ldr	r2, [pc, #256]	; (8004518 <keyb_proc+0xb48>)
 8004418:	8813      	ldrh	r3, [r2, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 800441e:	4b3b      	ldr	r3, [pc, #236]	; (800450c <keyb_proc+0xb3c>)
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	f042 0202 	orr.w	r2, r2, #2
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e7b7      	b.n	80043a2 <keyb_proc+0x9d2>
					else if(counterR >= 500)
 8004432:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004436:	d3ee      	bcc.n	8004416 <keyb_proc+0xa46>
						if(counterR > 600)
 8004438:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 800443c:	d9eb      	bls.n	8004416 <keyb_proc+0xa46>
							counterR = 500;
 800443e:	4a36      	ldr	r2, [pc, #216]	; (8004518 <keyb_proc+0xb48>)
 8004440:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004444:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum++;
 8004446:	3301      	adds	r3, #1
 8004448:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <keyb_proc+0xb38>)
 800444a:	7013      	strb	r3, [r2, #0]
 800444c:	e7e3      	b.n	8004416 <keyb_proc+0xa46>
					if(counterR == 0) gEditModeStepNum = 0;
 800444e:	4b32      	ldr	r3, [pc, #200]	; (8004518 <keyb_proc+0xb48>)
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b983      	cbnz	r3, 8004476 <keyb_proc+0xaa6>
 8004454:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <keyb_proc+0xb38>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
					counterR++;
 800445a:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <keyb_proc+0xb48>)
 800445c:	8813      	ldrh	r3, [r2, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <keyb_proc+0xb3c>)
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	f042 0202 	orr.w	r2, r2, #2
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e795      	b.n	80043a2 <keyb_proc+0x9d2>
					else if(counterR >= 500)
 8004476:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800447a:	d3ee      	bcc.n	800445a <keyb_proc+0xa8a>
						if(counterR > 600)
 800447c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004480:	d9eb      	bls.n	800445a <keyb_proc+0xa8a>
							counterR = 500;
 8004482:	4b25      	ldr	r3, [pc, #148]	; (8004518 <keyb_proc+0xb48>)
 8004484:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004488:	801a      	strh	r2, [r3, #0]
							gEditModeStepNum = 0;
 800448a:	4b1f      	ldr	r3, [pc, #124]	; (8004508 <keyb_proc+0xb38>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e7e3      	b.n	800445a <keyb_proc+0xa8a>
					else if(counterR >= 500)
 8004492:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004496:	d3a4      	bcc.n	80043e2 <keyb_proc+0xa12>
						if(counterR > 600)
 8004498:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 800449c:	d9a1      	bls.n	80043e2 <keyb_proc+0xa12>
							counterR = 500;
 800449e:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <keyb_proc+0xb48>)
 80044a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80044a4:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum++;
 80044a6:	3301      	adds	r3, #1
 80044a8:	4a17      	ldr	r2, [pc, #92]	; (8004508 <keyb_proc+0xb38>)
 80044aa:	7013      	strb	r3, [r2, #0]
 80044ac:	e799      	b.n	80043e2 <keyb_proc+0xa12>
				} else {
					
					if(counterR == 0) 
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <keyb_proc+0xb48>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b17b      	cbz	r3, 80044d4 <keyb_proc+0xb04>
							else 
							{
								gEditModeStepNum = 0;
							}
					}
					else if(counterR >= 500)
 80044b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044b8:	d302      	bcc.n	80044c0 <keyb_proc+0xaf0>
					{
						if(counterR > 600)
 80044ba:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80044be:	d82d      	bhi.n	800451c <keyb_proc+0xb4c>
							{
								gEditModeStepNum = 0;
							}
						}
					}
					counterR++;
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <keyb_proc+0xb48>)
 80044c2:	8813      	ldrh	r3, [r2, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	8013      	strh	r3, [r2, #0]

					DisplayUpdateFlags.b.StepsDisplay = 1;
 80044c8:	4a10      	ldr	r2, [pc, #64]	; (800450c <keyb_proc+0xb3c>)
 80044ca:	7813      	ldrb	r3, [r2, #0]
 80044cc:	f043 0302 	orr.w	r3, r3, #2
 80044d0:	7013      	strb	r3, [r2, #0]
 80044d2:	e048      	b.n	8004566 <keyb_proc+0xb96>
							if(!Is_Expander_Present())
 80044d4:	f7fd fbce 	bl	8001c74 <Is_Expander_Present>
 80044d8:	b978      	cbnz	r0, 80044fa <keyb_proc+0xb2a>
								gEditModeStepNum = 0;
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <keyb_proc+0xb38>)
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
								if(bank == 1) 
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <keyb_proc+0xb40>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d003      	beq.n	80044f2 <keyb_proc+0xb22>
									bank = 1;
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <keyb_proc+0xb40>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
 80044f0:	e7e6      	b.n	80044c0 <keyb_proc+0xaf0>
									bank = 2;
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <keyb_proc+0xb40>)
 80044f4:	2202      	movs	r2, #2
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e7e2      	b.n	80044c0 <keyb_proc+0xaf0>
								gEditModeStepNum = 0;
 80044fa:	4b03      	ldr	r3, [pc, #12]	; (8004508 <keyb_proc+0xb38>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e7de      	b.n	80044c0 <keyb_proc+0xaf0>
 8004502:	bf00      	nop
 8004504:	200002ac 	.word	0x200002ac
 8004508:	200002b1 	.word	0x200002b1
 800450c:	200002f0 	.word	0x200002f0
 8004510:	20000270 	.word	0x20000270
 8004514:	200002b0 	.word	0x200002b0
 8004518:	200002ae 	.word	0x200002ae
							counterR = 500;
 800451c:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <keyb_proc+0xb84>)
 800451e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004522:	801a      	strh	r2, [r3, #0]
							if(!Is_Expander_Present())
 8004524:	f7fd fba6 	bl	8001c74 <Is_Expander_Present>
 8004528:	b978      	cbnz	r0, 800454a <keyb_proc+0xb7a>
								gEditModeStepNum = 0;
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <keyb_proc+0xb88>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
								if(bank == 1) 
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <keyb_proc+0xb8c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d003      	beq.n	8004542 <keyb_proc+0xb72>
									bank = 1;
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <keyb_proc+0xb8c>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e7be      	b.n	80044c0 <keyb_proc+0xaf0>
									bank = 2;
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <keyb_proc+0xb8c>)
 8004544:	2202      	movs	r2, #2
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e7ba      	b.n	80044c0 <keyb_proc+0xaf0>
								gEditModeStepNum = 0;
 800454a:	4b03      	ldr	r3, [pc, #12]	; (8004558 <keyb_proc+0xb88>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e7b6      	b.n	80044c0 <keyb_proc+0xaf0>
 8004552:	bf00      	nop
 8004554:	200002ae 	.word	0x200002ae
 8004558:	200002b1 	.word	0x200002b1
 800455c:	20000270 	.word	0x20000270
				};
			};
		}
		else 
		{
			counterR = 0;
 8004560:	4baa      	ldr	r3, [pc, #680]	; (800480c <keyb_proc+0xe3c>)
 8004562:	2200      	movs	r2, #0
 8004564:	801a      	strh	r2, [r3, #0]
		};
	key_locked = 1;
 8004566:	4baa      	ldr	r3, [pc, #680]	; (8004810 <keyb_proc+0xe40>)
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
	
		
		//Sections 1/2
	if (gKeysNotValid == 0) {
 800456c:	4ba9      	ldr	r3, [pc, #676]	; (8004814 <keyb_proc+0xe44>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b9c3      	cbnz	r3, 80045a4 <keyb_proc+0xbd4>
		
	if (!key->b.StageAddress1Display) {
 8004572:	7963      	ldrb	r3, [r4, #5]
 8004574:	f013 0f04 	tst.w	r3, #4
 8004578:	d105      	bne.n	8004586 <keyb_proc+0xbb6>
			if (gDisplayMode != DISPLAY_MODE_VIEW_1) {			
 800457a:	4ba7      	ldr	r3, [pc, #668]	; (8004818 <keyb_proc+0xe48>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b113      	cbz	r3, 8004586 <keyb_proc+0xbb6>
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 8004580:	4ba5      	ldr	r3, [pc, #660]	; (8004818 <keyb_proc+0xe48>)
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
			};		
		};
		

		if (!key->b.StageAddress2Display) {
 8004586:	7923      	ldrb	r3, [r4, #4]
 8004588:	f013 0f40 	tst.w	r3, #64	; 0x40
 800458c:	d10a      	bne.n	80045a4 <keyb_proc+0xbd4>
			if (gDisplayMode != DISPLAY_MODE_VIEW_2) {			
 800458e:	4ba2      	ldr	r3, [pc, #648]	; (8004818 <keyb_proc+0xe48>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d005      	beq.n	80045a4 <keyb_proc+0xbd4>
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 8004598:	4b9f      	ldr	r3, [pc, #636]	; (8004818 <keyb_proc+0xe48>)
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
				key_locked = 0;
 800459e:	4b9c      	ldr	r3, [pc, #624]	; (8004810 <keyb_proc+0xe40>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
		};
	};
		
	

		if ( (!key->b.StageAddress1Reset)  ) {
 80045a4:	7963      	ldrb	r3, [r4, #5]
 80045a6:	f013 0f02 	tst.w	r3, #2
 80045aa:	d11f      	bne.n	80045ec <keyb_proc+0xc1c>
				if(gSequencerMode_1 != SEQUENCER_MODE_WAIT)
 80045ac:	4b9b      	ldr	r3, [pc, #620]	; (800481c <keyb_proc+0xe4c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d01a      	beq.n	80045ec <keyb_proc+0xc1c>
				{
				gSequenceStepNumber_1 = 0;
 80045b6:	4b9a      	ldr	r3, [pc, #616]	; (8004820 <keyb_proc+0xe50>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 80045bc:	4b99      	ldr	r3, [pc, #612]	; (8004824 <keyb_proc+0xe54>)
 80045be:	781a      	ldrb	r2, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	f042 0202 	orr.w	r2, r2, #2
 80045cc:	701a      	strb	r2, [r3, #0]
				if (gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z || gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 80045ce:	4b93      	ldr	r3, [pc, #588]	; (800481c <keyb_proc+0xe4c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d004      	beq.n	80045e2 <keyb_proc+0xc12>
 80045d8:	4b90      	ldr	r3, [pc, #576]	; (800481c <keyb_proc+0xe4c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d104      	bne.n	80045ec <keyb_proc+0xc1c>
				gSequencerMode_1 = gPrevSequencerMode_1;
 80045e2:	4b91      	ldr	r3, [pc, #580]	; (8004828 <keyb_proc+0xe58>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	4a8c      	ldr	r2, [pc, #560]	; (800481c <keyb_proc+0xe4c>)
 80045ea:	7013      	strb	r3, [r2, #0]
				}
			};
		};
					

		if ( (!key->b.StageAddress2Reset)  ) {
 80045ec:	7923      	ldrb	r3, [r4, #4]
 80045ee:	f013 0f20 	tst.w	r3, #32
 80045f2:	d11f      	bne.n	8004634 <keyb_proc+0xc64>
				if(gSequencerMode_2 != SEQUENCER_MODE_WAIT)
 80045f4:	4a8d      	ldr	r2, [pc, #564]	; (800482c <keyb_proc+0xe5c>)
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	2a01      	cmp	r2, #1
 80045fc:	d01a      	beq.n	8004634 <keyb_proc+0xc64>
				{						
					gSequenceStepNumber_2 = 0;
 80045fe:	4a8c      	ldr	r2, [pc, #560]	; (8004830 <keyb_proc+0xe60>)
 8004600:	2100      	movs	r1, #0
 8004602:	7011      	strb	r1, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 8004604:	4a87      	ldr	r2, [pc, #540]	; (8004824 <keyb_proc+0xe54>)
 8004606:	7811      	ldrb	r1, [r2, #0]
 8004608:	f041 0101 	orr.w	r1, r1, #1
 800460c:	7011      	strb	r1, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 800460e:	7811      	ldrb	r1, [r2, #0]
 8004610:	f041 0102 	orr.w	r1, r1, #2
 8004614:	7011      	strb	r1, [r2, #0]
					
					if (gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z || gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8004616:	4a85      	ldr	r2, [pc, #532]	; (800482c <keyb_proc+0xe5c>)
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	2a04      	cmp	r2, #4
 800461e:	d004      	beq.n	800462a <keyb_proc+0xc5a>
 8004620:	4a82      	ldr	r2, [pc, #520]	; (800482c <keyb_proc+0xe5c>)
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	2a05      	cmp	r2, #5
 8004628:	d104      	bne.n	8004634 <keyb_proc+0xc64>
					gSequencerMode_2 = gPrevSequencerMode_2;
 800462a:	4a82      	ldr	r2, [pc, #520]	; (8004834 <keyb_proc+0xe64>)
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	497e      	ldr	r1, [pc, #504]	; (800482c <keyb_proc+0xe5c>)
 8004632:	700a      	strb	r2, [r1, #0]
				}
		};
		}
				
		if( key->b.Empty5 && strobe_banana_flag1 == 0)
 8004634:	f013 0f10 	tst.w	r3, #16
 8004638:	d03a      	beq.n	80046b0 <keyb_proc+0xce0>
 800463a:	4b7f      	ldr	r3, [pc, #508]	; (8004838 <keyb_proc+0xe68>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d136      	bne.n	80046b0 <keyb_proc+0xce0>
		{
			strobe_banana_flag1 = 1;
 8004642:	4b7d      	ldr	r3, [pc, #500]	; (8004838 <keyb_proc+0xe68>)
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
				gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 8004648:	4b7c      	ldr	r3, [pc, #496]	; (800483c <keyb_proc+0xe6c>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	3b01      	subs	r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	4a73      	ldr	r2, [pc, #460]	; (8004820 <keyb_proc+0xe50>)
 8004652:	7013      	strb	r3, [r2, #0]
			
			if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8004654:	4b70      	ldr	r3, [pc, #448]	; (8004818 <keyb_proc+0xe48>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b943      	cbnz	r3, 800466c <keyb_proc+0xc9c>
				DisplayUpdateFlags.b.MainDisplay = 1;
 800465a:	4b72      	ldr	r3, [pc, #456]	; (8004824 <keyb_proc+0xe54>)
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	f042 0202 	orr.w	r2, r2, #2
 800466a:	701a      	strb	r2, [r3, #0]
			};
			
				PULSE_LED_I_ALL_ON;
 800466c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004670:	4873      	ldr	r0, [pc, #460]	; (8004840 <keyb_proc+0xe70>)
 8004672:	f7fc fd30 	bl	80010d6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004676:	4b6a      	ldr	r3, [pc, #424]	; (8004820 <keyb_proc+0xe50>)
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	4b72      	ldr	r3, [pc, #456]	; (8004844 <keyb_proc+0xe74>)
 800467c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004686:	f040 816e 	bne.w	8004966 <keyb_proc+0xf96>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 800468a:	4b65      	ldr	r3, [pc, #404]	; (8004820 <keyb_proc+0xe50>)
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	4b6d      	ldr	r3, [pc, #436]	; (8004844 <keyb_proc+0xe74>)
 8004690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800469a:	f040 816a 	bne.w	8004972 <keyb_proc+0xfa2>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 800469e:	4e6a      	ldr	r6, [pc, #424]	; (8004848 <keyb_proc+0xe78>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	4630      	mov	r0, r6
 80046a4:	f7fc fefe 	bl	80014a4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 80046a8:	2100      	movs	r1, #0
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7fc feeb 	bl	8001486 <TIM_SetCounter>
		}
		
		if(!key->b.Empty5) 
 80046b0:	7923      	ldrb	r3, [r4, #4]
 80046b2:	f013 0f10 	tst.w	r3, #16
 80046b6:	d102      	bne.n	80046be <keyb_proc+0xcee>
		{
			strobe_banana_flag1 = 0;
 80046b8:	4b5f      	ldr	r3, [pc, #380]	; (8004838 <keyb_proc+0xe68>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
		}
		if ( (!key->b.StageAddress1PulseSelect) ) {
 80046be:	7963      	ldrb	r3, [r4, #5]
 80046c0:	f013 0f10 	tst.w	r3, #16
 80046c4:	d133      	bne.n	800472e <keyb_proc+0xd5e>
				gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 80046c6:	4b5d      	ldr	r3, [pc, #372]	; (800483c <keyb_proc+0xe6c>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	4a54      	ldr	r2, [pc, #336]	; (8004820 <keyb_proc+0xe50>)
 80046d0:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 80046d2:	4b51      	ldr	r3, [pc, #324]	; (8004818 <keyb_proc+0xe48>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b943      	cbnz	r3, 80046ea <keyb_proc+0xd1a>
		DisplayUpdateFlags.b.MainDisplay = 1;
 80046d8:	4b52      	ldr	r3, [pc, #328]	; (8004824 <keyb_proc+0xe54>)
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	f042 0202 	orr.w	r2, r2, #2
 80046e8:	701a      	strb	r2, [r3, #0]
	};
			
				PULSE_LED_I_ALL_ON;
 80046ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046ee:	4854      	ldr	r0, [pc, #336]	; (8004840 <keyb_proc+0xe70>)
 80046f0:	f7fc fcf1 	bl	80010d6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 80046f4:	4b4a      	ldr	r3, [pc, #296]	; (8004820 <keyb_proc+0xe50>)
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	4b52      	ldr	r3, [pc, #328]	; (8004844 <keyb_proc+0xe74>)
 80046fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004704:	f040 813b 	bne.w	800497e <keyb_proc+0xfae>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004708:	4b45      	ldr	r3, [pc, #276]	; (8004820 <keyb_proc+0xe50>)
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	4b4d      	ldr	r3, [pc, #308]	; (8004844 <keyb_proc+0xe74>)
 800470e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004718:	f040 8137 	bne.w	800498a <keyb_proc+0xfba>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 800471c:	4e4a      	ldr	r6, [pc, #296]	; (8004848 <keyb_proc+0xe78>)
 800471e:	2101      	movs	r1, #1
 8004720:	4630      	mov	r0, r6
 8004722:	f7fc febf 	bl	80014a4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8004726:	2100      	movs	r1, #0
 8004728:	4630      	mov	r0, r6
 800472a:	f7fc feac 	bl	8001486 <TIM_SetCounter>
		};
		
						
		if( key->b.Empty2 && strobe_banana_flag2 == 0)
 800472e:	78e3      	ldrb	r3, [r4, #3]
 8004730:	f013 0f08 	tst.w	r3, #8
 8004734:	d033      	beq.n	800479e <keyb_proc+0xdce>
 8004736:	4b45      	ldr	r3, [pc, #276]	; (800484c <keyb_proc+0xe7c>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d12f      	bne.n	800479e <keyb_proc+0xdce>
		{
			strobe_banana_flag2 = 1;
 800473e:	4b43      	ldr	r3, [pc, #268]	; (800484c <keyb_proc+0xe7c>)
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
				gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 8004744:	4b3d      	ldr	r3, [pc, #244]	; (800483c <keyb_proc+0xe6c>)
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	3b01      	subs	r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4a38      	ldr	r2, [pc, #224]	; (8004830 <keyb_proc+0xe60>)
 800474e:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <keyb_proc+0xe48>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b01      	cmp	r3, #1
 8004758:	f000 811d 	beq.w	8004996 <keyb_proc+0xfc6>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};
			
				PULSE_LED_II_ALL_ON;
 800475c:	2104      	movs	r1, #4
 800475e:	483c      	ldr	r0, [pc, #240]	; (8004850 <keyb_proc+0xe80>)
 8004760:	f7fc fcb9 	bl	80010d6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004764:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <keyb_proc+0xe50>)
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	4b36      	ldr	r3, [pc, #216]	; (8004844 <keyb_proc+0xe74>)
 800476a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004774:	f040 8119 	bne.w	80049aa <keyb_proc+0xfda>
					PULSE_LED_II_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004778:	4b29      	ldr	r3, [pc, #164]	; (8004820 <keyb_proc+0xe50>)
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	4b31      	ldr	r3, [pc, #196]	; (8004844 <keyb_proc+0xe74>)
 800477e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004788:	f040 8114 	bne.w	80049b4 <keyb_proc+0xfe4>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 800478c:	4e31      	ldr	r6, [pc, #196]	; (8004854 <keyb_proc+0xe84>)
 800478e:	2101      	movs	r1, #1
 8004790:	4630      	mov	r0, r6
 8004792:	f7fc fe87 	bl	80014a4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8004796:	2100      	movs	r1, #0
 8004798:	4630      	mov	r0, r6
 800479a:	f7fc fe74 	bl	8001486 <TIM_SetCounter>
		}
		
		if(!key->b.Empty2) 
 800479e:	78e3      	ldrb	r3, [r4, #3]
 80047a0:	f013 0f08 	tst.w	r3, #8
 80047a4:	d102      	bne.n	80047ac <keyb_proc+0xddc>
		{
			strobe_banana_flag2 = 0;
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <keyb_proc+0xe7c>)
 80047a8:	2100      	movs	r1, #0
 80047aa:	7011      	strb	r1, [r2, #0]
		}


		if ( (!key->b.StageAddress2PulseSelect)) {
 80047ac:	f013 0f02 	tst.w	r3, #2
 80047b0:	d158      	bne.n	8004864 <keyb_proc+0xe94>
				gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <keyb_proc+0xe6c>)
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <keyb_proc+0xe60>)
 80047bc:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <keyb_proc+0xe48>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f000 80fb 	beq.w	80049c0 <keyb_proc+0xff0>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};
			
				PULSE_LED_II_ALL_ON;
 80047ca:	2104      	movs	r1, #4
 80047cc:	4820      	ldr	r0, [pc, #128]	; (8004850 <keyb_proc+0xe80>)
 80047ce:	f7fc fc82 	bl	80010d6 <GPIO_ResetBits>
				
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <keyb_proc+0xe60>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f103 0220 	add.w	r2, r3, #32
 80047da:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <keyb_proc+0xe74>)
 80047dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047e6:	f040 80f5 	bne.w	80049d4 <keyb_proc+0x1004>
					PULSE_LED_II_1_ON;
				};
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <keyb_proc+0xe60>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	f103 0220 	add.w	r2, r3, #32
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <keyb_proc+0xe74>)
 80047f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80047fe:	f040 80ee 	bne.w	80049de <keyb_proc+0x100e>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 8004802:	4e14      	ldr	r6, [pc, #80]	; (8004854 <keyb_proc+0xe84>)
 8004804:	2101      	movs	r1, #1
 8004806:	4630      	mov	r0, r6
 8004808:	e026      	b.n	8004858 <keyb_proc+0xe88>
 800480a:	bf00      	nop
 800480c:	200002ae 	.word	0x200002ae
 8004810:	200002cc 	.word	0x200002cc
 8004814:	200002bc 	.word	0x200002bc
 8004818:	200002b0 	.word	0x200002b0
 800481c:	200002c1 	.word	0x200002c1
 8004820:	200002bf 	.word	0x200002bf
 8004824:	200002f0 	.word	0x200002f0
 8004828:	200002bd 	.word	0x200002bd
 800482c:	200002c2 	.word	0x200002c2
 8004830:	200002c0 	.word	0x200002c0
 8004834:	200002be 	.word	0x200002be
 8004838:	200002d8 	.word	0x200002d8
 800483c:	20000274 	.word	0x20000274
 8004840:	40020400 	.word	0x40020400
 8004844:	200008a4 	.word	0x200008a4
 8004848:	40002000 	.word	0x40002000
 800484c:	200002d9 	.word	0x200002d9
 8004850:	40020000 	.word	0x40020000
 8004854:	40010400 	.word	0x40010400
 8004858:	f7fc fe24 	bl	80014a4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 800485c:	2100      	movs	r1, #0
 800485e:	4630      	mov	r0, r6
 8004860:	f7fc fe11 	bl	8001486 <TIM_SetCounter>
		};		
	
				
	/* Stage address ADVANCE 1 KEY*/
	if (!key->b.StageAddress1ContiniousSelect) {
 8004864:	7963      	ldrb	r3, [r4, #5]
 8004866:	f013 0f20 	tst.w	r3, #32
 800486a:	f040 80be 	bne.w	80049ea <keyb_proc+0x101a>
		if (gSequencerMode_1 != SEQUENCER_MODE_WAIT) {
 800486e:	4aae      	ldr	r2, [pc, #696]	; (8004b28 <keyb_proc+0x1158>)
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	2a01      	cmp	r2, #1
 8004876:	d00e      	beq.n	8004896 <keyb_proc+0xec6>
			gPrevSequencerMode_1 = gSequencerMode_1;
 8004878:	49ab      	ldr	r1, [pc, #684]	; (8004b28 <keyb_proc+0x1158>)
 800487a:	780a      	ldrb	r2, [r1, #0]
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	48ab      	ldr	r0, [pc, #684]	; (8004b2c <keyb_proc+0x115c>)
 8004880:	7002      	strb	r2, [r0, #0]
			gSequencerMode_1 = SEQUENCER_MODE_WAIT;		
 8004882:	2201      	movs	r2, #1
 8004884:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004886:	49aa      	ldr	r1, [pc, #680]	; (8004b30 <keyb_proc+0x1160>)
 8004888:	780a      	ldrb	r2, [r1, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	700a      	strb	r2, [r1, #0]
			key_locked = 0;
 8004890:	4aa8      	ldr	r2, [pc, #672]	; (8004b34 <keyb_proc+0x1164>)
 8004892:	2100      	movs	r1, #0
 8004894:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;
			key_locked = 0;
		};
	};
	
	if (!key->b.StageAddress2ContiniousSelect) {	
 8004896:	78e2      	ldrb	r2, [r4, #3]
 8004898:	f012 0f04 	tst.w	r2, #4
 800489c:	f040 80bd 	bne.w	8004a1a <keyb_proc+0x104a>
		if (gSequencerMode_2 != SEQUENCER_MODE_WAIT) {
 80048a0:	4aa5      	ldr	r2, [pc, #660]	; (8004b38 <keyb_proc+0x1168>)
 80048a2:	7812      	ldrb	r2, [r2, #0]
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	2a01      	cmp	r2, #1
 80048a8:	d00e      	beq.n	80048c8 <keyb_proc+0xef8>
			gPrevSequencerMode_2 = gSequencerMode_2;
 80048aa:	49a3      	ldr	r1, [pc, #652]	; (8004b38 <keyb_proc+0x1168>)
 80048ac:	780a      	ldrb	r2, [r1, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	48a2      	ldr	r0, [pc, #648]	; (8004b3c <keyb_proc+0x116c>)
 80048b2:	7002      	strb	r2, [r0, #0]
			gSequencerMode_2 = SEQUENCER_MODE_WAIT;
 80048b4:	2201      	movs	r2, #1
 80048b6:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 80048b8:	499d      	ldr	r1, [pc, #628]	; (8004b30 <keyb_proc+0x1160>)
 80048ba:	780a      	ldrb	r2, [r1, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	700a      	strb	r2, [r1, #0]
			key_locked = 0;
 80048c2:	4a9c      	ldr	r2, [pc, #624]	; (8004b34 <keyb_proc+0x1164>)
 80048c4:	2100      	movs	r1, #0
 80048c6:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;			
			key_locked = 0;
		};
	};
	
	if (!key->b.StageAddress1Advance) {
 80048c8:	f013 0f01 	tst.w	r3, #1
 80048cc:	f040 80d9 	bne.w	8004a82 <keyb_proc+0x10b2>
		
		advanced_counter_1++;
 80048d0:	4a9b      	ldr	r2, [pc, #620]	; (8004b40 <keyb_proc+0x1170>)
 80048d2:	7813      	ldrb	r3, [r2, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	7013      	strb	r3, [r2, #0]
		//if(advanced_counter_1 == 10)
		{
		if(gSequencerMode_1 != SEQUENCER_MODE_WAIT)
 80048da:	4b93      	ldr	r3, [pc, #588]	; (8004b28 <keyb_proc+0x1158>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	f000 80d1 	beq.w	8004a88 <keyb_proc+0x10b8>
		{
		if(gSequencerMode_1 == SEQUENCER_MODE_RUN)
 80048e6:	4b90      	ldr	r3, [pc, #576]	; (8004b28 <keyb_proc+0x1158>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80ad 	beq.w	8004a4a <keyb_proc+0x107a>
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
			gStepWidth_1 = 0;
		}
		else{
			if(gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z )(gPrevSequencerMode_1 = gSequencerMode_1);
 80048f0:	4b8d      	ldr	r3, [pc, #564]	; (8004b28 <keyb_proc+0x1158>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d009      	beq.n	800490e <keyb_proc+0xf3e>
 80048fa:	4b8b      	ldr	r3, [pc, #556]	; (8004b28 <keyb_proc+0x1158>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b04      	cmp	r3, #4
 8004902:	d004      	beq.n	800490e <keyb_proc+0xf3e>
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <keyb_proc+0x1158>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4a88      	ldr	r2, [pc, #544]	; (8004b2c <keyb_proc+0x115c>)
 800490c:	7013      	strb	r3, [r2, #0]
			
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 800490e:	4e8d      	ldr	r6, [pc, #564]	; (8004b44 <keyb_proc+0x1174>)
 8004910:	7831      	ldrb	r1, [r6, #0]
 8004912:	2000      	movs	r0, #0
 8004914:	f7fe f868 	bl	80029e8 <GetNextStep>
 8004918:	7030      	strb	r0, [r6, #0]
		}
		gSequencerMode_1 = SEQUENCER_MODE_STOP;
 800491a:	4b83      	ldr	r3, [pc, #524]	; (8004b28 <keyb_proc+0x1158>)
 800491c:	2202      	movs	r2, #2
 800491e:	701a      	strb	r2, [r3, #0]
						PULSE_LED_I_ALL_ON;
 8004920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004924:	4888      	ldr	r0, [pc, #544]	; (8004b48 <keyb_proc+0x1178>)
 8004926:	f7fc fbd6 	bl	80010d6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 800492a:	4b86      	ldr	r3, [pc, #536]	; (8004b44 <keyb_proc+0x1174>)
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	4b87      	ldr	r3, [pc, #540]	; (8004b4c <keyb_proc+0x117c>)
 8004930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800493a:	f040 8096 	bne.w	8004a6a <keyb_proc+0x109a>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 800493e:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <keyb_proc+0x1174>)
 8004940:	781a      	ldrb	r2, [r3, #0]
 8004942:	4b82      	ldr	r3, [pc, #520]	; (8004b4c <keyb_proc+0x117c>)
 8004944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800494e:	f040 8092 	bne.w	8004a76 <keyb_proc+0x10a6>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 8004952:	4e7f      	ldr	r6, [pc, #508]	; (8004b50 <keyb_proc+0x1180>)
 8004954:	2101      	movs	r1, #1
 8004956:	4630      	mov	r0, r6
 8004958:	f7fc fda4 	bl	80014a4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 800495c:	2100      	movs	r1, #0
 800495e:	4630      	mov	r0, r6
 8004960:	f7fc fd91 	bl	8001486 <TIM_SetCounter>
 8004964:	e090      	b.n	8004a88 <keyb_proc+0x10b8>
					PULSE_LED_I_1_ON;
 8004966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800496a:	4877      	ldr	r0, [pc, #476]	; (8004b48 <keyb_proc+0x1178>)
 800496c:	f7fc fbb3 	bl	80010d6 <GPIO_ResetBits>
 8004970:	e68b      	b.n	800468a <keyb_proc+0xcba>
					PULSE_LED_I_2_ON;
 8004972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004976:	4874      	ldr	r0, [pc, #464]	; (8004b48 <keyb_proc+0x1178>)
 8004978:	f7fc fbad 	bl	80010d6 <GPIO_ResetBits>
 800497c:	e68f      	b.n	800469e <keyb_proc+0xcce>
					PULSE_LED_I_1_ON;
 800497e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004982:	4871      	ldr	r0, [pc, #452]	; (8004b48 <keyb_proc+0x1178>)
 8004984:	f7fc fba7 	bl	80010d6 <GPIO_ResetBits>
 8004988:	e6be      	b.n	8004708 <keyb_proc+0xd38>
					PULSE_LED_I_2_ON;
 800498a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800498e:	486e      	ldr	r0, [pc, #440]	; (8004b48 <keyb_proc+0x1178>)
 8004990:	f7fc fba1 	bl	80010d6 <GPIO_ResetBits>
 8004994:	e6c2      	b.n	800471c <keyb_proc+0xd4c>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8004996:	4b66      	ldr	r3, [pc, #408]	; (8004b30 <keyb_proc+0x1160>)
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	f042 0202 	orr.w	r2, r2, #2
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e6d8      	b.n	800475c <keyb_proc+0xd8c>
					PULSE_LED_II_1_ON;
 80049aa:	2108      	movs	r1, #8
 80049ac:	4869      	ldr	r0, [pc, #420]	; (8004b54 <keyb_proc+0x1184>)
 80049ae:	f7fc fb92 	bl	80010d6 <GPIO_ResetBits>
 80049b2:	e6e1      	b.n	8004778 <keyb_proc+0xda8>
					PULSE_LED_II_2_ON;
 80049b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049b8:	4866      	ldr	r0, [pc, #408]	; (8004b54 <keyb_proc+0x1184>)
 80049ba:	f7fc fb8c 	bl	80010d6 <GPIO_ResetBits>
 80049be:	e6e5      	b.n	800478c <keyb_proc+0xdbc>
		DisplayUpdateFlags.b.MainDisplay = 1;
 80049c0:	4b5b      	ldr	r3, [pc, #364]	; (8004b30 <keyb_proc+0x1160>)
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	f042 0202 	orr.w	r2, r2, #2
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e6fa      	b.n	80047ca <keyb_proc+0xdfa>
					PULSE_LED_II_1_ON;
 80049d4:	2108      	movs	r1, #8
 80049d6:	485f      	ldr	r0, [pc, #380]	; (8004b54 <keyb_proc+0x1184>)
 80049d8:	f7fc fb7d 	bl	80010d6 <GPIO_ResetBits>
 80049dc:	e705      	b.n	80047ea <keyb_proc+0xe1a>
					PULSE_LED_II_2_ON;
 80049de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049e2:	485c      	ldr	r0, [pc, #368]	; (8004b54 <keyb_proc+0x1184>)
 80049e4:	f7fc fb77 	bl	80010d6 <GPIO_ResetBits>
 80049e8:	e70b      	b.n	8004802 <keyb_proc+0xe32>
		if (gSequencerMode_1 == SEQUENCER_MODE_WAIT) {
 80049ea:	4a4f      	ldr	r2, [pc, #316]	; (8004b28 <keyb_proc+0x1158>)
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	2a01      	cmp	r2, #1
 80049f2:	f47f af50 	bne.w	8004896 <keyb_proc+0xec6>
			gSequencerMode_1 = gPrevSequencerMode_1;
 80049f6:	4a4d      	ldr	r2, [pc, #308]	; (8004b2c <keyb_proc+0x115c>)
 80049f8:	7812      	ldrb	r2, [r2, #0]
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	494a      	ldr	r1, [pc, #296]	; (8004b28 <keyb_proc+0x1158>)
 80049fe:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004a00:	4a4b      	ldr	r2, [pc, #300]	; (8004b30 <keyb_proc+0x1160>)
 8004a02:	7811      	ldrb	r1, [r2, #0]
 8004a04:	f041 0101 	orr.w	r1, r1, #1
 8004a08:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;
 8004a0a:	7811      	ldrb	r1, [r2, #0]
 8004a0c:	f041 0102 	orr.w	r1, r1, #2
 8004a10:	7011      	strb	r1, [r2, #0]
			key_locked = 0;
 8004a12:	4a48      	ldr	r2, [pc, #288]	; (8004b34 <keyb_proc+0x1164>)
 8004a14:	2100      	movs	r1, #0
 8004a16:	7011      	strb	r1, [r2, #0]
 8004a18:	e73d      	b.n	8004896 <keyb_proc+0xec6>
		if (gSequencerMode_2 == SEQUENCER_MODE_WAIT) {			
 8004a1a:	4a47      	ldr	r2, [pc, #284]	; (8004b38 <keyb_proc+0x1168>)
 8004a1c:	7812      	ldrb	r2, [r2, #0]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	2a01      	cmp	r2, #1
 8004a22:	f47f af51 	bne.w	80048c8 <keyb_proc+0xef8>
			gSequencerMode_2 = gPrevSequencerMode_2;
 8004a26:	4a45      	ldr	r2, [pc, #276]	; (8004b3c <keyb_proc+0x116c>)
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	4942      	ldr	r1, [pc, #264]	; (8004b38 <keyb_proc+0x1168>)
 8004a2e:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004a30:	4a3f      	ldr	r2, [pc, #252]	; (8004b30 <keyb_proc+0x1160>)
 8004a32:	7811      	ldrb	r1, [r2, #0]
 8004a34:	f041 0101 	orr.w	r1, r1, #1
 8004a38:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;			
 8004a3a:	7811      	ldrb	r1, [r2, #0]
 8004a3c:	f041 0102 	orr.w	r1, r1, #2
 8004a40:	7011      	strb	r1, [r2, #0]
			key_locked = 0;
 8004a42:	4a3c      	ldr	r2, [pc, #240]	; (8004b34 <keyb_proc+0x1164>)
 8004a44:	2100      	movs	r1, #0
 8004a46:	7011      	strb	r1, [r2, #0]
 8004a48:	e73e      	b.n	80048c8 <keyb_proc+0xef8>
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
 8004a4a:	4e3e      	ldr	r6, [pc, #248]	; (8004b44 <keyb_proc+0x1174>)
 8004a4c:	7831      	ldrb	r1, [r6, #0]
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f7fd fe74 	bl	800273c <GetStepVoltage>
 8004a54:	4b40      	ldr	r3, [pc, #256]	; (8004b58 <keyb_proc+0x1188>)
 8004a56:	6018      	str	r0, [r3, #0]
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8004a58:	7831      	ldrb	r1, [r6, #0]
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f7fd ffc4 	bl	80029e8 <GetNextStep>
 8004a60:	7030      	strb	r0, [r6, #0]
			gStepWidth_1 = 0;
 8004a62:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <keyb_proc+0x118c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e757      	b.n	800491a <keyb_proc+0xf4a>
					PULSE_LED_I_1_ON;
 8004a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a6e:	4836      	ldr	r0, [pc, #216]	; (8004b48 <keyb_proc+0x1178>)
 8004a70:	f7fc fb31 	bl	80010d6 <GPIO_ResetBits>
 8004a74:	e763      	b.n	800493e <keyb_proc+0xf6e>
					PULSE_LED_I_2_ON;
 8004a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a7a:	4833      	ldr	r0, [pc, #204]	; (8004b48 <keyb_proc+0x1178>)
 8004a7c:	f7fc fb2b 	bl	80010d6 <GPIO_ResetBits>
 8004a80:	e767      	b.n	8004952 <keyb_proc+0xf82>
	}	}
	} else advanced_counter_1 = 0;
 8004a82:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <keyb_proc+0x1170>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
	
		if (!key->b.StageAddress2Advance) {
 8004a88:	7963      	ldrb	r3, [r4, #5]
 8004a8a:	f013 0f08 	tst.w	r3, #8
 8004a8e:	f040 8088 	bne.w	8004ba2 <keyb_proc+0x11d2>
			
		advanced_counter_2++;
 8004a92:	4a33      	ldr	r2, [pc, #204]	; (8004b60 <keyb_proc+0x1190>)
 8004a94:	7813      	ldrb	r3, [r2, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	7013      	strb	r3, [r2, #0]
//		if(advanced_counter_2 == 10)
		{
		if(gSequencerMode_2 != SEQUENCER_MODE_WAIT)
 8004a9c:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <keyb_proc+0x1168>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f000 8080 	beq.w	8004ba8 <keyb_proc+0x11d8>
				{
		if(gSequencerMode_2 == SEQUENCER_MODE_RUN)
 8004aa8:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <keyb_proc+0x1168>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05d      	beq.n	8004b6c <keyb_proc+0x119c>
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
			gStepWidth_2 = 0;
		}
		else 
		{
			if(gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z )(gPrevSequencerMode_2 = gSequencerMode_2);
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <keyb_proc+0x1168>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d009      	beq.n	8004ace <keyb_proc+0x10fe>
 8004aba:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <keyb_proc+0x1168>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d004      	beq.n	8004ace <keyb_proc+0x10fe>
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <keyb_proc+0x1168>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <keyb_proc+0x116c>)
 8004acc:	7013      	strb	r3, [r2, #0]
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8004ace:	4c25      	ldr	r4, [pc, #148]	; (8004b64 <keyb_proc+0x1194>)
 8004ad0:	7821      	ldrb	r1, [r4, #0]
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	f7fd ff88 	bl	80029e8 <GetNextStep>
 8004ad8:	7020      	strb	r0, [r4, #0]
		}
		gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8004ada:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <keyb_proc+0x1168>)
 8004adc:	2202      	movs	r2, #2
 8004ade:	701a      	strb	r2, [r3, #0]
				PULSE_LED_II_ALL_ON;
 8004ae0:	2104      	movs	r1, #4
 8004ae2:	481c      	ldr	r0, [pc, #112]	; (8004b54 <keyb_proc+0x1184>)
 8004ae4:	f7fc faf7 	bl	80010d6 <GPIO_ResetBits>
				
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8004ae8:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <keyb_proc+0x1194>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f103 0220 	add.w	r2, r3, #32
 8004af0:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <keyb_proc+0x117c>)
 8004af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004afc:	d146      	bne.n	8004b8c <keyb_proc+0x11bc>
					PULSE_LED_II_1_ON;
				};
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8004afe:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <keyb_proc+0x1194>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f103 0220 	add.w	r2, r3, #32
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <keyb_proc+0x117c>)
 8004b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004b12:	d140      	bne.n	8004b96 <keyb_proc+0x11c6>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 8004b14:	4c14      	ldr	r4, [pc, #80]	; (8004b68 <keyb_proc+0x1198>)
 8004b16:	2101      	movs	r1, #1
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f7fc fcc3 	bl	80014a4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7fc fcb0 	bl	8001486 <TIM_SetCounter>
 8004b26:	e03f      	b.n	8004ba8 <keyb_proc+0x11d8>
 8004b28:	200002c1 	.word	0x200002c1
 8004b2c:	200002bd 	.word	0x200002bd
 8004b30:	200002f0 	.word	0x200002f0
 8004b34:	200002cc 	.word	0x200002cc
 8004b38:	200002c2 	.word	0x200002c2
 8004b3c:	200002be 	.word	0x200002be
 8004b40:	200002a8 	.word	0x200002a8
 8004b44:	200002bf 	.word	0x200002bf
 8004b48:	40020400 	.word	0x40020400
 8004b4c:	200008a4 	.word	0x200008a4
 8004b50:	40002000 	.word	0x40002000
 8004b54:	40020000 	.word	0x40020000
 8004b58:	200002a0 	.word	0x200002a0
 8004b5c:	200002c4 	.word	0x200002c4
 8004b60:	200002a9 	.word	0x200002a9
 8004b64:	200002c0 	.word	0x200002c0
 8004b68:	40010400 	.word	0x40010400
			PreviousStep_2 = GetStepVoltage(1, gSequenceStepNumber_2);
 8004b6c:	4c1b      	ldr	r4, [pc, #108]	; (8004bdc <keyb_proc+0x120c>)
 8004b6e:	7821      	ldrb	r1, [r4, #0]
 8004b70:	2001      	movs	r0, #1
 8004b72:	f7fd fde3 	bl	800273c <GetStepVoltage>
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <keyb_proc+0x1210>)
 8004b78:	6018      	str	r0, [r3, #0]
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8004b7a:	7821      	ldrb	r1, [r4, #0]
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	f7fd ff33 	bl	80029e8 <GetNextStep>
 8004b82:	7020      	strb	r0, [r4, #0]
			gStepWidth_2 = 0;
 8004b84:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <keyb_proc+0x1214>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e7a6      	b.n	8004ada <keyb_proc+0x110a>
					PULSE_LED_II_1_ON;
 8004b8c:	2108      	movs	r1, #8
 8004b8e:	4816      	ldr	r0, [pc, #88]	; (8004be8 <keyb_proc+0x1218>)
 8004b90:	f7fc faa1 	bl	80010d6 <GPIO_ResetBits>
 8004b94:	e7b3      	b.n	8004afe <keyb_proc+0x112e>
					PULSE_LED_II_2_ON;
 8004b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b9a:	4813      	ldr	r0, [pc, #76]	; (8004be8 <keyb_proc+0x1218>)
 8004b9c:	f7fc fa9b 	bl	80010d6 <GPIO_ResetBits>
 8004ba0:	e7b8      	b.n	8004b14 <keyb_proc+0x1144>
	
			}
	}
	}else advanced_counter_2 = 0;
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <keyb_proc+0x121c>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
				
	if (gKeysNotValid == 0) {
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <keyb_proc+0x1220>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b12b      	cbz	r3, 8004bba <keyb_proc+0x11ea>
		Steps[Section][StepNum] = tmpStep;				
		DisplayUpdateFlags.b.MainDisplay = 1;	
	} else {
		gKeysNotValid = 0;
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <keyb_proc+0x1220>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
	};
				
	return 1;
}
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	b003      	add	sp, #12
 8004bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Steps[Section][StepNum] = tmpStep;				
 8004bba:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 8004bbe:	4f0d      	ldr	r7, [pc, #52]	; (8004bf4 <keyb_proc+0x1224>)
 8004bc0:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8004bc4:	ab02      	add	r3, sp, #8
 8004bc6:	e913 0003 	ldmdb	r3, {r0, r1}
 8004bca:	e885 0003 	stmia.w	r5, {r0, r1}
		DisplayUpdateFlags.b.MainDisplay = 1;	
 8004bce:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <keyb_proc+0x1228>)
 8004bd0:	7813      	ldrb	r3, [r2, #0]
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	7013      	strb	r3, [r2, #0]
 8004bd8:	e7ec      	b.n	8004bb4 <keyb_proc+0x11e4>
 8004bda:	bf00      	nop
 8004bdc:	200002c0 	.word	0x200002c0
 8004be0:	200002a4 	.word	0x200002a4
 8004be4:	200002c8 	.word	0x200002c8
 8004be8:	40020000 	.word	0x40020000
 8004bec:	200002a9 	.word	0x200002a9
 8004bf0:	200002bc 	.word	0x200002bc
 8004bf4:	200008a4 	.word	0x200008a4
 8004bf8:	200002f0 	.word	0x200002f0

08004bfc <UpdateModeSection>:

/*
	Update leds function
*/
void UpdateModeSection(void)
{
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	b082      	sub	sp, #8
	unsigned char StepNum = 0, Section = 0;
	uLeds mLeds;
	uStep *mStep;
	
	mLeds.value[0] = 0xFF;
 8004c00:	23ff      	movs	r3, #255	; 0xff
 8004c02:	f88d 3004 	strb.w	r3, [sp, #4]
	mLeds.value[1] = 0xFF;
 8004c06:	f88d 3005 	strb.w	r3, [sp, #5]
	mLeds.value[2] = 0xFF;
 8004c0a:	f88d 3006 	strb.w	r3, [sp, #6]
	mLeds.value[3] = 0xFF;
 8004c0e:	f88d 3007 	strb.w	r3, [sp, #7]

	if ((gSequencerMode_1 == SEQUENCER_MODE_RUN) ||
 8004c12:	4bbd      	ldr	r3, [pc, #756]	; (8004f08 <UpdateModeSection+0x30c>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b123      	cbz	r3, 8004c22 <UpdateModeSection+0x26>
			(gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)) {
 8004c18:	4bbb      	ldr	r3, [pc, #748]	; (8004f08 <UpdateModeSection+0x30c>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_1 == SEQUENCER_MODE_RUN) ||
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d105      	bne.n	8004c2e <UpdateModeSection+0x32>
		mLeds.b.Seq1Run = 0;
 8004c22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004c26:	f36f 0382 	bfc	r3, #2, #1
 8004c2a:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT) ||
 8004c2e:	4bb6      	ldr	r3, [pc, #728]	; (8004f08 <UpdateModeSection+0x30c>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d009      	beq.n	8004c4c <UpdateModeSection+0x50>
			(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 8004c38:	4bb3      	ldr	r3, [pc, #716]	; (8004f08 <UpdateModeSection+0x30c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	b2db      	uxtb	r3, r3
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT) ||
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d004      	beq.n	8004c4c <UpdateModeSection+0x50>
			(gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)  ) {
 8004c42:	4bb1      	ldr	r3, [pc, #708]	; (8004f08 <UpdateModeSection+0x30c>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
			(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 8004c48:	2b05      	cmp	r3, #5
 8004c4a:	d105      	bne.n	8004c58 <UpdateModeSection+0x5c>
		mLeds.b.Seq1Wait = 0;
 8004c4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004c50:	f36f 0341 	bfc	r3, #1, #1
 8004c54:	f88d 3004 	strb.w	r3, [sp, #4]
	};
			
	if (gSequencerMode_1 == SEQUENCER_MODE_STOP) {
 8004c58:	4bab      	ldr	r3, [pc, #684]	; (8004f08 <UpdateModeSection+0x30c>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	f000 8173 	beq.w	8004f4a <UpdateModeSection+0x34e>
		mLeds.b.Seq1Stop = 0;
	};
	
	if ((gSequencerMode_2 == SEQUENCER_MODE_RUN) ||
 8004c64:	4ba9      	ldr	r3, [pc, #676]	; (8004f0c <UpdateModeSection+0x310>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	b123      	cbz	r3, 8004c74 <UpdateModeSection+0x78>
			(gSequencerMode_2 == SEQUENCER_MODE_ADVANCE) ) {
 8004c6a:	4ba8      	ldr	r3, [pc, #672]	; (8004f0c <UpdateModeSection+0x310>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_2 == SEQUENCER_MODE_RUN) ||
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d105      	bne.n	8004c80 <UpdateModeSection+0x84>
		mLeds.b.Seq2Run = 0;
 8004c74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004c78:	f36f 1345 	bfc	r3, #5, #1
 8004c7c:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if ((gSequencerMode_2 == SEQUENCER_MODE_WAIT) ||
 8004c80:	4ba2      	ldr	r3, [pc, #648]	; (8004f0c <UpdateModeSection+0x310>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d009      	beq.n	8004c9e <UpdateModeSection+0xa2>
			(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 8004c8a:	4ba0      	ldr	r3, [pc, #640]	; (8004f0c <UpdateModeSection+0x310>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_2 == SEQUENCER_MODE_WAIT) ||
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d004      	beq.n	8004c9e <UpdateModeSection+0xa2>
			(gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) ) {
 8004c94:	4b9d      	ldr	r3, [pc, #628]	; (8004f0c <UpdateModeSection+0x310>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
			(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d105      	bne.n	8004caa <UpdateModeSection+0xae>
		mLeds.b.Seq2Wait = 0;
 8004c9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ca2:	f36f 1304 	bfc	r3, #4, #1
 8004ca6:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if (gSequencerMode_2 == SEQUENCER_MODE_STOP) {
 8004caa:	4b98      	ldr	r3, [pc, #608]	; (8004f0c <UpdateModeSection+0x310>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	f000 8151 	beq.w	8004f58 <UpdateModeSection+0x35c>
		mLeds.b.Seq2Stop = 0;
	};
	
	
	/* Determine step num for different DisplayModes*/
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8004cb6:	4b96      	ldr	r3, [pc, #600]	; (8004f10 <UpdateModeSection+0x314>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 8153 	bne.w	8004f66 <UpdateModeSection+0x36a>
		StepNum = gSequenceStepNumber_1;
 8004cc0:	4b94      	ldr	r3, [pc, #592]	; (8004f14 <UpdateModeSection+0x318>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
		Section = 0;
	}
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8004cc6:	4a92      	ldr	r2, [pc, #584]	; (8004f10 <UpdateModeSection+0x314>)
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	2a01      	cmp	r2, #1
 8004cce:	f000 814c 	beq.w	8004f6a <UpdateModeSection+0x36e>
 8004cd2:	2100      	movs	r1, #0
		StepNum = gSequenceStepNumber_2;
		Section = 1;
	};
	if ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) {
 8004cd4:	4a8e      	ldr	r2, [pc, #568]	; (8004f10 <UpdateModeSection+0x314>)
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	2a02      	cmp	r2, #2
 8004cdc:	f000 814a 	beq.w	8004f74 <UpdateModeSection+0x378>
		StepNum = gEditModeStepNum;
		Section = 0;
	}
	if ( gDisplayMode == DISPLAY_MODE_EDIT_2 ) {
 8004ce0:	4a8b      	ldr	r2, [pc, #556]	; (8004f10 <UpdateModeSection+0x314>)
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	2a03      	cmp	r2, #3
 8004ce8:	f000 8148 	beq.w	8004f7c <UpdateModeSection+0x380>
		Section = 1;
	};
	
	mStep = (uStep*) &Steps[Section][StepNum];
	
	mLeds.b.VoltageFull  	= ~mStep->b.FullRange;
 8004cec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004cf0:	4a89      	ldr	r2, [pc, #548]	; (8004f18 <UpdateModeSection+0x31c>)
 8004cf2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cf6:	78da      	ldrb	r2, [r3, #3]
 8004cf8:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004cfc:	f082 0201 	eor.w	r2, r2, #1
 8004d00:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004d04:	f362 0182 	bfi	r1, r2, #2, #1
 8004d08:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage0     	= ~mStep->b.Voltage0;
 8004d0c:	78da      	ldrb	r2, [r3, #3]
 8004d0e:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004d12:	f082 0201 	eor.w	r2, r2, #1
 8004d16:	b2c9      	uxtb	r1, r1
 8004d18:	f362 1104 	bfi	r1, r2, #4, #1
 8004d1c:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage2     	= ~mStep->b.Voltage2;
 8004d20:	78da      	ldrb	r2, [r3, #3]
 8004d22:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8004d26:	f082 0201 	eor.w	r2, r2, #1
 8004d2a:	b2c9      	uxtb	r1, r1
 8004d2c:	f362 1145 	bfi	r1, r2, #5, #1
 8004d30:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage4     	= ~mStep->b.Voltage4;
 8004d34:	78da      	ldrb	r2, [r3, #3]
 8004d36:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8004d3a:	f082 0201 	eor.w	r2, r2, #1
 8004d3e:	b2c9      	uxtb	r1, r1
 8004d40:	f362 1186 	bfi	r1, r2, #6, #1
 8004d44:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage6     	= ~mStep->b.Voltage6;
 8004d48:	78da      	ldrb	r2, [r3, #3]
 8004d4a:	ea6f 12d2 	mvn.w	r2, r2, lsr #7
 8004d4e:	b2c9      	uxtb	r1, r1
 8004d50:	f362 11c7 	bfi	r1, r2, #7, #1
 8004d54:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage8     	= ~mStep->b.Voltage8;
 8004d58:	791a      	ldrb	r2, [r3, #4]
 8004d5a:	f002 0201 	and.w	r2, r2, #1
 8004d5e:	f082 0201 	eor.w	r2, r2, #1
 8004d62:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004d66:	f362 0100 	bfi	r1, r2, #0, #1
 8004d6a:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.Pulse1       	= ~mStep->b.OutputPulse1; //hack for Gate1 Gate2 leds
 8004d6e:	795a      	ldrb	r2, [r3, #5]
 8004d70:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004d74:	f082 0201 	eor.w	r2, r2, #1
 8004d78:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004d7c:	f362 1186 	bfi	r1, r2, #6, #1
 8004d80:	f88d 1004 	strb.w	r1, [sp, #4]
  mLeds.b.Pulse2       	= ~mStep->b.OutputPulse2;
 8004d84:	795a      	ldrb	r2, [r3, #5]
 8004d86:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004d8a:	f082 0201 	eor.w	r2, r2, #1
 8004d8e:	b2c9      	uxtb	r1, r1
 8004d90:	f362 11c7 	bfi	r1, r2, #7, #1
 8004d94:	f88d 1004 	strb.w	r1, [sp, #4]
  mLeds.b.CycleFirst   	= ~mStep->b.CycleFirst;
 8004d98:	791a      	ldrb	r2, [r3, #4]
 8004d9a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004d9e:	f082 0201 	eor.w	r2, r2, #1
 8004da2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004da6:	f362 1104 	bfi	r1, r2, #4, #1
 8004daa:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.CycleLast    	= ~mStep->b.CycleLast;
 8004dae:	791a      	ldrb	r2, [r3, #4]
 8004db0:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8004db4:	f082 0201 	eor.w	r2, r2, #1
 8004db8:	b2c9      	uxtb	r1, r1
 8004dba:	f362 1145 	bfi	r1, r2, #5, #1
 8004dbe:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.VoltageSource = ~mStep->b.VoltageSource;
 8004dc2:	78da      	ldrb	r2, [r3, #3]
 8004dc4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004dc8:	f082 0201 	eor.w	r2, r2, #1
 8004dcc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004dd0:	f362 01c3 	bfi	r1, r2, #3, #1
 8004dd4:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Integration   = ~mStep->b.Sloped;
 8004dd8:	78da      	ldrb	r2, [r3, #3]
 8004dda:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8004dde:	f082 0201 	eor.w	r2, r2, #1
 8004de2:	b2c9      	uxtb	r1, r1
 8004de4:	f362 0141 	bfi	r1, r2, #1, #1
 8004de8:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Quantization  = ~mStep->b.Quantize;
 8004dec:	78da      	ldrb	r2, [r3, #3]
 8004dee:	f002 0201 	and.w	r2, r2, #1
 8004df2:	f082 0201 	eor.w	r2, r2, #1
 8004df6:	b2c9      	uxtb	r1, r1
 8004df8:	f362 0100 	bfi	r1, r2, #0, #1
 8004dfc:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.TimeRange0   	= ~mStep->b.TimeRange_p03;
 8004e00:	791a      	ldrb	r2, [r3, #4]
 8004e02:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8004e06:	f082 0201 	eor.w	r2, r2, #1
 8004e0a:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004e0e:	f362 1186 	bfi	r1, r2, #6, #1
 8004e12:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.TimeRange1   	= ~mStep->b.TimeRange_p3;
 8004e16:	791a      	ldrb	r2, [r3, #4]
 8004e18:	ea6f 12d2 	mvn.w	r2, r2, lsr #7
 8004e1c:	b2c9      	uxtb	r1, r1
 8004e1e:	f362 11c7 	bfi	r1, r2, #7, #1
 8004e22:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.TimeRange2   	= ~mStep->b.TimeRange_3;
 8004e26:	795a      	ldrb	r2, [r3, #5]
 8004e28:	f002 0201 	and.w	r2, r2, #1
 8004e2c:	f082 0201 	eor.w	r2, r2, #1
 8004e30:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004e34:	f362 0100 	bfi	r1, r2, #0, #1
 8004e38:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.TimeRange3   	= ~mStep->b.TimeRange_30;
 8004e3c:	795a      	ldrb	r2, [r3, #5]
 8004e3e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8004e42:	f082 0201 	eor.w	r2, r2, #1
 8004e46:	b2c9      	uxtb	r1, r1
 8004e48:	f362 0141 	bfi	r1, r2, #1, #1
 8004e4c:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.TimeSource   	= ~mStep->b.TimeSource;
 8004e50:	795a      	ldrb	r2, [r3, #5]
 8004e52:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004e56:	f082 0201 	eor.w	r2, r2, #1
 8004e5a:	b2c9      	uxtb	r1, r1
 8004e5c:	f362 0182 	bfi	r1, r2, #2, #1
 8004e60:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.OPStop       	= ~mStep->b.OpModeSTOP;
 8004e64:	791a      	ldrb	r2, [r3, #4]
 8004e66:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8004e6a:	f082 0201 	eor.w	r2, r2, #1
 8004e6e:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004e72:	f362 0141 	bfi	r1, r2, #1, #1
 8004e76:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.OPSustain    	= ~mStep->b.OpModeSUSTAIN;
 8004e7a:	791a      	ldrb	r2, [r3, #4]
 8004e7c:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004e80:	f082 0201 	eor.w	r2, r2, #1
 8004e84:	b2c9      	uxtb	r1, r1
 8004e86:	f362 0182 	bfi	r1, r2, #2, #1
 8004e8a:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.OPEnable     	= ~mStep->b.OpModeENABLE;
 8004e8e:	791b      	ldrb	r3, [r3, #4]
 8004e90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e94:	f083 0301 	eor.w	r3, r3, #1
 8004e98:	b2ca      	uxtb	r2, r1
 8004e9a:	f363 02c3 	bfi	r2, r3, #3, #1
 8004e9e:	f88d 2006 	strb.w	r2, [sp, #6]
	
	if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <UpdateModeSection+0x314>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d00e      	beq.n	8004eca <UpdateModeSection+0x2ce>
 8004eac:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <UpdateModeSection+0x314>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d009      	beq.n	8004eca <UpdateModeSection+0x2ce>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 8004eb6:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <UpdateModeSection+0x314>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d004      	beq.n	8004eca <UpdateModeSection+0x2ce>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 8004ec0:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <UpdateModeSection+0x314>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	d17f      	bne.n	8004fca <UpdateModeSection+0x3ce>
		mLeds.value[0] = 0xFF;
 8004eca:	23ff      	movs	r3, #255	; 0xff
 8004ecc:	f88d 3004 	strb.w	r3, [sp, #4]
		mLeds.value[1] = 0xFF;
 8004ed0:	f88d 3005 	strb.w	r3, [sp, #5]
		mLeds.value[2] = 0xFF;
 8004ed4:	f88d 3006 	strb.w	r3, [sp, #6]
		mLeds.value[3] = 0xFF;
 8004ed8:	f88d 3007 	strb.w	r3, [sp, #7]
					
		if((gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2))
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <UpdateModeSection+0x314>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d04e      	beq.n	8004f84 <UpdateModeSection+0x388>
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <UpdateModeSection+0x314>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	d049      	beq.n	8004f84 <UpdateModeSection+0x388>
			{
				 mLeds.b.Seq1Wait = 1;
			}
			else save_counter = 0;
		}
		else if((gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2))
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <UpdateModeSection+0x314>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d010      	beq.n	8004f1c <UpdateModeSection+0x320>
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <UpdateModeSection+0x314>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b07      	cmp	r3, #7
 8004f02:	d154      	bne.n	8004fae <UpdateModeSection+0x3b2>
 8004f04:	e00a      	b.n	8004f1c <UpdateModeSection+0x320>
 8004f06:	bf00      	nop
 8004f08:	200002c1 	.word	0x200002c1
 8004f0c:	200002c2 	.word	0x200002c2
 8004f10:	200002b0 	.word	0x200002b0
 8004f14:	200002bf 	.word	0x200002bf
 8004f18:	200008a4 	.word	0x200008a4
		{
			mLeds.b.Seq1Wait = 1;
 8004f1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	f88d 3004 	strb.w	r3, [sp, #4]
			load_counter++;
 8004f28:	4b51      	ldr	r3, [pc, #324]	; (8005070 <UpdateModeSection+0x474>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	3201      	adds	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
			if(load_counter < 1500)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f240 53db 	movw	r3, #1499	; 0x5db
 8004f36:	429a      	cmp	r2, r3
 8004f38:	f200 8081 	bhi.w	800503e <UpdateModeSection+0x442>
			{
				 mLeds.b.Seq2Wait = 0;
 8004f3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f40:	f36f 1304 	bfc	r3, #4, #1
 8004f44:	f88d 3004 	strb.w	r3, [sp, #4]
 8004f48:	e031      	b.n	8004fae <UpdateModeSection+0x3b2>
		mLeds.b.Seq1Stop = 0;
 8004f4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f4e:	f36f 0300 	bfc	r3, #0, #1
 8004f52:	f88d 3004 	strb.w	r3, [sp, #4]
 8004f56:	e685      	b.n	8004c64 <UpdateModeSection+0x68>
		mLeds.b.Seq2Stop = 0;
 8004f58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f5c:	f36f 03c3 	bfc	r3, #3, #1
 8004f60:	f88d 3004 	strb.w	r3, [sp, #4]
 8004f64:	e6a7      	b.n	8004cb6 <UpdateModeSection+0xba>
	unsigned char StepNum = 0, Section = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e6ad      	b.n	8004cc6 <UpdateModeSection+0xca>
		StepNum = gSequenceStepNumber_2;
 8004f6a:	4b42      	ldr	r3, [pc, #264]	; (8005074 <UpdateModeSection+0x478>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
		Section = 1;
 8004f70:	2101      	movs	r1, #1
 8004f72:	e6af      	b.n	8004cd4 <UpdateModeSection+0xd8>
		StepNum = gEditModeStepNum;
 8004f74:	4b40      	ldr	r3, [pc, #256]	; (8005078 <UpdateModeSection+0x47c>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 8004f78:	2100      	movs	r1, #0
 8004f7a:	e6b1      	b.n	8004ce0 <UpdateModeSection+0xe4>
		StepNum = gEditModeStepNum;
 8004f7c:	4b3e      	ldr	r3, [pc, #248]	; (8005078 <UpdateModeSection+0x47c>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 8004f80:	2101      	movs	r1, #1
 8004f82:	e6b3      	b.n	8004cec <UpdateModeSection+0xf0>
			mLeds.b.Seq2Wait = 1;
 8004f84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f88:	f043 0310 	orr.w	r3, r3, #16
 8004f8c:	f88d 3004 	strb.w	r3, [sp, #4]
			save_counter++;
 8004f90:	4b3a      	ldr	r3, [pc, #232]	; (800507c <UpdateModeSection+0x480>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	3201      	adds	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
			if(save_counter < 1500)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	f240 53db 	movw	r3, #1499	; 0x5db
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d83c      	bhi.n	800501c <UpdateModeSection+0x420>
				 mLeds.b.Seq1Wait = 0;
 8004fa2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004fa6:	f36f 0341 	bfc	r3, #1, #1
 8004faa:	f88d 3004 	strb.w	r3, [sp, #4]
			else load_counter = 0;
			
			
		}
			
		if(!Is_Expander_Present())
 8004fae:	f7fc fe61 	bl	8001c74 <Is_Expander_Present>
 8004fb2:	b950      	cbnz	r0, 8004fca <UpdateModeSection+0x3ce>
		{	
			if(bank == 1) mLeds.value[0] &= ~(1 << 6);
 8004fb4:	4b32      	ldr	r3, [pc, #200]	; (8005080 <UpdateModeSection+0x484>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d050      	beq.n	8005060 <UpdateModeSection+0x464>
			else mLeds.value[0] &= ~(1 << 7);
 8004fbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	f88d 3004 	strb.w	r3, [sp, #4]
		}
	};
	
	//Send data to leds
	LEDS_modes_SendStruct(&mLeds);
 8004fca:	a801      	add	r0, sp, #4
 8004fcc:	f7fc fe9e 	bl	8001d0c <LEDS_modes_SendStruct>
	
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_1) ||
 8004fd0:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <UpdateModeSection+0x488>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b123      	cbz	r3, 8004fe0 <UpdateModeSection+0x3e4>
			(gDisplayMode == DISPLAY_MODE_EDIT_1) ) {
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	; (8005084 <UpdateModeSection+0x488>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_1) ||
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d108      	bne.n	8004ff2 <UpdateModeSection+0x3f6>
		DISPLAY_LED_I_ON;
 8004fe0:	4c29      	ldr	r4, [pc, #164]	; (8005088 <UpdateModeSection+0x48c>)
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f7fc f874 	bl	80010d2 <GPIO_SetBits>
		DISPLAY_LED_II_OFF;
 8004fea:	2180      	movs	r1, #128	; 0x80
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7fc f872 	bl	80010d6 <GPIO_ResetBits>
	};
			
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_2) ||
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <UpdateModeSection+0x488>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d004      	beq.n	8005006 <UpdateModeSection+0x40a>
			(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 8004ffc:	4b21      	ldr	r3, [pc, #132]	; (8005084 <UpdateModeSection+0x488>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_2) ||
 8005002:	2b03      	cmp	r3, #3
 8005004:	d108      	bne.n	8005018 <UpdateModeSection+0x41c>
		DISPLAY_LED_II_ON;
 8005006:	4c20      	ldr	r4, [pc, #128]	; (8005088 <UpdateModeSection+0x48c>)
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	4620      	mov	r0, r4
 800500c:	f7fc f861 	bl	80010d2 <GPIO_SetBits>
		DISPLAY_LED_I_OFF;
 8005010:	2140      	movs	r1, #64	; 0x40
 8005012:	4620      	mov	r0, r4
 8005014:	f7fc f85f 	bl	80010d6 <GPIO_ResetBits>
	};
};
 8005018:	b002      	add	sp, #8
 800501a:	bd10      	pop	{r4, pc}
			else if(save_counter < 3000)
 800501c:	4b17      	ldr	r3, [pc, #92]	; (800507c <UpdateModeSection+0x480>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8005024:	429a      	cmp	r2, r3
 8005026:	d806      	bhi.n	8005036 <UpdateModeSection+0x43a>
				 mLeds.b.Seq1Wait = 1;
 8005028:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	f88d 3004 	strb.w	r3, [sp, #4]
 8005034:	e7bb      	b.n	8004fae <UpdateModeSection+0x3b2>
			else save_counter = 0;
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <UpdateModeSection+0x480>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e7b7      	b.n	8004fae <UpdateModeSection+0x3b2>
			else if(load_counter < 3000)
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <UpdateModeSection+0x474>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8005046:	429a      	cmp	r2, r3
 8005048:	d806      	bhi.n	8005058 <UpdateModeSection+0x45c>
				 mLeds.b.Seq2Wait = 1;
 800504a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800504e:	f043 0310 	orr.w	r3, r3, #16
 8005052:	f88d 3004 	strb.w	r3, [sp, #4]
 8005056:	e7aa      	b.n	8004fae <UpdateModeSection+0x3b2>
			else load_counter = 0;
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <UpdateModeSection+0x474>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e7a6      	b.n	8004fae <UpdateModeSection+0x3b2>
			if(bank == 1) mLeds.value[0] &= ~(1 << 6);
 8005060:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005068:	f88d 3004 	strb.w	r3, [sp, #4]
 800506c:	e7ad      	b.n	8004fca <UpdateModeSection+0x3ce>
 800506e:	bf00      	nop
 8005070:	200002d0 	.word	0x200002d0
 8005074:	200002c0 	.word	0x200002c0
 8005078:	200002b1 	.word	0x200002b1
 800507c:	200002d4 	.word	0x200002d4
 8005080:	20000270 	.word	0x20000270
 8005084:	200002b0 	.word	0x200002b0
 8005088:	40020000 	.word	0x40020000

0800508c <UpdateStepSection>:

/*
	Steps section leds update function
*/
void UpdateStepSection(void)
{
 800508c:	b508      	push	{r3, lr}
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 800508e:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <UpdateStepSection+0x6c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b33b      	cbz	r3, 80050e4 <UpdateStepSection+0x58>
		LED_STEP_LightStep(gSequenceStepNumber_1);
	};
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8005094:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <UpdateStepSection+0x6c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d027      	beq.n	80050ee <UpdateStepSection+0x62>
		LED_STEP_LightStep(gSequenceStepNumber_2);
	};
	if ( ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) ||
 800509e:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <UpdateStepSection+0x6c>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d018      	beq.n	80050da <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_EDIT_2 ) ||
 80050a8:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <UpdateStepSection+0x6c>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b2db      	uxtb	r3, r3
	if ( ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) ||
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d013      	beq.n	80050da <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_SAVE_1 ) ||
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <UpdateStepSection+0x6c>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_EDIT_2 ) ||
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d00e      	beq.n	80050da <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_SAVE_2 ) ||
 80050bc:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <UpdateStepSection+0x6c>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_SAVE_1 ) ||
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d009      	beq.n	80050da <UpdateStepSection+0x4e>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || 
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <UpdateStepSection+0x6c>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_SAVE_2 ) ||
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	d004      	beq.n	80050da <UpdateStepSection+0x4e>
		(gDisplayMode == DISPLAY_MODE_LOAD_2)
 80050d0:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <UpdateStepSection+0x6c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || 
 80050d6:	2b07      	cmp	r3, #7
 80050d8:	d103      	bne.n	80050e2 <UpdateStepSection+0x56>
		) {
		LED_STEP_LightStep(gEditModeStepNum);
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <UpdateStepSection+0x70>)
 80050dc:	7818      	ldrb	r0, [r3, #0]
 80050de:	f7fc fe8f 	bl	8001e00 <LED_STEP_LightStep>
	};
};
 80050e2:	bd08      	pop	{r3, pc}
		LED_STEP_LightStep(gSequenceStepNumber_1);
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <UpdateStepSection+0x74>)
 80050e6:	7818      	ldrb	r0, [r3, #0]
 80050e8:	f7fc fe8a 	bl	8001e00 <LED_STEP_LightStep>
 80050ec:	e7d2      	b.n	8005094 <UpdateStepSection+0x8>
		LED_STEP_LightStep(gSequenceStepNumber_2);
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <UpdateStepSection+0x78>)
 80050f0:	7818      	ldrb	r0, [r3, #0]
 80050f2:	f7fc fe85 	bl	8001e00 <LED_STEP_LightStep>
 80050f6:	e7d2      	b.n	800509e <UpdateStepSection+0x12>
 80050f8:	200002b0 	.word	0x200002b0
 80050fc:	200002b1 	.word	0x200002b1
 8005100:	200002bf 	.word	0x200002bf
 8005104:	200002c0 	.word	0x200002c0

08005108 <Calibration>:


void Calibration(void)
{
 8005108:	b530      	push	{r4, r5, lr}
 800510a:	b083      	sub	sp, #12
	unsigned long i=0;
	uButtons myButtons;
	uLeds mLeds;	
	//volatile unsigned long long int key_state;
	myButtons.value = GetButton();
 800510c:	f7fc fc12 	bl	8001934 <GetButton>
 8005110:	460d      	mov	r5, r1
	
	mLeds.value[0]  	= 0xFF;
 8005112:	23ff      	movs	r3, #255	; 0xff
 8005114:	f88d 3004 	strb.w	r3, [sp, #4]
	mLeds.value[1]  	= 0xFF;
 8005118:	f88d 3005 	strb.w	r3, [sp, #5]
	mLeds.value[2]  	= 0xFF;
 800511c:	f88d 3006 	strb.w	r3, [sp, #6]
	mLeds.value[3]  	= 0xFF;
 8005120:	f88d 3007 	strb.w	r3, [sp, #7]
	DISPLAY_LED_II_OFF;
 8005124:	4c54      	ldr	r4, [pc, #336]	; (8005278 <Calibration+0x170>)
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	4620      	mov	r0, r4
 800512a:	f7fb ffd4 	bl	80010d6 <GPIO_ResetBits>
	DISPLAY_LED_I_OFF;
 800512e:	2140      	movs	r1, #64	; 0x40
 8005130:	4620      	mov	r0, r4
 8005132:	f7fb ffd0 	bl	80010d6 <GPIO_ResetBits>
	unsigned long i=0;
 8005136:	2400      	movs	r4, #0
	
	while(myButtons.b.StageAddress2Advance)
 8005138:	e014      	b.n	8005164 <Calibration+0x5c>
			mLeds.b.Seq1Stop = 0;
			mLeds.b.Seq2Run = 1;
			mLeds.b.Seq2Wait = 1;
			mLeds.b.Seq2Stop = 0;
		}
		else if(i < 4000)
 800513a:	f5b4 6f7a 	cmp.w	r4, #4000	; 0xfa0
 800513e:	d225      	bcs.n	800518c <Calibration+0x84>
		{
			mLeds.b.Seq1Run = 0;
 8005140:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Wait = 1;
 8005144:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			mLeds.b.Seq1Stop = 1;
			mLeds.b.Seq2Run = 0;
 8005148:	f043 0303 	orr.w	r3, r3, #3
			mLeds.b.Seq2Wait = 1;
 800514c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
			mLeds.b.Seq2Stop = 1;
 8005150:	f043 0318 	orr.w	r3, r3, #24
 8005154:	f88d 3004 	strb.w	r3, [sp, #4]
			mLeds.b.Seq2Wait = 0;
			mLeds.b.Seq2Stop = 1;
		}
		else i = 0;
		
		LEDS_modes_SendStruct(&mLeds);
 8005158:	a801      	add	r0, sp, #4
 800515a:	f7fc fdd7 	bl	8001d0c <LEDS_modes_SendStruct>

		myButtons.value = GetButton();
 800515e:	f7fc fbe9 	bl	8001934 <GetButton>
 8005162:	460d      	mov	r5, r1
	while(myButtons.b.StageAddress2Advance)
 8005164:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005168:	d025      	beq.n	80051b6 <Calibration+0xae>
		i++;
 800516a:	3401      	adds	r4, #1
		if(i < 2000)
 800516c:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8005170:	d2e3      	bcs.n	800513a <Calibration+0x32>
			mLeds.b.Seq1Run = 1;
 8005172:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Stop = 0;
 8005176:	f043 0306 	orr.w	r3, r3, #6
			mLeds.b.Seq2Run = 1;
 800517a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
			mLeds.b.Seq2Stop = 0;
 800517e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005182:	f36f 03c3 	bfc	r3, #3, #1
 8005186:	f88d 3004 	strb.w	r3, [sp, #4]
 800518a:	e7e5      	b.n	8005158 <Calibration+0x50>
		else if(i < 6000)
 800518c:	f241 736f 	movw	r3, #5999	; 0x176f
 8005190:	429c      	cmp	r4, r3
 8005192:	d80e      	bhi.n	80051b2 <Calibration+0xaa>
			mLeds.b.Seq1Run = 1;
 8005194:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Wait = 0;
 8005198:	f043 0304 	orr.w	r3, r3, #4
			mLeds.b.Seq1Stop = 1;
 800519c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
			mLeds.b.Seq2Wait = 0;
 80051a0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
			mLeds.b.Seq2Stop = 1;
 80051a4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80051a8:	f043 0308 	orr.w	r3, r3, #8
 80051ac:	f88d 3004 	strb.w	r3, [sp, #4]
 80051b0:	e7d2      	b.n	8005158 <Calibration+0x50>
		else i = 0;
 80051b2:	2400      	movs	r4, #0
 80051b4:	e7d0      	b.n	8005158 <Calibration+0x50>
	}
	//Measure external inputs
	for(i = 0; i < 8; i++)
 80051b6:	2400      	movs	r4, #0
 80051b8:	e000      	b.n	80051bc <Calibration+0xb4>
 80051ba:	3401      	adds	r4, #1
 80051bc:	2c07      	cmp	r4, #7
 80051be:	d80f      	bhi.n	80051e0 <Calibration+0xd8>
	{
		CalConstants[i] = AddData[i];
 80051c0:	4b2e      	ldr	r3, [pc, #184]	; (800527c <Calibration+0x174>)
 80051c2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80051c6:	4b2e      	ldr	r3, [pc, #184]	; (8005280 <Calibration+0x178>)
 80051c8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if(CalConstants[i] < 100) CalConstants[i] = 4095;
 80051cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80051d0:	2b63      	cmp	r3, #99	; 0x63
 80051d2:	d8f2      	bhi.n	80051ba <Calibration+0xb2>
 80051d4:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <Calibration+0x178>)
 80051d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80051da:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80051de:	e7ec      	b.n	80051ba <Calibration+0xb2>
	}
	ADCPause();
 80051e0:	f7fc feea 	bl	8001fb8 <ADCPause>
	//Store calibration consstants
	CAT25512_write_block(100*sizeof(Steps), (unsigned char *) CalConstants, sizeof(CalConstants));
 80051e4:	2220      	movs	r2, #32
 80051e6:	4926      	ldr	r1, [pc, #152]	; (8005280 <Calibration+0x178>)
 80051e8:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 80051ec:	f7fc fa7e 	bl	80016ec <CAT25512_write_block>
	mADC_init();
 80051f0:	f7fc fe36 	bl	8001e60 <mADC_init>
	while(!myButtons.b.StageAddress2Advance)
 80051f4:	e014      	b.n	8005220 <Calibration+0x118>
			mLeds.b.Seq1Stop = 0;
			mLeds.b.Seq2Run = 1;
			mLeds.b.Seq2Wait = 1;
			mLeds.b.Seq2Stop = 0;
		}
		else if(i < 4000)
 80051f6:	f5b4 6f7a 	cmp.w	r4, #4000	; 0xfa0
 80051fa:	d225      	bcs.n	8005248 <Calibration+0x140>
		{
			mLeds.b.Seq1Run = 0;
 80051fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Wait = 1;
 8005200:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			mLeds.b.Seq1Stop = 1;
			mLeds.b.Seq2Run = 0;
 8005204:	f043 0303 	orr.w	r3, r3, #3
			mLeds.b.Seq2Wait = 1;
 8005208:	f003 03df 	and.w	r3, r3, #223	; 0xdf
			mLeds.b.Seq2Stop = 1;
 800520c:	f043 0318 	orr.w	r3, r3, #24
 8005210:	f88d 3004 	strb.w	r3, [sp, #4]
			mLeds.b.Seq2Run = 1;
			mLeds.b.Seq2Wait = 0;
			mLeds.b.Seq2Stop = 1;
		}
		else i = 0;
		LEDS_modes_SendStruct(&mLeds);
 8005214:	a801      	add	r0, sp, #4
 8005216:	f7fc fd79 	bl	8001d0c <LEDS_modes_SendStruct>
		myButtons.value = GetButton();
 800521a:	f7fc fb8b 	bl	8001934 <GetButton>
 800521e:	460d      	mov	r5, r1
	while(!myButtons.b.StageAddress2Advance)
 8005220:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005224:	d125      	bne.n	8005272 <Calibration+0x16a>
				i++;
 8005226:	3401      	adds	r4, #1
		if(i < 2000)
 8005228:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 800522c:	d2e3      	bcs.n	80051f6 <Calibration+0xee>
			mLeds.b.Seq1Run = 1;
 800522e:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Stop = 0;
 8005232:	f043 0306 	orr.w	r3, r3, #6
			mLeds.b.Seq2Run = 1;
 8005236:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
			mLeds.b.Seq2Stop = 0;
 800523a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800523e:	f36f 03c3 	bfc	r3, #3, #1
 8005242:	f88d 3004 	strb.w	r3, [sp, #4]
 8005246:	e7e5      	b.n	8005214 <Calibration+0x10c>
		else if(i < 6000)
 8005248:	f241 736f 	movw	r3, #5999	; 0x176f
 800524c:	429c      	cmp	r4, r3
 800524e:	d80e      	bhi.n	800526e <Calibration+0x166>
			mLeds.b.Seq1Run = 1;
 8005250:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Wait = 0;
 8005254:	f043 0304 	orr.w	r3, r3, #4
			mLeds.b.Seq1Stop = 1;
 8005258:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
			mLeds.b.Seq2Wait = 0;
 800525c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
			mLeds.b.Seq2Stop = 1;
 8005260:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005264:	f043 0308 	orr.w	r3, r3, #8
 8005268:	f88d 3004 	strb.w	r3, [sp, #4]
 800526c:	e7d2      	b.n	8005214 <Calibration+0x10c>
		else i = 0;
 800526e:	2400      	movs	r4, #0
 8005270:	e7d0      	b.n	8005214 <Calibration+0x10c>
	}
}
 8005272:	b003      	add	sp, #12
 8005274:	bd30      	pop	{r4, r5, pc}
 8005276:	bf00      	nop
 8005278:	40020000 	.word	0x40020000
 800527c:	200007f8 	.word	0x200007f8
 8005280:	20000250 	.word	0x20000250

08005284 <delay_ms>:




void delay_ms(unsigned int ms)
{
 8005284:	b510      	push	{r4, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 800528a:	a801      	add	r0, sp, #4
 800528c:	f7fb ff3c 	bl	8001108 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000)*ms;
 8005290:	9b02      	ldr	r3, [sp, #8]
 8005292:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <delay_ms+0x30>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	0b5b      	lsrs	r3, r3, #13
 800529a:	fb04 f303 	mul.w	r3, r4, r3
 800529e:	9305      	str	r3, [sp, #20]
	for (; nCount!=0; nCount--);
 80052a0:	e002      	b.n	80052a8 <delay_ms+0x24>
 80052a2:	9b05      	ldr	r3, [sp, #20]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	9305      	str	r3, [sp, #20]
 80052a8:	9b05      	ldr	r3, [sp, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f9      	bne.n	80052a2 <delay_ms+0x1e>
}
 80052ae:	b006      	add	sp, #24
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	d1b71759 	.word	0xd1b71759

080052b8 <TIM6_DAC_IRQHandler>:
{
 80052b8:	b538      	push	{r3, r4, r5, lr}
	TIM6->SR = (uint16_t) ~TIM_IT_Update;	
 80052ba:	4b7b      	ldr	r3, [pc, #492]	; (80054a8 <TIM6_DAC_IRQHandler+0x1f0>)
 80052bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052c0:	821a      	strh	r2, [r3, #16]
	myButtons.value = GetButton();
 80052c2:	f7fc fb37 	bl	8001934 <GetButton>
	if(clear_counter1 < 30 && clear_counter2 < 30)
 80052c6:	4b79      	ldr	r3, [pc, #484]	; (80054ac <TIM6_DAC_IRQHandler+0x1f4>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b1d      	cmp	r3, #29
 80052cc:	d82d      	bhi.n	800532a <TIM6_DAC_IRQHandler+0x72>
 80052ce:	4a78      	ldr	r2, [pc, #480]	; (80054b0 <TIM6_DAC_IRQHandler+0x1f8>)
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	2a1d      	cmp	r2, #29
 80052d4:	d829      	bhi.n	800532a <TIM6_DAC_IRQHandler+0x72>
 80052d6:	b2c0      	uxtb	r0, r0
		if(!myButtons.b.ClearUp || !myButtons.b.ClearDown) 
 80052d8:	f000 0103 	and.w	r1, r0, #3
 80052dc:	2903      	cmp	r1, #3
 80052de:	d014      	beq.n	800530a <TIM6_DAC_IRQHandler+0x52>
			if(!myButtons.b.ClearUp) clear_counter1++;
 80052e0:	f010 0f01 	tst.w	r0, #1
 80052e4:	d109      	bne.n	80052fa <TIM6_DAC_IRQHandler+0x42>
 80052e6:	3301      	adds	r3, #1
 80052e8:	4970      	ldr	r1, [pc, #448]	; (80054ac <TIM6_DAC_IRQHandler+0x1f4>)
 80052ea:	700b      	strb	r3, [r1, #0]
			if(!myButtons.b.ClearDown) clear_counter2++;
 80052ec:	f010 0f02 	tst.w	r0, #2
 80052f0:	d107      	bne.n	8005302 <TIM6_DAC_IRQHandler+0x4a>
 80052f2:	3201      	adds	r2, #1
 80052f4:	4b6e      	ldr	r3, [pc, #440]	; (80054b0 <TIM6_DAC_IRQHandler+0x1f8>)
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e01d      	b.n	8005336 <TIM6_DAC_IRQHandler+0x7e>
			else clear_counter1 = 0;
 80052fa:	4b6c      	ldr	r3, [pc, #432]	; (80054ac <TIM6_DAC_IRQHandler+0x1f4>)
 80052fc:	2100      	movs	r1, #0
 80052fe:	7019      	strb	r1, [r3, #0]
 8005300:	e7f4      	b.n	80052ec <TIM6_DAC_IRQHandler+0x34>
			else clear_counter2 = 0;
 8005302:	4b6b      	ldr	r3, [pc, #428]	; (80054b0 <TIM6_DAC_IRQHandler+0x1f8>)
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e015      	b.n	8005336 <TIM6_DAC_IRQHandler+0x7e>
			clear_counter1 = 0;
 800530a:	2100      	movs	r1, #0
 800530c:	4b67      	ldr	r3, [pc, #412]	; (80054ac <TIM6_DAC_IRQHandler+0x1f4>)
 800530e:	7019      	strb	r1, [r3, #0]
			clear_counter2 = 0;
 8005310:	4b67      	ldr	r3, [pc, #412]	; (80054b0 <TIM6_DAC_IRQHandler+0x1f8>)
 8005312:	7019      	strb	r1, [r3, #0]
			TIM_SetCounter(TIM6, 0x00);
 8005314:	4c64      	ldr	r4, [pc, #400]	; (80054a8 <TIM6_DAC_IRQHandler+0x1f0>)
 8005316:	4620      	mov	r0, r4
 8005318:	f7fc f8b5 	bl	8001486 <TIM_SetCounter>
			TIM6->CR1 &= ~TIM_CR1_CEN;
 800531c:	8823      	ldrh	r3, [r4, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	8023      	strh	r3, [r4, #0]
 8005328:	e005      	b.n	8005336 <TIM6_DAC_IRQHandler+0x7e>
	else if(clear_counter1 == 30 || clear_counter2 == 30)
 800532a:	2b1e      	cmp	r3, #30
 800532c:	d004      	beq.n	8005338 <TIM6_DAC_IRQHandler+0x80>
 800532e:	4b60      	ldr	r3, [pc, #384]	; (80054b0 <TIM6_DAC_IRQHandler+0x1f8>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b1e      	cmp	r3, #30
 8005334:	d000      	beq.n	8005338 <TIM6_DAC_IRQHandler+0x80>
};
 8005336:	bd38      	pop	{r3, r4, r5, pc}
		LED_STEP_SendWord(0x0000);
 8005338:	2000      	movs	r0, #0
 800533a:	f7fc fd49 	bl	8001dd0 <LED_STEP_SendWord>
		delay_ms(500);
 800533e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005342:	f7ff ff9f 	bl	8005284 <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 8005346:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800534a:	f7fc fd41 	bl	8001dd0 <LED_STEP_SendWord>
		delay_ms(500);
 800534e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005352:	f7ff ff97 	bl	8005284 <delay_ms>
		LED_STEP_SendWord(0x0000);
 8005356:	2000      	movs	r0, #0
 8005358:	f7fc fd3a 	bl	8001dd0 <LED_STEP_SendWord>
		delay_ms(500);
 800535c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005360:	f7ff ff90 	bl	8005284 <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 8005364:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005368:	f7fc fd32 	bl	8001dd0 <LED_STEP_SendWord>
		delay_ms(500);
 800536c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005370:	f7ff ff88 	bl	8005284 <delay_ms>
		LED_STEP_SendWord(0x0000);
 8005374:	2000      	movs	r0, #0
 8005376:	f7fc fd2b 	bl	8001dd0 <LED_STEP_SendWord>
		delay_ms(500);
 800537a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800537e:	f7ff ff81 	bl	8005284 <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 8005382:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005386:	f7fc fd23 	bl	8001dd0 <LED_STEP_SendWord>
		TIM_SetCounter(TIM6, 0x00);
 800538a:	4c47      	ldr	r4, [pc, #284]	; (80054a8 <TIM6_DAC_IRQHandler+0x1f0>)
 800538c:	2100      	movs	r1, #0
 800538e:	4620      	mov	r0, r4
 8005390:	f7fc f879 	bl	8001486 <TIM_SetCounter>
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8005394:	8823      	ldrh	r3, [r4, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	b29b      	uxth	r3, r3
 800539e:	8023      	strh	r3, [r4, #0]
		if(clear_counter1 == 30)
 80053a0:	4b42      	ldr	r3, [pc, #264]	; (80054ac <TIM6_DAC_IRQHandler+0x1f4>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b1e      	cmp	r3, #30
 80053a6:	d023      	beq.n	80053f0 <TIM6_DAC_IRQHandler+0x138>
		else if(clear_counter2 == 30)
 80053a8:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <TIM6_DAC_IRQHandler+0x1f8>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b1e      	cmp	r3, #30
 80053ae:	d047      	beq.n	8005440 <TIM6_DAC_IRQHandler+0x188>
		clear_counter1 = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	4a3e      	ldr	r2, [pc, #248]	; (80054ac <TIM6_DAC_IRQHandler+0x1f4>)
 80053b4:	7013      	strb	r3, [r2, #0]
		clear_counter2 = 0;
 80053b6:	4a3e      	ldr	r2, [pc, #248]	; (80054b0 <TIM6_DAC_IRQHandler+0x1f8>)
 80053b8:	7013      	strb	r3, [r2, #0]
		if (gDisplayMode == DISPLAY_MODE_LOAD_1 || gDisplayMode == DISPLAY_MODE_SAVE_1) gDisplayMode = DISPLAY_MODE_VIEW_1;
 80053ba:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <TIM6_DAC_IRQHandler+0x1fc>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d004      	beq.n	80053ce <TIM6_DAC_IRQHandler+0x116>
 80053c4:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <TIM6_DAC_IRQHandler+0x1fc>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d102      	bne.n	80053d4 <TIM6_DAC_IRQHandler+0x11c>
 80053ce:	4b39      	ldr	r3, [pc, #228]	; (80054b4 <TIM6_DAC_IRQHandler+0x1fc>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
		if (gDisplayMode == DISPLAY_MODE_LOAD_2 || gDisplayMode == DISPLAY_MODE_SAVE_2) gDisplayMode = DISPLAY_MODE_VIEW_2; 		
 80053d4:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <TIM6_DAC_IRQHandler+0x1fc>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b07      	cmp	r3, #7
 80053dc:	d004      	beq.n	80053e8 <TIM6_DAC_IRQHandler+0x130>
 80053de:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <TIM6_DAC_IRQHandler+0x1fc>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b05      	cmp	r3, #5
 80053e6:	d1a6      	bne.n	8005336 <TIM6_DAC_IRQHandler+0x7e>
 80053e8:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <TIM6_DAC_IRQHandler+0x1fc>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
};
 80053ee:	e7a2      	b.n	8005336 <TIM6_DAC_IRQHandler+0x7e>
			Steps[0][0].val[3] = 0x00;
 80053f0:	4a31      	ldr	r2, [pc, #196]	; (80054b8 <TIM6_DAC_IRQHandler+0x200>)
 80053f2:	2300      	movs	r3, #0
 80053f4:	70d3      	strb	r3, [r2, #3]
			Steps[0][0].val[4] = 0x00;
 80053f6:	7113      	strb	r3, [r2, #4]
			Steps[0][0].val[5] = 0x00;
 80053f8:	7153      	strb	r3, [r2, #5]
			Steps[0][0].b.TimeRange_p3 = 1;
 80053fa:	6851      	ldr	r1, [r2, #4]
 80053fc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005400:	6051      	str	r1, [r2, #4]
			Steps[0][0].b.FullRange = 1;
 8005402:	6811      	ldr	r1, [r2, #0]
 8005404:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005408:	6011      	str	r1, [r2, #0]
			for(i=0; i<16; i++)
 800540a:	e010      	b.n	800542e <TIM6_DAC_IRQHandler+0x176>
				Steps[0][i] = Steps[0][0];
 800540c:	4a2a      	ldr	r2, [pc, #168]	; (80054b8 <TIM6_DAC_IRQHandler+0x200>)
 800540e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8005412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005416:	e884 0003 	stmia.w	r4, {r0, r1}
				Steps[0][i+16] = Steps[0][0];
 800541a:	f103 0410 	add.w	r4, r3, #16
 800541e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8005422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005426:	e884 0003 	stmia.w	r4, {r0, r1}
			for(i=0; i<16; i++)
 800542a:	3301      	adds	r3, #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b0f      	cmp	r3, #15
 8005430:	d9ec      	bls.n	800540c <TIM6_DAC_IRQHandler+0x154>
			gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <TIM6_DAC_IRQHandler+0x204>)
 8005434:	2202      	movs	r2, #2
 8005436:	701a      	strb	r2, [r3, #0]
			gSequenceStepNumber_1 = 0;
 8005438:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <TIM6_DAC_IRQHandler+0x208>)
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e7b7      	b.n	80053b0 <TIM6_DAC_IRQHandler+0xf8>
			Steps[1][0].val[3] = 0x00;
 8005440:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <TIM6_DAC_IRQHandler+0x200>)
 8005442:	2300      	movs	r3, #0
 8005444:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103
			Steps[1][0].val[4] = 0x00;
 8005448:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
			Steps[1][0].val[5] = 0x00;
 800544c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
			Steps[1][0].b.TimeRange_p3 = 1;
 8005450:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 8005454:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005458:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			Steps[1][0].b.FullRange = 1;
 800545c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8005460:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005464:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			for(i=0; i<16; i++)
 8005468:	e014      	b.n	8005494 <TIM6_DAC_IRQHandler+0x1dc>
				Steps[1][i] = Steps[1][0];
 800546a:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <TIM6_DAC_IRQHandler+0x200>)
 800546c:	f103 0520 	add.w	r5, r3, #32
 8005470:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005474:	f502 7480 	add.w	r4, r2, #256	; 0x100
 8005478:	e894 0003 	ldmia.w	r4, {r0, r1}
 800547c:	e885 0003 	stmia.w	r5, {r0, r1}
				Steps[1][i+16] = Steps[1][0];
 8005480:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005484:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005488:	e894 0003 	ldmia.w	r4, {r0, r1}
 800548c:	e882 0003 	stmia.w	r2, {r0, r1}
			for(i=0; i<16; i++)
 8005490:	3301      	adds	r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d9e8      	bls.n	800546a <TIM6_DAC_IRQHandler+0x1b2>
			gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <TIM6_DAC_IRQHandler+0x20c>)
 800549a:	2202      	movs	r2, #2
 800549c:	701a      	strb	r2, [r3, #0]
			gSequenceStepNumber_2 = 0;
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <TIM6_DAC_IRQHandler+0x210>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e784      	b.n	80053b0 <TIM6_DAC_IRQHandler+0xf8>
 80054a6:	bf00      	nop
 80054a8:	40001000 	.word	0x40001000
 80054ac:	200002aa 	.word	0x200002aa
 80054b0:	200002ab 	.word	0x200002ab
 80054b4:	200002b0 	.word	0x200002b0
 80054b8:	200008a4 	.word	0x200008a4
 80054bc:	200002c1 	.word	0x200002c1
 80054c0:	200002bf 	.word	0x200002bf
 80054c4:	200002c2 	.word	0x200002c2
 80054c8:	200002c0 	.word	0x200002c0
 80054cc:	00000000 	.word	0x00000000

080054d0 <main>:
{
 80054d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d2:	b089      	sub	sp, #36	; 0x24
	DisplayUpdateFlags.value = 0x00;
 80054d4:	4bb4      	ldr	r3, [pc, #720]	; (80057a8 <main+0x2d8>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.MainDisplay 	= 1;
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.StepsDisplay = 1;
 80054e2:	781a      	ldrb	r2, [r3, #0]
 80054e4:	f042 0202 	orr.w	r2, r2, #2
 80054e8:	701a      	strb	r2, [r3, #0]
	Steps[0][0].b.TimeRange_p3 = 1;
 80054ea:	4bb0      	ldr	r3, [pc, #704]	; (80057ac <main+0x2dc>)
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054f2:	605a      	str	r2, [r3, #4]
	Steps[0][0].b.FullRange = 1;
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80054fa:	601a      	str	r2, [r3, #0]
	Steps[1][0] = Steps[0][0];
 80054fc:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005500:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005504:	e882 0003 	stmia.w	r2, {r0, r1}
	for(_cnt=1;_cnt<=15;_cnt++) 
 8005508:	2201      	movs	r2, #1
 800550a:	e020      	b.n	800554e <main+0x7e>
		Steps[0][_cnt] = Steps[0][0];		
 800550c:	4ba7      	ldr	r3, [pc, #668]	; (80057ac <main+0x2dc>)
 800550e:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8005512:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005516:	e884 0003 	stmia.w	r4, {r0, r1}
		Steps[1][_cnt] = Steps[0][0];
 800551a:	f102 0420 	add.w	r4, r2, #32
 800551e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005522:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005526:	e884 0003 	stmia.w	r4, {r0, r1}
		Steps[0][_cnt+16] = Steps[0][0];		
 800552a:	f102 0410 	add.w	r4, r2, #16
 800552e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005532:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005536:	e884 0003 	stmia.w	r4, {r0, r1}
		Steps[1][_cnt+16] = Steps[0][0];
 800553a:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800553e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005542:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005546:	e884 0003 	stmia.w	r4, {r0, r1}
	for(_cnt=1;_cnt<=15;_cnt++) 
 800554a:	3201      	adds	r2, #1
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	2a0f      	cmp	r2, #15
 8005550:	d9dc      	bls.n	800550c <main+0x3c>
	RCC_GetClocksFreq(&RCC_Clocks);
 8005552:	4897      	ldr	r0, [pc, #604]	; (80057b0 <main+0x2e0>)
 8005554:	f7fb fdd8 	bl	8001108 <RCC_GetClocksFreq>
	PulsesInit();
 8005558:	f7fe f99a 	bl	8003890 <PulsesInit>
	DisplayLedsIOInit();
 800555c:	f7fe f9e4 	bl	8003928 <DisplayLedsIOInit>
	DipConfig_init();	
 8005560:	f7fc fb32 	bl	8001bc8 <DipConfig_init>
	gDipConfig = GetDipConfig(); 
 8005564:	f7fc fb4a 	bl	8001bfc <GetDipConfig>
 8005568:	4c92      	ldr	r4, [pc, #584]	; (80057b4 <main+0x2e4>)
 800556a:	7020      	strb	r0, [r4, #0]
	LED_STEP_init();
 800556c:	f7fc fbe8 	bl	8001d40 <LED_STEP_init>
	LED_STEP_SendWord(0xFFFF);
 8005570:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005574:	f7fc fc2c 	bl	8001dd0 <LED_STEP_SendWord>
	delay_ms(1000);
 8005578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800557c:	f7ff fe82 	bl	8005284 <delay_ms>
	LED_STEP_SendWord(0xFFF0|(*((uint8_t*) (&gDipConfig))));
 8005580:	7820      	ldrb	r0, [r4, #0]
 8005582:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00
 8005586:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
 800558a:	f7fc fc21 	bl	8001dd0 <LED_STEP_SendWord>
	delay_ms(1000);
 800558e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005592:	f7ff fe77 	bl	8005284 <delay_ms>
	CAT25512_init();
 8005596:	f7fb fff9 	bl	800158c <CAT25512_init>
	LEDS_modes_init();	
 800559a:	f7fc fb75 	bl	8001c88 <LEDS_modes_init>
	mLeds.value[0] = 0xFF;
 800559e:	23ff      	movs	r3, #255	; 0xff
	mLeds.value[1] = 0xFF;
 80055a0:	f88d 3015 	strb.w	r3, [sp, #21]
	mLeds.value[2] = 0xFF;
 80055a4:	f88d 3016 	strb.w	r3, [sp, #22]
	mLeds.value[3] = 0xFF;
 80055a8:	f88d 3017 	strb.w	r3, [sp, #23]
	mLeds.b.Seq2Stop = 0;
 80055ac:	a808      	add	r0, sp, #32
 80055ae:	f06f 0309 	mvn.w	r3, #9
 80055b2:	f800 3d0c 	strb.w	r3, [r0, #-12]!
	LEDS_modes_SendStruct(&mLeds);
 80055b6:	f7fc fba9 	bl	8001d0c <LEDS_modes_SendStruct>
	init_HC165();
 80055ba:	f7fc f91f 	bl	80017fc <init_HC165>
	key_state = GetButton();
 80055be:	f7fc f9b9 	bl	8001934 <GetButton>
 80055c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
	prev_key_state = 0x7fbf67f7fffdff;//key_state;
 80055c6:	a376      	add	r3, pc, #472	; (adr r3, 80057a0 <main+0x2d0>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	e9cd 2300 	strd	r2, r3, [sp]
	MAX5135init();
 80055d0:	f7fc f9fc 	bl	80019cc <MAX5135init>
	ADC_POTS_selector_init();
 80055d4:	f7fc fa92 	bl	8001afc <ADC_POTS_selector_init>
	ADC_POTS_selector_Ch(0);
 80055d8:	2000      	movs	r0, #0
 80055da:	f7fc fae9 	bl	8001bb0 <ADC_POTS_selector_Ch>
	mADC_init();
 80055de:	f7fc fc3f 	bl	8001e60 <mADC_init>
	mTimersInit();
 80055e2:	f7fd ff8b 	bl	80034fc <mTimersInit>
	mInterruptInit();
 80055e6:	f7fc fcef 	bl	8001fc8 <mInterruptInit>
	InternalDACInit();
 80055ea:	f7fe f9b7 	bl	800395c <InternalDACInit>
	Init_Expander_GPIO();
 80055ee:	f7fc fb27 	bl	8001c40 <Init_Expander_GPIO>
	gSequencerMode_1 = SEQUENCER_MODE_STOP;
 80055f2:	2302      	movs	r3, #2
 80055f4:	4a70      	ldr	r2, [pc, #448]	; (80057b8 <main+0x2e8>)
 80055f6:	7013      	strb	r3, [r2, #0]
	gSequencerMode_2 = SEQUENCER_MODE_STOP;
 80055f8:	4a70      	ldr	r2, [pc, #448]	; (80057bc <main+0x2ec>)
 80055fa:	7013      	strb	r3, [r2, #0]
	key_state = GetButton();
 80055fc:	f7fc f99a 	bl	8001934 <GetButton>
 8005600:	e9cd 0102 	strd	r0, r1, [sp, #8]
	myButtons.value = key_state;
 8005604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005608:	e9cd 2306 	strd	r2, r3, [sp, #24]
	if(!myButtons.b.StageAddress1Advance) 
 800560c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005610:	d129      	bne.n	8005666 <main+0x196>
		Calibration();
 8005612:	f7ff fd79 	bl	8005108 <Calibration>
		for(i = 0; i < 8; i++)
 8005616:	2500      	movs	r5, #0
		if(gDipConfig.b.V_OUT_1V == 1) 
 8005618:	4b66      	ldr	r3, [pc, #408]	; (80057b4 <main+0x2e4>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f013 0f02 	tst.w	r3, #2
 8005620:	d136      	bne.n	8005690 <main+0x1c0>
			if(gDipConfig.b.V_OUT_1V2 == 1)
 8005622:	4b64      	ldr	r3, [pc, #400]	; (80057b4 <main+0x2e4>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f013 0f01 	tst.w	r3, #1
 800562a:	d139      	bne.n	80056a0 <main+0x1d0>
				offset = (4095.0/5.0);
 800562c:	4b64      	ldr	r3, [pc, #400]	; (80057c0 <main+0x2f0>)
 800562e:	f240 3233 	movw	r2, #819	; 0x333
 8005632:	601a      	str	r2, [r3, #0]
				divider = 5.0;
 8005634:	4b63      	ldr	r3, [pc, #396]	; (80057c4 <main+0x2f4>)
 8005636:	4a64      	ldr	r2, [pc, #400]	; (80057c8 <main+0x2f8>)
 8005638:	601a      	str	r2, [r3, #0]
		if (KeyThreshHoldCnt == 0) {
 800563a:	2d00      	cmp	r5, #0
 800563c:	d038      	beq.n	80056b0 <main+0x1e0>
		if (KeyThreshHoldCnt == 2) {
 800563e:	2d02      	cmp	r5, #2
 8005640:	d03b      	beq.n	80056ba <main+0x1ea>
		KeyThreshHoldCnt++;
 8005642:	3501      	adds	r5, #1
 8005644:	b2ed      	uxtb	r5, r5
		if (KeyThreshHoldCnt > 2) {
 8005646:	2d02      	cmp	r5, #2
 8005648:	d900      	bls.n	800564c <main+0x17c>
			KeyThreshHoldCnt = 0;
 800564a:	2500      	movs	r5, #0
		if (DisplayUpdateFlags.b.MainDisplay) {
 800564c:	4b56      	ldr	r3, [pc, #344]	; (80057a8 <main+0x2d8>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	f013 0f01 	tst.w	r3, #1
 8005654:	d179      	bne.n	800574a <main+0x27a>
		if (DisplayUpdateFlags.b.StepsDisplay) {			
 8005656:	4b54      	ldr	r3, [pc, #336]	; (80057a8 <main+0x2d8>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	f013 0f02 	tst.w	r3, #2
 800565e:	f040 8096 	bne.w	800578e <main+0x2be>
			for(i =0; i<10; i++)
 8005662:	2400      	movs	r4, #0
 8005664:	e13a      	b.n	80058dc <main+0x40c>
		CAT25512_read_block(100*sizeof(Steps), (unsigned char *) CalConstants, sizeof(CalConstants));
 8005666:	2220      	movs	r2, #32
 8005668:	4958      	ldr	r1, [pc, #352]	; (80057cc <main+0x2fc>)
 800566a:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 800566e:	f7fc f8a1 	bl	80017b4 <CAT25512_read_block>
		for(i = 0; i < 8; i++)
 8005672:	2300      	movs	r3, #0
 8005674:	2b07      	cmp	r3, #7
 8005676:	dcce      	bgt.n	8005616 <main+0x146>
			if(CalConstants[i] < 100) CalConstants[i] = 4095;
 8005678:	4a54      	ldr	r2, [pc, #336]	; (80057cc <main+0x2fc>)
 800567a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800567e:	2a63      	cmp	r2, #99	; 0x63
 8005680:	d804      	bhi.n	800568c <main+0x1bc>
 8005682:	4a52      	ldr	r2, [pc, #328]	; (80057cc <main+0x2fc>)
 8005684:	f640 71ff 	movw	r1, #4095	; 0xfff
 8005688:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 0; i < 8; i++)
 800568c:	3301      	adds	r3, #1
 800568e:	e7f1      	b.n	8005674 <main+0x1a4>
			offset = (4095.0/10.0);
 8005690:	4b4b      	ldr	r3, [pc, #300]	; (80057c0 <main+0x2f0>)
 8005692:	f240 1299 	movw	r2, #409	; 0x199
 8005696:	601a      	str	r2, [r3, #0]
			divider = 10.0;
 8005698:	4b4a      	ldr	r3, [pc, #296]	; (80057c4 <main+0x2f4>)
 800569a:	4a4d      	ldr	r2, [pc, #308]	; (80057d0 <main+0x300>)
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e7cc      	b.n	800563a <main+0x16a>
				offset = (4095.0/8.29);
 80056a0:	4b47      	ldr	r3, [pc, #284]	; (80057c0 <main+0x2f0>)
 80056a2:	f240 12ed 	movw	r2, #493	; 0x1ed
 80056a6:	601a      	str	r2, [r3, #0]
				divider = 8.29;
 80056a8:	4b46      	ldr	r3, [pc, #280]	; (80057c4 <main+0x2f4>)
 80056aa:	4a4a      	ldr	r2, [pc, #296]	; (80057d4 <main+0x304>)
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e7c4      	b.n	800563a <main+0x16a>
			key_state = GetButton();
 80056b0:	f7fc f940 	bl	8001934 <GetButton>
 80056b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b8:	e7c1      	b.n	800563e <main+0x16e>
			if (key_state == GetButton()) {	
 80056ba:	f7fc f93b 	bl	8001934 <GetButton>
 80056be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056c2:	4299      	cmp	r1, r3
 80056c4:	bf08      	it	eq
 80056c6:	4290      	cmpeq	r0, r2
 80056c8:	d1bb      	bne.n	8005642 <main+0x172>
				myButtons.value = key_state;			
 80056ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
							if ( 	(gDisplayMode != DISPLAY_MODE_SAVE_1) && (gDisplayMode != DISPLAY_MODE_SAVE_2) &&
 80056d2:	4941      	ldr	r1, [pc, #260]	; (80057d8 <main+0x308>)
 80056d4:	7809      	ldrb	r1, [r1, #0]
 80056d6:	b2c9      	uxtb	r1, r1
 80056d8:	2904      	cmp	r1, #4
 80056da:	d022      	beq.n	8005722 <main+0x252>
 80056dc:	493e      	ldr	r1, [pc, #248]	; (80057d8 <main+0x308>)
 80056de:	7809      	ldrb	r1, [r1, #0]
 80056e0:	b2c9      	uxtb	r1, r1
 80056e2:	2905      	cmp	r1, #5
 80056e4:	d01d      	beq.n	8005722 <main+0x252>
						(gDisplayMode != DISPLAY_MODE_LOAD_1) && (gDisplayMode != DISPLAY_MODE_LOAD_2) ) 
 80056e6:	493c      	ldr	r1, [pc, #240]	; (80057d8 <main+0x308>)
 80056e8:	7809      	ldrb	r1, [r1, #0]
 80056ea:	b2c9      	uxtb	r1, r1
							if ( 	(gDisplayMode != DISPLAY_MODE_SAVE_1) && (gDisplayMode != DISPLAY_MODE_SAVE_2) &&
 80056ec:	2906      	cmp	r1, #6
 80056ee:	d018      	beq.n	8005722 <main+0x252>
						(gDisplayMode != DISPLAY_MODE_LOAD_1) && (gDisplayMode != DISPLAY_MODE_LOAD_2) ) 
 80056f0:	4939      	ldr	r1, [pc, #228]	; (80057d8 <main+0x308>)
 80056f2:	7809      	ldrb	r1, [r1, #0]
 80056f4:	b2c9      	uxtb	r1, r1
 80056f6:	2907      	cmp	r1, #7
 80056f8:	d013      	beq.n	8005722 <main+0x252>
				if (key_state != prev_key_state || myButtons.b.StepRight == 0 || myButtons.b.StepLeft == 0) {
 80056fa:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005702:	428f      	cmp	r7, r1
 8005704:	bf08      	it	eq
 8005706:	4286      	cmpeq	r6, r0
 8005708:	d103      	bne.n	8005712 <main+0x242>
 800570a:	f002 020c 	and.w	r2, r2, #12
 800570e:	2a0c      	cmp	r2, #12
 8005710:	d097      	beq.n	8005642 <main+0x172>
						keyb_proc(&myButtons);
 8005712:	a806      	add	r0, sp, #24
 8005714:	f7fe f95c 	bl	80039d0 <keyb_proc>
						prev_key_state = key_state;
 8005718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800571c:	e9cd 2300 	strd	r2, r3, [sp]
 8005720:	e78f      	b.n	8005642 <main+0x172>
							if (key_state != prev_key_state || myButtons.b.StepRight == 0 || myButtons.b.StepLeft == 0) {
 8005722:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800572a:	428f      	cmp	r7, r1
 800572c:	bf08      	it	eq
 800572e:	4286      	cmpeq	r6, r0
 8005730:	d103      	bne.n	800573a <main+0x26a>
 8005732:	f002 020c 	and.w	r2, r2, #12
 8005736:	2a0c      	cmp	r2, #12
 8005738:	d083      	beq.n	8005642 <main+0x172>
						keyb_proc(&myButtons);
 800573a:	a806      	add	r0, sp, #24
 800573c:	f7fe f948 	bl	80039d0 <keyb_proc>
						prev_key_state = key_state;
 8005740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005744:	e9cd 2300 	strd	r2, r3, [sp]
 8005748:	e77b      	b.n	8005642 <main+0x172>
			UpdateModeSection();
 800574a:	f7ff fa57 	bl	8004bfc <UpdateModeSection>
			DisplayUpdateFlags.b.MainDisplay = 0;
 800574e:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <main+0x2d8>)
 8005750:	7813      	ldrb	r3, [r2, #0]
 8005752:	f36f 0300 	bfc	r3, #0, #1
 8005756:	7013      	strb	r3, [r2, #0]
			if ( 	(gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8005758:	4b1f      	ldr	r3, [pc, #124]	; (80057d8 <main+0x308>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00f      	beq.n	8005782 <main+0x2b2>
 8005762:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <main+0x308>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b05      	cmp	r3, #5
 800576a:	d00a      	beq.n	8005782 <main+0x2b2>
						(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) 
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <main+0x308>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	b2db      	uxtb	r3, r3
			if ( 	(gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8005772:	2b06      	cmp	r3, #6
 8005774:	d005      	beq.n	8005782 <main+0x2b2>
						(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) 
 8005776:	4b18      	ldr	r3, [pc, #96]	; (80057d8 <main+0x308>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b07      	cmp	r3, #7
 800577e:	f47f af6a 	bne.w	8005656 <main+0x186>
				DisplayUpdateFlags.b.MainDisplay = 1;
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <main+0x2d8>)
 8005784:	7813      	ldrb	r3, [r2, #0]
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	7013      	strb	r3, [r2, #0]
 800578c:	e763      	b.n	8005656 <main+0x186>
			UpdateStepSection();
 800578e:	f7ff fc7d 	bl	800508c <UpdateStepSection>
			DisplayUpdateFlags.b.StepsDisplay = 0;
 8005792:	4a05      	ldr	r2, [pc, #20]	; (80057a8 <main+0x2d8>)
 8005794:	7813      	ldrb	r3, [r2, #0]
 8005796:	f36f 0341 	bfc	r3, #1, #1
 800579a:	7013      	strb	r3, [r2, #0]
 800579c:	e761      	b.n	8005662 <main+0x192>
 800579e:	bf00      	nop
 80057a0:	f7fffdff 	.word	0xf7fffdff
 80057a4:	007fbf67 	.word	0x007fbf67
 80057a8:	200002f0 	.word	0x200002f0
 80057ac:	200008a4 	.word	0x200008a4
 80057b0:	20000b24 	.word	0x20000b24
 80057b4:	200002e8 	.word	0x200002e8
 80057b8:	200002c1 	.word	0x200002c1
 80057bc:	200002c2 	.word	0x200002c2
 80057c0:	200008a0 	.word	0x200008a0
 80057c4:	20000898 	.word	0x20000898
 80057c8:	40a00000 	.word	0x40a00000
 80057cc:	20000250 	.word	0x20000250
 80057d0:	41200000 	.word	0x41200000
 80057d4:	4104a3d7 	.word	0x4104a3d7
 80057d8:	200002b0 	.word	0x200002b0
			if(Is_Expander_Present()) max_step = 31;
 80057dc:	f04f 0c1f 	mov.w	ip, #31
			previous_step[j] = pots_step[j];
 80057e0:	4a48      	ldr	r2, [pc, #288]	; (8005904 <main+0x434>)
 80057e2:	5d13      	ldrb	r3, [r2, r4]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	4948      	ldr	r1, [pc, #288]	; (8005908 <main+0x438>)
 80057e8:	550b      	strb	r3, [r1, r4]
			if(pots_step[j] < (max_step+1)) next_step_tres = (pots_step[j])*CalConstants[ADC_STAGEADDRESS_Ch_1+j]/(max_step+1) + 20;
 80057ea:	5d13      	ldrb	r3, [r2, r4]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f10c 0c01 	add.w	ip, ip, #1
 80057f2:	4563      	cmp	r3, ip
 80057f4:	da24      	bge.n	8005840 <main+0x370>
 80057f6:	5d17      	ldrb	r7, [r2, r4]
 80057f8:	1da3      	adds	r3, r4, #6
 80057fa:	4a44      	ldr	r2, [pc, #272]	; (800590c <main+0x43c>)
 80057fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005800:	fb07 f703 	mul.w	r7, r7, r3
 8005804:	fbb7 f7fc 	udiv	r7, r7, ip
 8005808:	b2bf      	uxth	r7, r7
 800580a:	3714      	adds	r7, #20
 800580c:	b2bf      	uxth	r7, r7
			if(pots_step[j] > 1) prev_step_tres = (pots_step[j]-1)*CalConstants[ADC_STAGEADDRESS_Ch_1+j]/(max_step+1) - 20;
 800580e:	4b3d      	ldr	r3, [pc, #244]	; (8005904 <main+0x434>)
 8005810:	5d1b      	ldrb	r3, [r3, r4]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d915      	bls.n	8005844 <main+0x374>
 8005818:	4b3a      	ldr	r3, [pc, #232]	; (8005904 <main+0x434>)
 800581a:	5d1e      	ldrb	r6, [r3, r4]
 800581c:	1e73      	subs	r3, r6, #1
 800581e:	1da2      	adds	r2, r4, #6
 8005820:	493a      	ldr	r1, [pc, #232]	; (800590c <main+0x43c>)
 8005822:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8005826:	fb06 f603 	mul.w	r6, r6, r3
 800582a:	fbb6 f6fc 	udiv	r6, r6, ip
 800582e:	b2b6      	uxth	r6, r6
 8005830:	3e14      	subs	r6, #20
 8005832:	b2b6      	uxth	r6, r6
			acc = 0;
 8005834:	2100      	movs	r1, #0
			for(i =0; i<10; i++)
 8005836:	460a      	mov	r2, r1
 8005838:	e018      	b.n	800586c <main+0x39c>
				max_step = 15;
 800583a:	f04f 0c0f 	mov.w	ip, #15
 800583e:	e7cf      	b.n	80057e0 <main+0x310>
			next_step_tres = 0;
 8005840:	2700      	movs	r7, #0
 8005842:	e7e4      	b.n	800580e <main+0x33e>
			prev_step_tres = 0;
 8005844:	2600      	movs	r6, #0
 8005846:	e7f5      	b.n	8005834 <main+0x364>
					temp = (AddData[ADC_STAGEADDRESS_Ch_1]*4095/CalConstants[ADC_STAGEADDRESS_Ch_1]);
 8005848:	4b31      	ldr	r3, [pc, #196]	; (8005910 <main+0x440>)
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8005850:	482e      	ldr	r0, [pc, #184]	; (800590c <main+0x43c>)
 8005852:	6980      	ldr	r0, [r0, #24]
 8005854:	fbb3 f3f0 	udiv	r3, r3, r0
 8005858:	b29b      	uxth	r3, r3
					if(temp > 4095) temp = 4095; 
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585e:	d301      	bcc.n	8005864 <main+0x394>
 8005860:	f640 73ff 	movw	r3, #4095	; 0xfff
					acc += temp;
 8005864:	4419      	add	r1, r3
 8005866:	e000      	b.n	800586a <main+0x39a>
					acc += temp;
 8005868:	4419      	add	r1, r3
			for(i =0; i<10; i++)
 800586a:	3201      	adds	r2, #1
 800586c:	2a09      	cmp	r2, #9
 800586e:	dc10      	bgt.n	8005892 <main+0x3c2>
				if(j == 0) 
 8005870:	2c00      	cmp	r4, #0
 8005872:	d0e9      	beq.n	8005848 <main+0x378>
					temp = (AddData[ADC_STAGEADDRESS_Ch_2]*4095/CalConstants[ADC_STAGEADDRESS_Ch_2]);
 8005874:	4b26      	ldr	r3, [pc, #152]	; (8005910 <main+0x440>)
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 800587c:	4823      	ldr	r0, [pc, #140]	; (800590c <main+0x43c>)
 800587e:	69c0      	ldr	r0, [r0, #28]
 8005880:	fbb3 f3f0 	udiv	r3, r3, r0
 8005884:	b29b      	uxth	r3, r3
					if(temp > 4095) temp = 4095; 
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588a:	d3ed      	bcc.n	8005868 <main+0x398>
 800588c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005890:	e7ea      	b.n	8005868 <main+0x398>
			if(pots_step[j] < (max_step+1)) {if(acc/10 > next_step_tres) 
 8005892:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <main+0x434>)
 8005894:	5d1b      	ldrb	r3, [r3, r4]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	459c      	cmp	ip, r3
 800589a:	dd0c      	ble.n	80058b6 <main+0x3e6>
 800589c:	4a1d      	ldr	r2, [pc, #116]	; (8005914 <main+0x444>)
 800589e:	fb82 3201 	smull	r3, r2, r2, r1
 80058a2:	17cb      	asrs	r3, r1, #31
 80058a4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80058a8:	42bb      	cmp	r3, r7
 80058aa:	dd04      	ble.n	80058b6 <main+0x3e6>
				pots_step[j]++;
 80058ac:	4a15      	ldr	r2, [pc, #84]	; (8005904 <main+0x434>)
 80058ae:	5d13      	ldrb	r3, [r2, r4]
 80058b0:	3301      	adds	r3, #1
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	5513      	strb	r3, [r2, r4]
			if(pots_step[j] > 1) {if(acc/10 < prev_step_tres) 
 80058b6:	4b13      	ldr	r3, [pc, #76]	; (8005904 <main+0x434>)
 80058b8:	5d1b      	ldrb	r3, [r3, r4]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d90c      	bls.n	80058da <main+0x40a>
 80058c0:	4b14      	ldr	r3, [pc, #80]	; (8005914 <main+0x444>)
 80058c2:	fb83 2301 	smull	r2, r3, r3, r1
 80058c6:	17c9      	asrs	r1, r1, #31
 80058c8:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
 80058cc:	42b1      	cmp	r1, r6
 80058ce:	da04      	bge.n	80058da <main+0x40a>
				pots_step[j]--;
 80058d0:	4a0c      	ldr	r2, [pc, #48]	; (8005904 <main+0x434>)
 80058d2:	5d13      	ldrb	r3, [r2, r4]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	5513      	strb	r3, [r2, r4]
	for(j = 0; j < 2; j++)
 80058da:	3401      	adds	r4, #1
 80058dc:	2c01      	cmp	r4, #1
 80058de:	f73f ae9b 	bgt.w	8005618 <main+0x148>
			if(Is_Expander_Present()) max_step = 31;
 80058e2:	f7fc f9c7 	bl	8001c74 <Is_Expander_Present>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f47f af78 	bne.w	80057dc <main+0x30c>
				if(pots_step[j] > 16) pots_step[j] = 1;
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <main+0x434>)
 80058ee:	5d1b      	ldrb	r3, [r3, r4]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d9a1      	bls.n	800583a <main+0x36a>
 80058f6:	4b03      	ldr	r3, [pc, #12]	; (8005904 <main+0x434>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	551a      	strb	r2, [r3, r4]
				max_step = 15;
 80058fc:	f04f 0c0f 	mov.w	ip, #15
 8005900:	e76e      	b.n	80057e0 <main+0x310>
 8005902:	bf00      	nop
 8005904:	20000274 	.word	0x20000274
 8005908:	20000278 	.word	0x20000278
 800590c:	20000250 	.word	0x20000250
 8005910:	200007f8 	.word	0x200007f8
 8005914:	66666667 	.word	0x66666667

08005918 <delay_us>:

void delay_us(unsigned int us)
{
 8005918:	b510      	push	{r4, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 800591e:	a801      	add	r0, sp, #4
 8005920:	f7fb fbf2 	bl	8001108 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000000)*us;
 8005924:	9b02      	ldr	r3, [sp, #8]
 8005926:	4a08      	ldr	r2, [pc, #32]	; (8005948 <delay_us+0x30>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	0d9b      	lsrs	r3, r3, #22
 800592e:	fb04 f303 	mul.w	r3, r4, r3
 8005932:	9305      	str	r3, [sp, #20]
	for (; nCount!=0; nCount--);
 8005934:	e002      	b.n	800593c <delay_us+0x24>
 8005936:	9b05      	ldr	r3, [sp, #20]
 8005938:	3b01      	subs	r3, #1
 800593a:	9305      	str	r3, [sp, #20]
 800593c:	9b05      	ldr	r3, [sp, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f9      	bne.n	8005936 <delay_us+0x1e>
}
 8005942:	b006      	add	sp, #24
 8005944:	bd10      	pop	{r4, pc}
 8005946:	bf00      	nop
 8005948:	6b5fca6b 	.word	0x6b5fca6b

0800594c <ADC_IRQHandler>:
{
 800594c:	b538      	push	{r3, r4, r5, lr}
	if ( ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET) {
 800594e:	2102      	movs	r1, #2
 8005950:	4866      	ldr	r0, [pc, #408]	; (8005aec <ADC_IRQHandler+0x1a0>)
 8005952:	f7fb faa4 	bl	8000e9e <ADC_GetFlagStatus>
 8005956:	2801      	cmp	r0, #1
 8005958:	d021      	beq.n	800599e <ADC_IRQHandler+0x52>
  unsigned char NeedInc = 0; //, i; // i not needed if not using boxcar averaging scheme
 800595a:	2400      	movs	r4, #0
		if ( ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == SET ) {
 800595c:	2102      	movs	r1, #2
 800595e:	4864      	ldr	r0, [pc, #400]	; (8005af0 <ADC_IRQHandler+0x1a4>)
 8005960:	f7fb fa9d 	bl	8000e9e <ADC_GetFlagStatus>
 8005964:	2801      	cmp	r0, #1
 8005966:	f000 8214 	beq.w	8005d92 <ADC_IRQHandler+0x446>
	if(Is_Expander_Present())
 800596a:	f7fc f983 	bl	8001c74 <Is_Expander_Present>
 800596e:	2800      	cmp	r0, #0
 8005970:	f000 8232 	beq.w	8005dd8 <ADC_IRQHandler+0x48c>
	  if (NeedInc) {
 8005974:	b194      	cbz	r4, 800599c <ADC_IRQHandler+0x50>
		ADC_POT_sel_cnt++;
 8005976:	4a5f      	ldr	r2, [pc, #380]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 8005978:	7813      	ldrb	r3, [r2, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	7013      	strb	r3, [r2, #0]
		if (ADC_POT_sel_cnt >= 72) {//40
 8005980:	7813      	ldrb	r3, [r2, #0]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b47      	cmp	r3, #71	; 0x47
 8005986:	d902      	bls.n	800598e <ADC_IRQHandler+0x42>
			ADC_POT_sel_cnt = 0;
 8005988:	4613      	mov	r3, r2
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
		ADC_POTS_selector_Ch(ADC_POT_sel_cnt);
 800598e:	4b59      	ldr	r3, [pc, #356]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 8005990:	7818      	ldrb	r0, [r3, #0]
 8005992:	f7fc f90d 	bl	8001bb0 <ADC_POTS_selector_Ch>
		delay_us(10); // don't know if there is time for this!
 8005996:	200a      	movs	r0, #10
 8005998:	f7ff ffbe 	bl	8005918 <delay_us>
};
 800599c:	bd38      	pop	{r3, r4, r5, pc}
		if (  (ADC_POT_sel_cnt<=15)) {
 800599e:	4b55      	ldr	r3, [pc, #340]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b0f      	cmp	r3, #15
 80059a6:	f200 80ab 	bhi.w	8005b00 <ADC_IRQHandler+0x1b4>
			if ( (Steps[1][ADC_POT_sel_cnt].b.WaitVoltageSlider == 1) ) {
 80059aa:	4b52      	ldr	r3, [pc, #328]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f103 0220 	add.w	r2, r3, #32
 80059b2:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <ADC_IRQHandler+0x1ac>)
 80059b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80059be:	d164      	bne.n	8005a8a <ADC_IRQHandler+0x13e>
			  steps_lp[1][ADC_POT_sel_cnt] += ((uint16_t) ADC1->DR - steps_lp[1][ADC_POT_sel_cnt]) >> 4;
 80059c0:	4b4a      	ldr	r3, [pc, #296]	; (8005aec <ADC_IRQHandler+0x1a0>)
 80059c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c4:	b292      	uxth	r2, r2
 80059c6:	4b4b      	ldr	r3, [pc, #300]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 80059c8:	7819      	ldrb	r1, [r3, #0]
 80059ca:	484c      	ldr	r0, [pc, #304]	; (8005afc <ADC_IRQHandler+0x1b0>)
 80059cc:	3120      	adds	r1, #32
 80059ce:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80059d2:	1a51      	subs	r1, r2, r1
 80059d4:	781c      	ldrb	r4, [r3, #0]
 80059d6:	3420      	adds	r4, #32
 80059d8:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 80059dc:	eb02 1221 	add.w	r2, r2, r1, asr #4
 80059e0:	b292      	uxth	r2, r2
 80059e2:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
			  Steps[1][ADC_POT_sel_cnt].b.VLevel += (steps_lp[1][ADC_POT_sel_cnt] - Steps[1][ADC_POT_sel_cnt].b.VLevel) >> 4;
 80059e6:	781a      	ldrb	r2, [r3, #0]
 80059e8:	3220      	adds	r2, #32
 80059ea:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80059ee:	7818      	ldrb	r0, [r3, #0]
 80059f0:	4941      	ldr	r1, [pc, #260]	; (8005af8 <ADC_IRQHandler+0x1ac>)
 80059f2:	3020      	adds	r0, #32
 80059f4:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
 80059f8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80059fc:	1a10      	subs	r0, r2, r0
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	3320      	adds	r3, #32
 8005a02:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8005a06:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005a0a:	eb02 1220 	add.w	r2, r2, r0, asr #4
 8005a0e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8005a12:	f362 000b 	bfi	r0, r2, #0, #12
 8005a16:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
			if ( (Steps[0][ADC_POT_sel_cnt].b.WaitVoltageSlider == 1) ) {
 8005a1a:	4b36      	ldr	r3, [pc, #216]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 8005a1c:	781a      	ldrb	r2, [r3, #0]
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <ADC_IRQHandler+0x1ac>)
 8005a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005a2a:	d146      	bne.n	8005aba <ADC_IRQHandler+0x16e>
			  steps_lp[0][ADC_POT_sel_cnt] += ((uint16_t) ADC1->DR - steps_lp[0][ADC_POT_sel_cnt]) >> 4;
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <ADC_IRQHandler+0x1a0>)
 8005a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a30:	b292      	uxth	r2, r2
 8005a32:	4b30      	ldr	r3, [pc, #192]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 8005a34:	7819      	ldrb	r1, [r3, #0]
 8005a36:	b2c9      	uxtb	r1, r1
 8005a38:	4830      	ldr	r0, [pc, #192]	; (8005afc <ADC_IRQHandler+0x1b0>)
 8005a3a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8005a3e:	1a51      	subs	r1, r2, r1
 8005a40:	781c      	ldrb	r4, [r3, #0]
 8005a42:	b2e4      	uxtb	r4, r4
 8005a44:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 8005a48:	eb02 1221 	add.w	r2, r2, r1, asr #4
 8005a4c:	b292      	uxth	r2, r2
 8005a4e:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
			  Steps[0][ADC_POT_sel_cnt].b.VLevel += (steps_lp[0][ADC_POT_sel_cnt] - Steps[0][ADC_POT_sel_cnt].b.VLevel) >> 4;
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8005a5a:	7818      	ldrb	r0, [r3, #0]
 8005a5c:	b2c0      	uxtb	r0, r0
 8005a5e:	4926      	ldr	r1, [pc, #152]	; (8005af8 <ADC_IRQHandler+0x1ac>)
 8005a60:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
 8005a64:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005a68:	1a10      	subs	r0, r2, r0
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8005a72:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005a76:	eb02 1220 	add.w	r2, r2, r0, asr #4
 8005a7a:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8005a7e:	f362 000b 	bfi	r0, r2, #0, #12
 8005a82:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
			NeedInc = 1;
 8005a86:	2401      	movs	r4, #1
 8005a88:	e03b      	b.n	8005b02 <ADC_IRQHandler+0x1b6>
			  if ((unsigned int) (ADC1->DR) >> 4 == (unsigned int) Steps[1][ADC_POT_sel_cnt].b.VLevel >>4 ) {
 8005a8a:	4b18      	ldr	r3, [pc, #96]	; (8005aec <ADC_IRQHandler+0x1a0>)
 8005a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a8e:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	3320      	adds	r3, #32
 8005a94:	4918      	ldr	r1, [pc, #96]	; (8005af8 <ADC_IRQHandler+0x1ac>)
 8005a96:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005a9a:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8005a9e:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8005aa2:	d1ba      	bne.n	8005a1a <ADC_IRQHandler+0xce>
						Steps[1][ADC_POT_sel_cnt].b.WaitVoltageSlider = 0;
 8005aa4:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	f103 0220 	add.w	r2, r3, #32
 8005aac:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	f36f 324d 	bfc	r2, #13, #1
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	e7af      	b.n	8005a1a <ADC_IRQHandler+0xce>
  			  if ((unsigned int) (ADC1->DR) >> 4 == (unsigned int) Steps[0][ADC_POT_sel_cnt].b.VLevel >>4 ) {
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <ADC_IRQHandler+0x1a0>)
 8005abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	490c      	ldr	r1, [pc, #48]	; (8005af8 <ADC_IRQHandler+0x1ac>)
 8005ac6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005aca:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8005ace:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8005ad2:	d001      	beq.n	8005ad8 <ADC_IRQHandler+0x18c>
			NeedInc = 1;
 8005ad4:	2401      	movs	r4, #1
 8005ad6:	e014      	b.n	8005b02 <ADC_IRQHandler+0x1b6>
						Steps[0][ADC_POT_sel_cnt].b.WaitVoltageSlider = 0;
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <ADC_IRQHandler+0x1a8>)
 8005ada:	781a      	ldrb	r2, [r3, #0]
 8005adc:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	f36f 324d 	bfc	r2, #13, #1
 8005ae6:	605a      	str	r2, [r3, #4]
			NeedInc = 1;
 8005ae8:	2401      	movs	r4, #1
 8005aea:	e00a      	b.n	8005b02 <ADC_IRQHandler+0x1b6>
 8005aec:	40012000 	.word	0x40012000
 8005af0:	40012100 	.word	0x40012100
 8005af4:	2000029c 	.word	0x2000029c
 8005af8:	200008a4 	.word	0x200008a4
 8005afc:	20000aa4 	.word	0x20000aa4
  unsigned char NeedInc = 0; //, i; // i not needed if not using boxcar averaging scheme
 8005b00:	2400      	movs	r4, #0
			if (  (ADC_POT_sel_cnt>=40 && (ADC_POT_sel_cnt<=55))) {
 8005b02:	4bb0      	ldr	r3, [pc, #704]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b27      	cmp	r3, #39	; 0x27
 8005b0a:	d947      	bls.n	8005b9c <ADC_IRQHandler+0x250>
 8005b0c:	4bad      	ldr	r3, [pc, #692]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b37      	cmp	r3, #55	; 0x37
 8005b14:	d842      	bhi.n	8005b9c <ADC_IRQHandler+0x250>
				if ( (Steps[1][ADC_POT_sel_cnt-24].b.WaitVoltageSlider == 1) ) {
 8005b16:	4bab      	ldr	r3, [pc, #684]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f103 0208 	add.w	r2, r3, #8
 8005b1e:	4baa      	ldr	r3, [pc, #680]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005b20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005b2a:	f040 80a1 	bne.w	8005c70 <ADC_IRQHandler+0x324>
					Steps[1][ADC_POT_sel_cnt-24].b.VLevel = ((unsigned int) (ADC1->DR)+(unsigned int) Steps[1][ADC_POT_sel_cnt-24].b.VLevel)/2;
 8005b2e:	4ba7      	ldr	r3, [pc, #668]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	48a4      	ldr	r0, [pc, #656]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005b34:	7802      	ldrb	r2, [r0, #0]
 8005b36:	49a4      	ldr	r1, [pc, #656]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005b38:	3208      	adds	r2, #8
 8005b3a:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8005b3e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005b42:	4413      	add	r3, r2
 8005b44:	7802      	ldrb	r2, [r0, #0]
 8005b46:	f3c3 034b 	ubfx	r3, r3, #1, #12
 8005b4a:	3208      	adds	r2, #8
 8005b4c:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
 8005b50:	f363 000b 	bfi	r0, r3, #0, #12
 8005b54:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
				if ( (Steps[0][ADC_POT_sel_cnt-24].b.WaitVoltageSlider == 1) ) {
 8005b58:	4b9a      	ldr	r3, [pc, #616]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f1a3 0218 	sub.w	r2, r3, #24
 8005b60:	4b99      	ldr	r3, [pc, #612]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005b6c:	f040 8098 	bne.w	8005ca0 <ADC_IRQHandler+0x354>
					Steps[0][ADC_POT_sel_cnt-24].b.VLevel = ((unsigned int) (ADC1->DR)+(unsigned int) Steps[0][ADC_POT_sel_cnt-24].b.VLevel)/2;
 8005b70:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b74:	4893      	ldr	r0, [pc, #588]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005b76:	7802      	ldrb	r2, [r0, #0]
 8005b78:	3a18      	subs	r2, #24
 8005b7a:	4993      	ldr	r1, [pc, #588]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005b7c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8005b80:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005b84:	4413      	add	r3, r2
 8005b86:	7802      	ldrb	r2, [r0, #0]
 8005b88:	3a18      	subs	r2, #24
 8005b8a:	f3c3 034b 	ubfx	r3, r3, #1, #12
 8005b8e:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
 8005b92:	f363 000b 	bfi	r0, r3, #0, #12
 8005b96:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
				NeedInc = 1;
 8005b9a:	2401      	movs	r4, #1
				if ((ADC_POT_sel_cnt>=56) && (ADC_POT_sel_cnt<=71)) {
 8005b9c:	4b89      	ldr	r3, [pc, #548]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b37      	cmp	r3, #55	; 0x37
 8005ba4:	d934      	bls.n	8005c10 <ADC_IRQHandler+0x2c4>
 8005ba6:	4b87      	ldr	r3, [pc, #540]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b47      	cmp	r3, #71	; 0x47
 8005bae:	d82f      	bhi.n	8005c10 <ADC_IRQHandler+0x2c4>
				  Steps[0][ADC_POT_sel_cnt-40].b.TLevel += ((unsigned int) ADC1->DR - Steps[0][ADC_POT_sel_cnt-40].b.TLevel) >> 4 ;
 8005bb0:	4d86      	ldr	r5, [pc, #536]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005bb2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005bb4:	4883      	ldr	r0, [pc, #524]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005bb6:	7802      	ldrb	r2, [r0, #0]
 8005bb8:	3a28      	subs	r2, #40	; 0x28
 8005bba:	4b83      	ldr	r3, [pc, #524]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005bbc:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8005bc0:	f3c4 340b 	ubfx	r4, r4, #12, #12
 8005bc4:	1b0c      	subs	r4, r1, r4
 8005bc6:	7802      	ldrb	r2, [r0, #0]
 8005bc8:	3a28      	subs	r2, #40	; 0x28
 8005bca:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8005bce:	f3c1 310b 	ubfx	r1, r1, #12, #12
 8005bd2:	eb01 1114 	add.w	r1, r1, r4, lsr #4
 8005bd6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8005bda:	f361 3417 	bfi	r4, r1, #12, #12
 8005bde:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
				  Steps[1][ADC_POT_sel_cnt-40].b.TLevel += ((unsigned int) ADC1->DR - Steps[1][ADC_POT_sel_cnt-40].b.TLevel) >> 4 ;
 8005be2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005be4:	7802      	ldrb	r2, [r0, #0]
 8005be6:	3a08      	subs	r2, #8
 8005be8:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8005bec:	f3c4 340b 	ubfx	r4, r4, #12, #12
 8005bf0:	1b0c      	subs	r4, r1, r4
 8005bf2:	7802      	ldrb	r2, [r0, #0]
 8005bf4:	3a08      	subs	r2, #8
 8005bf6:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8005bfa:	f3c1 310b 	ubfx	r1, r1, #12, #12
 8005bfe:	eb01 1114 	add.w	r1, r1, r4, lsr #4
 8005c02:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8005c06:	f361 3017 	bfi	r0, r1, #12, #12
 8005c0a:	f843 0032 	str.w	r0, [r3, r2, lsl #3]
				NeedInc = 1;
 8005c0e:	2401      	movs	r4, #1
		if ((ADC_POT_sel_cnt>=24) && (ADC_POT_sel_cnt<=39)) {
 8005c10:	4b6c      	ldr	r3, [pc, #432]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b17      	cmp	r3, #23
 8005c18:	f240 80b6 	bls.w	8005d88 <ADC_IRQHandler+0x43c>
 8005c1c:	4b69      	ldr	r3, [pc, #420]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b27      	cmp	r3, #39	; 0x27
 8005c24:	f200 80b0 	bhi.w	8005d88 <ADC_IRQHandler+0x43c>
		  if (Steps[0][ADC_POT_sel_cnt-24].b.WaitTimeSlider) {		  // Are we waiting?
 8005c28:	4b66      	ldr	r3, [pc, #408]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f1a3 0218 	sub.w	r2, r3, #24
 8005c30:	4b65      	ldr	r3, [pc, #404]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005c3c:	d04a      	beq.n	8005cd4 <ADC_IRQHandler+0x388>
		    if ((unsigned int)Steps[0][ADC_POT_sel_cnt-24].b.TLevel >> 4 == (unsigned int)(ADC1->DR)>>4) // close enough, stop waiting
 8005c3e:	4b61      	ldr	r3, [pc, #388]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	3b18      	subs	r3, #24
 8005c44:	4a60      	ldr	r2, [pc, #384]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005c46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c4a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005c4e:	4a5f      	ldr	r2, [pc, #380]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005c50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c52:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8005c56:	d156      	bne.n	8005d06 <ADC_IRQHandler+0x3ba>
			Steps[0][ADC_POT_sel_cnt-24].b.WaitTimeSlider = 0;
 8005c58:	4b5a      	ldr	r3, [pc, #360]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f1a3 0218 	sub.w	r2, r3, #24
 8005c60:	4b59      	ldr	r3, [pc, #356]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	f36f 328e 	bfc	r2, #14, #1
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	e04a      	b.n	8005d06 <ADC_IRQHandler+0x3ba>
						if ( (unsigned int) (ADC1->DR) == (unsigned int) Steps[1][ADC_POT_sel_cnt-24].b.VLevel ) {
 8005c70:	4b56      	ldr	r3, [pc, #344]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005c72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c74:	4b53      	ldr	r3, [pc, #332]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	4953      	ldr	r1, [pc, #332]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005c7c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c84:	429a      	cmp	r2, r3
 8005c86:	f47f af67 	bne.w	8005b58 <ADC_IRQHandler+0x20c>
							Steps[1][ADC_POT_sel_cnt-24].b.WaitVoltageSlider = 0;
 8005c8a:	4b4e      	ldr	r3, [pc, #312]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f103 0208 	add.w	r2, r3, #8
 8005c92:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	f36f 324d 	bfc	r2, #13, #1
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	e75b      	b.n	8005b58 <ADC_IRQHandler+0x20c>
				if ( (unsigned int) (ADC1->DR) == (unsigned int) Steps[0][ADC_POT_sel_cnt-24].b.VLevel ) {
 8005ca0:	4b4a      	ldr	r3, [pc, #296]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ca4:	4b47      	ldr	r3, [pc, #284]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	3b18      	subs	r3, #24
 8005caa:	4947      	ldr	r1, [pc, #284]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005cac:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d001      	beq.n	8005cbc <ADC_IRQHandler+0x370>
				NeedInc = 1;
 8005cb8:	2401      	movs	r4, #1
 8005cba:	e76f      	b.n	8005b9c <ADC_IRQHandler+0x250>
							Steps[0][ADC_POT_sel_cnt-24].b.WaitVoltageSlider = 0;
 8005cbc:	4b41      	ldr	r3, [pc, #260]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	f1a3 0218 	sub.w	r2, r3, #24
 8005cc4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	f36f 324d 	bfc	r2, #13, #1
 8005cce:	605a      	str	r2, [r3, #4]
				NeedInc = 1;
 8005cd0:	2401      	movs	r4, #1
 8005cd2:	e763      	b.n	8005b9c <ADC_IRQHandler+0x250>
		      Steps[0][ADC_POT_sel_cnt-24].b.TLevel += ((unsigned int) ADC1->DR - Steps[0][ADC_POT_sel_cnt-24].b.TLevel) >> 4 ;
 8005cd4:	4b3d      	ldr	r3, [pc, #244]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cd8:	4c3a      	ldr	r4, [pc, #232]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005cda:	7823      	ldrb	r3, [r4, #0]
 8005cdc:	3b18      	subs	r3, #24
 8005cde:	493a      	ldr	r1, [pc, #232]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005ce0:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8005ce4:	f3c0 300b 	ubfx	r0, r0, #12, #12
 8005ce8:	1a10      	subs	r0, r2, r0
 8005cea:	7823      	ldrb	r3, [r4, #0]
 8005cec:	3b18      	subs	r3, #24
 8005cee:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8005cf2:	f3c2 320b 	ubfx	r2, r2, #12, #12
 8005cf6:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 8005cfa:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8005cfe:	f362 3017 	bfi	r0, r2, #12, #12
 8005d02:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
		  if (Steps[1][ADC_POT_sel_cnt-24].b.WaitTimeSlider) {		  // Are we waiting?
 8005d06:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f103 0208 	add.w	r2, r3, #8
 8005d0e:	4b2e      	ldr	r3, [pc, #184]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005d1a:	d01b      	beq.n	8005d54 <ADC_IRQHandler+0x408>
		    if ((unsigned int)Steps[1][ADC_POT_sel_cnt-24].b.TLevel >> 4 == (unsigned int)(ADC1->DR)>>4) // close enough, stop waiting
 8005d1c:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	4a29      	ldr	r2, [pc, #164]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005d24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005d2c:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005d2e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d30:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8005d34:	d001      	beq.n	8005d3a <ADC_IRQHandler+0x3ee>
		  NeedInc = 1;
 8005d36:	2401      	movs	r4, #1
 8005d38:	e026      	b.n	8005d88 <ADC_IRQHandler+0x43c>
			Steps[1][ADC_POT_sel_cnt-24].b.WaitTimeSlider = 0;
 8005d3a:	4b22      	ldr	r3, [pc, #136]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	f103 0208 	add.w	r2, r3, #8
 8005d42:	4b21      	ldr	r3, [pc, #132]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	f36f 328e 	bfc	r2, #14, #1
 8005d4e:	605a      	str	r2, [r3, #4]
		  NeedInc = 1;
 8005d50:	2401      	movs	r4, #1
 8005d52:	e019      	b.n	8005d88 <ADC_IRQHandler+0x43c>
		      Steps[1][ADC_POT_sel_cnt-24].b.TLevel += ((unsigned int) ADC1->DR - Steps[1][ADC_POT_sel_cnt-24].b.TLevel) >> 4 ;
 8005d54:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d58:	4c1a      	ldr	r4, [pc, #104]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005d5a:	7823      	ldrb	r3, [r4, #0]
 8005d5c:	491a      	ldr	r1, [pc, #104]	; (8005dc8 <ADC_IRQHandler+0x47c>)
 8005d5e:	3308      	adds	r3, #8
 8005d60:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8005d64:	f3c0 300b 	ubfx	r0, r0, #12, #12
 8005d68:	1a10      	subs	r0, r2, r0
 8005d6a:	7823      	ldrb	r3, [r4, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8005d72:	f3c2 320b 	ubfx	r2, r2, #12, #12
 8005d76:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 8005d7a:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8005d7e:	f362 3017 	bfi	r0, r2, #12, #12
 8005d82:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
		  NeedInc = 1;
 8005d86:	2401      	movs	r4, #1
		ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
 8005d88:	2102      	movs	r1, #2
 8005d8a:	4810      	ldr	r0, [pc, #64]	; (8005dcc <ADC_IRQHandler+0x480>)
 8005d8c:	f7fb f88e 	bl	8000eac <ADC_ClearFlag>
 8005d90:	e5e4      	b.n	800595c <ADC_IRQHandler+0x10>
		if ((ADC_POT_sel_cnt>=16) && (ADC_POT_sel_cnt<=23)) {
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	d90d      	bls.n	8005db8 <ADC_IRQHandler+0x46c>
 8005d9c:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b17      	cmp	r3, #23
 8005da4:	d808      	bhi.n	8005db8 <ADC_IRQHandler+0x46c>
 			AddData[ADC_POT_sel_cnt-16] = (unsigned int)(ADC2->DR);
 8005da6:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <ADC_IRQHandler+0x478>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	3b10      	subs	r3, #16
 8005dac:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <ADC_IRQHandler+0x484>)
 8005dae:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <ADC_IRQHandler+0x488>)
 8005db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NeedInc = 1;
 8005db6:	2401      	movs	r4, #1
		ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
 8005db8:	2102      	movs	r1, #2
 8005dba:	4805      	ldr	r0, [pc, #20]	; (8005dd0 <ADC_IRQHandler+0x484>)
 8005dbc:	f7fb f876 	bl	8000eac <ADC_ClearFlag>
 8005dc0:	e5d3      	b.n	800596a <ADC_IRQHandler+0x1e>
 8005dc2:	bf00      	nop
 8005dc4:	2000029c 	.word	0x2000029c
 8005dc8:	200008a4 	.word	0x200008a4
 8005dcc:	40012000 	.word	0x40012000
 8005dd0:	40012100 	.word	0x40012100
 8005dd4:	200007f8 	.word	0x200007f8
	  if (NeedInc) {
 8005dd8:	2c00      	cmp	r4, #0
 8005dda:	f43f addf 	beq.w	800599c <ADC_IRQHandler+0x50>
		ADC_POT_sel_cnt++;
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <ADC_IRQHandler+0x4bc>)
 8005de0:	7813      	ldrb	r3, [r2, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	7013      	strb	r3, [r2, #0]
		if (ADC_POT_sel_cnt >= 40) {//40
 8005de8:	7813      	ldrb	r3, [r2, #0]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b27      	cmp	r3, #39	; 0x27
 8005dee:	d902      	bls.n	8005df6 <ADC_IRQHandler+0x4aa>
			ADC_POT_sel_cnt = 0;
 8005df0:	4613      	mov	r3, r2
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
		ADC_POTS_selector_Ch(ADC_POT_sel_cnt);
 8005df6:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <ADC_IRQHandler+0x4bc>)
 8005df8:	7818      	ldrb	r0, [r3, #0]
 8005dfa:	f7fb fed9 	bl	8001bb0 <ADC_POTS_selector_Ch>
		delay_us(10);
 8005dfe:	200a      	movs	r0, #10
 8005e00:	f7ff fd8a 	bl	8005918 <delay_us>
};
 8005e04:	e5ca      	b.n	800599c <ADC_IRQHandler+0x50>
 8005e06:	bf00      	nop
 8005e08:	2000029c 	.word	0x2000029c
 8005e0c:	00000000 	.word	0x00000000

08005e10 <delay_ns>:

void delay_ns(unsigned int ns)
{
 8005e10:	b510      	push	{r4, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 8005e16:	a801      	add	r0, sp, #4
 8005e18:	f7fb f976 	bl	8001108 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000000000)*ns;
 8005e1c:	a30a      	add	r3, pc, #40	; (adr r3, 8005e48 <delay_ns+0x38>)
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	9802      	ldr	r0, [sp, #8]
 8005e24:	2100      	movs	r1, #0
 8005e26:	f7fa fdbd 	bl	80009a4 <__aeabi_ldivmod>
 8005e2a:	fb04 f000 	mul.w	r0, r4, r0
 8005e2e:	9005      	str	r0, [sp, #20]
	for (; nCount!=0; nCount--);
 8005e30:	e002      	b.n	8005e38 <delay_ns+0x28>
 8005e32:	9b05      	ldr	r3, [sp, #20]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	9305      	str	r3, [sp, #20]
 8005e38:	9b05      	ldr	r3, [sp, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f9      	bne.n	8005e32 <delay_ns+0x22>
}
 8005e3e:	b006      	add	sp, #24
 8005e40:	bd10      	pop	{r4, pc}
 8005e42:	bf00      	nop
 8005e44:	f3af 8000 	nop.w
 8005e48:	540be400 	.word	0x540be400
 8005e4c:	00000002 	.word	0x00000002

08005e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005e54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005e56:	e003      	b.n	8005e60 <LoopCopyDataInit>

08005e58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005e58:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005e5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005e5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005e5e:	3104      	adds	r1, #4

08005e60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e60:	480b      	ldr	r0, [pc, #44]	; (8005e90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005e62:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005e64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005e66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005e68:	d3f6      	bcc.n	8005e58 <CopyDataInit>
  ldr  r2, =_sbss
 8005e6a:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005e6c:	e002      	b.n	8005e74 <LoopFillZerobss>

08005e6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005e6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005e70:	f842 3b04 	str.w	r3, [r2], #4

08005e74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005e74:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005e76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005e78:	d3f9      	bcc.n	8005e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e7a:	f000 f8a5 	bl	8005fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e7e:	f000 f9c3 	bl	8006208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e82:	f7ff fb25 	bl	80054d0 <main>
  bx  lr    
 8005e86:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005e8c:	080062a0 	.word	0x080062a0
  ldr  r0, =_sdata
 8005e90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e94:	2000027c 	.word	0x2000027c
  ldr  r2, =_sbss
 8005e98:	20000280 	.word	0x20000280
  ldr  r3, = _ebss
 8005e9c:	20000b34 	.word	0x20000b34

08005ea0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ea0:	e7fe      	b.n	8005ea0 <CAN1_RX0_IRQHandler>

08005ea2 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005ea2:	4770      	bx	lr

08005ea4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005ea4:	e7fe      	b.n	8005ea4 <HardFault_Handler>

08005ea6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005ea6:	e7fe      	b.n	8005ea6 <MemManage_Handler>

08005ea8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005ea8:	e7fe      	b.n	8005ea8 <BusFault_Handler>

08005eaa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005eaa:	e7fe      	b.n	8005eaa <UsageFault_Handler>

08005eac <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8005eac:	4770      	bx	lr

08005eae <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8005eae:	4770      	bx	lr

08005eb0 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8005eb0:	4770      	bx	lr

08005eb2 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
/*  TimingDelay_Decrement(); */
}
 8005eb2:	4770      	bx	lr

08005eb4 <_write>:
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	 int i=0;
	  for(i=0 ; i<len ; i++)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	da22      	bge.n	8005f00 <_write+0x4c>
{
 8005eba:	b410      	push	{r4}
 8005ebc:	e003      	b.n	8005ec6 <_write+0x12>
	  for(i=0 ; i<len ; i++)
 8005ebe:	3301      	adds	r3, #1
	    ITM_SendChar((*ptr++));
 8005ec0:	4621      	mov	r1, r4
	  for(i=0 ; i<len ; i++)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	da18      	bge.n	8005ef8 <_write+0x44>
	    ITM_SendChar((*ptr++));
 8005ec6:	1c4c      	adds	r4, r1, #1
 8005ec8:	7808      	ldrb	r0, [r1, #0]

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8005eca:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8005ece:	f8d1 1e80 	ldr.w	r1, [r1, #3712]	; 0xe80
 8005ed2:	f011 0f01 	tst.w	r1, #1
 8005ed6:	d0f2      	beq.n	8005ebe <_write+0xa>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8005ed8:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8005edc:	f8d1 1e00 	ldr.w	r1, [r1, #3584]	; 0xe00
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8005ee0:	f011 0f01 	tst.w	r1, #1
 8005ee4:	d0eb      	beq.n	8005ebe <_write+0xa>
  {
    while (ITM->PORT[0].u32 == 0);
 8005ee6:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8005eea:	6809      	ldr	r1, [r1, #0]
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d0fa      	beq.n	8005ee6 <_write+0x32>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8005ef0:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8005ef4:	7008      	strb	r0, [r1, #0]
 8005ef6:	e7e2      	b.n	8005ebe <_write+0xa>
	  return len;

	errno = ENOSYS;
	return -1;
}
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	4610      	mov	r0, r2
 8005f02:	4770      	bx	lr

08005f04 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005f04:	b082      	sub	sp, #8
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	9300      	str	r3, [sp, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005f0c:	4a2a      	ldr	r2, [pc, #168]	; (8005fb8 <SetSysClock+0xb4>)
 8005f0e:	6813      	ldr	r3, [r2, #0]
 8005f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f14:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005f16:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <SetSysClock+0xb4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1e:	9300      	str	r3, [sp, #0]
    StartUpCounter++;
 8005f20:	9b01      	ldr	r3, [sp, #4]
 8005f22:	3301      	adds	r3, #1
 8005f24:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	b91b      	cbnz	r3, 8005f32 <SetSysClock+0x2e>
 8005f2a:	9b01      	ldr	r3, [sp, #4]
 8005f2c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005f30:	d1f1      	bne.n	8005f16 <SetSysClock+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005f32:	4b21      	ldr	r3, [pc, #132]	; (8005fb8 <SetSysClock+0xb4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005f3a:	d006      	beq.n	8005f4a <SetSysClock+0x46>
  {
    HSEStatus = (uint32_t)0x01;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	9300      	str	r3, [sp, #0]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 8005f40:	9b00      	ldr	r3, [sp, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d004      	beq.n	8005f50 <SetSysClock+0x4c>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8005f46:	b002      	add	sp, #8
 8005f48:	4770      	bx	lr
    HSEStatus = (uint32_t)0x00;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	e7f7      	b.n	8005f40 <SetSysClock+0x3c>
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005f50:	4b19      	ldr	r3, [pc, #100]	; (8005fb8 <SetSysClock+0xb4>)
 8005f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8005f5a:	4918      	ldr	r1, [pc, #96]	; (8005fbc <SetSysClock+0xb8>)
 8005f5c:	680a      	ldr	r2, [r1, #0]
 8005f5e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005f62:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f6e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8005f76:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005f78:	4a11      	ldr	r2, [pc, #68]	; (8005fc0 <SetSysClock+0xbc>)
 8005f7a:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005f82:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <SetSysClock+0xb4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f8c:	d0fa      	beq.n	8005f84 <SetSysClock+0x80>
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <SetSysClock+0xc0>)
 8005f90:	f240 7205 	movw	r2, #1797	; 0x705
 8005f94:	601a      	str	r2, [r3, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005f96:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	f022 0203 	bic.w	r2, r2, #3
 8005fa0:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	f042 0202 	orr.w	r2, r2, #2
 8005fa8:	609a      	str	r2, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005faa:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <SetSysClock+0xb4>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d1f9      	bne.n	8005faa <SetSysClock+0xa6>
 8005fb6:	e7c6      	b.n	8005f46 <SetSysClock+0x42>
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	40007000 	.word	0x40007000
 8005fc0:	07405419 	.word	0x07405419
 8005fc4:	40023c00 	.word	0x40023c00

08005fc8 <SystemInit>:
{
 8005fc8:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fca:	4c10      	ldr	r4, [pc, #64]	; (800600c <SystemInit+0x44>)
 8005fcc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <SystemInit+0x48>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005fec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ff0:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8005ff2:	4a08      	ldr	r2, [pc, #32]	; (8006014 <SystemInit+0x4c>)
 8005ff4:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ffc:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8005ffe:	60d9      	str	r1, [r3, #12]
  SetSysClock();
 8006000:	f7ff ff80 	bl	8005f04 <SetSysClock>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006004:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006008:	60a3      	str	r3, [r4, #8]
}
 800600a:	bd10      	pop	{r4, pc}
 800600c:	e000ed00 	.word	0xe000ed00
 8006010:	40023800 	.word	0x40023800
 8006014:	24003010 	.word	0x24003010

08006018 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8006018:	b470      	push	{r4, r5, r6}
	int div = 1;
 800601a:	2301      	movs	r3, #1
	while (d/div >= base)
 800601c:	e001      	b.n	8006022 <ts_itoa+0xa>
		div *= base;
 800601e:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 8006022:	fbb1 f4f3 	udiv	r4, r1, r3
 8006026:	4294      	cmp	r4, r2
 8006028:	d2f9      	bcs.n	800601e <ts_itoa+0x6>
 800602a:	e004      	b.n	8006036 <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 800602c:	6805      	ldr	r5, [r0, #0]
 800602e:	1c6e      	adds	r6, r5, #1
 8006030:	6006      	str	r6, [r0, #0]
 8006032:	3430      	adds	r4, #48	; 0x30
 8006034:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 8006036:	b16b      	cbz	r3, 8006054 <ts_itoa+0x3c>
		int num = d/div;
 8006038:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 800603c:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 8006040:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 8006044:	2c09      	cmp	r4, #9
 8006046:	ddf1      	ble.n	800602c <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 8006048:	6805      	ldr	r5, [r0, #0]
 800604a:	1c6e      	adds	r6, r5, #1
 800604c:	6006      	str	r6, [r0, #0]
 800604e:	3437      	adds	r4, #55	; 0x37
 8006050:	702c      	strb	r4, [r5, #0]
 8006052:	e7f0      	b.n	8006036 <ts_itoa+0x1e>
	}
}
 8006054:	bc70      	pop	{r4, r5, r6}
 8006056:	4770      	bx	lr

08006058 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8006058:	b530      	push	{r4, r5, lr}
 800605a:	b083      	sub	sp, #12
 800605c:	9001      	str	r0, [sp, #4]
 800605e:	460c      	mov	r4, r1
 8006060:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 8006062:	4605      	mov	r5, r0
	while(*fmt)
 8006064:	e03e      	b.n	80060e4 <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 8006066:	7863      	ldrb	r3, [r4, #1]
 8006068:	2b64      	cmp	r3, #100	; 0x64
 800606a:	d01c      	beq.n	80060a6 <ts_formatstring+0x4e>
 800606c:	d90d      	bls.n	800608a <ts_formatstring+0x32>
 800606e:	2b73      	cmp	r3, #115	; 0x73
 8006070:	d04a      	beq.n	8006108 <ts_formatstring+0xb0>
 8006072:	d916      	bls.n	80060a2 <ts_formatstring+0x4a>
 8006074:	2b75      	cmp	r3, #117	; 0x75
 8006076:	d121      	bne.n	80060bc <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8006078:	9b00      	ldr	r3, [sp, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	9200      	str	r2, [sp, #0]
 800607e:	220a      	movs	r2, #10
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	a801      	add	r0, sp, #4
 8006084:	f7ff ffc8 	bl	8006018 <ts_itoa>
				break;
 8006088:	e02b      	b.n	80060e2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 800608a:	2b58      	cmp	r3, #88	; 0x58
 800608c:	d018      	beq.n	80060c0 <ts_formatstring+0x68>
 800608e:	2b63      	cmp	r3, #99	; 0x63
 8006090:	d01f      	beq.n	80060d2 <ts_formatstring+0x7a>
 8006092:	2b25      	cmp	r3, #37	; 0x25
 8006094:	d125      	bne.n	80060e2 <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	9201      	str	r2, [sp, #4]
 800609c:	2225      	movs	r2, #37	; 0x25
 800609e:	701a      	strb	r2, [r3, #0]
				  break;
 80060a0:	e01f      	b.n	80060e2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 80060a2:	2b69      	cmp	r3, #105	; 0x69
 80060a4:	d11d      	bne.n	80060e2 <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 80060a6:	9b00      	ldr	r3, [sp, #0]
 80060a8:	1d1a      	adds	r2, r3, #4
 80060aa:	9200      	str	r2, [sp, #0]
 80060ac:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 80060ae:	2900      	cmp	r1, #0
 80060b0:	db23      	blt.n	80060fa <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 80060b2:	220a      	movs	r2, #10
 80060b4:	a801      	add	r0, sp, #4
 80060b6:	f7ff ffaf 	bl	8006018 <ts_itoa>
				break;
 80060ba:	e012      	b.n	80060e2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 80060bc:	2b78      	cmp	r3, #120	; 0x78
 80060be:	d110      	bne.n	80060e2 <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 80060c0:	9b00      	ldr	r3, [sp, #0]
 80060c2:	1d1a      	adds	r2, r3, #4
 80060c4:	9200      	str	r2, [sp, #0]
 80060c6:	2210      	movs	r2, #16
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	a801      	add	r0, sp, #4
 80060cc:	f7ff ffa4 	bl	8006018 <ts_itoa>
				break;
 80060d0:	e007      	b.n	80060e2 <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 80060d2:	9b00      	ldr	r3, [sp, #0]
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	9200      	str	r2, [sp, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	9b01      	ldr	r3, [sp, #4]
 80060dc:	1c59      	adds	r1, r3, #1
 80060de:	9101      	str	r1, [sp, #4]
 80060e0:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 80060e2:	3402      	adds	r4, #2
	while(*fmt)
 80060e4:	7823      	ldrb	r3, [r4, #0]
 80060e6:	b1f3      	cbz	r3, 8006126 <ts_formatstring+0xce>
		if (*fmt == '%')
 80060e8:	2b25      	cmp	r3, #37	; 0x25
 80060ea:	d0bc      	beq.n	8006066 <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	9201      	str	r2, [sp, #4]
 80060f2:	7822      	ldrb	r2, [r4, #0]
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	3401      	adds	r4, #1
 80060f8:	e7f4      	b.n	80060e4 <ts_formatstring+0x8c>
						val *= -1;
 80060fa:	4249      	negs	r1, r1
						*buf++ = '-';
 80060fc:	9b01      	ldr	r3, [sp, #4]
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	9201      	str	r2, [sp, #4]
 8006102:	222d      	movs	r2, #45	; 0x2d
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e7d4      	b.n	80060b2 <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 8006108:	9b00      	ldr	r3, [sp, #0]
 800610a:	1d1a      	adds	r2, r3, #4
 800610c:	9200      	str	r2, [sp, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 8006110:	e005      	b.n	800611e <ts_formatstring+0xc6>
						*buf++ = *arg++;
 8006112:	9a01      	ldr	r2, [sp, #4]
 8006114:	1c51      	adds	r1, r2, #1
 8006116:	9101      	str	r1, [sp, #4]
 8006118:	7819      	ldrb	r1, [r3, #0]
 800611a:	7011      	strb	r1, [r2, #0]
 800611c:	3301      	adds	r3, #1
					while (*arg)
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	2a00      	cmp	r2, #0
 8006122:	d1f6      	bne.n	8006112 <ts_formatstring+0xba>
 8006124:	e7dd      	b.n	80060e2 <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800612c:	9801      	ldr	r0, [sp, #4]
 800612e:	1b40      	subs	r0, r0, r5
 8006130:	b003      	add	sp, #12
 8006132:	bd30      	pop	{r4, r5, pc}

08006134 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8006134:	b082      	sub	sp, #8
 8006136:	4603      	mov	r3, r0
 8006138:	9101      	str	r1, [sp, #4]
	int length = 0;
 800613a:	2000      	movs	r0, #0
	while (*fmt)
 800613c:	e01d      	b.n	800617a <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 800613e:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	3b58      	subs	r3, #88	; 0x58
 8006144:	2b20      	cmp	r3, #32
 8006146:	d837      	bhi.n	80061b8 <ts_formatlength+0x84>
 8006148:	e8df f003 	tbb	[pc, r3]
 800614c:	36363630 	.word	0x36363630
 8006150:	36363636 	.word	0x36363636
 8006154:	11363636 	.word	0x11363636
 8006158:	3636361d 	.word	0x3636361d
 800615c:	36361d36 	.word	0x36361d36
 8006160:	36363636 	.word	0x36363636
 8006164:	23363636 	.word	0x23363636
 8006168:	36361d36 	.word	0x36361d36
 800616c:	30          	.byte	0x30
 800616d:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	3304      	adds	r3, #4
 8006172:	9301      	str	r3, [sp, #4]
				  ++length;
 8006174:	3001      	adds	r0, #1
			++fmt;
 8006176:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 8006178:	3301      	adds	r3, #1
	while (*fmt)
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	b1fa      	cbz	r2, 80061be <ts_formatlength+0x8a>
		if (*fmt == '%')
 800617e:	2a25      	cmp	r2, #37	; 0x25
 8006180:	d0dd      	beq.n	800613e <ts_formatlength+0xa>
			++length;
 8006182:	3001      	adds	r0, #1
 8006184:	e7f8      	b.n	8006178 <ts_formatlength+0x44>
				  length += 11;
 8006186:	300b      	adds	r0, #11
				  va_arg(va, int);
 8006188:	9b01      	ldr	r3, [sp, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	9301      	str	r3, [sp, #4]
			++fmt;
 800618e:	460b      	mov	r3, r1
 8006190:	e7f2      	b.n	8006178 <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	1d1a      	adds	r2, r3, #4
 8006196:	9201      	str	r2, [sp, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 800619a:	e001      	b.n	80061a0 <ts_formatlength+0x6c>
			  			  ++length;
 800619c:	3001      	adds	r0, #1
			  		  while (*str++)
 800619e:	4613      	mov	r3, r2
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f9      	bne.n	800619c <ts_formatlength+0x68>
			++fmt;
 80061a8:	460b      	mov	r3, r1
 80061aa:	e7e5      	b.n	8006178 <ts_formatlength+0x44>
				  length += 8;
 80061ac:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	9301      	str	r3, [sp, #4]
			++fmt;
 80061b4:	460b      	mov	r3, r1
 80061b6:	e7df      	b.n	8006178 <ts_formatlength+0x44>
				  ++length;
 80061b8:	3001      	adds	r0, #1
			++fmt;
 80061ba:	460b      	mov	r3, r1
				  break;
 80061bc:	e7dc      	b.n	8006178 <ts_formatlength+0x44>
	}
	return length;
}
 80061be:	b002      	add	sp, #8
 80061c0:	4770      	bx	lr

080061c2 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80061c2:	b40f      	push	{r0, r1, r2, r3}
 80061c4:	b5b0      	push	{r4, r5, r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	f107 0418 	add.w	r4, r7, #24
 80061ce:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 80061d2:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 80061d4:	4621      	mov	r1, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	f7ff ffac 	bl	8006134 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 80061dc:	3007      	adds	r0, #7
 80061de:	f020 0007 	bic.w	r0, r0, #7
 80061e2:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 80061e6:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 80061e8:	4622      	mov	r2, r4
 80061ea:	4629      	mov	r1, r5
 80061ec:	4668      	mov	r0, sp
 80061ee:	f7ff ff33 	bl	8006058 <ts_formatstring>
		length = _write(1, buf, length);
 80061f2:	4602      	mov	r2, r0
 80061f4:	4669      	mov	r1, sp
 80061f6:	2001      	movs	r0, #1
 80061f8:	f7ff fe5c 	bl	8005eb4 <_write>
		va_end(va);
	}
	return length;
}
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006204:	b004      	add	sp, #16
 8006206:	4770      	bx	lr

08006208 <__libc_init_array>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4e0d      	ldr	r6, [pc, #52]	; (8006240 <__libc_init_array+0x38>)
 800620c:	4c0d      	ldr	r4, [pc, #52]	; (8006244 <__libc_init_array+0x3c>)
 800620e:	1ba4      	subs	r4, r4, r6
 8006210:	10a4      	asrs	r4, r4, #2
 8006212:	2500      	movs	r5, #0
 8006214:	42a5      	cmp	r5, r4
 8006216:	d109      	bne.n	800622c <__libc_init_array+0x24>
 8006218:	4e0b      	ldr	r6, [pc, #44]	; (8006248 <__libc_init_array+0x40>)
 800621a:	4c0c      	ldr	r4, [pc, #48]	; (800624c <__libc_init_array+0x44>)
 800621c:	f000 f818 	bl	8006250 <_init>
 8006220:	1ba4      	subs	r4, r4, r6
 8006222:	10a4      	asrs	r4, r4, #2
 8006224:	2500      	movs	r5, #0
 8006226:	42a5      	cmp	r5, r4
 8006228:	d105      	bne.n	8006236 <__libc_init_array+0x2e>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006230:	4798      	blx	r3
 8006232:	3501      	adds	r5, #1
 8006234:	e7ee      	b.n	8006214 <__libc_init_array+0xc>
 8006236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800623a:	4798      	blx	r3
 800623c:	3501      	adds	r5, #1
 800623e:	e7f2      	b.n	8006226 <__libc_init_array+0x1e>
 8006240:	08006298 	.word	0x08006298
 8006244:	08006298 	.word	0x08006298
 8006248:	08006298 	.word	0x08006298
 800624c:	0800629c 	.word	0x0800629c

08006250 <_init>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	bf00      	nop
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr

0800625c <_fini>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	bf00      	nop
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr
