
MARF_v2.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006608  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000027c  20000000  080067f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002027c  2**0
                  CONTENTS
  8 .bss          000008b4  20000280  20000280  00020280  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  20000b34  20000b34  00020280  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001324e  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002c91  00000000  00000000  000334fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005efa  00000000  00000000  0003618b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  0003c088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014024  00000000  00000000  0003da90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c9cf  00000000  00000000  00051ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006495b  00000000  00000000  0005e483  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2dde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020ac  00000000  00000000  000c2e5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000280 	.word	0x20000280
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006778 	.word	0x08006778

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000284 	.word	0x20000284
 80001c4:	08006778 	.word	0x08006778

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_ldivmod>:
 80009b4:	b97b      	cbnz	r3, 80009d6 <__aeabi_ldivmod+0x22>
 80009b6:	b972      	cbnz	r2, 80009d6 <__aeabi_ldivmod+0x22>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bfbe      	ittt	lt
 80009bc:	2000      	movlt	r0, #0
 80009be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80009c2:	e006      	blt.n	80009d2 <__aeabi_ldivmod+0x1e>
 80009c4:	bf08      	it	eq
 80009c6:	2800      	cmpeq	r0, #0
 80009c8:	bf1c      	itt	ne
 80009ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80009ce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d2:	f000 b9a5 	b.w	8000d20 <__aeabi_idiv0>
 80009d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80009da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009de:	2900      	cmp	r1, #0
 80009e0:	db09      	blt.n	80009f6 <__aeabi_ldivmod+0x42>
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db1a      	blt.n	8000a1c <__aeabi_ldivmod+0x68>
 80009e6:	f000 f835 	bl	8000a54 <__udivmoddi4>
 80009ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f2:	b004      	add	sp, #16
 80009f4:	4770      	bx	lr
 80009f6:	4240      	negs	r0, r0
 80009f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db1b      	blt.n	8000a38 <__aeabi_ldivmod+0x84>
 8000a00:	f000 f828 	bl	8000a54 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4240      	negs	r0, r0
 8000a10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a14:	4252      	negs	r2, r2
 8000a16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a1a:	4770      	bx	lr
 8000a1c:	4252      	negs	r2, r2
 8000a1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a22:	f000 f817 	bl	8000a54 <__udivmoddi4>
 8000a26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a2e:	b004      	add	sp, #16
 8000a30:	4240      	negs	r0, r0
 8000a32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a36:	4770      	bx	lr
 8000a38:	4252      	negs	r2, r2
 8000a3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a3e:	f000 f809 	bl	8000a54 <__udivmoddi4>
 8000a42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a4a:	b004      	add	sp, #16
 8000a4c:	4252      	negs	r2, r2
 8000a4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9e08      	ldr	r6, [sp, #32]
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	4688      	mov	r8, r1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d14b      	bne.n	8000afa <__udivmoddi4+0xa6>
 8000a62:	428a      	cmp	r2, r1
 8000a64:	4615      	mov	r5, r2
 8000a66:	d967      	bls.n	8000b38 <__udivmoddi4+0xe4>
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	b14a      	cbz	r2, 8000a82 <__udivmoddi4+0x2e>
 8000a6e:	f1c2 0720 	rsb	r7, r2, #32
 8000a72:	fa01 f302 	lsl.w	r3, r1, r2
 8000a76:	fa20 f707 	lsr.w	r7, r0, r7
 8000a7a:	4095      	lsls	r5, r2
 8000a7c:	ea47 0803 	orr.w	r8, r7, r3
 8000a80:	4094      	lsls	r4, r2
 8000a82:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a86:	0c23      	lsrs	r3, r4, #16
 8000a88:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a8c:	fa1f fc85 	uxth.w	ip, r5
 8000a90:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a98:	fb07 f10c 	mul.w	r1, r7, ip
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	d909      	bls.n	8000ab4 <__udivmoddi4+0x60>
 8000aa0:	18eb      	adds	r3, r5, r3
 8000aa2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aa6:	f080 811b 	bcs.w	8000ce0 <__udivmoddi4+0x28c>
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	f240 8118 	bls.w	8000ce0 <__udivmoddi4+0x28c>
 8000ab0:	3f02      	subs	r7, #2
 8000ab2:	442b      	add	r3, r5
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000abc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ac8:	45a4      	cmp	ip, r4
 8000aca:	d909      	bls.n	8000ae0 <__udivmoddi4+0x8c>
 8000acc:	192c      	adds	r4, r5, r4
 8000ace:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ad2:	f080 8107 	bcs.w	8000ce4 <__udivmoddi4+0x290>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	f240 8104 	bls.w	8000ce4 <__udivmoddi4+0x290>
 8000adc:	3802      	subs	r0, #2
 8000ade:	442c      	add	r4, r5
 8000ae0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ae4:	eba4 040c 	sub.w	r4, r4, ip
 8000ae8:	2700      	movs	r7, #0
 8000aea:	b11e      	cbz	r6, 8000af4 <__udivmoddi4+0xa0>
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	2300      	movs	r3, #0
 8000af0:	e9c6 4300 	strd	r4, r3, [r6]
 8000af4:	4639      	mov	r1, r7
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0xbe>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	f000 80eb 	beq.w	8000cda <__udivmoddi4+0x286>
 8000b04:	2700      	movs	r7, #0
 8000b06:	e9c6 0100 	strd	r0, r1, [r6]
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f783 	clz	r7, r3
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	d147      	bne.n	8000baa <__udivmoddi4+0x156>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0xd0>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80fa 	bhi.w	8000d18 <__udivmoddi4+0x2c4>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0303 	sbc.w	r3, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	4698      	mov	r8, r3
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d0e0      	beq.n	8000af4 <__udivmoddi4+0xa0>
 8000b32:	e9c6 4800 	strd	r4, r8, [r6]
 8000b36:	e7dd      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000b38:	b902      	cbnz	r2, 8000b3c <__udivmoddi4+0xe8>
 8000b3a:	deff      	udf	#255	; 0xff
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	f040 808f 	bne.w	8000c64 <__udivmoddi4+0x210>
 8000b46:	1b49      	subs	r1, r1, r5
 8000b48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4c:	fa1f f885 	uxth.w	r8, r5
 8000b50:	2701      	movs	r7, #1
 8000b52:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b56:	0c23      	lsrs	r3, r4, #16
 8000b58:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb08 f10c 	mul.w	r1, r8, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x124>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x122>
 8000b70:	4299      	cmp	r1, r3
 8000b72:	f200 80cd 	bhi.w	8000d10 <__udivmoddi4+0x2bc>
 8000b76:	4684      	mov	ip, r0
 8000b78:	1a59      	subs	r1, r3, r1
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b80:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b88:	fb08 f800 	mul.w	r8, r8, r0
 8000b8c:	45a0      	cmp	r8, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x14c>
 8000b90:	192c      	adds	r4, r5, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x14a>
 8000b98:	45a0      	cmp	r8, r4
 8000b9a:	f200 80b6 	bhi.w	8000d0a <__udivmoddi4+0x2b6>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 0408 	sub.w	r4, r4, r8
 8000ba4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba8:	e79f      	b.n	8000aea <__udivmoddi4+0x96>
 8000baa:	f1c7 0c20 	rsb	ip, r7, #32
 8000bae:	40bb      	lsls	r3, r7
 8000bb0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bb4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bb8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bbc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bc4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bc8:	4325      	orrs	r5, r4
 8000bca:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bce:	0c2c      	lsrs	r4, r5, #16
 8000bd0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bd4:	fa1f fa8e 	uxth.w	sl, lr
 8000bd8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bdc:	fb09 f40a 	mul.w	r4, r9, sl
 8000be0:	429c      	cmp	r4, r3
 8000be2:	fa02 f207 	lsl.w	r2, r2, r7
 8000be6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b0>
 8000bec:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf4:	f080 8087 	bcs.w	8000d06 <__udivmoddi4+0x2b2>
 8000bf8:	429c      	cmp	r4, r3
 8000bfa:	f240 8084 	bls.w	8000d06 <__udivmoddi4+0x2b2>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4473      	add	r3, lr
 8000c04:	1b1b      	subs	r3, r3, r4
 8000c06:	b2ad      	uxth	r5, r5
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c10:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c14:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c18:	45a2      	cmp	sl, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1da>
 8000c1c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c24:	d26b      	bcs.n	8000cfe <__udivmoddi4+0x2aa>
 8000c26:	45a2      	cmp	sl, r4
 8000c28:	d969      	bls.n	8000cfe <__udivmoddi4+0x2aa>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4474      	add	r4, lr
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	fba0 8902 	umull	r8, r9, r0, r2
 8000c36:	eba4 040a 	sub.w	r4, r4, sl
 8000c3a:	454c      	cmp	r4, r9
 8000c3c:	46c2      	mov	sl, r8
 8000c3e:	464b      	mov	r3, r9
 8000c40:	d354      	bcc.n	8000cec <__udivmoddi4+0x298>
 8000c42:	d051      	beq.n	8000ce8 <__udivmoddi4+0x294>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d069      	beq.n	8000d1c <__udivmoddi4+0x2c8>
 8000c48:	ebb1 050a 	subs.w	r5, r1, sl
 8000c4c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c50:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c54:	40fd      	lsrs	r5, r7
 8000c56:	40fc      	lsrs	r4, r7
 8000c58:	ea4c 0505 	orr.w	r5, ip, r5
 8000c5c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c60:	2700      	movs	r7, #0
 8000c62:	e747      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f703 	lsr.w	r7, r0, r3
 8000c6c:	4095      	lsls	r5, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	fa21 f303 	lsr.w	r3, r1, r3
 8000c76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7a:	4338      	orrs	r0, r7
 8000c7c:	0c01      	lsrs	r1, r0, #16
 8000c7e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c82:	fa1f f885 	uxth.w	r8, r5
 8000c86:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8e:	fb07 f308 	mul.w	r3, r7, r8
 8000c92:	428b      	cmp	r3, r1
 8000c94:	fa04 f402 	lsl.w	r4, r4, r2
 8000c98:	d907      	bls.n	8000caa <__udivmoddi4+0x256>
 8000c9a:	1869      	adds	r1, r5, r1
 8000c9c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ca0:	d22f      	bcs.n	8000d02 <__udivmoddi4+0x2ae>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d92d      	bls.n	8000d02 <__udivmoddi4+0x2ae>
 8000ca6:	3f02      	subs	r7, #2
 8000ca8:	4429      	add	r1, r5
 8000caa:	1acb      	subs	r3, r1, r3
 8000cac:	b281      	uxth	r1, r0
 8000cae:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cba:	fb00 f308 	mul.w	r3, r0, r8
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x27e>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cc8:	d217      	bcs.n	8000cfa <__udivmoddi4+0x2a6>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d915      	bls.n	8000cfa <__udivmoddi4+0x2a6>
 8000cce:	3802      	subs	r0, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1ac9      	subs	r1, r1, r3
 8000cd4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cd8:	e73b      	b.n	8000b52 <__udivmoddi4+0xfe>
 8000cda:	4637      	mov	r7, r6
 8000cdc:	4630      	mov	r0, r6
 8000cde:	e709      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000ce0:	4607      	mov	r7, r0
 8000ce2:	e6e7      	b.n	8000ab4 <__udivmoddi4+0x60>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	e6fb      	b.n	8000ae0 <__udivmoddi4+0x8c>
 8000ce8:	4541      	cmp	r1, r8
 8000cea:	d2ab      	bcs.n	8000c44 <__udivmoddi4+0x1f0>
 8000cec:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	e7a4      	b.n	8000c44 <__udivmoddi4+0x1f0>
 8000cfa:	4660      	mov	r0, ip
 8000cfc:	e7e9      	b.n	8000cd2 <__udivmoddi4+0x27e>
 8000cfe:	4618      	mov	r0, r3
 8000d00:	e795      	b.n	8000c2e <__udivmoddi4+0x1da>
 8000d02:	4667      	mov	r7, ip
 8000d04:	e7d1      	b.n	8000caa <__udivmoddi4+0x256>
 8000d06:	4681      	mov	r9, r0
 8000d08:	e77c      	b.n	8000c04 <__udivmoddi4+0x1b0>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	442c      	add	r4, r5
 8000d0e:	e747      	b.n	8000ba0 <__udivmoddi4+0x14c>
 8000d10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d14:	442b      	add	r3, r5
 8000d16:	e72f      	b.n	8000b78 <__udivmoddi4+0x124>
 8000d18:	4638      	mov	r0, r7
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xda>
 8000d1c:	4637      	mov	r7, r6
 8000d1e:	e6e9      	b.n	8000af4 <__udivmoddi4+0xa0>

08000d20 <__aeabi_idiv0>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d24:	78c3      	ldrb	r3, [r0, #3]
 8000d26:	b953      	cbnz	r3, 8000d3e <NVIC_Init+0x1a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d28:	7803      	ldrb	r3, [r0, #0]
 8000d2a:	f003 011f 	and.w	r1, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d2e:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d30:	2201      	movs	r2, #1
 8000d32:	408a      	lsls	r2, r1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d34:	3320      	adds	r3, #32
 8000d36:	4912      	ldr	r1, [pc, #72]	; (8000d80 <NVIC_Init+0x5c>)
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3c:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <NVIC_Init+0x60>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	f3c3 2202 	ubfx	r2, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000d48:	f1c2 0104 	rsb	r1, r2, #4
 8000d4c:	b2c9      	uxtb	r1, r1
    tmpsub = tmpsub >> tmppriority;
 8000d4e:	230f      	movs	r3, #15
 8000d50:	4113      	asrs	r3, r2
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d52:	7842      	ldrb	r2, [r0, #1]
 8000d54:	408a      	lsls	r2, r1
 8000d56:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000d58:	7881      	ldrb	r1, [r0, #2]
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	4313      	orrs	r3, r2
    tmppriority = tmppriority << 0x04;
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b2db      	uxtb	r3, r3
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d62:	7802      	ldrb	r2, [r0, #0]
 8000d64:	4906      	ldr	r1, [pc, #24]	; (8000d80 <NVIC_Init+0x5c>)
 8000d66:	440a      	add	r2, r1
 8000d68:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d6c:	7803      	ldrb	r3, [r0, #0]
 8000d6e:	f003 001f 	and.w	r0, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d72:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d74:	2201      	movs	r2, #1
 8000d76:	4082      	lsls	r2, r0
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000d88:	b410      	push	{r4}
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000d8a:	6842      	ldr	r2, [r0, #4]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000d8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000d94:	790c      	ldrb	r4, [r1, #4]
                                   ADC_InitStruct->ADC_Resolution);
 8000d96:	680b      	ldr	r3, [r1, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000d98:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000d9c:	4313      	orrs	r3, r2
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000d9e:	6043      	str	r3, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000da0:	6883      	ldr	r3, [r0, #8]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000da2:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <ADC_Init+0x4c>)
 8000da4:	401a      	ands	r2, r3
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000da6:	690b      	ldr	r3, [r1, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000da8:	68cc      	ldr	r4, [r1, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000daa:	4323      	orrs	r3, r4
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000dac:	688c      	ldr	r4, [r1, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000dae:	4323      	orrs	r3, r4
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000db0:	794c      	ldrb	r4, [r1, #5]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000db2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8000db6:	4313      	orrs	r3, r2
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000db8:	6083      	str	r3, [r0, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000dba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000dbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000dc0:	7d0a      	ldrb	r2, [r1, #20]
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	b2d2      	uxtb	r2, r2
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000dc6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000dca:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8000dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	c0fff7fd 	.word	0xc0fff7fd

08000dd8 <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000ddc:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000dde:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000de0:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000de2:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000de4:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	7503      	strb	r3, [r0, #20]
}
 8000dea:	4770      	bx	lr

08000dec <ADC_Cmd>:
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dec:	b921      	cbnz	r1, 8000df8 <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000dee:	6883      	ldr	r3, [r0, #8]
 8000df0:	f023 0301 	bic.w	r3, r3, #1
 8000df4:	6083      	str	r3, [r0, #8]
  }
}
 8000df6:	4770      	bx	lr
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000df8:	6883      	ldr	r3, [r0, #8]
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6083      	str	r3, [r0, #8]
 8000e00:	4770      	bx	lr

08000e02 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000e02:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000e04:	2909      	cmp	r1, #9
 8000e06:	d91d      	bls.n	8000e44 <ADC_RegularChannelConfig+0x42>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000e08:	68c5      	ldr	r5, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000e0a:	f1a1 040a 	sub.w	r4, r1, #10
 8000e0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e12:	2607      	movs	r6, #7
 8000e14:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e16:	ea25 0506 	bic.w	r5, r5, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000e1a:	fa03 f404 	lsl.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e1e:	432c      	orrs	r4, r5
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000e20:	60c4      	str	r4, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e22:	2a06      	cmp	r2, #6
 8000e24:	d91a      	bls.n	8000e5c <ADC_RegularChannelConfig+0x5a>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000e26:	2a0c      	cmp	r2, #12
 8000e28:	d926      	bls.n	8000e78 <ADC_RegularChannelConfig+0x76>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000e2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000e2c:	3a0d      	subs	r2, #13
 8000e2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e32:	241f      	movs	r4, #31
 8000e34:	4094      	lsls	r4, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e36:	ea23 0304 	bic.w	r3, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e3e:	431a      	orrs	r2, r3
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000e40:	62c2      	str	r2, [r0, #44]	; 0x2c
  }
}
 8000e42:	e017      	b.n	8000e74 <ADC_RegularChannelConfig+0x72>
    tmpreg1 = ADCx->SMPR2;
 8000e44:	6905      	ldr	r5, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e46:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000e4a:	2407      	movs	r4, #7
 8000e4c:	40b4      	lsls	r4, r6
    tmpreg1 &= ~tmpreg2;
 8000e4e:	ea25 0504 	bic.w	r5, r5, r4
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e52:	fa03 f406 	lsl.w	r4, r3, r6
    tmpreg1 |= tmpreg2;
 8000e56:	432c      	orrs	r4, r5
    ADCx->SMPR2 = tmpreg1;
 8000e58:	6104      	str	r4, [r0, #16]
 8000e5a:	e7e2      	b.n	8000e22 <ADC_RegularChannelConfig+0x20>
    tmpreg1 = ADCx->SQR3;
 8000e5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e5e:	3a01      	subs	r2, #1
 8000e60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e64:	241f      	movs	r4, #31
 8000e66:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 8000e68:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 8000e70:	431a      	orrs	r2, r3
    ADCx->SQR3 = tmpreg1;
 8000e72:	6342      	str	r2, [r0, #52]	; 0x34
}
 8000e74:	bc70      	pop	{r4, r5, r6}
 8000e76:	4770      	bx	lr
    tmpreg1 = ADCx->SQR2;
 8000e78:	6b03      	ldr	r3, [r0, #48]	; 0x30
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000e7a:	3a07      	subs	r2, #7
 8000e7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e80:	241f      	movs	r4, #31
 8000e82:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 8000e84:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 8000e8c:	431a      	orrs	r2, r3
    ADCx->SQR2 = tmpreg1;
 8000e8e:	6302      	str	r2, [r0, #48]	; 0x30
 8000e90:	e7f0      	b.n	8000e74 <ADC_RegularChannelConfig+0x72>

08000e92 <ADC_ITConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000e92:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 8000e94:	2301      	movs	r3, #1
 8000e96:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
 8000e9a:	b922      	cbnz	r2, 8000ea6 <ADC_ITConfig+0x14>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000e9c:	6843      	ldr	r3, [r0, #4]
 8000e9e:	ea23 0101 	bic.w	r1, r3, r1
 8000ea2:	6041      	str	r1, [r0, #4]
  }
}
 8000ea4:	4770      	bx	lr
    ADCx->CR1 |= itmask;
 8000ea6:	6843      	ldr	r3, [r0, #4]
 8000ea8:	4319      	orrs	r1, r3
 8000eaa:	6041      	str	r1, [r0, #4]
 8000eac:	4770      	bx	lr

08000eae <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000eae:	6803      	ldr	r3, [r0, #0]
 8000eb0:	4219      	tst	r1, r3
 8000eb2:	d101      	bne.n	8000eb8 <ADC_GetFlagStatus+0xa>
    bitstatus = SET;
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000eb4:	2000      	movs	r0, #0
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8000eb6:	4770      	bx	lr
    bitstatus = SET;
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4770      	bx	lr

08000ebc <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000ebc:	43c9      	mvns	r1, r1
 8000ebe:	6001      	str	r1, [r0, #0]
}
 8000ec0:	4770      	bx	lr

08000ec2 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8000ec2:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000eca:	f000 f9ab 	bl	8001224 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000ed4:	f000 f9a6 	bl	8001224 <RCC_APB1PeriphResetCmd>
}
 8000ed8:	bd08      	pop	{r3, pc}
	...

08000edc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000edc:	b430      	push	{r4, r5}
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000ede:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <DAC_Init+0x2c>)
 8000ee0:	6822      	ldr	r2, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000ee2:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000ee6:	4083      	lsls	r3, r0
 8000ee8:	ea22 0203 	bic.w	r2, r2, r3
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000eec:	680b      	ldr	r3, [r1, #0]
 8000eee:	684d      	ldr	r5, [r1, #4]
 8000ef0:	432b      	orrs	r3, r5
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000ef2:	688d      	ldr	r5, [r1, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ef4:	432b      	orrs	r3, r5
             DAC_InitStruct->DAC_OutputBuffer);
 8000ef6:	68c9      	ldr	r1, [r1, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ef8:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000efa:	fa03 f000 	lsl.w	r0, r3, r0
 8000efe:	4310      	orrs	r0, r2
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000f00:	6020      	str	r0, [r4, #0]
}
 8000f02:	bc30      	pop	{r4, r5}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40007400 	.word	0x40007400

08000f0c <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000f10:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8000f12:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000f14:	60c3      	str	r3, [r0, #12]
}
 8000f16:	4770      	bx	lr

08000f18 <DAC_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f18:	b941      	cbnz	r1, 8000f2c <DAC_Cmd+0x14>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <DAC_Cmd+0x24>)
 8000f1c:	680b      	ldr	r3, [r1, #0]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	fa02 f000 	lsl.w	r0, r2, r0
 8000f24:	ea23 0000 	bic.w	r0, r3, r0
 8000f28:	6008      	str	r0, [r1, #0]
  }
}
 8000f2a:	4770      	bx	lr
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000f2c:	4903      	ldr	r1, [pc, #12]	; (8000f3c <DAC_Cmd+0x24>)
 8000f2e:	680b      	ldr	r3, [r1, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	fa02 f000 	lsl.w	r0, r2, r0
 8000f36:	4318      	orrs	r0, r3
 8000f38:	6008      	str	r0, [r1, #0]
 8000f3a:	4770      	bx	lr
 8000f3c:	40007400 	.word	0x40007400

08000f40 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000f40:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <DAC_SetChannel1Data+0x1c>)
 8000f48:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000f4a:	9b01      	ldr	r3, [sp, #4]
 8000f4c:	4418      	add	r0, r3
 8000f4e:	3008      	adds	r0, #8
 8000f50:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000f52:	9b01      	ldr	r3, [sp, #4]
 8000f54:	6019      	str	r1, [r3, #0]
}
 8000f56:	b002      	add	sp, #8
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40007400 	.word	0x40007400

08000f60 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8000f60:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <DAC_SetChannel2Data+0x1c>)
 8000f68:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000f6a:	9b01      	ldr	r3, [sp, #4]
 8000f6c:	4418      	add	r0, r3
 8000f6e:	3014      	adds	r0, #20
 8000f70:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8000f72:	9b01      	ldr	r3, [sp, #4]
 8000f74:	6019      	str	r1, [r3, #0]
}
 8000f76:	b002      	add	sp, #8
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40007400 	.word	0x40007400

08000f80 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <EXTI_DeInit+0x14>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8000f86:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8000f88:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8000f8a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8000f8c:	4a02      	ldr	r2, [pc, #8]	; (8000f98 <EXTI_DeInit+0x18>)
 8000f8e:	615a      	str	r2, [r3, #20]
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40013c00 	.word	0x40013c00
 8000f98:	007fffff 	.word	0x007fffff

08000f9c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000f9c:	7983      	ldrb	r3, [r0, #6]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d036      	beq.n	8001010 <EXTI_Init+0x74>
{
 8000fa2:	b410      	push	{r4}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <EXTI_Init+0x8c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6801      	ldr	r1, [r0, #0]
 8000faa:	ea22 0201 	bic.w	r2, r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	6801      	ldr	r1, [r0, #0]
 8000fb4:	ea22 0201 	bic.w	r2, r2, r1
 8000fb8:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000fba:	7902      	ldrb	r2, [r0, #4]
 8000fbc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000fc0:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000fc4:	6811      	ldr	r1, [r2, #0]
 8000fc6:	6804      	ldr	r4, [r0, #0]
 8000fc8:	4321      	orrs	r1, r4
 8000fca:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	6801      	ldr	r1, [r0, #0]
 8000fd0:	ea22 0201 	bic.w	r2, r2, r1
 8000fd4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	6801      	ldr	r1, [r0, #0]
 8000fda:	ea22 0201 	bic.w	r2, r2, r1
 8000fde:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000fe0:	7943      	ldrb	r3, [r0, #5]
 8000fe2:	2b10      	cmp	r3, #16
 8000fe4:	d00a      	beq.n	8000ffc <EXTI_Init+0x60>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000fe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fea:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	6801      	ldr	r1, [r0, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ffa:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <EXTI_Init+0x8c>)
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	6801      	ldr	r1, [r0, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	6801      	ldr	r1, [r0, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	e7f2      	b.n	8000ff6 <EXTI_Init+0x5a>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001010:	7903      	ldrb	r3, [r0, #4]
 8001012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001016:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	6801      	ldr	r1, [r0, #0]
 800101e:	ea22 0201 	bic.w	r2, r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40013c00 	.word	0x40013c00

0800102c <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <EXTI_ClearITPendingBit+0x8>)
 800102e:	6158      	str	r0, [r3, #20]
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40013c00 	.word	0x40013c00

08001038 <GPIO_Init>:
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001038:	2300      	movs	r3, #0
 800103a:	2b0f      	cmp	r3, #15
 800103c:	d840      	bhi.n	80010c0 <GPIO_Init+0x88>
{
 800103e:	b4f0      	push	{r4, r5, r6, r7}
 8001040:	e010      	b.n	8001064 <GPIO_Init+0x2c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001042:	68c2      	ldr	r2, [r0, #12]
 8001044:	b29c      	uxth	r4, r3
 8001046:	0066      	lsls	r6, r4, #1
 8001048:	2403      	movs	r4, #3
 800104a:	40b4      	lsls	r4, r6
 800104c:	ea22 0204 	bic.w	r2, r2, r4
 8001050:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001052:	68c2      	ldr	r2, [r0, #12]
 8001054:	79cc      	ldrb	r4, [r1, #7]
 8001056:	fa04 f505 	lsl.w	r5, r4, r5
 800105a:	4315      	orrs	r5, r2
 800105c:	60c5      	str	r5, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800105e:	3301      	adds	r3, #1
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d82b      	bhi.n	80010bc <GPIO_Init+0x84>
    pos = ((uint32_t)0x01) << pinpos;
 8001064:	2201      	movs	r2, #1
 8001066:	409a      	lsls	r2, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001068:	680c      	ldr	r4, [r1, #0]
    if (currentpin == pos)
 800106a:	43a2      	bics	r2, r4
 800106c:	d1f7      	bne.n	800105e <GPIO_Init+0x26>
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800106e:	6804      	ldr	r4, [r0, #0]
 8001070:	005d      	lsls	r5, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	40aa      	lsls	r2, r5
 8001076:	43d2      	mvns	r2, r2
 8001078:	4014      	ands	r4, r2
 800107a:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800107c:	6804      	ldr	r4, [r0, #0]
 800107e:	790e      	ldrb	r6, [r1, #4]
 8001080:	40ae      	lsls	r6, r5
 8001082:	4334      	orrs	r4, r6
 8001084:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001086:	790c      	ldrb	r4, [r1, #4]
 8001088:	3c01      	subs	r4, #1
 800108a:	b2e4      	uxtb	r4, r4
 800108c:	2c01      	cmp	r4, #1
 800108e:	d8d8      	bhi.n	8001042 <GPIO_Init+0xa>
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001090:	6884      	ldr	r4, [r0, #8]
 8001092:	4022      	ands	r2, r4
 8001094:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001096:	6882      	ldr	r2, [r0, #8]
 8001098:	794c      	ldrb	r4, [r1, #5]
 800109a:	40ac      	lsls	r4, r5
 800109c:	4322      	orrs	r2, r4
 800109e:	6082      	str	r2, [r0, #8]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80010a0:	6844      	ldr	r4, [r0, #4]
 80010a2:	b29f      	uxth	r7, r3
 80010a4:	2601      	movs	r6, #1
 80010a6:	40be      	lsls	r6, r7
 80010a8:	ea24 0406 	bic.w	r4, r4, r6
 80010ac:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80010ae:	6844      	ldr	r4, [r0, #4]
 80010b0:	798a      	ldrb	r2, [r1, #6]
 80010b2:	40ba      	lsls	r2, r7
 80010b4:	b292      	uxth	r2, r2
 80010b6:	4322      	orrs	r2, r4
 80010b8:	6042      	str	r2, [r0, #4]
 80010ba:	e7c2      	b.n	8001042 <GPIO_Init+0xa>
    }
  }
}
 80010bc:	bcf0      	pop	{r4, r5, r6, r7}
 80010be:	4770      	bx	lr
 80010c0:	4770      	bx	lr

080010c2 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80010c8:	2300      	movs	r3, #0
 80010ca:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80010cc:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80010ce:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80010d0:	71c3      	strb	r3, [r0, #7]
}
 80010d2:	4770      	bx	lr

080010d4 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010d4:	6903      	ldr	r3, [r0, #16]
 80010d6:	4219      	tst	r1, r3
 80010d8:	d101      	bne.n	80010de <GPIO_ReadInputDataBit+0xa>
  {
    bitstatus = (uint8_t)Bit_SET;
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80010da:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80010dc:	4770      	bx	lr
    bitstatus = (uint8_t)Bit_SET;
 80010de:	2001      	movs	r0, #1
 80010e0:	4770      	bx	lr

080010e2 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80010e2:	8301      	strh	r1, [r0, #24]
}
 80010e4:	4770      	bx	lr

080010e6 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80010e6:	8341      	strh	r1, [r0, #26]
}
 80010e8:	4770      	bx	lr

080010ea <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80010ea:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010ec:	f001 0307 	and.w	r3, r1, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010f4:	08c9      	lsrs	r1, r1, #3
 80010f6:	3108      	adds	r1, #8
 80010f8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 80010fc:	250f      	movs	r5, #15
 80010fe:	fa05 f303 	lsl.w	r3, r5, r3
 8001102:	ea24 0303 	bic.w	r3, r4, r3
 8001106:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800110a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800110e:	431a      	orrs	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001110:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
 8001114:	bc30      	pop	{r4, r5}
 8001116:	4770      	bx	lr

08001118 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001118:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <RCC_GetClocksFreq+0xa8>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001122:	2b04      	cmp	r3, #4
 8001124:	d023      	beq.n	800116e <RCC_GetClocksFreq+0x56>
 8001126:	2b08      	cmp	r3, #8
 8001128:	d024      	beq.n	8001174 <RCC_GetClocksFreq+0x5c>
 800112a:	b113      	cbz	r3, 8001132 <RCC_GetClocksFreq+0x1a>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <RCC_GetClocksFreq+0xac>)
 800112e:	6003      	str	r3, [r0, #0]
      break;
 8001130:	e001      	b.n	8001136 <RCC_GetClocksFreq+0x1e>
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <RCC_GetClocksFreq+0xac>)
 8001134:	6003      	str	r3, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001136:	4c22      	ldr	r4, [pc, #136]	; (80011c0 <RCC_GetClocksFreq+0xa8>)
 8001138:	68a3      	ldr	r3, [r4, #8]
  tmp = tmp >> 4;
 800113a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800113e:	4922      	ldr	r1, [pc, #136]	; (80011c8 <RCC_GetClocksFreq+0xb0>)
 8001140:	5ccb      	ldrb	r3, [r1, r3]
 8001142:	b2da      	uxtb	r2, r3
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001144:	6803      	ldr	r3, [r0, #0]
 8001146:	40d3      	lsrs	r3, r2
 8001148:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800114a:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 10;
 800114c:	f3c2 2282 	ubfx	r2, r2, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001150:	5c8a      	ldrb	r2, [r1, r2]
 8001152:	b2d2      	uxtb	r2, r2
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001154:	fa23 f202 	lsr.w	r2, r3, r2
 8001158:	6082      	str	r2, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800115a:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 13;
 800115c:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8001160:	5c8a      	ldrb	r2, [r1, r2]
 8001162:	b2d2      	uxtb	r2, r2
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001164:	40d3      	lsrs	r3, r2
 8001166:	60c3      	str	r3, [r0, #12]
}
 8001168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800116c:	4770      	bx	lr
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <RCC_GetClocksFreq+0xb4>)
 8001170:	6003      	str	r3, [r0, #0]
      break;
 8001172:	e7e0      	b.n	8001136 <RCC_GetClocksFreq+0x1e>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <RCC_GetClocksFreq+0xa8>)
 8001176:	685a      	ldr	r2, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      if (pllsource != 0)
 800117e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001182:	d012      	beq.n	80011aa <RCC_GetClocksFreq+0x92>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <RCC_GetClocksFreq+0xb4>)
 8001186:	fbb2 f2f3 	udiv	r2, r2, r3
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <RCC_GetClocksFreq+0xa8>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001192:	fb03 f302 	mul.w	r3, r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <RCC_GetClocksFreq+0xa8>)
 8001198:	6852      	ldr	r2, [r2, #4]
 800119a:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800119e:	3201      	adds	r2, #1
 80011a0:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80011a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80011a6:	6003      	str	r3, [r0, #0]
      break;
 80011a8:	e7c5      	b.n	8001136 <RCC_GetClocksFreq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <RCC_GetClocksFreq+0xac>)
 80011ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <RCC_GetClocksFreq+0xa8>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011b8:	fb03 f302 	mul.w	r3, r3, r2
 80011bc:	e7eb      	b.n	8001196 <RCC_GetClocksFreq+0x7e>
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	00f42400 	.word	0x00f42400
 80011c8:	20000000 	.word	0x20000000
 80011cc:	017d7840 	.word	0x017d7840

080011d0 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011d0:	b929      	cbnz	r1, 80011de <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <RCC_AHB1PeriphClockCmd+0x18>)
 80011d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011d6:	ea23 0000 	bic.w	r0, r3, r0
 80011da:	6310      	str	r0, [r2, #48]	; 0x30
  }
}
 80011dc:	4770      	bx	lr
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80011de:	4a02      	ldr	r2, [pc, #8]	; (80011e8 <RCC_AHB1PeriphClockCmd+0x18>)
 80011e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011e2:	4318      	orrs	r0, r3
 80011e4:	6310      	str	r0, [r2, #48]	; 0x30
 80011e6:	4770      	bx	lr
 80011e8:	40023800 	.word	0x40023800

080011ec <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011ec:	b929      	cbnz	r1, 80011fa <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <RCC_APB1PeriphClockCmd+0x18>)
 80011f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011f2:	ea23 0000 	bic.w	r0, r3, r0
 80011f6:	6410      	str	r0, [r2, #64]	; 0x40
  }
}
 80011f8:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 80011fa:	4a02      	ldr	r2, [pc, #8]	; (8001204 <RCC_APB1PeriphClockCmd+0x18>)
 80011fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011fe:	4318      	orrs	r0, r3
 8001200:	6410      	str	r0, [r2, #64]	; 0x40
 8001202:	4770      	bx	lr
 8001204:	40023800 	.word	0x40023800

08001208 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001208:	b929      	cbnz	r1, 8001216 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <RCC_APB2PeriphClockCmd+0x18>)
 800120c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800120e:	ea23 0000 	bic.w	r0, r3, r0
 8001212:	6450      	str	r0, [r2, #68]	; 0x44
  }
}
 8001214:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8001216:	4a02      	ldr	r2, [pc, #8]	; (8001220 <RCC_APB2PeriphClockCmd+0x18>)
 8001218:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800121a:	4318      	orrs	r0, r3
 800121c:	6450      	str	r0, [r2, #68]	; 0x44
 800121e:	4770      	bx	lr
 8001220:	40023800 	.word	0x40023800

08001224 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001224:	b929      	cbnz	r1, 8001232 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <RCC_APB1PeriphResetCmd+0x18>)
 8001228:	6a13      	ldr	r3, [r2, #32]
 800122a:	ea23 0000 	bic.w	r0, r3, r0
 800122e:	6210      	str	r0, [r2, #32]
  }
}
 8001230:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001232:	4a02      	ldr	r2, [pc, #8]	; (800123c <RCC_APB1PeriphResetCmd+0x18>)
 8001234:	6a13      	ldr	r3, [r2, #32]
 8001236:	4318      	orrs	r0, r3
 8001238:	6210      	str	r0, [r2, #32]
 800123a:	4770      	bx	lr
 800123c:	40023800 	.word	0x40023800

08001240 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001240:	b929      	cbnz	r1, 800124e <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <RCC_APB2PeriphResetCmd+0x18>)
 8001244:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001246:	ea23 0000 	bic.w	r0, r3, r0
 800124a:	6250      	str	r0, [r2, #36]	; 0x24
  }
}
 800124c:	4770      	bx	lr
    RCC->APB2RSTR |= RCC_APB2Periph;
 800124e:	4a02      	ldr	r2, [pc, #8]	; (8001258 <RCC_APB2PeriphResetCmd+0x18>)
 8001250:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001252:	4318      	orrs	r0, r3
 8001254:	6250      	str	r0, [r2, #36]	; 0x24
 8001256:	4770      	bx	lr
 8001258:	40023800 	.word	0x40023800

0800125c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800125c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <SPI_I2S_DeInit+0xac>)
 8001260:	4298      	cmp	r0, r3
 8001262:	d00f      	beq.n	8001284 <SPI_I2S_DeInit+0x28>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001264:	4b29      	ldr	r3, [pc, #164]	; (800130c <SPI_I2S_DeInit+0xb0>)
 8001266:	4298      	cmp	r0, r3
 8001268:	d017      	beq.n	800129a <SPI_I2S_DeInit+0x3e>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <SPI_I2S_DeInit+0xb4>)
 800126c:	4298      	cmp	r0, r3
 800126e:	d01f      	beq.n	80012b0 <SPI_I2S_DeInit+0x54>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <SPI_I2S_DeInit+0xb8>)
 8001272:	4298      	cmp	r0, r3
 8001274:	d027      	beq.n	80012c6 <SPI_I2S_DeInit+0x6a>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <SPI_I2S_DeInit+0xbc>)
 8001278:	4298      	cmp	r0, r3
 800127a:	d02f      	beq.n	80012dc <SPI_I2S_DeInit+0x80>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <SPI_I2S_DeInit+0xc0>)
 800127e:	4298      	cmp	r0, r3
 8001280:	d037      	beq.n	80012f2 <SPI_I2S_DeInit+0x96>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001282:	bd08      	pop	{r3, pc}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001284:	2101      	movs	r1, #1
 8001286:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800128a:	f7ff ffd9 	bl	8001240 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800128e:	2100      	movs	r1, #0
 8001290:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001294:	f7ff ffd4 	bl	8001240 <RCC_APB2PeriphResetCmd>
 8001298:	e7f3      	b.n	8001282 <SPI_I2S_DeInit+0x26>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800129a:	2101      	movs	r1, #1
 800129c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012a0:	f7ff ffc0 	bl	8001224 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80012a4:	2100      	movs	r1, #0
 80012a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012aa:	f7ff ffbb 	bl	8001224 <RCC_APB1PeriphResetCmd>
 80012ae:	e7e8      	b.n	8001282 <SPI_I2S_DeInit+0x26>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80012b0:	2101      	movs	r1, #1
 80012b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012b6:	f7ff ffb5 	bl	8001224 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80012ba:	2100      	movs	r1, #0
 80012bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012c0:	f7ff ffb0 	bl	8001224 <RCC_APB1PeriphResetCmd>
 80012c4:	e7dd      	b.n	8001282 <SPI_I2S_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80012c6:	2101      	movs	r1, #1
 80012c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012cc:	f7ff ffb8 	bl	8001240 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80012d0:	2100      	movs	r1, #0
 80012d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012d6:	f7ff ffb3 	bl	8001240 <RCC_APB2PeriphResetCmd>
 80012da:	e7d2      	b.n	8001282 <SPI_I2S_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80012dc:	2101      	movs	r1, #1
 80012de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012e2:	f7ff ffad 	bl	8001240 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80012e6:	2100      	movs	r1, #0
 80012e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012ec:	f7ff ffa8 	bl	8001240 <RCC_APB2PeriphResetCmd>
 80012f0:	e7c7      	b.n	8001282 <SPI_I2S_DeInit+0x26>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80012f2:	2101      	movs	r1, #1
 80012f4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80012f8:	f7ff ffa2 	bl	8001240 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80012fc:	2100      	movs	r1, #0
 80012fe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001302:	f7ff ff9d 	bl	8001240 <RCC_APB2PeriphResetCmd>
}
 8001306:	e7bc      	b.n	8001282 <SPI_I2S_DeInit+0x26>
 8001308:	40013000 	.word	0x40013000
 800130c:	40003800 	.word	0x40003800
 8001310:	40003c00 	.word	0x40003c00
 8001314:	40013400 	.word	0x40013400
 8001318:	40015000 	.word	0x40015000
 800131c:	40015400 	.word	0x40015400

08001320 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001324:	8803      	ldrh	r3, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001326:	f403 5241 	and.w	r2, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800132a:	f8b1 e000 	ldrh.w	lr, [r1]
 800132e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001332:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8001336:	88cf      	ldrh	r7, [r1, #6]
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001338:	890e      	ldrh	r6, [r1, #8]
 800133a:	894d      	ldrh	r5, [r1, #10]
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800133c:	898c      	ldrh	r4, [r1, #12]
 800133e:	89cb      	ldrh	r3, [r1, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001340:	ea4e 0e08 	orr.w	lr, lr, r8
 8001344:	ea4c 0c0e 	orr.w	ip, ip, lr
 8001348:	ea47 070c 	orr.w	r7, r7, ip
 800134c:	433e      	orrs	r6, r7
 800134e:	4335      	orrs	r5, r6
 8001350:	432c      	orrs	r4, r5
 8001352:	4323      	orrs	r3, r4
 8001354:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001356:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001358:	8b83      	ldrh	r3, [r0, #28]
 800135a:	b29b      	uxth	r3, r3
 800135c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001360:	b29b      	uxth	r3, r3
 8001362:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001364:	8a0b      	ldrh	r3, [r1, #16]
 8001366:	8203      	strh	r3, [r0, #16]
}
 8001368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800136c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800136c:	2300      	movs	r3, #0
 800136e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001370:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001372:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001374:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001376:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001378:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800137a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800137c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800137e:	2307      	movs	r3, #7
 8001380:	8203      	strh	r3, [r0, #16]
}
 8001382:	4770      	bx	lr

08001384 <SPI_Cmd>:
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001384:	b931      	cbnz	r1, 8001394 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001386:	8803      	ldrh	r3, [r0, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800138e:	b29b      	uxth	r3, r3
 8001390:	8003      	strh	r3, [r0, #0]
  }
}
 8001392:	4770      	bx	lr
    SPIx->CR1 |= SPI_CR1_SPE;
 8001394:	8803      	ldrh	r3, [r0, #0]
 8001396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139a:	8003      	strh	r3, [r0, #0]
 800139c:	4770      	bx	lr

0800139e <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800139e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80013a2:	4299      	cmp	r1, r3
 80013a4:	d004      	beq.n	80013b0 <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80013a6:	8803      	ldrh	r3, [r0, #0]
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	8003      	strh	r3, [r0, #0]
 80013ae:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80013b0:	8803      	ldrh	r3, [r0, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	8003      	strh	r3, [r0, #0]
  }
}
 80013bc:	4770      	bx	lr

080013be <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80013be:	8980      	ldrh	r0, [r0, #12]
}
 80013c0:	4770      	bx	lr

080013c2 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80013c2:	8181      	strh	r1, [r0, #12]
}
 80013c4:	4770      	bx	lr

080013c6 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80013c6:	8903      	ldrh	r3, [r0, #8]
 80013c8:	4219      	tst	r1, r3
 80013ca:	d101      	bne.n	80013d0 <SPI_I2S_GetFlagStatus+0xa>
    bitstatus = SET;
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80013cc:	2000      	movs	r0, #0
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80013ce:	4770      	bx	lr
    bitstatus = SET;
 80013d0:	2001      	movs	r0, #1
 80013d2:	4770      	bx	lr

080013d4 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80013d4:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80013d6:	f001 0303 	and.w	r3, r1, #3
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	240f      	movs	r4, #15
 80013de:	fa04 f503 	lsl.w	r5, r4, r3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80013e2:	0889      	lsrs	r1, r1, #2
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <SYSCFG_EXTILineConfig+0x30>)
 80013e6:	3102      	adds	r1, #2
 80013e8:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 80013ec:	ea24 0405 	bic.w	r4, r4, r5
 80013f0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80013f4:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 80013f8:	4098      	lsls	r0, r3
 80013fa:	4320      	orrs	r0, r4
 80013fc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
}
 8001400:	bc30      	pop	{r4, r5}
 8001402:	4770      	bx	lr
 8001404:	40013800 	.word	0x40013800

08001408 <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001408:	8803      	ldrh	r3, [r0, #0]
 800140a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <TIM_TimeBaseInit+0x74>)
 800140e:	4290      	cmp	r0, r2
 8001410:	d012      	beq.n	8001438 <TIM_TimeBaseInit+0x30>
 8001412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001416:	4290      	cmp	r0, r2
 8001418:	d00e      	beq.n	8001438 <TIM_TimeBaseInit+0x30>
 800141a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800141e:	d00b      	beq.n	8001438 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001420:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001424:	4290      	cmp	r0, r2
 8001426:	d007      	beq.n	8001438 <TIM_TimeBaseInit+0x30>
 8001428:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800142c:	4290      	cmp	r0, r2
 800142e:	d003      	beq.n	8001438 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001434:	4290      	cmp	r0, r2
 8001436:	d103      	bne.n	8001440 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800143c:	884a      	ldrh	r2, [r1, #2]
 800143e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <TIM_TimeBaseInit+0x78>)
 8001442:	4290      	cmp	r0, r2
 8001444:	d008      	beq.n	8001458 <TIM_TimeBaseInit+0x50>
 8001446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144a:	4290      	cmp	r0, r2
 800144c:	d004      	beq.n	8001458 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800144e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001452:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001454:	890a      	ldrh	r2, [r1, #8]
 8001456:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001458:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800145a:	684b      	ldr	r3, [r1, #4]
 800145c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800145e:	880b      	ldrh	r3, [r1, #0]
 8001460:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <TIM_TimeBaseInit+0x74>)
 8001464:	4298      	cmp	r0, r3
 8001466:	d003      	beq.n	8001470 <TIM_TimeBaseInit+0x68>
 8001468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800146c:	4298      	cmp	r0, r3
 800146e:	d101      	bne.n	8001474 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001470:	7a8b      	ldrb	r3, [r1, #10]
 8001472:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001474:	2301      	movs	r3, #1
 8001476:	8283      	strh	r3, [r0, #20]
}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40010000 	.word	0x40010000
 8001480:	40001000 	.word	0x40001000

08001484 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001488:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800148a:	2300      	movs	r3, #0
 800148c:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800148e:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001490:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001492:	7283      	strb	r3, [r0, #10]
}
 8001494:	4770      	bx	lr

08001496 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001496:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001498:	4770      	bx	lr

0800149a <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800149a:	b931      	cbnz	r1, 80014aa <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800149c:	8803      	ldrh	r3, [r0, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	8003      	strh	r3, [r0, #0]
  }
}
 80014a8:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_ARPE;
 80014aa:	8803      	ldrh	r3, [r0, #0]
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	8003      	strh	r3, [r0, #0]
 80014b2:	4770      	bx	lr

080014b4 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014b4:	b931      	cbnz	r1, 80014c4 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80014b6:	8803      	ldrh	r3, [r0, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	b29b      	uxth	r3, r3
 80014c0:	8003      	strh	r3, [r0, #0]
  }
}
 80014c2:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 80014c4:	8803      	ldrh	r3, [r0, #0]
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	8003      	strh	r3, [r0, #0]
 80014cc:	4770      	bx	lr

080014ce <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80014ce:	6381      	str	r1, [r0, #56]	; 0x38
}
 80014d0:	4770      	bx	lr

080014d2 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80014d2:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 80014d4:	2301      	movs	r3, #1
 80014d6:	408b      	lsls	r3, r1
 80014d8:	b29b      	uxth	r3, r3

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 80014da:	8c04      	ldrh	r4, [r0, #32]
 80014dc:	ea24 0303 	bic.w	r3, r4, r3
 80014e0:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 80014e2:	8c03      	ldrh	r3, [r0, #32]
 80014e4:	fa02 f101 	lsl.w	r1, r2, r1
 80014e8:	b289      	uxth	r1, r1
 80014ea:	4319      	orrs	r1, r3
 80014ec:	8401      	strh	r1, [r0, #32]
}
 80014ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014f4:	b922      	cbnz	r2, 8001500 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80014f6:	8983      	ldrh	r3, [r0, #12]
 80014f8:	ea23 0101 	bic.w	r1, r3, r1
 80014fc:	8181      	strh	r1, [r0, #12]
  }
}
 80014fe:	4770      	bx	lr
    TIMx->DIER |= TIM_IT;
 8001500:	8983      	ldrh	r3, [r0, #12]
 8001502:	4319      	orrs	r1, r3
 8001504:	8181      	strh	r1, [r0, #12]
 8001506:	4770      	bx	lr

08001508 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001508:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800150a:	8983      	ldrh	r3, [r0, #12]
 800150c:	400b      	ands	r3, r1
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800150e:	4211      	tst	r1, r2
 8001510:	d002      	beq.n	8001518 <TIM_GetITStatus+0x10>
 8001512:	b91b      	cbnz	r3, 800151c <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8001514:	2000      	movs	r0, #0
 8001516:	4770      	bx	lr
 8001518:	2000      	movs	r0, #0
 800151a:	4770      	bx	lr
    bitstatus = SET;
 800151c:	2001      	movs	r0, #1
  }
  return bitstatus;
}
 800151e:	4770      	bx	lr

08001520 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001520:	43c9      	mvns	r1, r1
 8001522:	b289      	uxth	r1, r1
 8001524:	8201      	strh	r1, [r0, #16]
}
 8001526:	4770      	bx	lr

08001528 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001528:	8883      	ldrh	r3, [r0, #4]
 800152a:	b29b      	uxth	r3, r3
 800152c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001530:	b29b      	uxth	r3, r3
 8001532:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001534:	8883      	ldrh	r3, [r0, #4]
 8001536:	4319      	orrs	r1, r3
 8001538:	8081      	strh	r1, [r0, #4]
}
 800153a:	4770      	bx	lr

0800153c <CAT25512_SendByte>:

/*
Send one byte to eeprom via SPI
*/
void CAT25512_SendByte(unsigned char mData)
{
 800153c:	b510      	push	{r4, lr}
 800153e:	4604      	mov	r4, r0
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)); 
 8001540:	2102      	movs	r1, #2
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <CAT25512_SendByte+0x2c>)
 8001544:	f7ff ff3f 	bl	80013c6 <SPI_I2S_GetFlagStatus>
 8001548:	2800      	cmp	r0, #0
 800154a:	d0f9      	beq.n	8001540 <CAT25512_SendByte+0x4>
	SPI_I2S_SendData(SPI3, mData);
 800154c:	4621      	mov	r1, r4
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <CAT25512_SendByte+0x2c>)
 8001550:	f7ff ff37 	bl	80013c2 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE));
 8001554:	2101      	movs	r1, #1
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <CAT25512_SendByte+0x2c>)
 8001558:	f7ff ff35 	bl	80013c6 <SPI_I2S_GetFlagStatus>
 800155c:	2800      	cmp	r0, #0
 800155e:	d0f9      	beq.n	8001554 <CAT25512_SendByte+0x18>
	SPI_I2S_ReceiveData(SPI3);
 8001560:	4801      	ldr	r0, [pc, #4]	; (8001568 <CAT25512_SendByte+0x2c>)
 8001562:	f7ff ff2c 	bl	80013be <SPI_I2S_ReceiveData>
};
 8001566:	bd10      	pop	{r4, pc}
 8001568:	40003c00 	.word	0x40003c00

0800156c <CAT25512_RecieveData>:

/*
Receive one byte from eeprom via SPI
*/
unsigned short int CAT25512_RecieveData(void)
{
 800156c:	b508      	push	{r3, lr}
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)){}; 
 800156e:	2102      	movs	r1, #2
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <CAT25512_RecieveData+0x2c>)
 8001572:	f7ff ff28 	bl	80013c6 <SPI_I2S_GetFlagStatus>
 8001576:	2800      	cmp	r0, #0
 8001578:	d0f9      	beq.n	800156e <CAT25512_RecieveData+0x2>
	SPI_I2S_SendData(SPI3, 0x00); 
 800157a:	2100      	movs	r1, #0
 800157c:	4806      	ldr	r0, [pc, #24]	; (8001598 <CAT25512_RecieveData+0x2c>)
 800157e:	f7ff ff20 	bl	80013c2 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE)){};
 8001582:	2101      	movs	r1, #1
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <CAT25512_RecieveData+0x2c>)
 8001586:	f7ff ff1e 	bl	80013c6 <SPI_I2S_GetFlagStatus>
 800158a:	2800      	cmp	r0, #0
 800158c:	d0f9      	beq.n	8001582 <CAT25512_RecieveData+0x16>
	return SPI_ReceiveData(SPI3);
 800158e:	4802      	ldr	r0, [pc, #8]	; (8001598 <CAT25512_RecieveData+0x2c>)
 8001590:	f7ff ff15 	bl	80013be <SPI_I2S_ReceiveData>
};
 8001594:	bd08      	pop	{r3, pc}
 8001596:	bf00      	nop
 8001598:	40003c00 	.word	0x40003c00

0800159c <CAT25512_init>:

/*
Initialization of CAT25512 eeprom
*/
void CAT25512_init(void)
{
 800159c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015a0:	b089      	sub	sp, #36	; 0x24
	/* SPI2 setting up*/	
	GPIO_InitTypeDef mGPIO_InitStructure;
	SPI_InitTypeDef mSPI;
		
	/*GPIO Init*/
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80015a2:	2101      	movs	r1, #1
 80015a4:	2004      	movs	r0, #4
 80015a6:	f7ff fe13 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	
	GPIO_StructInit(&mGPIO_InitStructure);
 80015aa:	a806      	add	r0, sp, #24
 80015ac:	f7ff fd89 	bl	80010c2 <GPIO_StructInit>
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12;
 80015b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b4:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 80015b6:	2702      	movs	r7, #2
 80015b8:	f88d 701c 	strb.w	r7, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 80015bc:	2500      	movs	r5, #0
 80015be:	f88d 501e 	strb.w	r5, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 80015c2:	2401      	movs	r4, #1
 80015c4:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 80015c8:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOC, &mGPIO_InitStructure);
 80015cc:	4e32      	ldr	r6, [pc, #200]	; (8001698 <CAT25512_init+0xfc>)
 80015ce:	a906      	add	r1, sp, #24
 80015d0:	4630      	mov	r0, r6
 80015d2:	f7ff fd31 	bl	8001038 <GPIO_Init>
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80015d6:	4621      	mov	r1, r4
 80015d8:	2008      	movs	r0, #8
 80015da:	f7ff fdf9 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&mGPIO_InitStructure);
 80015de:	a806      	add	r0, sp, #24
 80015e0:	f7ff fd6f 	bl	80010c2 <GPIO_StructInit>
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_2;
 80015e4:	f04f 0904 	mov.w	r9, #4
 80015e8:	f8cd 9018 	str.w	r9, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 80015ec:	f88d 401c 	strb.w	r4, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 80015f0:	f88d 501e 	strb.w	r5, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 80015f4:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_100MHz;
 80015f8:	2303      	movs	r3, #3
 80015fa:	f88d 301d 	strb.w	r3, [sp, #29]
	GPIO_Init(GPIOD, &mGPIO_InitStructure);
 80015fe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800169c <CAT25512_init+0x100>
 8001602:	a906      	add	r1, sp, #24
 8001604:	4640      	mov	r0, r8
 8001606:	f7ff fd17 	bl	8001038 <GPIO_Init>
	
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SPI3);
 800160a:	2206      	movs	r2, #6
 800160c:	210a      	movs	r1, #10
 800160e:	4630      	mov	r0, r6
 8001610:	f7ff fd6b 	bl	80010ea <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SPI3);
 8001614:	2206      	movs	r2, #6
 8001616:	210b      	movs	r1, #11
 8001618:	4630      	mov	r0, r6
 800161a:	f7ff fd66 	bl	80010ea <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SPI3);	
 800161e:	2206      	movs	r2, #6
 8001620:	210c      	movs	r1, #12
 8001622:	4630      	mov	r0, r6
 8001624:	f7ff fd61 	bl	80010ea <GPIO_PinAFConfig>
		
	CAT25512_CS_CLEAR;
 8001628:	4649      	mov	r1, r9
 800162a:	4640      	mov	r0, r8
 800162c:	f7ff fd59 	bl	80010e2 <GPIO_SetBits>
	
	/*SPI init*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001630:	4621      	mov	r1, r4
 8001632:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001636:	f7ff fdd9 	bl	80011ec <RCC_APB1PeriphClockCmd>
	SPI_I2S_DeInit(SPI3);
 800163a:	f5a6 36e6 	sub.w	r6, r6, #117760	; 0x1cc00
 800163e:	4630      	mov	r0, r6
 8001640:	f7ff fe0c 	bl	800125c <SPI_I2S_DeInit>
	SPI_StructInit(&mSPI);
 8001644:	eb0d 0009 	add.w	r0, sp, r9
 8001648:	f7ff fe90 	bl	800136c <SPI_StructInit>
	
	mSPI.SPI_Direction 					= SPI_Direction_2Lines_FullDuplex;
 800164c:	f8ad 5004 	strh.w	r5, [sp, #4]
	mSPI.SPI_BaudRatePrescaler 	= SPI_BaudRatePrescaler_8;
 8001650:	2310      	movs	r3, #16
 8001652:	f8ad 3010 	strh.w	r3, [sp, #16]
	mSPI.SPI_Mode 							= SPI_Mode_Master;
 8001656:	f44f 7382 	mov.w	r3, #260	; 0x104
 800165a:	f8ad 3006 	strh.w	r3, [sp, #6]
	mSPI.SPI_DataSize 					= SPI_DataSize_8b;
 800165e:	f8ad 5008 	strh.w	r5, [sp, #8]
	mSPI.SPI_CPOL 							= SPI_CPOL_High;
 8001662:	f8ad 700a 	strh.w	r7, [sp, #10]
	mSPI.SPI_CPHA 							= SPI_CPHA_2Edge;
 8001666:	f8ad 400c 	strh.w	r4, [sp, #12]
	mSPI.SPI_FirstBit 					= SPI_FirstBit_MSB;	
 800166a:	f8ad 5012 	strh.w	r5, [sp, #18]
	mSPI.SPI_NSS 								= SPI_NSS_Soft;
 800166e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001672:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	SPI_Init(SPI3, &mSPI);
 8001676:	eb0d 0109 	add.w	r1, sp, r9
 800167a:	4630      	mov	r0, r6
 800167c:	f7ff fe50 	bl	8001320 <SPI_Init>
	SPI_Cmd(SPI3, ENABLE);
 8001680:	4621      	mov	r1, r4
 8001682:	4630      	mov	r0, r6
 8001684:	f7ff fe7e 	bl	8001384 <SPI_Cmd>
	SPI_NSSInternalSoftwareConfig(SPI3, SPI_NSSInternalSoft_Set);
 8001688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168c:	4630      	mov	r0, r6
 800168e:	f7ff fe86 	bl	800139e <SPI_NSSInternalSoftwareConfig>
};
 8001692:	b009      	add	sp, #36	; 0x24
 8001694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00

080016a0 <CAT25512_ReadStatusRegister>:

/*Returns the contents of eeprom status register*/
unsigned char CAT25512_ReadStatusRegister()
{
 80016a0:	b538      	push	{r3, r4, r5, lr}
	unsigned char mData = 0;
	CAT25512_CS_SET;
 80016a2:	4c0b      	ldr	r4, [pc, #44]	; (80016d0 <CAT25512_ReadStatusRegister+0x30>)
 80016a4:	2104      	movs	r1, #4
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fd1d 	bl	80010e6 <GPIO_ResetBits>
	CAT25512_SendByte( INTSRUCTION_RDSR );
 80016ac:	2005      	movs	r0, #5
 80016ae:	f7ff ff45 	bl	800153c <CAT25512_SendByte>
	delay_ns(2);
 80016b2:	2002      	movs	r0, #2
 80016b4:	f004 fe24 	bl	8006300 <delay_ns>
	mData = CAT25512_RecieveData();
 80016b8:	f7ff ff58 	bl	800156c <CAT25512_RecieveData>
 80016bc:	b2c5      	uxtb	r5, r0
	delay_ns(200);
 80016be:	20c8      	movs	r0, #200	; 0xc8
 80016c0:	f004 fe1e 	bl	8006300 <delay_ns>
	CAT25512_CS_CLEAR;
 80016c4:	2104      	movs	r1, #4
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff fd0b 	bl	80010e2 <GPIO_SetBits>
	return mData;
};
 80016cc:	4628      	mov	r0, r5
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
 80016d0:	40020c00 	.word	0x40020c00

080016d4 <CAT25512_WREN>:
	CAT25512_CS_CLEAR;
};

/*Write enable command*/
void CAT25512_WREN(void)
{
 80016d4:	b510      	push	{r4, lr}
	CAT25512_CS_SET;
 80016d6:	4c08      	ldr	r4, [pc, #32]	; (80016f8 <CAT25512_WREN+0x24>)
 80016d8:	2104      	movs	r1, #4
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fd03 	bl	80010e6 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_WREN);
 80016e0:	2006      	movs	r0, #6
 80016e2:	f7ff ff2b 	bl	800153c <CAT25512_SendByte>
	delay_ns(200);
 80016e6:	20c8      	movs	r0, #200	; 0xc8
 80016e8:	f004 fe0a 	bl	8006300 <delay_ns>
	CAT25512_CS_CLEAR;
 80016ec:	2104      	movs	r1, #4
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff fcf7 	bl	80010e2 <GPIO_SetBits>
};
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	bf00      	nop
 80016f8:	40020c00 	.word	0x40020c00

080016fc <CAT25512_write_block>:
	return Data;
};

/*Writes the Length bytes of Data started from certain Address*/
void CAT25512_write_block(unsigned short int Address, unsigned char *Data, unsigned short int length)
{
 80016fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001700:	4607      	mov	r7, r0
 8001702:	460e      	mov	r6, r1
 8001704:	4615      	mov	r5, r2
	unsigned short int totalcnt=0;
	
	CAT25512_WREN();
 8001706:	f7ff ffe5 	bl	80016d4 <CAT25512_WREN>
	
	CAT25512_CS_SET;
 800170a:	2104      	movs	r1, #4
 800170c:	482c      	ldr	r0, [pc, #176]	; (80017c0 <CAT25512_write_block+0xc4>)
 800170e:	f7ff fcea 	bl	80010e6 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_WRITE);
 8001712:	2002      	movs	r0, #2
 8001714:	f7ff ff12 	bl	800153c <CAT25512_SendByte>
	CAT25512_SendByte((Address&0xFF00)>>8);
 8001718:	0a38      	lsrs	r0, r7, #8
 800171a:	f7ff ff0f 	bl	800153c <CAT25512_SendByte>
	CAT25512_SendByte((Address&0x00FF));
 800171e:	fa5f f887 	uxtb.w	r8, r7
 8001722:	4640      	mov	r0, r8
 8001724:	f7ff ff0a 	bl	800153c <CAT25512_SendByte>
	unsigned short int totalcnt=0;
 8001728:	2400      	movs	r4, #0
	
	while(totalcnt<length) {
 800172a:	e022      	b.n	8001772 <CAT25512_write_block+0x76>
			CAT25512_CS_CLEAR;
			
			//read status register
			delay_ms(1);
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
				delay_ms(1);
 800172c:	2001      	movs	r0, #1
 800172e:	f004 f81f 	bl	8005770 <delay_ms>
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 8001732:	f7ff ffb5 	bl	80016a0 <CAT25512_ReadStatusRegister>
 8001736:	f010 0f01 	tst.w	r0, #1
 800173a:	d1f7      	bne.n	800172c <CAT25512_write_block+0x30>
			};
			
			delay_ms(1);	
 800173c:	2001      	movs	r0, #1
 800173e:	f004 f817 	bl	8005770 <delay_ms>

			CAT25512_WREN();			
 8001742:	f7ff ffc7 	bl	80016d4 <CAT25512_WREN>
			
			CAT25512_CS_SET;
 8001746:	2104      	movs	r1, #4
 8001748:	481d      	ldr	r0, [pc, #116]	; (80017c0 <CAT25512_write_block+0xc4>)
 800174a:	f7ff fccc 	bl	80010e6 <GPIO_ResetBits>
			CAT25512_SendByte(INTSRUCTION_WRITE);
 800174e:	2002      	movs	r0, #2
 8001750:	f7ff fef4 	bl	800153c <CAT25512_SendByte>
			CAT25512_SendByte(((Address+totalcnt)&0xFF00)>>8);
 8001754:	19e0      	adds	r0, r4, r7
 8001756:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800175a:	f7ff feef 	bl	800153c <CAT25512_SendByte>
			CAT25512_SendByte(((Address+totalcnt)&0x00FF));			
 800175e:	fa58 f084 	uxtab	r0, r8, r4
 8001762:	b2c0      	uxtb	r0, r0
 8001764:	f7ff feea 	bl	800153c <CAT25512_SendByte>
		};
		
		CAT25512_SendByte(Data[totalcnt]);	
 8001768:	5d30      	ldrb	r0, [r6, r4]
 800176a:	f7ff fee7 	bl	800153c <CAT25512_SendByte>
		
		totalcnt++;
 800176e:	3401      	adds	r4, #1
 8001770:	b2a4      	uxth	r4, r4
	while(totalcnt<length) {
 8001772:	42ac      	cmp	r4, r5
 8001774:	d20f      	bcs.n	8001796 <CAT25512_write_block+0x9a>
		if ( (((/*Address+*/totalcnt)&0x007F) == 0) && (totalcnt != 0) ) {
 8001776:	f014 0f7f 	tst.w	r4, #127	; 0x7f
 800177a:	d1f5      	bne.n	8001768 <CAT25512_write_block+0x6c>
 800177c:	2c00      	cmp	r4, #0
 800177e:	d0f3      	beq.n	8001768 <CAT25512_write_block+0x6c>
			delay_ns(200);
 8001780:	20c8      	movs	r0, #200	; 0xc8
 8001782:	f004 fdbd 	bl	8006300 <delay_ns>
			CAT25512_CS_CLEAR;
 8001786:	2104      	movs	r1, #4
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <CAT25512_write_block+0xc4>)
 800178a:	f7ff fcaa 	bl	80010e2 <GPIO_SetBits>
			delay_ms(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f003 ffee 	bl	8005770 <delay_ms>
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 8001794:	e7cd      	b.n	8001732 <CAT25512_write_block+0x36>
	};
	
	delay_ns(200);
 8001796:	20c8      	movs	r0, #200	; 0xc8
 8001798:	f004 fdb2 	bl	8006300 <delay_ns>
	CAT25512_CS_CLEAR;
 800179c:	2104      	movs	r1, #4
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <CAT25512_write_block+0xc4>)
 80017a0:	f7ff fc9f 	bl	80010e2 <GPIO_SetBits>
	
	delay_ms(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f003 ffe3 	bl	8005770 <delay_ms>
	while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 80017aa:	f7ff ff79 	bl	80016a0 <CAT25512_ReadStatusRegister>
 80017ae:	f010 0f01 	tst.w	r0, #1
 80017b2:	d003      	beq.n	80017bc <CAT25512_write_block+0xc0>
		delay_ms(1);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f003 ffdb 	bl	8005770 <delay_ms>
 80017ba:	e7f6      	b.n	80017aa <CAT25512_write_block+0xae>
	};
};
 80017bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017c0:	40020c00 	.word	0x40020c00

080017c4 <CAT25512_read_block>:

/*Reads the Length bytes of Data started from certain Address*/
void CAT25512_read_block(unsigned short int Address, unsigned char *Data, unsigned short int length)
{
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	4604      	mov	r4, r0
 80017c8:	460e      	mov	r6, r1
 80017ca:	4615      	mov	r5, r2
	unsigned short int cnt=0, totalcnt=0;
	
	CAT25512_CS_SET;
 80017cc:	2104      	movs	r1, #4
 80017ce:	480e      	ldr	r0, [pc, #56]	; (8001808 <CAT25512_read_block+0x44>)
 80017d0:	f7ff fc89 	bl	80010e6 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_READ);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f7ff feb1 	bl	800153c <CAT25512_SendByte>
	CAT25512_SendByte((Address&0xFF00)>>8);
 80017da:	0a20      	lsrs	r0, r4, #8
 80017dc:	f7ff feae 	bl	800153c <CAT25512_SendByte>
	CAT25512_SendByte((Address&0x00FF));
 80017e0:	b2e0      	uxtb	r0, r4
 80017e2:	f7ff feab 	bl	800153c <CAT25512_SendByte>
	unsigned short int cnt=0, totalcnt=0;
 80017e6:	2400      	movs	r4, #0
	while(totalcnt<length) {
 80017e8:	e004      	b.n	80017f4 <CAT25512_read_block+0x30>
			CAT25512_SendByte(INTSRUCTION_READ);
			CAT25512_SendByte(((Address+totalcnt)&0xFF00)>>8);
			CAT25512_SendByte(((Address+totalcnt)&0x00FF));	
		};*/
		
		Data[totalcnt] = CAT25512_RecieveData();
 80017ea:	f7ff febf 	bl	800156c <CAT25512_RecieveData>
 80017ee:	5530      	strb	r0, [r6, r4]
		totalcnt++;
 80017f0:	3401      	adds	r4, #1
 80017f2:	b2a4      	uxth	r4, r4
	while(totalcnt<length) {
 80017f4:	42ac      	cmp	r4, r5
 80017f6:	d3f8      	bcc.n	80017ea <CAT25512_read_block+0x26>
		cnt++;
	}
	
	delay_ns(200);
 80017f8:	20c8      	movs	r0, #200	; 0xc8
 80017fa:	f004 fd81 	bl	8006300 <delay_ns>
	CAT25512_CS_CLEAR;
 80017fe:	2104      	movs	r1, #4
 8001800:	4801      	ldr	r0, [pc, #4]	; (8001808 <CAT25512_read_block+0x44>)
 8001802:	f7ff fc6e 	bl	80010e2 <GPIO_SetBits>
	
};
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	40020c00 	.word	0x40020c00

0800180c <init_HC165>:

#define _BV(x)  (1<<x);

///Setting up PORTs IO
void init_HC165(void)
{
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	b084      	sub	sp, #16
	
	/* init pins struct*/
	GPIO_InitTypeDef mGPIO_InitStructure;
	GPIO_InitTypeDef mGPIO_InitStructure2;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001810:	2101      	movs	r1, #1
 8001812:	2004      	movs	r0, #4
 8001814:	f7ff fcdc 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	
	memset(&mGPIO_InitStructure, 0, sizeof(mGPIO_InitStructure));
 8001818:	2600      	movs	r6, #0
 800181a:	f8ad 600e 	strh.w	r6, [sp, #14]
	mGPIO_InitStructure.GPIO_Pin 		= SW_CP|SW_PL|SW_CE;
 800181e:	230e      	movs	r3, #14
 8001820:	9302      	str	r3, [sp, #8]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001822:	2501      	movs	r5, #1
 8001824:	f88d 500c 	strb.w	r5, [sp, #12]
	mGPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_100MHz;
 8001828:	2303      	movs	r3, #3
 800182a:	f88d 300d 	strb.w	r3, [sp, #13]
	
	GPIO_Init(GPIOC, &mGPIO_InitStructure);
 800182e:	4c0c      	ldr	r4, [pc, #48]	; (8001860 <init_HC165+0x54>)
 8001830:	a902      	add	r1, sp, #8
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff fc00 	bl	8001038 <GPIO_Init>
	
	memset(&mGPIO_InitStructure2, 0, sizeof(mGPIO_InitStructure2));
 8001838:	9601      	str	r6, [sp, #4]
	mGPIO_InitStructure2.GPIO_Pin 		= SW_DAT;
 800183a:	9500      	str	r5, [sp, #0]
	mGPIO_InitStructure2.GPIO_Mode 		= GPIO_Mode_IN;

	GPIO_Init(GPIOC, &mGPIO_InitStructure2);
 800183c:	4669      	mov	r1, sp
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff fbfa 	bl	8001038 <GPIO_Init>
	
	SS_HIGH;
 8001844:	2108      	movs	r1, #8
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fc4b 	bl	80010e2 <GPIO_SetBits>
	CE_LOW;
 800184c:	2104      	movs	r1, #4
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff fc49 	bl	80010e6 <GPIO_ResetBits>
	CLK_LOW;
 8001854:	2102      	movs	r1, #2
 8001856:	4620      	mov	r0, r4
 8001858:	f7ff fc45 	bl	80010e6 <GPIO_ResetBits>
}
 800185c:	b004      	add	sp, #16
 800185e:	bd70      	pop	{r4, r5, r6, pc}
 8001860:	40020800 	.word	0x40020800

08001864 <HC165_LatchUp>:

//Close latch and load data to internal registers 165
void HC165_LatchUp(void)
{
 8001864:	b510      	push	{r4, lr}
	CE_LOW;
 8001866:	4c0a      	ldr	r4, [pc, #40]	; (8001890 <HC165_LatchUp+0x2c>)
 8001868:	2104      	movs	r1, #4
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff fc3b 	bl	80010e6 <GPIO_ResetBits>
	CLK_LOW;
 8001870:	2102      	movs	r1, #2
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff fc37 	bl	80010e6 <GPIO_ResetBits>

	SS_LOW;
 8001878:	2108      	movs	r1, #8
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff fc33 	bl	80010e6 <GPIO_ResetBits>
	delay_us(1);
 8001880:	2001      	movs	r0, #1
 8001882:	f004 fabd 	bl	8005e00 <delay_us>
	SS_HIGH;	
 8001886:	2108      	movs	r1, #8
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff fc2a 	bl	80010e2 <GPIO_SetBits>
}
 800188e:	bd10      	pop	{r4, pc}
 8001890:	40020800 	.word	0x40020800

08001894 <HC165_GetByte>:


unsigned char HC165_GetByte(void)
{
 8001894:	b570      	push	{r4, r5, r6, lr}
	unsigned char data = 0x00, cnt = 0;	

	if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
 8001896:	2101      	movs	r1, #1
 8001898:	4818      	ldr	r0, [pc, #96]	; (80018fc <HC165_GetByte+0x68>)
 800189a:	f7ff fc1b 	bl	80010d4 <GPIO_ReadInputDataBit>
 800189e:	2801      	cmp	r0, #1
 80018a0:	d006      	beq.n	80018b0 <HC165_GetByte+0x1c>
	unsigned char data = 0x00, cnt = 0;	
 80018a2:	2500      	movs	r5, #0
		data = data | (0x01);
	};

	CLK_HIGH;	
 80018a4:	2102      	movs	r1, #2
 80018a6:	4815      	ldr	r0, [pc, #84]	; (80018fc <HC165_GetByte+0x68>)
 80018a8:	f7ff fc1b 	bl	80010e2 <GPIO_SetBits>

	for(cnt=0; cnt<7;cnt++)
 80018ac:	2400      	movs	r4, #0
 80018ae:	e00a      	b.n	80018c6 <HC165_GetByte+0x32>
		data = data | (0x01);
 80018b0:	2501      	movs	r5, #1
 80018b2:	e7f7      	b.n	80018a4 <HC165_GetByte+0x10>

		data = data << 1;		
		if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
			data = data | (0x01);
		};
		CLK_HIGH;		
 80018b4:	2102      	movs	r1, #2
 80018b6:	4811      	ldr	r0, [pc, #68]	; (80018fc <HC165_GetByte+0x68>)
 80018b8:	f7ff fc13 	bl	80010e2 <GPIO_SetBits>
		delay_us(1);		
 80018bc:	2001      	movs	r0, #1
 80018be:	f004 fa9f 	bl	8005e00 <delay_us>
	for(cnt=0; cnt<7;cnt++)
 80018c2:	3401      	adds	r4, #1
 80018c4:	b2e4      	uxtb	r4, r4
 80018c6:	2c06      	cmp	r4, #6
 80018c8:	d812      	bhi.n	80018f0 <HC165_GetByte+0x5c>
		CLK_LOW;
 80018ca:	4e0c      	ldr	r6, [pc, #48]	; (80018fc <HC165_GetByte+0x68>)
 80018cc:	2102      	movs	r1, #2
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff fc09 	bl	80010e6 <GPIO_ResetBits>
		delay_us(1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f004 fa93 	bl	8005e00 <delay_us>
		data = data << 1;		
 80018da:	006d      	lsls	r5, r5, #1
 80018dc:	b2ed      	uxtb	r5, r5
		if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
 80018de:	2101      	movs	r1, #1
 80018e0:	4630      	mov	r0, r6
 80018e2:	f7ff fbf7 	bl	80010d4 <GPIO_ReadInputDataBit>
 80018e6:	2801      	cmp	r0, #1
 80018e8:	d1e4      	bne.n	80018b4 <HC165_GetByte+0x20>
			data = data | (0x01);
 80018ea:	f045 0501 	orr.w	r5, r5, #1
 80018ee:	e7e1      	b.n	80018b4 <HC165_GetByte+0x20>
	}

	CLK_LOW;
 80018f0:	2102      	movs	r1, #2
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <HC165_GetByte+0x68>)
 80018f4:	f7ff fbf7 	bl	80010e6 <GPIO_ResetBits>
	return data;
}
 80018f8:	4628      	mov	r0, r5
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
 80018fc:	40020800 	.word	0x40020800

08001900 <HC165_GetDWord>:

unsigned long int HC165_GetDWord(void)
{
 8001900:	b570      	push	{r4, r5, r6, lr}
	unsigned char tmp[4] = {0,0,0,0};
	
	tmp[0] = HC165_GetByte();
 8001902:	f7ff ffc7 	bl	8001894 <HC165_GetByte>
 8001906:	4605      	mov	r5, r0
	tmp[1] = HC165_GetByte();
 8001908:	f7ff ffc4 	bl	8001894 <HC165_GetByte>
 800190c:	4606      	mov	r6, r0
	tmp[2] = HC165_GetByte();
 800190e:	f7ff ffc1 	bl	8001894 <HC165_GetByte>
 8001912:	4604      	mov	r4, r0
	tmp[3] = HC165_GetByte();
 8001914:	f7ff ffbe 	bl	8001894 <HC165_GetByte>

	return (unsigned long int) ((((unsigned long int) (tmp[3]))<<24)|(((unsigned long int) (tmp[2]))<<16)|((unsigned long int) (tmp[1])<<8)|(unsigned long int) (tmp[0]));
 8001918:	0424      	lsls	r4, r4, #16
 800191a:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 800191e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
}
 8001922:	4328      	orrs	r0, r5
 8001924:	bd70      	pop	{r4, r5, r6, pc}

08001926 <HC165_GetDWord1>:

unsigned long int HC165_GetDWord1(void)
{
 8001926:	b538      	push	{r3, r4, r5, lr}
	unsigned char tmp[4] = {0,0,0,0};

	tmp[0] = HC165_GetByte();
 8001928:	f7ff ffb4 	bl	8001894 <HC165_GetByte>
 800192c:	4605      	mov	r5, r0
	tmp[1] = HC165_GetByte();
 800192e:	f7ff ffb1 	bl	8001894 <HC165_GetByte>
 8001932:	4604      	mov	r4, r0
	tmp[2] = HC165_GetByte();
 8001934:	f7ff ffae 	bl	8001894 <HC165_GetByte>

	return (unsigned long int) ((((unsigned long int) (tmp[3]))<<24)|(((unsigned long int) (tmp[2]))<<16)|((unsigned long int) (tmp[1])<<8)|(unsigned long int) (tmp[0]));
 8001938:	0224      	lsls	r4, r4, #8
 800193a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
}
 800193e:	4328      	orrs	r0, r5
 8001940:	bd38      	pop	{r3, r4, r5, pc}
	...

08001944 <GetButton>:

//Get buttons state
unsigned long long int GetButton(void)
{
 8001944:	b570      	push	{r4, r5, r6, lr}
	unsigned long int keys_state_1, keys_state_2;
	
	CE_LOW;
 8001946:	4c0c      	ldr	r4, [pc, #48]	; (8001978 <GetButton+0x34>)
 8001948:	2104      	movs	r1, #4
 800194a:	4620      	mov	r0, r4
 800194c:	f7ff fbcb 	bl	80010e6 <GPIO_ResetBits>
	delay_us(10);
 8001950:	200a      	movs	r0, #10
 8001952:	f004 fa55 	bl	8005e00 <delay_us>
	HC165_LatchUp();
 8001956:	f7ff ff85 	bl	8001864 <HC165_LatchUp>
	keys_state_1 = HC165_GetDWord();
 800195a:	f7ff ffd1 	bl	8001900 <HC165_GetDWord>
 800195e:	4605      	mov	r5, r0
	keys_state_2 = HC165_GetDWord1();
 8001960:	f7ff ffe1 	bl	8001926 <HC165_GetDWord1>
 8001964:	4606      	mov	r6, r0
	CE_HIGH;
 8001966:	2104      	movs	r1, #4
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff fbba 	bl	80010e2 <GPIO_SetBits>

	return (unsigned long long int) ( ((unsigned long long int) (keys_state_1)) |  ( ((unsigned long long int) keys_state_2)<<32) );
 800196e:	2300      	movs	r3, #0
}
 8001970:	ea43 0005 	orr.w	r0, r3, r5
 8001974:	4631      	mov	r1, r6
 8001976:	bd70      	pop	{r4, r5, r6, pc}
 8001978:	40020800 	.word	0x40020800

0800197c <SendData>:
#include <stm32f4xx_gpio.h>

#include "MAX5135.h"

void SendData(unsigned char mData)
{
 800197c:	b510      	push	{r4, lr}
 800197e:	4604      	mov	r4, r0
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)); 
 8001980:	2102      	movs	r1, #2
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <SendData+0x2c>)
 8001984:	f7ff fd1f 	bl	80013c6 <SPI_I2S_GetFlagStatus>
 8001988:	2800      	cmp	r0, #0
 800198a:	d0f9      	beq.n	8001980 <SendData+0x4>
	SPI_I2S_SendData(SPI2, mData);
 800198c:	4621      	mov	r1, r4
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <SendData+0x2c>)
 8001990:	f7ff fd17 	bl	80013c2 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE));
 8001994:	2101      	movs	r1, #1
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <SendData+0x2c>)
 8001998:	f7ff fd15 	bl	80013c6 <SPI_I2S_GetFlagStatus>
 800199c:	2800      	cmp	r0, #0
 800199e:	d0f9      	beq.n	8001994 <SendData+0x18>
	SPI_I2S_ReceiveData(SPI2);
 80019a0:	4801      	ldr	r0, [pc, #4]	; (80019a8 <SendData+0x2c>)
 80019a2:	f7ff fd0c 	bl	80013be <SPI_I2S_ReceiveData>
	;
};
 80019a6:	bd10      	pop	{r4, pc}
 80019a8:	40003800 	.word	0x40003800

080019ac <MAX5135_SendPack>:

void MAX5135_SendPack(unsigned char _data1, unsigned char _data2)
{
 80019ac:	b570      	push	{r4, r5, r6, lr}
 80019ae:	4606      	mov	r6, r0
 80019b0:	460d      	mov	r5, r1
	GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 80019b2:	4c09      	ldr	r4, [pc, #36]	; (80019d8 <MAX5135_SendPack+0x2c>)
 80019b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff fb94 	bl	80010e6 <GPIO_ResetBits>
	
	SendData(_data1);
 80019be:	4630      	mov	r0, r6
 80019c0:	f7ff ffdc 	bl	800197c <SendData>
	SendData(_data2);
 80019c4:	4628      	mov	r0, r5
 80019c6:	f7ff ffd9 	bl	800197c <SendData>
	
	;	
	//delay_us(1);
	
	GPIO_SetBits(GPIOB, GPIO_Pin_12);
 80019ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff fb87 	bl	80010e2 <GPIO_SetBits>
}
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
 80019d6:	bf00      	nop
 80019d8:	40020400 	.word	0x40020400

080019dc <MAX5135init>:

void MAX5135init(void)
{
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	b089      	sub	sp, #36	; 0x24
	/* SPI2 setting up*/
	
	GPIO_InitTypeDef mGPIO_InitStructure;
	SPI_InitTypeDef mSPI;
		
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80019e0:	2101      	movs	r1, #1
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7ff fbf4 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	
	//GPIO_PinAFConfig(GPIOB, GPIO_PinSource12, GPIO_AF_SPI2);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_SPI2);
 80019e8:	4d2f      	ldr	r5, [pc, #188]	; (8001aa8 <MAX5135init+0xcc>)
 80019ea:	2205      	movs	r2, #5
 80019ec:	210d      	movs	r1, #13
 80019ee:	4628      	mov	r0, r5
 80019f0:	f7ff fb7b 	bl	80010ea <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_SPI2);
 80019f4:	2205      	movs	r2, #5
 80019f6:	210f      	movs	r1, #15
 80019f8:	4628      	mov	r0, r5
 80019fa:	f7ff fb76 	bl	80010ea <GPIO_PinAFConfig>
	
	mGPIO_InitStructure.GPIO_Pin 		= /*GPIO_Pin_12|*/GPIO_Pin_13|GPIO_Pin_15;
 80019fe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a02:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8001a04:	2702      	movs	r7, #2
 8001a06:	f88d 701c 	strb.w	r7, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 8001a0a:	2400      	movs	r4, #0
 8001a0c:	f88d 401e 	strb.w	r4, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8001a10:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8001a14:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOB, &mGPIO_InitStructure);
 8001a18:	a906      	add	r1, sp, #24
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f7ff fb0c 	bl	8001038 <GPIO_Init>
	
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_12/*|GPIO_Pin_0*/;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001a26:	2601      	movs	r6, #1
 8001a28:	f88d 601c 	strb.w	r6, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 8001a2c:	f88d 401e 	strb.w	r4, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8001a30:	f88d 601f 	strb.w	r6, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8001a34:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOB, &mGPIO_InitStructure);
 8001a38:	a906      	add	r1, sp, #24
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	f7ff fafc 	bl	8001038 <GPIO_Init>
	
	//GPIO_SetBits(GPIOB, GPIO_Pin_0);
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001a40:	4631      	mov	r1, r6
 8001a42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a46:	f7ff fbd1 	bl	80011ec <RCC_APB1PeriphClockCmd>
	
	SPI_I2S_DeInit(SPI2);
 8001a4a:	f5a5 35e6 	sub.w	r5, r5, #117760	; 0x1cc00
 8001a4e:	4628      	mov	r0, r5
 8001a50:	f7ff fc04 	bl	800125c <SPI_I2S_DeInit>
	SPI_StructInit(&mSPI);
 8001a54:	a801      	add	r0, sp, #4
 8001a56:	f7ff fc89 	bl	800136c <SPI_StructInit>
	
	mSPI.SPI_Direction = SPI_Direction_Tx;
 8001a5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a5e:	f8ad 3004 	strh.w	r3, [sp, #4]
	mSPI.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001a62:	f8ad 4010 	strh.w	r4, [sp, #16]
	mSPI.SPI_Mode = SPI_Mode_Master;
 8001a66:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a6a:	f8ad 3006 	strh.w	r3, [sp, #6]
	mSPI.SPI_DataSize = 8;
 8001a6e:	2308      	movs	r3, #8
 8001a70:	f8ad 3008 	strh.w	r3, [sp, #8]
	mSPI.SPI_CPOL = SPI_CPOL_Low;
 8001a74:	f8ad 400a 	strh.w	r4, [sp, #10]
	mSPI.SPI_CPHA = SPI_CPHA_1Edge;
 8001a78:	f8ad 400c 	strh.w	r4, [sp, #12]
	mSPI.SPI_FirstBit = SPI_FirstBit_MSB;	
 8001a7c:	f8ad 4012 	strh.w	r4, [sp, #18]
	mSPI.SPI_NSS = SPI_NSS_Soft;
 8001a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a84:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	SPI_Init(SPI2, &mSPI);
 8001a88:	a901      	add	r1, sp, #4
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f7ff fc48 	bl	8001320 <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 8001a90:	4631      	mov	r1, r6
 8001a92:	4628      	mov	r0, r5
 8001a94:	f7ff fc76 	bl	8001384 <SPI_Cmd>
	SPI_NSSInternalSoftwareConfig(SPI2, SPI_NSSInternalSoft_Set);
 8001a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f7ff fc7e 	bl	800139e <SPI_NSSInternalSoftwareConfig>
	//delay_ms(10);
	////Clr linearity bit
	//MAX5135_SendPack(MAX5135_CMD_LINEARITY, MAX5135_DATA_NONE, MAX5135_DATA_NONE);
	
	//init END
}
 8001aa2:	b009      	add	sp, #36	; 0x24
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020400 	.word	0x40020400

08001aac <MAX5135_DAC_send>:


void MAX5135_DAC_send(unsigned char DAC_Ch, unsigned int DAC_val)
{
 8001aac:	b508      	push	{r3, lr}
	uint8_t msb = 0,lsb = 0;
	if(DAC_val > 1023) DAC_val = 1023;
 8001aae:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001ab2:	d301      	bcc.n	8001ab8 <MAX5135_DAC_send+0xc>
 8001ab4:	f240 31ff 	movw	r1, #1023	; 0x3ff
	
	switch(DAC_Ch)
 8001ab8:	2803      	cmp	r0, #3
 8001aba:	d825      	bhi.n	8001b08 <MAX5135_DAC_send+0x5c>
 8001abc:	e8df f000 	tbb	[pc, r0]
 8001ac0:	1c140c02 	.word	0x1c140c02
	{
		case 0:
		{
			msb = 0x30 | ((DAC_val >> 6) & 0x0F);
 8001ac4:	f3c1 1083 	ubfx	r0, r1, #6, #4
 8001ac8:	f040 0030 	orr.w	r0, r0, #48	; 0x30
			lsb = (DAC_val << 2) & 0xFC;
 8001acc:	b2c9      	uxtb	r1, r1
 8001ace:	0089      	lsls	r1, r1, #2
 8001ad0:	b2c9      	uxtb	r1, r1
			msb = 0xF0 | ((DAC_val >> 6) & 0x0F);
			lsb = (DAC_val << 2) & 0xFC;
			break;
		}
	}
	MAX5135_SendPack(msb, lsb);
 8001ad2:	f7ff ff6b 	bl	80019ac <MAX5135_SendPack>
}
 8001ad6:	bd08      	pop	{r3, pc}
			msb = 0x70 | ((DAC_val >> 6) & 0x0F);
 8001ad8:	f3c1 1083 	ubfx	r0, r1, #6, #4
 8001adc:	f040 0070 	orr.w	r0, r0, #112	; 0x70
			lsb = (DAC_val << 2) & 0xFC;
 8001ae0:	b2c9      	uxtb	r1, r1
 8001ae2:	0089      	lsls	r1, r1, #2
 8001ae4:	b2c9      	uxtb	r1, r1
			break;
 8001ae6:	e7f4      	b.n	8001ad2 <MAX5135_DAC_send+0x26>
			msb = 0xB0 | ((DAC_val >> 6) & 0x0F);
 8001ae8:	f3c1 1083 	ubfx	r0, r1, #6, #4
 8001aec:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
			lsb = (DAC_val << 2) & 0xFC;
 8001af0:	b2c9      	uxtb	r1, r1
 8001af2:	0089      	lsls	r1, r1, #2
 8001af4:	b2c9      	uxtb	r1, r1
			break;
 8001af6:	e7ec      	b.n	8001ad2 <MAX5135_DAC_send+0x26>
			msb = 0xF0 | ((DAC_val >> 6) & 0x0F);
 8001af8:	f3c1 1087 	ubfx	r0, r1, #6, #8
 8001afc:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
			lsb = (DAC_val << 2) & 0xFC;
 8001b00:	b2c9      	uxtb	r1, r1
 8001b02:	0089      	lsls	r1, r1, #2
 8001b04:	b2c9      	uxtb	r1, r1
			break;
 8001b06:	e7e4      	b.n	8001ad2 <MAX5135_DAC_send+0x26>
	uint8_t msb = 0,lsb = 0;
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	e7e1      	b.n	8001ad2 <MAX5135_DAC_send+0x26>
	...

08001b10 <ADC_POTS_selector_init>:
};


//Init GPIOs for ADC channels multiplexers
void ADC_POTS_selector_init(void)
{
 8001b10:	b500      	push	{lr}
 8001b12:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Setting up peripherial */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001b14:	2101      	movs	r1, #1
 8001b16:	2004      	movs	r0, #4
 8001b18:	f7ff fb5a 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= ADC_PS_SH_PIN|ADC_PS_ST_PIN|ADC_PS_DS_PIN;
 8001b22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b26:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 8001b34:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b38:	4669      	mov	r1, sp
 8001b3a:	4803      	ldr	r0, [pc, #12]	; (8001b48 <ADC_POTS_selector_init+0x38>)
 8001b3c:	f7ff fa7c 	bl	8001038 <GPIO_Init>
}
 8001b40:	b003      	add	sp, #12
 8001b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b46:	bf00      	nop
 8001b48:	40020800 	.word	0x40020800

08001b4c <ADC_POTS_selector_SendByte>:
void ADC_POTS_selector_SendByte(unsigned char data)
{
	unsigned char dat, cnt;
	
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e00c      	b.n	8001b6a <ADC_POTS_selector_SendByte+0x1e>
	{
		if ((dat & 0x80) > 0) {
			ADC_POTS_SELECTOR_DATA_HIGH;
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <ADC_POTS_selector_SendByte+0x3c>)
 8001b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b56:	8311      	strh	r1, [r2, #24]
		} else {
			ADC_POTS_SELECTOR_DATA_LOW;
		}

		ADC_POTS_SELECTOR_SHIFT_LOW;
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <ADC_POTS_selector_SendByte+0x3c>)
 8001b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5e:	8351      	strh	r1, [r2, #26]
 
		ADC_POTS_SELECTOR_SHIFT_HIGH;
 8001b60:	8311      	strh	r1, [r2, #24]
   
		dat = dat << 1;
 8001b62:	0040      	lsls	r0, r0, #1
 8001b64:	b2c0      	uxtb	r0, r0
	for(cnt=0; cnt<8; cnt++)
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d807      	bhi.n	8001b7e <ADC_POTS_selector_SendByte+0x32>
		if ((dat & 0x80) > 0) {
 8001b6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b72:	d1ed      	bne.n	8001b50 <ADC_POTS_selector_SendByte+0x4>
			ADC_POTS_SELECTOR_DATA_LOW;
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <ADC_POTS_selector_SendByte+0x3c>)
 8001b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7a:	8351      	strh	r1, [r2, #26]
 8001b7c:	e7ec      	b.n	8001b58 <ADC_POTS_selector_SendByte+0xc>
	}
	
	ADC_POTS_SELECTOR_DATA_LOW;
 8001b7e:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <ADC_POTS_selector_SendByte+0x3c>)
 8001b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b84:	835a      	strh	r2, [r3, #26]
}
 8001b86:	4770      	bx	lr
 8001b88:	40020800 	.word	0x40020800

08001b8c <ADC_POTS_selector_SendDWord>:

//Send 5 bytes to ADC channels multiplexers
void ADC_POTS_selector_SendDWord(unsigned long long int data)
{	
 8001b8c:	b510      	push	{r4, lr}
 8001b8e:	4604      	mov	r4, r0
	ADC_POTS_selector_SendByte((unsigned char) ((data&0xFF00000000)>>32));
 8001b90:	b2c8      	uxtb	r0, r1
 8001b92:	f7ff ffdb 	bl	8001b4c <ADC_POTS_selector_SendByte>
	ADC_POTS_selector_SendByte((unsigned char) ((data&0xFF000000)>>24));
 8001b96:	0e20      	lsrs	r0, r4, #24
 8001b98:	f7ff ffd8 	bl	8001b4c <ADC_POTS_selector_SendByte>
	ADC_POTS_selector_SendByte((unsigned char) ( data&0x000000FF));
 8001b9c:	b2e0      	uxtb	r0, r4
 8001b9e:	f7ff ffd5 	bl	8001b4c <ADC_POTS_selector_SendByte>
	ADC_POTS_selector_SendByte((unsigned char) ((data&0x0000FF00)>>8));
 8001ba2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001ba6:	f7ff ffd1 	bl	8001b4c <ADC_POTS_selector_SendByte>
	ADC_POTS_selector_SendByte((unsigned char) ((data&0x00FF0000)>>16));
 8001baa:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001bae:	f7ff ffcd 	bl	8001b4c <ADC_POTS_selector_SendByte>

	
	ADC_POTS_SELECTOR_STORAGE_LOW;
 8001bb2:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <ADC_POTS_selector_SendDWord+0x34>)
 8001bb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb8:	835a      	strh	r2, [r3, #26]
	
	ADC_POTS_SELECTOR_STORAGE_HIGH;
 8001bba:	831a      	strh	r2, [r3, #24]
}
 8001bbc:	bd10      	pop	{r4, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020800 	.word	0x40020800

08001bc4 <ADC_POTS_selector_Ch>:

//Select ADC channel
void ADC_POTS_selector_Ch(unsigned char Ch)
{
 8001bc4:	b508      	push	{r3, lr}
	ADC_POTS_selector_SendDWord((unsigned long long int) ChSelData[Ch]);
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <ADC_POTS_selector_Ch+0x14>)
 8001bc8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001bcc:	e9d0 0100 	ldrd	r0, r1, [r0]
 8001bd0:	f7ff ffdc 	bl	8001b8c <ADC_POTS_selector_SendDWord>
}
 8001bd4:	bd08      	pop	{r3, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000010 	.word	0x20000010

08001bdc <DipConfig_init>:
#define DipConfigPin3 GPIO_Pin_13
#define DipConfigPin4 GPIO_Pin_8

/*Init GPIOs for configuration dip switch*/
void DipConfig_init(void)
{
 8001bdc:	b500      	push	{lr}
 8001bde:	b083      	sub	sp, #12
	GPIO_InitTypeDef mGPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001be0:	2101      	movs	r1, #1
 8001be2:	4608      	mov	r0, r1
 8001be4:	f7ff faf4 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	
	//setup gpio speed


	mGPIO_InitStructure.GPIO_Pin 		= DipConfigPin1|DipConfigPin2|/*DipConfigPin3|*/DipConfigPin4;
 8001be8:	f44f 4309 	mov.w	r3, #35072	; 0x8900
 8001bec:	9300      	str	r3, [sp, #0]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IN;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f88d 3004 	strb.w	r3, [sp, #4]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f88d 2007 	strb.w	r2, [sp, #7]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;
 8001bfa:	f88d 3005 	strb.w	r3, [sp, #5]
	


	GPIO_Init(GPIOA, &mGPIO_InitStructure);
 8001bfe:	4669      	mov	r1, sp
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <DipConfig_init+0x30>)
 8001c02:	f7ff fa19 	bl	8001038 <GPIO_Init>
};
 8001c06:	b003      	add	sp, #12
 8001c08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c0c:	40020000 	.word	0x40020000

08001c10 <GetDipConfig>:

/*Returns the state of dip switch*/
uDipConfig GetDipConfig(void)
{
 8001c10:	b538      	push	{r3, r4, r5, lr}
	uDipConfig lDipConfig;
	
	lDipConfig.b.V_OUT_1V2 		= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin1);
 8001c12:	4d0f      	ldr	r5, [pc, #60]	; (8001c50 <GetDipConfig+0x40>)
 8001c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f7ff fa5b 	bl	80010d4 <GPIO_ReadInputDataBit>
 8001c1e:	43c0      	mvns	r0, r0
 8001c20:	f04f 0400 	mov.w	r4, #0
 8001c24:	f360 0400 	bfi	r4, r0, #0, #1
	//lDipConfig.b.SAVE_V_LEVEL = ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin3);
	lDipConfig.b.SAVE_V_LEVEL = 1;
 8001c28:	f044 0404 	orr.w	r4, r4, #4
	lDipConfig.b.V_OUT_1V 		= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin2);
 8001c2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c30:	4628      	mov	r0, r5
 8001c32:	f7ff fa4f 	bl	80010d4 <GPIO_ReadInputDataBit>
 8001c36:	43c0      	mvns	r0, r0
 8001c38:	f360 0441 	bfi	r4, r0, #1, #1
	lDipConfig.b.EXPANDER_ON 	= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin4);
 8001c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c40:	4628      	mov	r0, r5
 8001c42:	f7ff fa47 	bl	80010d4 <GPIO_ReadInputDataBit>
 8001c46:	43c0      	mvns	r0, r0
 8001c48:	f360 04c3 	bfi	r4, r0, #3, #1
	
	return lDipConfig;
}
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	bd38      	pop	{r3, r4, r5, pc}
 8001c50:	40020000 	.word	0x40020000

08001c54 <Init_Expander_GPIO>:
#include "expander.h"
#include "dip_config.h"


void Init_Expander_GPIO(void)
{
 8001c54:	b500      	push	{lr}
 8001c56:	b083      	sub	sp, #12
	GPIO_InitTypeDef mGPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f7ff fab8 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	
	mGPIO_InitStructure.GPIO_Pin 		= EXPANDER_PIN;
 8001c60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c64:	9300      	str	r3, [sp, #0]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IN;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f88d 3004 	strb.w	r3, [sp, #4]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_DOWN;
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f88d 2007 	strb.w	r2, [sp, #7]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;
 8001c72:	f88d 3005 	strb.w	r3, [sp, #5]
	
	GPIO_Init(EXPANDER_GPIO, &mGPIO_InitStructure);
 8001c76:	4669      	mov	r1, sp
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <Init_Expander_GPIO+0x30>)
 8001c7a:	f7ff f9dd 	bl	8001038 <GPIO_Init>
}
 8001c7e:	b003      	add	sp, #12
 8001c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c84:	40020400 	.word	0x40020400

08001c88 <Is_Expander_Present>:

/*Returns 1 if expander is connected, otherwise returns 0*/
uint8_t Is_Expander_Present(void)
{
 8001c88:	b508      	push	{r3, lr}
	uDipConfig DipConfig;
	
	DipConfig = GetDipConfig();
 8001c8a:	f7ff ffc1 	bl	8001c10 <GetDipConfig>
	if(DipConfig.b.EXPANDER_ON) return 1;
 8001c8e:	f010 0f08 	tst.w	r0, #8
 8001c92:	d101      	bne.n	8001c98 <Is_Expander_Present+0x10>
	else return 0;
 8001c94:	2000      	movs	r0, #0
}
 8001c96:	bd08      	pop	{r3, pc}
	if(DipConfig.b.EXPANDER_ON) return 1;
 8001c98:	2001      	movs	r0, #1
 8001c9a:	e7fc      	b.n	8001c96 <Is_Expander_Present+0xe>

08001c9c <LEDS_modes_init>:

#define LEDS_MODES_DATA_HIGH		GPIO_SetBits(GPIOC, GPIO_Pin_5)
#define LEDS_MODES_DATA_LOW			GPIO_ResetBits(GPIOC, GPIO_Pin_5)

void LEDS_modes_init(void)
{
 8001c9c:	b500      	push	{lr}
 8001c9e:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Setting up peripherial */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	2004      	movs	r0, #4
 8001ca4:	f7ff fa94 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6;
 8001cae:	2370      	movs	r3, #112	; 0x70
 8001cb0:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT; 
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 8001cbe:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001cc2:	4669      	mov	r1, sp
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <LEDS_modes_init+0x34>)
 8001cc6:	f7ff f9b7 	bl	8001038 <GPIO_Init>
}
 8001cca:	b003      	add	sp, #12
 8001ccc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cd0:	40020800 	.word	0x40020800

08001cd4 <LEDS_modes_SendByte>:

void LEDS_modes_SendByte(unsigned char data)
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	4605      	mov	r5, r0
	unsigned char dat, cnt;
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 8001cd8:	2400      	movs	r4, #0
 8001cda:	e010      	b.n	8001cfe <LEDS_modes_SendByte+0x2a>
	{
		if ((dat & 0x80) > 0) {
			LEDS_MODES_DATA_HIGH;
 8001cdc:	2120      	movs	r1, #32
 8001cde:	480f      	ldr	r0, [pc, #60]	; (8001d1c <LEDS_modes_SendByte+0x48>)
 8001ce0:	f7ff f9ff 	bl	80010e2 <GPIO_SetBits>
		} else {
			LEDS_MODES_DATA_LOW;
		}
		
		LEDS_MODES_SHIFT_LOW;		
 8001ce4:	4e0d      	ldr	r6, [pc, #52]	; (8001d1c <LEDS_modes_SendByte+0x48>)
 8001ce6:	2110      	movs	r1, #16
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f7ff f9fc 	bl	80010e6 <GPIO_ResetBits>
		LEDS_MODES_SHIFT_HIGH;
 8001cee:	2110      	movs	r1, #16
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f7ff f9f6 	bl	80010e2 <GPIO_SetBits>

		dat = dat << 1;
 8001cf6:	006d      	lsls	r5, r5, #1
 8001cf8:	b2ed      	uxtb	r5, r5
	for(cnt=0; cnt<8; cnt++)
 8001cfa:	3401      	adds	r4, #1
 8001cfc:	b2e4      	uxtb	r4, r4
 8001cfe:	2c07      	cmp	r4, #7
 8001d00:	d807      	bhi.n	8001d12 <LEDS_modes_SendByte+0x3e>
		if ((dat & 0x80) > 0) {
 8001d02:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001d06:	d1e9      	bne.n	8001cdc <LEDS_modes_SendByte+0x8>
			LEDS_MODES_DATA_LOW;
 8001d08:	2120      	movs	r1, #32
 8001d0a:	4804      	ldr	r0, [pc, #16]	; (8001d1c <LEDS_modes_SendByte+0x48>)
 8001d0c:	f7ff f9eb 	bl	80010e6 <GPIO_ResetBits>
 8001d10:	e7e8      	b.n	8001ce4 <LEDS_modes_SendByte+0x10>
	}
	LEDS_MODES_DATA_LOW;
 8001d12:	2120      	movs	r1, #32
 8001d14:	4801      	ldr	r0, [pc, #4]	; (8001d1c <LEDS_modes_SendByte+0x48>)
 8001d16:	f7ff f9e6 	bl	80010e6 <GPIO_ResetBits>
	
}
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	40020800 	.word	0x40020800

08001d20 <LEDS_modes_SendStruct>:
	LEDS_MODES_STORAGE_HIGH;
}


void LEDS_modes_SendStruct(uLeds *_Leds)
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	4604      	mov	r4, r0
	LEDS_modes_SendByte(_Leds->value[0]);
 8001d24:	7800      	ldrb	r0, [r0, #0]
 8001d26:	f7ff ffd5 	bl	8001cd4 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[1]);
 8001d2a:	7860      	ldrb	r0, [r4, #1]
 8001d2c:	f7ff ffd2 	bl	8001cd4 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[2]);
 8001d30:	78a0      	ldrb	r0, [r4, #2]
 8001d32:	f7ff ffcf 	bl	8001cd4 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[3]);
 8001d36:	78e0      	ldrb	r0, [r4, #3]
 8001d38:	f7ff ffcc 	bl	8001cd4 <LEDS_modes_SendByte>

	LEDS_MODES_STORAGE_LOW;
 8001d3c:	4c04      	ldr	r4, [pc, #16]	; (8001d50 <LEDS_modes_SendStruct+0x30>)
 8001d3e:	2140      	movs	r1, #64	; 0x40
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff f9d0 	bl	80010e6 <GPIO_ResetBits>
	LEDS_MODES_STORAGE_HIGH;
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff f9ca 	bl	80010e2 <GPIO_SetBits>
}
 8001d4e:	bd10      	pop	{r4, pc}
 8001d50:	40020800 	.word	0x40020800

08001d54 <LED_STEP_init>:
#define LED_STEP_DATA_HIGH			GPIO_SetBits(GPIOC, GPIO_Pin_8)
#define LED_STEP_DATA_LOW				GPIO_ResetBits(GPIOC, GPIO_Pin_8)

/*Init GPIO for LEDs control via HC595 shift registers*/
void LED_STEP_init(void)
{
 8001d54:	b500      	push	{lr}
 8001d56:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001d58:	2101      	movs	r1, #1
 8001d5a:	2004      	movs	r0, #4
 8001d5c:	f7ff fa38 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_7|GPIO_Pin_8|GPIO_Pin_9;
 8001d66:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d6a:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; //100mhz default
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;	 
 8001d72:	2301      	movs	r3, #1
 8001d74:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 8001d78:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d7c:	4669      	mov	r1, sp
 8001d7e:	4803      	ldr	r0, [pc, #12]	; (8001d8c <LED_STEP_init+0x38>)
 8001d80:	f7ff f95a 	bl	8001038 <GPIO_Init>
}
 8001d84:	b003      	add	sp, #12
 8001d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d8a:	bf00      	nop
 8001d8c:	40020800 	.word	0x40020800

08001d90 <LED_STEP_SendByte>:

/*Shift one byte to HC595 registers which control LEDs*/
void LED_STEP_SendByte(unsigned char data)
{
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	4605      	mov	r5, r0
	unsigned char dat, cnt;
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 8001d94:	2400      	movs	r4, #0
 8001d96:	e011      	b.n	8001dbc <LED_STEP_SendByte+0x2c>
	{
		if ((dat & 0x80) > 0) {
			LED_STEP_DATA_HIGH;
 8001d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9c:	4810      	ldr	r0, [pc, #64]	; (8001de0 <LED_STEP_SendByte+0x50>)
 8001d9e:	f7ff f9a0 	bl	80010e2 <GPIO_SetBits>
		} else {
			LED_STEP_DATA_LOW;
		}

		LED_STEP_SHIFT_LOW;
 8001da2:	4e0f      	ldr	r6, [pc, #60]	; (8001de0 <LED_STEP_SendByte+0x50>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	4630      	mov	r0, r6
 8001da8:	f7ff f99d 	bl	80010e6 <GPIO_ResetBits>
		LED_STEP_SHIFT_HIGH;
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	4630      	mov	r0, r6
 8001db0:	f7ff f997 	bl	80010e2 <GPIO_SetBits>

		dat = dat << 1;
 8001db4:	006d      	lsls	r5, r5, #1
 8001db6:	b2ed      	uxtb	r5, r5
	for(cnt=0; cnt<8; cnt++)
 8001db8:	3401      	adds	r4, #1
 8001dba:	b2e4      	uxtb	r4, r4
 8001dbc:	2c07      	cmp	r4, #7
 8001dbe:	d808      	bhi.n	8001dd2 <LED_STEP_SendByte+0x42>
		if ((dat & 0x80) > 0) {
 8001dc0:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001dc4:	d1e8      	bne.n	8001d98 <LED_STEP_SendByte+0x8>
			LED_STEP_DATA_LOW;
 8001dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <LED_STEP_SendByte+0x50>)
 8001dcc:	f7ff f98b 	bl	80010e6 <GPIO_ResetBits>
 8001dd0:	e7e7      	b.n	8001da2 <LED_STEP_SendByte+0x12>
	}
	LED_STEP_DATA_LOW;
 8001dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dd6:	4802      	ldr	r0, [pc, #8]	; (8001de0 <LED_STEP_SendByte+0x50>)
 8001dd8:	f7ff f985 	bl	80010e6 <GPIO_ResetBits>
}
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
 8001dde:	bf00      	nop
 8001de0:	40020800 	.word	0x40020800

08001de4 <LED_STEP_SendWord>:

/*Shift two bytes to HC595 registers which control LEDs*/
void LED_STEP_SendWord(unsigned long int data)
{
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4604      	mov	r4, r0
	LED_STEP_SendByte((unsigned char) ((data&0xFF00)>>8) );
 8001de8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001dec:	f7ff ffd0 	bl	8001d90 <LED_STEP_SendByte>
	LED_STEP_SendByte((unsigned char) (data&0x00FF) );
 8001df0:	b2e0      	uxtb	r0, r4
 8001df2:	f7ff ffcd 	bl	8001d90 <LED_STEP_SendByte>

	LED_STEP_STORAGE_LOW;
 8001df6:	4c06      	ldr	r4, [pc, #24]	; (8001e10 <LED_STEP_SendWord+0x2c>)
 8001df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff f972 	bl	80010e6 <GPIO_ResetBits>
	LED_STEP_STORAGE_HIGH;
 8001e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff f96b 	bl	80010e2 <GPIO_SetBits>
}
 8001e0c:	bd10      	pop	{r4, pc}
 8001e0e:	bf00      	nop
 8001e10:	40020800 	.word	0x40020800

08001e14 <LED_STEP_LightStep>:

/*Turn on the LED which indicates the step number StepNum*/
void LED_STEP_LightStep(unsigned int StepNum)
{
 8001e14:	b538      	push	{r3, r4, r5, lr}
	unsigned long dat = 0xFFFFFFFF;
	unsigned char cnt, tmp1, tmp2;
	
	dat &= ~(1<<0);
	for(cnt=0;cnt<StepNum;cnt++)
 8001e16:	2300      	movs	r3, #0
	dat &= ~(1<<0);
 8001e18:	f06f 0401 	mvn.w	r4, #1
	for(cnt=0;cnt<StepNum;cnt++)
 8001e1c:	e004      	b.n	8001e28 <LED_STEP_LightStep+0x14>
	{		
		dat = dat<<1;
 8001e1e:	0064      	lsls	r4, r4, #1
		dat |= (1<<0);		
 8001e20:	f044 0401 	orr.w	r4, r4, #1
	for(cnt=0;cnt<StepNum;cnt++)
 8001e24:	3301      	adds	r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4283      	cmp	r3, r0
 8001e2a:	d3f8      	bcc.n	8001e1e <LED_STEP_LightStep+0xa>
	};
		
	if(!Is_Expander_Present())
 8001e2c:	f7ff ff2c 	bl	8001c88 <Is_Expander_Present>
 8001e30:	b1d0      	cbz	r0, 8001e68 <LED_STEP_LightStep+0x54>
		LED_STEP_SendWord(dat & 0xFFFF);
	}
	else
	{
		//if expander is presented we should control 32 LEDs instead of 16
		tmp1 = dat >> 24;
 8001e32:	0e25      	lsrs	r5, r4, #24
		tmp2 = dat >> 16;
		
		LED_STEP_SendByte((unsigned char) (tmp2) );
 8001e34:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001e38:	f7ff ffaa 	bl	8001d90 <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (tmp1) );
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	f7ff ffa7 	bl	8001d90 <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (dat >> 8) );
 8001e42:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001e46:	f7ff ffa3 	bl	8001d90 <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (dat) );
 8001e4a:	b2e0      	uxtb	r0, r4
 8001e4c:	f7ff ffa0 	bl	8001d90 <LED_STEP_SendByte>
		
		LED_STEP_STORAGE_LOW;
 8001e50:	4c07      	ldr	r4, [pc, #28]	; (8001e70 <LED_STEP_LightStep+0x5c>)
 8001e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff f945 	bl	80010e6 <GPIO_ResetBits>
		LED_STEP_STORAGE_HIGH;
 8001e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff f93e 	bl	80010e2 <GPIO_SetBits>
		
	}
};
 8001e66:	bd38      	pop	{r3, r4, r5, pc}
		LED_STEP_SendWord(dat & 0xFFFF);
 8001e68:	b2a0      	uxth	r0, r4
 8001e6a:	f7ff ffbb 	bl	8001de4 <LED_STEP_SendWord>
 8001e6e:	e7fa      	b.n	8001e66 <LED_STEP_LightStep+0x52>
 8001e70:	40020800 	.word	0x40020800

08001e74 <mADC_init>:
/*
	Setting up acts Timer 2 as source for ADC start conversion
	with 40 ksamples per second.
*/
void mADC_init(void)
{
 8001e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e78:	b08c      	sub	sp, #48	; 0x30
	ADC_InitTypeDef ADC_InitType;
	TIM_TimeBaseInitTypeDef TimeBaseInit;
	NVIC_InitTypeDef nvicStructure;
	
	//Timer init
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); 
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	f7ff f9b5 	bl	80011ec <RCC_APB1PeriphClockCmd>
		
	TIM_TimeBaseStructInit(&TimeBaseInit);
 8001e82:	a801      	add	r0, sp, #4
 8001e84:	f7ff fafe 	bl	8001484 <TIM_TimeBaseStructInit>
  TimeBaseInit.TIM_Prescaler 			= 0;	//ADC1 Timer
 8001e88:	2400      	movs	r4, #0
 8001e8a:	f8ad 4004 	strh.w	r4, [sp, #4]
	TimeBaseInit.TIM_CounterMode 		= TIM_CounterMode_Up;
 8001e8e:	f8ad 4006 	strh.w	r4, [sp, #6]
  TimeBaseInit.TIM_Period 				= 4200-1;// for 40kHz
 8001e92:	f241 0367 	movw	r3, #4199	; 0x1067
 8001e96:	9302      	str	r3, [sp, #8]
	TimeBaseInit.TIM_ClockDivision 	= TIM_CKD_DIV1;	
 8001e98:	f8ad 400c 	strh.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM2, &TimeBaseInit); 
 8001e9c:	a901      	add	r1, sp, #4
 8001e9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ea2:	f7ff fab1 	bl	8001408 <TIM_TimeBaseInit>

	TIM_SelectOutputTrigger(TIM2, TIM_TRGOSource_OC2Ref);
 8001ea6:	2150      	movs	r1, #80	; 0x50
 8001ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eac:	f7ff fb3c 	bl	8001528 <TIM_SelectOutputTrigger>
	TIM_CCxCmd(TIM2, TIM_Channel_2, TIM_CCx_Enable);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eb8:	f7ff fb0b 	bl	80014d2 <TIM_CCxCmd>
	TIM_SetCompare2(TIM2, 1);	
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ec2:	f7ff fb04 	bl	80014ce <TIM_SetCompare2>
	TIM2->CCMR1 |= TIM_CCMR1_OC2M;
 8001ec6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eca:	8b03      	ldrh	r3, [r0, #24]
 8001ecc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001ed0:	8303      	strh	r3, [r0, #24]
  TIM_Cmd(TIM2, ENABLE); 
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	f7ff faee 	bl	80014b4 <TIM_Cmd>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001ed8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8001fc8 <mADC_init+0x154>
 8001edc:	2310      	movs	r3, #16
 8001ede:	f888 3312 	strb.w	r3, [r8, #786]	; 0x312
	
	//ADC Init
	NVIC_SetPriority (ADC_IRQn, 1);  
	
	//ADC GPIO Init
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	f7ff f973 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Init_user, 0, sizeof(GPIO_Init_user));
 8001eea:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_Init_user.GPIO_Pin 	= GPIO_Pin_0|GPIO_Pin_1;
 8001eec:	2303      	movs	r3, #3
 8001eee:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_Init_user.GPIO_Mode 	= GPIO_Mode_AN; //Analog mode
 8001ef0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	GPIO_Init(GPIOA, & GPIO_Init_user);	
 8001ef4:	a90a      	add	r1, sp, #40	; 0x28
 8001ef6:	4830      	ldr	r0, [pc, #192]	; (8001fb8 <mADC_init+0x144>)
 8001ef8:	f7ff f89e 	bl	8001038 <GPIO_Init>
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001efc:	2101      	movs	r1, #1
 8001efe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f02:	f7ff f981 	bl	8001208 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 8001f06:	2101      	movs	r1, #1
 8001f08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f0c:	f7ff f97c 	bl	8001208 <RCC_APB2PeriphClockCmd>
	
	ADC_StructInit(&ADC_InitType);
 8001f10:	a804      	add	r0, sp, #16
 8001f12:	f7fe ff61 	bl	8000dd8 <ADC_StructInit>
	ADC_InitType.ADC_ContinuousConvMode 	= DISABLE;
 8001f16:	f88d 4015 	strb.w	r4, [sp, #21]
	ADC_InitType.ADC_DataAlign 						= ADC_DataAlign_Right;
 8001f1a:	9408      	str	r4, [sp, #32]
	ADC_InitType.ADC_ExternalTrigConv 		= ADC_ExternalTrigConv_T2_TRGO;
 8001f1c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001f20:	9307      	str	r3, [sp, #28]
	ADC_InitType.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8001f22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f26:	9306      	str	r3, [sp, #24]
	ADC_InitType.ADC_NbrOfConversion 			= 1;
 8001f28:	2501      	movs	r5, #1
 8001f2a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	ADC_InitType.ADC_Resolution 					= ADC_Resolution_12b;
 8001f2e:	9404      	str	r4, [sp, #16]
	ADC_InitType.ADC_ScanConvMode 				= DISABLE;
 8001f30:	f88d 4014 	strb.w	r4, [sp, #20]

	ADC_Init(ADC1, &ADC_InitType);
 8001f34:	4f21      	ldr	r7, [pc, #132]	; (8001fbc <mADC_init+0x148>)
 8001f36:	a904      	add	r1, sp, #16
 8001f38:	4638      	mov	r0, r7
 8001f3a:	f7fe ff25 	bl	8000d88 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitType);	
 8001f3e:	4e20      	ldr	r6, [pc, #128]	; (8001fc0 <mADC_init+0x14c>)
 8001f40:	a904      	add	r1, sp, #16
 8001f42:	4630      	mov	r0, r6
 8001f44:	f7fe ff20 	bl	8000d88 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0 ,1, ADC_SampleTime_480Cycles);
 8001f48:	2307      	movs	r3, #7
 8001f4a:	462a      	mov	r2, r5
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	4638      	mov	r0, r7
 8001f50:	f7fe ff57 	bl	8000e02 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1 ,1, ADC_SampleTime_480Cycles);
 8001f54:	2307      	movs	r3, #7
 8001f56:	462a      	mov	r2, r5
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	f7fe ff51 	bl	8000e02 <ADC_RegularChannelConfig>
	
	//ADC interrupts init
	nvicStructure.NVIC_IRQChannel = ADC_IRQn;
 8001f60:	2312      	movs	r3, #18
 8001f62:	f88d 3000 	strb.w	r3, [sp]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8001f66:	f88d 5001 	strb.w	r5, [sp, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8001f6a:	f88d 4002 	strb.w	r4, [sp, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8001f6e:	f88d 5003 	strb.w	r5, [sp, #3]
	NVIC_Init(&nvicStructure);
 8001f72:	4668      	mov	r0, sp
 8001f74:	f7fe fed6 	bl	8000d24 <NVIC_Init>
	
	ADC_POT_sel_cnt = 0;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <mADC_init+0x150>)
 8001f7a:	701c      	strb	r4, [r3, #0]
	ADC_POTS_selector_Ch(0);
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff fe21 	bl	8001bc4 <ADC_POTS_selector_Ch>
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001f82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f86:	f8c8 3000 	str.w	r3, [r8]
	
	NVIC_EnableIRQ(ADC_IRQn);
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8001f8a:	462a      	mov	r2, r5
 8001f8c:	f240 2105 	movw	r1, #517	; 0x205
 8001f90:	4638      	mov	r0, r7
 8001f92:	f7fe ff7e 	bl	8000e92 <ADC_ITConfig>
	ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
 8001f96:	462a      	mov	r2, r5
 8001f98:	f240 2105 	movw	r1, #517	; 0x205
 8001f9c:	4630      	mov	r0, r6
 8001f9e:	f7fe ff78 	bl	8000e92 <ADC_ITConfig>
	ADC_Cmd(ADC1, ENABLE);	
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	4638      	mov	r0, r7
 8001fa6:	f7fe ff21 	bl	8000dec <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);	
 8001faa:	4629      	mov	r1, r5
 8001fac:	4630      	mov	r0, r6
 8001fae:	f7fe ff1d 	bl	8000dec <ADC_Cmd>
};
 8001fb2:	b00c      	add	sp, #48	; 0x30
 8001fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	40012100 	.word	0x40012100
 8001fc4:	2000029c 	.word	0x2000029c
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <ADCPause>:
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8001fcc:	4b02      	ldr	r3, [pc, #8]	; (8001fd8 <ADCPause+0xc>)
 8001fce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


void ADCPause(void)
{
	NVIC_DisableIRQ(ADC_IRQn);
};
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <mInterruptInit>:
	NVIC_EnableIRQ(ADC_IRQn);
};

//External interrupts init for start and stop switches
void mInterruptInit(void)
{
 8001fdc:	b530      	push	{r4, r5, lr}
 8001fde:	b087      	sub	sp, #28
	GPIO_InitTypeDef mGPIO;
	EXTI_InitTypeDef mInt;
	NVIC_InitTypeDef NVIC_InitStructure;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fe6:	f7ff f90f 	bl	8001208 <RCC_APB2PeriphClockCmd>
	
	mGPIO.GPIO_Mode = GPIO_Mode_IN;
 8001fea:	2400      	movs	r4, #0
 8001fec:	f88d 4014 	strb.w	r4, [sp, #20]
	mGPIO.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8;
 8001ff0:	f240 15e3 	movw	r5, #483	; 0x1e3
 8001ff4:	9504      	str	r5, [sp, #16]
	mGPIO.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001ff6:	f88d 4017 	strb.w	r4, [sp, #23]
	mGPIO.GPIO_Speed = GPIO_Speed_100MHz;	
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_Init(GPIOB, &mGPIO);
 8002000:	a904      	add	r1, sp, #16
 8002002:	4831      	ldr	r0, [pc, #196]	; (80020c8 <mInterruptInit+0xec>)
 8002004:	f7ff f818 	bl	8001038 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource0);
 8002008:	4621      	mov	r1, r4
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff f9e2 	bl	80013d4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource1);
 8002010:	2101      	movs	r1, #1
 8002012:	4608      	mov	r0, r1
 8002014:	f7ff f9de 	bl	80013d4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource5);
 8002018:	2105      	movs	r1, #5
 800201a:	2001      	movs	r0, #1
 800201c:	f7ff f9da 	bl	80013d4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource6);
 8002020:	2106      	movs	r1, #6
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff f9d6 	bl	80013d4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource7);
 8002028:	2107      	movs	r1, #7
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff f9d2 	bl	80013d4 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource8);
 8002030:	2108      	movs	r1, #8
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff f9ce 	bl	80013d4 <SYSCFG_EXTILineConfig>

	
	//START-STOP LINE INIT Interrupt
	EXTI_DeInit();
 8002038:	f7fe ffa2 	bl	8000f80 <EXTI_DeInit>
	mInt.EXTI_Line = EXTI_Line0|EXTI_Line1|EXTI_Line5|EXTI_Line6|EXTI_Line7|EXTI_Line8;
 800203c:	9502      	str	r5, [sp, #8]
	mInt.EXTI_Mode = EXTI_Mode_Interrupt;
 800203e:	f88d 400c 	strb.w	r4, [sp, #12]
	mInt.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8002042:	2310      	movs	r3, #16
 8002044:	f88d 300d 	strb.w	r3, [sp, #13]
	mInt.EXTI_LineCmd = ENABLE;	
 8002048:	2501      	movs	r5, #1
 800204a:	f88d 500e 	strb.w	r5, [sp, #14]
	EXTI_Init(&mInt);
 800204e:	a802      	add	r0, sp, #8
 8002050:	f7fe ffa4 	bl	8000f9c <EXTI_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn; 						
 8002054:	2306      	movs	r3, #6
 8002056:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00; 
 800205a:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00; 
 800205e:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 8002062:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002066:	a801      	add	r0, sp, #4
 8002068:	f7fe fe5c 	bl	8000d24 <NVIC_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn; 						
 800206c:	2307      	movs	r3, #7
 800206e:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00; 
 8002072:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00; 
 8002076:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 800207a:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 800207e:	a801      	add	r0, sp, #4
 8002080:	f7fe fe50 	bl	8000d24 <NVIC_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; 						
 8002084:	2317      	movs	r3, #23
 8002086:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00; 
 800208a:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00; 
 800208e:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 8002092:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002096:	a801      	add	r0, sp, #4
 8002098:	f7fe fe44 	bl	8000d24 <NVIC_Init>
	
	EXTI_ClearITPendingBit(EXTI_Line0);	
 800209c:	4628      	mov	r0, r5
 800209e:	f7fe ffc5 	bl	800102c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line1);	
 80020a2:	2002      	movs	r0, #2
 80020a4:	f7fe ffc2 	bl	800102c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line5);	
 80020a8:	2020      	movs	r0, #32
 80020aa:	f7fe ffbf 	bl	800102c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line6);	
 80020ae:	2040      	movs	r0, #64	; 0x40
 80020b0:	f7fe ffbc 	bl	800102c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line7);	
 80020b4:	2080      	movs	r0, #128	; 0x80
 80020b6:	f7fe ffb9 	bl	800102c <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line8);
 80020ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020be:	f7fe ffb5 	bl	800102c <EXTI_ClearITPendingBit>
};
 80020c2:	b007      	add	sp, #28
 80020c4:	bd30      	pop	{r4, r5, pc}
 80020c6:	bf00      	nop
 80020c8:	40020400 	.word	0x40020400

080020cc <EXTI0_IRQHandler>:


//STOP KEY-BANANA Interrupt handler
//1 SECTION
void EXTI0_IRQHandler()
{
 80020cc:	b508      	push	{r3, lr}
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_0) && 
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <EXTI0_IRQHandler+0x50>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f013 0f01 	tst.w	r3, #1
 80020d6:	d11d      	bne.n	8002114 <EXTI0_IRQHandler+0x48>
		(gSequencerMode_1 != SEQUENCER_MODE_WAIT && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z)
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <EXTI0_IRQHandler+0x54>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_0) && 
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d018      	beq.n	8002114 <EXTI0_IRQHandler+0x48>
		(gSequencerMode_1 != SEQUENCER_MODE_WAIT && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z)
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <EXTI0_IRQHandler+0x54>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d013      	beq.n	8002114 <EXTI0_IRQHandler+0x48>
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <EXTI0_IRQHandler+0x54>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d00e      	beq.n	8002114 <EXTI0_IRQHandler+0x48>
	) {
		gPrevSequencerMode_1 = SEQUENCER_MODE_RUN;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <EXTI0_IRQHandler+0x58>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
		gSequencerMode_1 = SEQUENCER_MODE_STOP;	
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <EXTI0_IRQHandler+0x54>)
 80020fe:	2202      	movs	r2, #2
 8002100:	701a      	strb	r2, [r3, #0]
		
		DisplayUpdateFlags.b.MainDisplay 	= 1;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <EXTI0_IRQHandler+0x5c>)
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	f042 0202 	orr.w	r2, r2, #2
 8002112:	701a      	strb	r2, [r3, #0]
	};
	
	EXTI_ClearITPendingBit(EXTI_Line0);	
 8002114:	2001      	movs	r0, #1
 8002116:	f7fe ff89 	bl	800102c <EXTI_ClearITPendingBit>
};
 800211a:	bd08      	pop	{r3, pc}
 800211c:	40020400 	.word	0x40020400
 8002120:	200002c1 	.word	0x200002c1
 8002124:	200002bd 	.word	0x200002bd
 8002128:	200002f0 	.word	0x200002f0

0800212c <InitStart_1_SignalTimer>:

/*
	Init timer for start pulse (section 1) duration measurement 
*/
void InitStart_1_SignalTimer()
{
 800212c:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800212e:	2101      	movs	r1, #1
 8002130:	2002      	movs	r0, #2
 8002132:	f7ff f85b 	bl	80011ec <RCC_APB1PeriphClockCmd>
	
	TIM3->PSC = STEP_TIMER_PRESCALER;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <InitStart_1_SignalTimer+0x30>)
 8002138:	f642 1204 	movw	r2, #10500	; 0x2904
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->ARR = START_TIMER_SUSTAIN;
 800213e:	2201      	movs	r2, #1
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0;
 8002142:	2100      	movs	r1, #0
 8002144:	6259      	str	r1, [r3, #36]	; 0x24
	TIM3->DIER = TIM_DIER_UIE;
 8002146:	819a      	strh	r2, [r3, #12]
	TIM3->CR1 |= TIM_CR1_CEN;
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	801a      	strh	r2, [r3, #0]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <InitStart_1_SignalTimer+0x34>)
 8002152:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002156:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(TIM3_IRQn);	
};
 8002158:	bd08      	pop	{r3, pc}
 800215a:	bf00      	nop
 800215c:	40000400 	.word	0x40000400
 8002160:	e000e100 	.word	0xe000e100

08002164 <InitStart_2_SignalTimer>:

/*
	Init timer for start pulse (section 2) duration measurement 
*/
void InitStart_2_SignalTimer()
{
 8002164:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002166:	2101      	movs	r1, #1
 8002168:	2020      	movs	r0, #32
 800216a:	f7ff f83f 	bl	80011ec <RCC_APB1PeriphClockCmd>
	
	TIM7->PSC = STEP_TIMER_PRESCALER;
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <InitStart_2_SignalTimer+0x30>)
 8002170:	f642 1204 	movw	r2, #10500	; 0x2904
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM7->ARR = START_TIMER_SUSTAIN;
 8002176:	2201      	movs	r2, #1
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM7->CNT = 0;
 800217a:	2100      	movs	r1, #0
 800217c:	6259      	str	r1, [r3, #36]	; 0x24
	TIM7->DIER = TIM_DIER_UIE;
 800217e:	819a      	strh	r2, [r3, #12]
	TIM7->CR1 |= TIM_CR1_CEN;
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	801a      	strh	r2, [r3, #0]
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <InitStart_2_SignalTimer+0x34>)
 800218a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800218e:	605a      	str	r2, [r3, #4]
	
	NVIC_EnableIRQ(TIM7_IRQn);	
};
 8002190:	bd08      	pop	{r3, pc}
 8002192:	bf00      	nop
 8002194:	40001400 	.word	0x40001400
 8002198:	e000e100 	.word	0xe000e100

0800219c <InitClear_Timer>:

void InitClear_Timer()
{
 800219c:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 800219e:	2101      	movs	r1, #1
 80021a0:	2010      	movs	r0, #16
 80021a2:	f7ff f823 	bl	80011ec <RCC_APB1PeriphClockCmd>
	
	TIM6->PSC = 21000;
 80021a6:	480a      	ldr	r0, [pc, #40]	; (80021d0 <InitClear_Timer+0x34>)
 80021a8:	f245 2308 	movw	r3, #21000	; 0x5208
 80021ac:	8503      	strh	r3, [r0, #40]	; 0x28
	TIM6->ARR = 200;
 80021ae:	23c8      	movs	r3, #200	; 0xc8
 80021b0:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIM6->CNT = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	6243      	str	r3, [r0, #36]	; 0x24
	TIM6->DIER = TIM_DIER_UIE;
 80021b6:	2101      	movs	r1, #1
 80021b8:	8181      	strh	r1, [r0, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 80021ba:	8803      	ldrh	r3, [r0, #0]
 80021bc:	430b      	orrs	r3, r1
 80021be:	8003      	strh	r3, [r0, #0]
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <InitClear_Timer+0x38>)
 80021c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021c6:	605a      	str	r2, [r3, #4]
	
	NVIC_EnableIRQ(TIM6_DAC_IRQn);	
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 80021c8:	460a      	mov	r2, r1
 80021ca:	f7ff f993 	bl	80014f4 <TIM_ITConfig>
};
 80021ce:	bd08      	pop	{r3, pc}
 80021d0:	40001000 	.word	0x40001000
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <EXTI1_IRQHandler>:

//STOP KEY-BANANA Interrupt handler
//2 SECTION
void EXTI1_IRQHandler()
{
 80021d8:	b508      	push	{r3, lr}
	//if we are not in wait condition then stop the sequenser
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_1)  && 
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <EXTI1_IRQHandler+0x50>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f013 0f02 	tst.w	r3, #2
 80021e2:	d11d      	bne.n	8002220 <EXTI1_IRQHandler+0x48>
		(gSequencerMode_2 != SEQUENCER_MODE_WAIT && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <EXTI1_IRQHandler+0x54>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_1)  && 
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d018      	beq.n	8002220 <EXTI1_IRQHandler+0x48>
		(gSequencerMode_2 != SEQUENCER_MODE_WAIT && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <EXTI1_IRQHandler+0x54>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d013      	beq.n	8002220 <EXTI1_IRQHandler+0x48>
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <EXTI1_IRQHandler+0x54>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d00e      	beq.n	8002220 <EXTI1_IRQHandler+0x48>
	) {
		gPrevSequencerMode_2 = SEQUENCER_MODE_RUN;
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <EXTI1_IRQHandler+0x58>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
		gSequencerMode_2 = SEQUENCER_MODE_STOP;	
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <EXTI1_IRQHandler+0x54>)
 800220a:	2202      	movs	r2, #2
 800220c:	701a      	strb	r2, [r3, #0]
		
		//Update both
		DisplayUpdateFlags.b.MainDisplay = 1;
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <EXTI1_IRQHandler+0x5c>)
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	f042 0202 	orr.w	r2, r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
	};
	
	EXTI_ClearITPendingBit(EXTI_Line1);
 8002220:	2002      	movs	r0, #2
 8002222:	f7fe ff03 	bl	800102c <EXTI_ClearITPendingBit>
};
 8002226:	bd08      	pop	{r3, pc}
 8002228:	40020400 	.word	0x40020400
 800222c:	200002c2 	.word	0x200002c2
 8002230:	200002be 	.word	0x200002be
 8002234:	200002f0 	.word	0x200002f0

08002238 <SaveSequence>:

/*
	Save current sequence to memory
*/
unsigned char SaveSequence(unsigned char SequenceCell)
{	
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	4604      	mov	r4, r0
	ADCPause();
 800223c:	f7ff fec6 	bl	8001fcc <ADCPause>
	if(!Is_Expander_Present())
 8002240:	f7ff fd22 	bl	8001c88 <Is_Expander_Present>
 8002244:	b1b0      	cbz	r0, 8002274 <SaveSequence+0x3c>
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
	}
	else
	{
		CAT25512_write_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 8002246:	3420      	adds	r4, #32
 8002248:	0264      	lsls	r4, r4, #9
 800224a:	b2a4      	uxth	r4, r4
 800224c:	4d17      	ldr	r5, [pc, #92]	; (80022ac <SaveSequence+0x74>)
 800224e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002252:	4629      	mov	r1, r5
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff fa51 	bl	80016fc <CAT25512_write_block>
		CAT25512_write_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));		
 800225a:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800225e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002262:	18a9      	adds	r1, r5, r2
 8002264:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8002268:	f7ff fa48 	bl	80016fc <CAT25512_write_block>
	}
	mADC_init();
 800226c:	f7ff fe02 	bl	8001e74 <mADC_init>
	return 0;
};
 8002270:	2000      	movs	r0, #0
 8002272:	bd70      	pop	{r4, r5, r6, pc}
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 8002274:	4e0e      	ldr	r6, [pc, #56]	; (80022b0 <SaveSequence+0x78>)
 8002276:	7830      	ldrb	r0, [r6, #0]
 8002278:	b2a4      	uxth	r4, r4
 800227a:	4d0c      	ldr	r5, [pc, #48]	; (80022ac <SaveSequence+0x74>)
 800227c:	fb00 f004 	mul.w	r0, r0, r4
 8002280:	0240      	lsls	r0, r0, #9
 8002282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002286:	4629      	mov	r1, r5
 8002288:	f400 407e 	and.w	r0, r0, #65024	; 0xfe00
 800228c:	f7ff fa36 	bl	80016fc <CAT25512_write_block>
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 8002290:	7830      	ldrb	r0, [r6, #0]
 8002292:	fb00 f004 	mul.w	r0, r0, r4
 8002296:	0240      	lsls	r0, r0, #9
 8002298:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800229c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a0:	18a9      	adds	r1, r5, r2
 80022a2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80022a6:	f7ff fa29 	bl	80016fc <CAT25512_write_block>
 80022aa:	e7df      	b.n	800226c <SaveSequence+0x34>
 80022ac:	200008a4 	.word	0x200008a4
 80022b0:	20000270 	.word	0x20000270

080022b4 <LoadSequence>:

//Load a sequence from cell number SequenceCell
void LoadSequence(unsigned char SequenceCell)
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4604      	mov	r4, r0
	unsigned char cnt;

	ADCPause();
 80022b8:	f7ff fe88 	bl	8001fcc <ADCPause>
	if(!Is_Expander_Present())
 80022bc:	f7ff fce4 	bl	8001c88 <Is_Expander_Present>
 80022c0:	bb38      	cbnz	r0, 8002312 <LoadSequence+0x5e>
	{
		CAT25512_read_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 80022c2:	4e39      	ldr	r6, [pc, #228]	; (80023a8 <LoadSequence+0xf4>)
 80022c4:	7830      	ldrb	r0, [r6, #0]
 80022c6:	b2a4      	uxth	r4, r4
 80022c8:	4d38      	ldr	r5, [pc, #224]	; (80023ac <LoadSequence+0xf8>)
 80022ca:	fb00 f004 	mul.w	r0, r0, r4
 80022ce:	0240      	lsls	r0, r0, #9
 80022d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d4:	4629      	mov	r1, r5
 80022d6:	f400 407e 	and.w	r0, r0, #65024	; 0xfe00
 80022da:	f7ff fa73 	bl	80017c4 <CAT25512_read_block>
		CAT25512_read_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 80022de:	7830      	ldrb	r0, [r6, #0]
 80022e0:	fb00 f004 	mul.w	r0, r0, r4
 80022e4:	0240      	lsls	r0, r0, #9
 80022e6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80022ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ee:	18a9      	adds	r1, r5, r2
 80022f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80022f4:	f7ff fa66 	bl	80017c4 <CAT25512_read_block>
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
	}
	
	//Block sliders scanning while voltages from slider and preset aren't equal
	if (gDipConfig.b.SAVE_V_LEVEL == 1) {
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <LoadSequence+0xfc>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	f013 0f04 	tst.w	r3, #4
 8002300:	d14f      	bne.n	80023a2 <LoadSequence+0xee>
			Steps[1][cnt+16].b.WaitVoltageSlider = 1;
			Steps[1][cnt+16].b.WaitTimeSlider = 1;				
		};		
	};
	
	gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8002302:	2302      	movs	r3, #2
 8002304:	4a2b      	ldr	r2, [pc, #172]	; (80023b4 <LoadSequence+0x100>)
 8002306:	7013      	strb	r3, [r2, #0]
	gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8002308:	4a2b      	ldr	r2, [pc, #172]	; (80023b8 <LoadSequence+0x104>)
 800230a:	7013      	strb	r3, [r2, #0]
	
	mADC_init();
 800230c:	f7ff fdb2 	bl	8001e74 <mADC_init>
};
 8002310:	bd70      	pop	{r4, r5, r6, pc}
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 8002312:	3420      	adds	r4, #32
 8002314:	0264      	lsls	r4, r4, #9
 8002316:	b2a4      	uxth	r4, r4
 8002318:	4d24      	ldr	r5, [pc, #144]	; (80023ac <LoadSequence+0xf8>)
 800231a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800231e:	4629      	mov	r1, r5
 8002320:	4620      	mov	r0, r4
 8002322:	f7ff fa4f 	bl	80017c4 <CAT25512_read_block>
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 8002326:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800232a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800232e:	18a9      	adds	r1, r5, r2
 8002330:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8002334:	f7ff fa46 	bl	80017c4 <CAT25512_read_block>
 8002338:	e7de      	b.n	80022f8 <LoadSequence+0x44>
			Steps[0][cnt].b.WaitVoltageSlider = 1;
 800233a:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <LoadSequence+0xf8>)
 800233c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8002340:	6848      	ldr	r0, [r1, #4]
 8002342:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8002346:	6048      	str	r0, [r1, #4]
			Steps[0][cnt].b.WaitTimeSlider = 1;
 8002348:	6848      	ldr	r0, [r1, #4]
 800234a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800234e:	6048      	str	r0, [r1, #4]
			Steps[1][cnt].b.WaitVoltageSlider = 1;
 8002350:	f102 0120 	add.w	r1, r2, #32
 8002354:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002358:	6848      	ldr	r0, [r1, #4]
 800235a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800235e:	6048      	str	r0, [r1, #4]
			Steps[1][cnt].b.WaitTimeSlider = 1;	
 8002360:	6848      	ldr	r0, [r1, #4]
 8002362:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8002366:	6048      	str	r0, [r1, #4]
			Steps[0][cnt+16].b.WaitVoltageSlider = 1;
 8002368:	f102 0110 	add.w	r1, r2, #16
 800236c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002370:	6848      	ldr	r0, [r1, #4]
 8002372:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8002376:	6048      	str	r0, [r1, #4]
			Steps[0][cnt+16].b.WaitTimeSlider = 1;
 8002378:	6848      	ldr	r0, [r1, #4]
 800237a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800237e:	6048      	str	r0, [r1, #4]
			Steps[1][cnt+16].b.WaitVoltageSlider = 1;
 8002380:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8002384:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800238e:	6059      	str	r1, [r3, #4]
			Steps[1][cnt+16].b.WaitTimeSlider = 1;				
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002396:	6059      	str	r1, [r3, #4]
		for(cnt=0; cnt<16; cnt++)
 8002398:	3201      	adds	r2, #1
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	2a0f      	cmp	r2, #15
 800239e:	d9cc      	bls.n	800233a <LoadSequence+0x86>
 80023a0:	e7af      	b.n	8002302 <LoadSequence+0x4e>
 80023a2:	2200      	movs	r2, #0
 80023a4:	e7fa      	b.n	800239c <LoadSequence+0xe8>
 80023a6:	bf00      	nop
 80023a8:	20000270 	.word	0x20000270
 80023ac:	200008a4 	.word	0x200008a4
 80023b0:	200002e8 	.word	0x200002e8
 80023b4:	200002c1 	.word	0x200002c1
 80023b8:	200002c2 	.word	0x200002c2

080023bc <GetStepWidth>:
	Returns the duration of step number _StepNum in section _Section
*/
	#define EXT_VOLTAGE_STEP_SELECT	1023

unsigned long int GetStepWidth(unsigned char _Section, unsigned char _StepNum)
{
 80023bc:	b082      	sub	sp, #8
	unsigned long int ret_val = 0;
	unsigned long int time_level = 0;
	unsigned char ext_ban_num = 0;

	if (Steps[_Section][_StepNum].b.TimeSource) {
 80023be:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 80023c2:	4b56      	ldr	r3, [pc, #344]	; (800251c <GetStepWidth+0x160>)
 80023c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023ce:	d04d      	beq.n	800246c <GetStepWidth+0xb0>
		
		//Step time is set externally
		ext_ban_num = Steps[_Section][_StepNum].b.TLevel/EXT_VOLTAGE_STEP_SELECT;
 80023d0:	4613      	mov	r3, r2
 80023d2:	4a52      	ldr	r2, [pc, #328]	; (800251c <GetStepWidth+0x160>)
 80023d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80023d8:	f3c2 320b 	ubfx	r2, r2, #12, #12
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <GetStepWidth+0x164>)
 80023de:	fb83 c302 	smull	ip, r3, r3, r2
 80023e2:	4413      	add	r3, r2
 80023e4:	f3c3 2347 	ubfx	r3, r3, #9, #8
		if(ext_ban_num > 3) ext_ban_num = 3;
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d900      	bls.n	80023ee <GetStepWidth+0x32>
 80023ec:	2303      	movs	r3, #3
		
		time_level = AddData[ext_ban_num]*(4095.0f/((float)CalConstants[ext_ban_num]));
 80023ee:	4a4d      	ldr	r2, [pc, #308]	; (8002524 <GetStepWidth+0x168>)
 80023f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023f4:	ee07 2a90 	vmov	s15, r2
 80023f8:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <GetStepWidth+0x16c>)
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	ee07 3a10 	vmov	s14, r3
 8002402:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002406:	ed9f 6a49 	vldr	s12, [pc, #292]	; 800252c <GetStepWidth+0x170>
 800240a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	} else {
		//Step time is set on panel
		time_level = (Steps[_Section][_StepNum].b.TLevel + 1);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_p03 == 1) {
 800241a:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 800241e:	4a3f      	ldr	r2, [pc, #252]	; (800251c <GetStepWidth+0x160>)
 8002420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f013 0f40 	tst.w	r3, #64	; 0x40
 800242a:	d12a      	bne.n	8002482 <GetStepWidth+0xc6>
	unsigned long int ret_val = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	9301      	str	r3, [sp, #4]
		ret_val = (unsigned long int) ((((float) time_level * 112)/4095) +8);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_p3 == 1) {
 8002430:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002434:	4a39      	ldr	r2, [pc, #228]	; (800251c <GetStepWidth+0x160>)
 8002436:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002440:	d132      	bne.n	80024a8 <GetStepWidth+0xec>
		ret_val = (unsigned long int) ((((float) time_level * 1120)/4095) +80);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_3 == 1) {
 8002442:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002446:	4a35      	ldr	r2, [pc, #212]	; (800251c <GetStepWidth+0x160>)
 8002448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002452:	d13c      	bne.n	80024ce <GetStepWidth+0x112>
		ret_val = (unsigned long int) ((((float) time_level * 11200)/4095) +800);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_30 == 1) {
 8002454:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 8002458:	4830      	ldr	r0, [pc, #192]	; (800251c <GetStepWidth+0x160>)
 800245a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800245e:	684b      	ldr	r3, [r1, #4]
 8002460:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002464:	d146      	bne.n	80024f4 <GetStepWidth+0x138>
		ret_val = (unsigned long int) ((((float) time_level * 112000)/4095) +8000);
	};
	
	return ret_val;
};
 8002466:	9801      	ldr	r0, [sp, #4]
 8002468:	b002      	add	sp, #8
 800246a:	4770      	bx	lr
		time_level = (Steps[_Section][_StepNum].b.TLevel + 1);
 800246c:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <GetStepWidth+0x160>)
 8002472:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002476:	f3c3 330b 	ubfx	r3, r3, #12, #12
 800247a:	3301      	adds	r3, #1
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	e7cb      	b.n	800241a <GetStepWidth+0x5e>
		ret_val = (unsigned long int) ((((float) time_level * 112)/4095) +8);
 8002482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002486:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002530 <GetStepWidth+0x174>
 800248a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800248e:	ed9f 6a27 	vldr	s12, [pc, #156]	; 800252c <GetStepWidth+0x170>
 8002492:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002496:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800249a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800249e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80024a2:	ed8d 7a01 	vstr	s14, [sp, #4]
 80024a6:	e7c3      	b.n	8002430 <GetStepWidth+0x74>
		ret_val = (unsigned long int) ((((float) time_level * 1120)/4095) +80);
 80024a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ac:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002534 <GetStepWidth+0x178>
 80024b0:	ee66 6a87 	vmul.f32	s13, s13, s14
 80024b4:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 800252c <GetStepWidth+0x170>
 80024b8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80024bc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002538 <GetStepWidth+0x17c>
 80024c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80024c4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80024c8:	ed8d 7a01 	vstr	s14, [sp, #4]
 80024cc:	e7b9      	b.n	8002442 <GetStepWidth+0x86>
		ret_val = (unsigned long int) ((((float) time_level * 11200)/4095) +800);
 80024ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800253c <GetStepWidth+0x180>
 80024d6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80024da:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800252c <GetStepWidth+0x170>
 80024de:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80024e2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002540 <GetStepWidth+0x184>
 80024e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80024ea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80024ee:	ed8d 7a01 	vstr	s14, [sp, #4]
 80024f2:	e7af      	b.n	8002454 <GetStepWidth+0x98>
		ret_val = (unsigned long int) ((((float) time_level * 112000)/4095) +8000);
 80024f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002544 <GetStepWidth+0x188>
 80024fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002500:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800252c <GetStepWidth+0x170>
 8002504:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002508:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002548 <GetStepWidth+0x18c>
 800250c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002514:	edcd 7a01 	vstr	s15, [sp, #4]
	return ret_val;
 8002518:	e7a5      	b.n	8002466 <GetStepWidth+0xaa>
 800251a:	bf00      	nop
 800251c:	200008a4 	.word	0x200008a4
 8002520:	80200803 	.word	0x80200803
 8002524:	200007f8 	.word	0x200007f8
 8002528:	20000250 	.word	0x20000250
 800252c:	457ff000 	.word	0x457ff000
 8002530:	42e00000 	.word	0x42e00000
 8002534:	448c0000 	.word	0x448c0000
 8002538:	42a00000 	.word	0x42a00000
 800253c:	462f0000 	.word	0x462f0000
 8002540:	44480000 	.word	0x44480000
 8002544:	47dac000 	.word	0x47dac000
 8002548:	45fa0000 	.word	0x45fa0000

0800254c <GetStepVoltage>:
	#define MAX_DAC_VALUE			0xFFF
	#define FULL_RANGE_STEPS	60
	#define QUANTIZE_DIVIDER	MAX_DAC_VALUE/FULL_RANGE_STEPS 
	
unsigned int GetStepVoltage(unsigned char _Section, unsigned char _StepNum)
{
 800254c:	b430      	push	{r4, r5}
	unsigned int ret_val = 0;
	unsigned int voltage_level = 0;
	unsigned char ext_ban_num = 0;

	if (Steps[_Section][_StepNum].b.VoltageSource) {
 800254e:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002552:	4ba0      	ldr	r3, [pc, #640]	; (80027d4 <GetStepVoltage+0x288>)
 8002554:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002558:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800255c:	d051      	beq.n	8002602 <GetStepVoltage+0xb6>
		//Step voltage is set externally
		ext_ban_num = Steps[_Section][_StepNum].b.VLevel/EXT_VOLTAGE_STEP_SELECT;
 800255e:	4613      	mov	r3, r2
 8002560:	4a9c      	ldr	r2, [pc, #624]	; (80027d4 <GetStepVoltage+0x288>)
 8002562:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002566:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800256a:	4b9b      	ldr	r3, [pc, #620]	; (80027d8 <GetStepVoltage+0x28c>)
 800256c:	fb83 4302 	smull	r4, r3, r3, r2
 8002570:	4413      	add	r3, r2
 8002572:	f3c3 2347 	ubfx	r3, r3, #9, #8
		if(ext_ban_num > 3) ext_ban_num = 3;
 8002576:	2b03      	cmp	r3, #3
 8002578:	d900      	bls.n	800257c <GetStepVoltage+0x30>
 800257a:	2303      	movs	r3, #3
		
		voltage_level = AddData[ext_ban_num]*(4095.0f/((float)CalConstants[ext_ban_num]));
 800257c:	4a97      	ldr	r2, [pc, #604]	; (80027dc <GetStepVoltage+0x290>)
 800257e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002582:	ee07 2a90 	vmov	s15, r2
 8002586:	4a96      	ldr	r2, [pc, #600]	; (80027e0 <GetStepVoltage+0x294>)
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	ee07 3a10 	vmov	s14, r3
 8002590:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002594:	ed9f 6a93 	vldr	s12, [pc, #588]	; 80027e4 <GetStepVoltage+0x298>
 8002598:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800259c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	} else {
		//Step voltage is set on panel
		voltage_level = Steps[_Section][_StepNum].b.VLevel;
	};
	
	if(voltage_level > 4095) voltage_level = 4095;
 80025a8:	ee17 3a90 	vmov	r3, s15
 80025ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b0:	d301      	bcc.n	80025b6 <GetStepVoltage+0x6a>
 80025b2:	eddf 7a8d 	vldr	s15, [pc, #564]	; 80027e8 <GetStepVoltage+0x29c>

	if (Steps[_Section][_StepNum].b.FullRange) {		
 80025b6:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 80025ba:	4a86      	ldr	r2, [pc, #536]	; (80027d4 <GetStepVoltage+0x288>)
 80025bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025c0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80025c4:	d027      	beq.n	8002616 <GetStepVoltage+0xca>
		ret_val = voltage_level;
		// if quantization mode is on
		if (Steps[_Section][_StepNum].b.Quantize) {
 80025c6:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 80025ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80025d2:	f000 80fc 	beq.w	80027ce <GetStepVoltage+0x282>
		//Calculate the quantized voltage
			ret_val =  (ret_val / (12*divider)) ;
 80025d6:	4b85      	ldr	r3, [pc, #532]	; (80027ec <GetStepVoltage+0x2a0>)
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80025e0:	ee67 6a26 	vmul.f32	s13, s14, s13
 80025e4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80025e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80025ec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
			ret_val = ret_val * (12*divider);
 80025f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80025f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80025f8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80025fc:	ee17 3a10 	vmov	r3, s14
 8002600:	e00a      	b.n	8002618 <GetStepVoltage+0xcc>
		voltage_level = Steps[_Section][_StepNum].b.VLevel;
 8002602:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002606:	4a73      	ldr	r2, [pc, #460]	; (80027d4 <GetStepVoltage+0x288>)
 8002608:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800260c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	e7c8      	b.n	80025a8 <GetStepVoltage+0x5c>
	unsigned int ret_val = 0;
 8002616:	2300      	movs	r3, #0
		};
	};
	
	if (Steps[_Section][_StepNum].b.Voltage0) {	
 8002618:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800261c:	4c6d      	ldr	r4, [pc, #436]	; (80027d4 <GetStepVoltage+0x288>)
 800261e:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002622:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002626:	d01f      	beq.n	8002668 <GetStepVoltage+0x11c>
		ret_val = (voltage_level/divider);
 8002628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800262c:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <GetStepVoltage+0x2a0>)
 800262e:	ed93 6a00 	vldr	s12, [r3]
 8002632:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8002636:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800263a:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 800263e:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002642:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002646:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800264a:	d00d      	beq.n	8002668 <GetStepVoltage+0x11c>

			ret_val =  (ret_val / (offset/12)) ;
 800264c:	4d68      	ldr	r5, [pc, #416]	; (80027f0 <GetStepVoltage+0x2a4>)
 800264e:	682a      	ldr	r2, [r5, #0]
 8002650:	4c68      	ldr	r4, [pc, #416]	; (80027f4 <GetStepVoltage+0x2a8>)
 8002652:	fba4 c202 	umull	ip, r2, r4, r2
 8002656:	08d2      	lsrs	r2, r2, #3
 8002658:	fbb3 f3f2 	udiv	r3, r3, r2
			ret_val = ret_val * (offset/12);
 800265c:	682a      	ldr	r2, [r5, #0]
 800265e:	fba4 4202 	umull	r4, r2, r4, r2
 8002662:	08d2      	lsrs	r2, r2, #3
 8002664:	fb03 f302 	mul.w	r3, r3, r2
		};
	};
	
	if (Steps[_Section][_StepNum].b.Voltage2) {		
 8002668:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800266c:	4c59      	ldr	r4, [pc, #356]	; (80027d4 <GetStepVoltage+0x288>)
 800266e:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002672:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002676:	d022      	beq.n	80026be <GetStepVoltage+0x172>
		ret_val = (voltage_level/divider);
 8002678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800267c:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <GetStepVoltage+0x2a0>)
 800267e:	ed93 6a00 	vldr	s12, [r3]
 8002682:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002686:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800268a:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 800268e:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002692:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002696:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800269a:	d00d      	beq.n	80026b8 <GetStepVoltage+0x16c>
			ret_val =  (ret_val / (offset/12)) ;
 800269c:	4a54      	ldr	r2, [pc, #336]	; (80027f0 <GetStepVoltage+0x2a4>)
 800269e:	6814      	ldr	r4, [r2, #0]
 80026a0:	4d54      	ldr	r5, [pc, #336]	; (80027f4 <GetStepVoltage+0x2a8>)
 80026a2:	fba5 c404 	umull	ip, r4, r5, r4
 80026a6:	08e4      	lsrs	r4, r4, #3
 80026a8:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fba5 4202 	umull	r4, r2, r5, r2
 80026b2:	08d2      	lsrs	r2, r2, #3
 80026b4:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset;
 80026b8:	4a4d      	ldr	r2, [pc, #308]	; (80027f0 <GetStepVoltage+0x2a4>)
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4413      	add	r3, r2
	};
	
	if (Steps[_Section][_StepNum].b.Voltage4) {		
 80026be:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 80026c2:	4c44      	ldr	r4, [pc, #272]	; (80027d4 <GetStepVoltage+0x288>)
 80026c4:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80026c8:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 80026cc:	d023      	beq.n	8002716 <GetStepVoltage+0x1ca>
		ret_val = (voltage_level/divider);
 80026ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <GetStepVoltage+0x2a0>)
 80026d4:	ed93 6a00 	vldr	s12, [r3]
 80026d8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80026dc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80026e0:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 80026e4:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 80026e8:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80026ec:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80026f0:	d00d      	beq.n	800270e <GetStepVoltage+0x1c2>
			ret_val =  (ret_val / (offset/12)) ;
 80026f2:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <GetStepVoltage+0x2a4>)
 80026f4:	6814      	ldr	r4, [r2, #0]
 80026f6:	4d3f      	ldr	r5, [pc, #252]	; (80027f4 <GetStepVoltage+0x2a8>)
 80026f8:	fba5 c404 	umull	ip, r4, r5, r4
 80026fc:	08e4      	lsrs	r4, r4, #3
 80026fe:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	fba5 4202 	umull	r4, r2, r5, r2
 8002708:	08d2      	lsrs	r2, r2, #3
 800270a:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset*2;
 800270e:	4a38      	ldr	r2, [pc, #224]	; (80027f0 <GetStepVoltage+0x2a4>)
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	};
	
	if (Steps[_Section][_StepNum].b.Voltage6) {		
 8002716:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800271a:	4c2e      	ldr	r4, [pc, #184]	; (80027d4 <GetStepVoltage+0x288>)
 800271c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002720:	2a00      	cmp	r2, #0
 8002722:	da24      	bge.n	800276e <GetStepVoltage+0x222>
		ret_val = (voltage_level/divider);
 8002724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <GetStepVoltage+0x2a0>)
 800272a:	ed93 6a00 	vldr	s12, [r3]
 800272e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002732:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002736:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 800273a:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800273e:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002742:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002746:	d00d      	beq.n	8002764 <GetStepVoltage+0x218>
			ret_val =  (ret_val / (offset/12)) ;
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <GetStepVoltage+0x2a4>)
 800274a:	6814      	ldr	r4, [r2, #0]
 800274c:	4d29      	ldr	r5, [pc, #164]	; (80027f4 <GetStepVoltage+0x2a8>)
 800274e:	fba5 c404 	umull	ip, r4, r5, r4
 8002752:	08e4      	lsrs	r4, r4, #3
 8002754:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	fba5 4202 	umull	r4, r2, r5, r2
 800275e:	08d2      	lsrs	r2, r2, #3
 8002760:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset*3;
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <GetStepVoltage+0x2a4>)
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800276c:	4413      	add	r3, r2
	};
	
	if (Steps[_Section][_StepNum].b.Voltage8) {		
 800276e:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002772:	4c18      	ldr	r4, [pc, #96]	; (80027d4 <GetStepVoltage+0x288>)
 8002774:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002778:	6852      	ldr	r2, [r2, #4]
 800277a:	f012 0f01 	tst.w	r2, #1
 800277e:	d023      	beq.n	80027c8 <GetStepVoltage+0x27c>
		ret_val = (voltage_level/divider);
 8002780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <GetStepVoltage+0x2a0>)
 8002786:	edd3 6a00 	vldr	s13, [r3]
 800278a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800278e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002792:	ee17 3a90 	vmov	r3, s15
		if (Steps[_Section][_StepNum].b.Quantize) {
 8002796:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 800279a:	f854 2031 	ldr.w	r2, [r4, r1, lsl #3]
 800279e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80027a2:	d00d      	beq.n	80027c0 <GetStepVoltage+0x274>
			ret_val =  (ret_val / (offset/12)) ;
 80027a4:	4812      	ldr	r0, [pc, #72]	; (80027f0 <GetStepVoltage+0x2a4>)
 80027a6:	6802      	ldr	r2, [r0, #0]
 80027a8:	4912      	ldr	r1, [pc, #72]	; (80027f4 <GetStepVoltage+0x2a8>)
 80027aa:	fba1 4202 	umull	r4, r2, r1, r2
 80027ae:	08d2      	lsrs	r2, r2, #3
 80027b0:	fbb3 f3f2 	udiv	r3, r3, r2
			ret_val = ret_val * (offset/12);
 80027b4:	6800      	ldr	r0, [r0, #0]
 80027b6:	fba1 2000 	umull	r2, r0, r1, r0
 80027ba:	08c0      	lsrs	r0, r0, #3
 80027bc:	fb03 f300 	mul.w	r3, r3, r0
		};
		ret_val +=offset*4;
 80027c0:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <GetStepVoltage+0x2a4>)
 80027c2:	6810      	ldr	r0, [r2, #0]
 80027c4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	};

	return ret_val;
};
 80027c8:	4618      	mov	r0, r3
 80027ca:	bc30      	pop	{r4, r5}
 80027cc:	4770      	bx	lr
		ret_val = voltage_level;
 80027ce:	ee17 3a90 	vmov	r3, s15
 80027d2:	e721      	b.n	8002618 <GetStepVoltage+0xcc>
 80027d4:	200008a4 	.word	0x200008a4
 80027d8:	80200803 	.word	0x80200803
 80027dc:	200007f8 	.word	0x200007f8
 80027e0:	20000250 	.word	0x20000250
 80027e4:	457ff000 	.word	0x457ff000
 80027e8:	00000fff 	.word	0x00000fff
 80027ec:	20000898 	.word	0x20000898
 80027f0:	200008a0 	.word	0x200008a0
 80027f4:	aaaaaaab 	.word	0xaaaaaaab

080027f8 <GetNextStep>:
/*
	Calculate the number of next step
	_StepNum - current step number in section _Section
*/
unsigned char GetNextStep(unsigned char _Section, unsigned char _StepNum)
{
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fa:	4605      	mov	r5, r0
 80027fc:	460c      	mov	r4, r1
	unsigned char ret_val = 0;
	unsigned char isLastStage = 0;
	unsigned char tmp=0;
	unsigned char max_step;

	if(Is_Expander_Present()) max_step = 31;
 80027fe:	f7ff fa43 	bl	8001c88 <Is_Expander_Present>
 8002802:	b918      	cbnz	r0, 800280c <GetNextStep+0x14>
	else 
	{
		max_step = 15;
		if(_StepNum > 15) return 0;
 8002804:	2c0f      	cmp	r4, #15
 8002806:	d842      	bhi.n	800288e <GetNextStep+0x96>
		max_step = 15;
 8002808:	210f      	movs	r1, #15
 800280a:	e000      	b.n	800280e <GetNextStep+0x16>
	if(Is_Expander_Present()) max_step = 31;
 800280c:	211f      	movs	r1, #31
	}
	
	isLastStage = Steps[_Section][_StepNum].b.CycleLast;
 800280e:	462e      	mov	r6, r5
 8002810:	4627      	mov	r7, r4
 8002812:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <GetNextStep+0xa0>)
 8002818:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800281c:	6868      	ldr	r0, [r5, #4]
 800281e:	f3c0 1040 	ubfx	r0, r0, #5, #1
	
	if (isLastStage != 0) {      
 8002822:	bb78      	cbnz	r0, 8002884 <GetNextStep+0x8c>
	isLastStage = Steps[_Section][_StepNum].b.CycleLast;
 8002824:	4602      	mov	r2, r0
			  isLastStage = 0;
			};
		};
    } 

    if (isLastStage == 0) {		
 8002826:	bb9a      	cbnz	r2, 8002890 <GetNextStep+0x98>
		if ( _StepNum >= max_step ) {
 8002828:	42a1      	cmp	r1, r4
 800282a:	d932      	bls.n	8002892 <GetNextStep+0x9a>
			ret_val = 0;
		} else {
			ret_val = _StepNum+1;
 800282c:	3401      	adds	r4, #1
 800282e:	b2e0      	uxtb	r0, r4
 8002830:	e02e      	b.n	8002890 <GetNextStep+0x98>
			  if (Steps[_Section][max_step-(tmp-_StepNum)].b.CycleFirst) {
 8002832:	1bda      	subs	r2, r3, r7
 8002834:	1a8a      	subs	r2, r1, r2
 8002836:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 800283a:	4d17      	ldr	r5, [pc, #92]	; (8002898 <GetNextStep+0xa0>)
 800283c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002840:	6852      	ldr	r2, [r2, #4]
 8002842:	f012 0f10 	tst.w	r2, #16
 8002846:	d115      	bne.n	8002874 <GetNextStep+0x7c>
			if (tmp == max_step) {
 8002848:	428b      	cmp	r3, r1
 800284a:	d019      	beq.n	8002880 <GetNextStep+0x88>
		for(tmp = 0; tmp <= max_step; tmp++)
 800284c:	3301      	adds	r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	428b      	cmp	r3, r1
 8002852:	d819      	bhi.n	8002888 <GetNextStep+0x90>
			if (tmp<=_StepNum) {
 8002854:	42a3      	cmp	r3, r4
 8002856:	d8ec      	bhi.n	8002832 <GetNextStep+0x3a>
			  if (Steps[_Section][_StepNum-tmp].b.CycleFirst) {
 8002858:	1afa      	subs	r2, r7, r3
 800285a:	eb02 1546 	add.w	r5, r2, r6, lsl #5
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <GetNextStep+0xa0>)
 8002860:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8002864:	6852      	ldr	r2, [r2, #4]
 8002866:	f012 0f10 	tst.w	r2, #16
 800286a:	d0ed      	beq.n	8002848 <GetNextStep+0x50>
			    ret_val = _StepNum-tmp;
 800286c:	1ae3      	subs	r3, r4, r3
			    break;
 800286e:	4602      	mov	r2, r0
			    ret_val = _StepNum-tmp;
 8002870:	b2d8      	uxtb	r0, r3
			    break;
 8002872:	e7d8      	b.n	8002826 <GetNextStep+0x2e>
			    ret_val = max_step-(tmp-_StepNum);
 8002874:	1ae3      	subs	r3, r4, r3
 8002876:	fa51 f383 	uxtab	r3, r1, r3
			    break;
 800287a:	4602      	mov	r2, r0
			    ret_val = max_step-(tmp-_StepNum);
 800287c:	b2d8      	uxtb	r0, r3
			    break;
 800287e:	e7d2      	b.n	8002826 <GetNextStep+0x2e>
			  isLastStage = 0;
 8002880:	2000      	movs	r0, #0
 8002882:	e7e3      	b.n	800284c <GetNextStep+0x54>
		for(tmp = 0; tmp <= max_step; tmp++)
 8002884:	2300      	movs	r3, #0
 8002886:	e7e3      	b.n	8002850 <GetNextStep+0x58>
 8002888:	4602      	mov	r2, r0
	unsigned char ret_val = 0;
 800288a:	2000      	movs	r0, #0
 800288c:	e7cb      	b.n	8002826 <GetNextStep+0x2e>
		if(_StepNum > 15) return 0;
 800288e:	2000      	movs	r0, #0
	};
	/* ENDOF: Ã�â€¢Ã‘ï¿½Ã�Â»Ã�Â¸ Ã‘Ë†Ã�Â°Ã�Â³ Ã�Â·Ã�Â°Ã�ÂºÃ�Â¾Ã�Â½Ã‘â€¡Ã�Â¸Ã�Â»Ã‘ï¿½Ã‘ï¿½ - Ã�Â¿Ã�ÂµÃ‘â‚¬Ã�ÂµÃ‘â€¦Ã�Â¾Ã�Â´Ã�Â¸Ã�Â¼ Ã�Â½Ã�Â° Ã‘ï¿½Ã�Â»Ã�ÂµÃ�Â´Ã‘Æ’Ã‘Å½Ã‘â€°Ã�Â¸Ã�Â¹ */

    //printf("GetNextStepReturnValue: %i \n", ret_val);
    return ret_val;
};
 8002890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ret_val = 0;
 8002892:	4610      	mov	r0, r2
 8002894:	e7fc      	b.n	8002890 <GetNextStep+0x98>
 8002896:	bf00      	nop
 8002898:	200008a4 	.word	0x200008a4

0800289c <EXTI9_5_IRQHandler>:
{
 800289c:	b530      	push	{r4, r5, lr}
 800289e:	b083      	sub	sp, #12
	if (EXTI->PR & (1<<8)) {	 
 80028a0:	4bb3      	ldr	r3, [pc, #716]	; (8002b70 <EXTI9_5_IRQHandler+0x2d4>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80028a8:	f000 80af 	beq.w	8002a0a <EXTI9_5_IRQHandler+0x16e>
		gPrevSequencerMode_1 = gSequencerMode_1;
 80028ac:	4ab1      	ldr	r2, [pc, #708]	; (8002b74 <EXTI9_5_IRQHandler+0x2d8>)
 80028ae:	7813      	ldrb	r3, [r2, #0]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	49b1      	ldr	r1, [pc, #708]	; (8002b78 <EXTI9_5_IRQHandler+0x2dc>)
 80028b4:	700b      	strb	r3, [r1, #0]
		if((gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z) && (gSequencerMode_1 != SEQUENCER_MODE_WAIT) && (gSequencerMode_1 != SEQUENCER_MODE_RUN))
 80028b6:	7813      	ldrb	r3, [r2, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	f000 8096 	beq.w	80029ec <EXTI9_5_IRQHandler+0x150>
 80028c0:	7813      	ldrb	r3, [r2, #0]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	f000 8091 	beq.w	80029ec <EXTI9_5_IRQHandler+0x150>
 80028ca:	7813      	ldrb	r3, [r2, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	f000 808c 	beq.w	80029ec <EXTI9_5_IRQHandler+0x150>
 80028d4:	7813      	ldrb	r3, [r2, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8088 	beq.w	80029ec <EXTI9_5_IRQHandler+0x150>
			if (Steps[0][gSequenceStepNumber_1].b.CycleLast)
 80028dc:	4ba7      	ldr	r3, [pc, #668]	; (8002b7c <EXTI9_5_IRQHandler+0x2e0>)
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	4ba7      	ldr	r3, [pc, #668]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 80028e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f013 0f20 	tst.w	r3, #32
 80028ec:	d044      	beq.n	8002978 <EXTI9_5_IRQHandler+0xdc>
					gSequencerMode_1 = SEQUENCER_MODE_RUN;
 80028ee:	4da1      	ldr	r5, [pc, #644]	; (8002b74 <EXTI9_5_IRQHandler+0x2d8>)
 80028f0:	2000      	movs	r0, #0
 80028f2:	7028      	strb	r0, [r5, #0]
					gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 80028f4:	4ca1      	ldr	r4, [pc, #644]	; (8002b7c <EXTI9_5_IRQHandler+0x2e0>)
 80028f6:	7821      	ldrb	r1, [r4, #0]
 80028f8:	f7ff ff7e 	bl	80027f8 <GetNextStep>
 80028fc:	7020      	strb	r0, [r4, #0]
					PULSE_LED_I_ALL_ON;
 80028fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002902:	48a0      	ldr	r0, [pc, #640]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 8002904:	f7fe fbef 	bl	80010e6 <GPIO_ResetBits>
					PulseStatus;
 8002908:	7822      	ldrb	r2, [r4, #0]
 800290a:	782b      	ldrb	r3, [r5, #0]
 800290c:	499a      	ldr	r1, [pc, #616]	; (8002b78 <EXTI9_5_IRQHandler+0x2dc>)
 800290e:	7808      	ldrb	r0, [r1, #0]
 8002910:	7821      	ldrb	r1, [r4, #0]
 8002912:	4d9b      	ldr	r5, [pc, #620]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 8002914:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002918:	6849      	ldr	r1, [r1, #4]
 800291a:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 800291e:	9101      	str	r1, [sp, #4]
 8002920:	9000      	str	r0, [sp, #0]
 8002922:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8002926:	4898      	ldr	r0, [pc, #608]	; (8002b88 <EXTI9_5_IRQHandler+0x2ec>)
 8002928:	f003 fec3 	bl	80066b2 <iprintf>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 800292c:	7823      	ldrb	r3, [r4, #0]
 800292e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8002932:	686b      	ldr	r3, [r5, #4]
 8002934:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002938:	d112      	bne.n	8002960 <EXTI9_5_IRQHandler+0xc4>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 800293a:	4b90      	ldr	r3, [pc, #576]	; (8002b7c <EXTI9_5_IRQHandler+0x2e0>)
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	4b90      	ldr	r3, [pc, #576]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 8002940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800294a:	d10f      	bne.n	800296c <EXTI9_5_IRQHandler+0xd0>
						TIM_Cmd(TIM14, ENABLE);
 800294c:	4c8f      	ldr	r4, [pc, #572]	; (8002b8c <EXTI9_5_IRQHandler+0x2f0>)
 800294e:	2101      	movs	r1, #1
 8002950:	4620      	mov	r0, r4
 8002952:	f7fe fdaf 	bl	80014b4 <TIM_Cmd>
						TIM_SetCounter(TIM14, 0x00);
 8002956:	2100      	movs	r1, #0
 8002958:	4620      	mov	r0, r4
 800295a:	f7fe fd9c 	bl	8001496 <TIM_SetCounter>
						return;
 800295e:	e1f3      	b.n	8002d48 <EXTI9_5_IRQHandler+0x4ac>
							PULSE_LED_I_1_ON;
 8002960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002964:	4887      	ldr	r0, [pc, #540]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 8002966:	f7fe fbbe 	bl	80010e6 <GPIO_ResetBits>
 800296a:	e7e6      	b.n	800293a <EXTI9_5_IRQHandler+0x9e>
							PULSE_LED_I_2_ON;
 800296c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002970:	4884      	ldr	r0, [pc, #528]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 8002972:	f7fe fbb8 	bl	80010e6 <GPIO_ResetBits>
 8002976:	e7e9      	b.n	800294c <EXTI9_5_IRQHandler+0xb0>
			gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8002978:	4d7e      	ldr	r5, [pc, #504]	; (8002b74 <EXTI9_5_IRQHandler+0x2d8>)
 800297a:	2000      	movs	r0, #0
 800297c:	7028      	strb	r0, [r5, #0]
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 800297e:	4c7f      	ldr	r4, [pc, #508]	; (8002b7c <EXTI9_5_IRQHandler+0x2e0>)
 8002980:	7821      	ldrb	r1, [r4, #0]
 8002982:	f7ff ff39 	bl	80027f8 <GetNextStep>
 8002986:	7020      	strb	r0, [r4, #0]
			PULSE_LED_I_ALL_ON;
 8002988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800298c:	487d      	ldr	r0, [pc, #500]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 800298e:	f7fe fbaa 	bl	80010e6 <GPIO_ResetBits>
			PulseStatus;
 8002992:	7822      	ldrb	r2, [r4, #0]
 8002994:	782b      	ldrb	r3, [r5, #0]
 8002996:	4978      	ldr	r1, [pc, #480]	; (8002b78 <EXTI9_5_IRQHandler+0x2dc>)
 8002998:	7808      	ldrb	r0, [r1, #0]
 800299a:	7821      	ldrb	r1, [r4, #0]
 800299c:	4d78      	ldr	r5, [pc, #480]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 800299e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80029a2:	6849      	ldr	r1, [r1, #4]
 80029a4:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 80029a8:	9101      	str	r1, [sp, #4]
 80029aa:	9000      	str	r0, [sp, #0]
 80029ac:	f240 216d 	movw	r1, #621	; 0x26d
 80029b0:	4875      	ldr	r0, [pc, #468]	; (8002b88 <EXTI9_5_IRQHandler+0x2ec>)
 80029b2:	f003 fe7e 	bl	80066b2 <iprintf>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 80029b6:	7823      	ldrb	r3, [r4, #0]
 80029b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80029bc:	686b      	ldr	r3, [r5, #4]
 80029be:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80029c2:	f040 808a 	bne.w	8002ada <EXTI9_5_IRQHandler+0x23e>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 80029c6:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <EXTI9_5_IRQHandler+0x2e0>)
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 80029cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80029d6:	f040 8086 	bne.w	8002ae6 <EXTI9_5_IRQHandler+0x24a>
						TIM_Cmd(TIM14, ENABLE);
 80029da:	4c6c      	ldr	r4, [pc, #432]	; (8002b8c <EXTI9_5_IRQHandler+0x2f0>)
 80029dc:	2101      	movs	r1, #1
 80029de:	4620      	mov	r0, r4
 80029e0:	f7fe fd68 	bl	80014b4 <TIM_Cmd>
						TIM_SetCounter(TIM14, 0x00);
 80029e4:	2100      	movs	r1, #0
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7fe fd55 	bl	8001496 <TIM_SetCounter>
		if(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z)
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <EXTI9_5_IRQHandler+0x2d8>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d07d      	beq.n	8002af2 <EXTI9_5_IRQHandler+0x256>
			if (gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)
 80029f6:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <EXTI9_5_IRQHandler+0x2d8>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	f000 80ae 	beq.w	8002b5e <EXTI9_5_IRQHandler+0x2c2>
		EXTI_ClearITPendingBit(EXTI_Line8);
 8002a02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a06:	f7fe fb11 	bl	800102c <EXTI_ClearITPendingBit>
	 if (EXTI->PR & (1<<6)) {
 8002a0a:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <EXTI9_5_IRQHandler+0x2d4>)
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a12:	f000 811b 	beq.w	8002c4c <EXTI9_5_IRQHandler+0x3b0>
		 gPrevSequencerMode_2 = gSequencerMode_2;
 8002a16:	4a5e      	ldr	r2, [pc, #376]	; (8002b90 <EXTI9_5_IRQHandler+0x2f4>)
 8002a18:	7813      	ldrb	r3, [r2, #0]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	495d      	ldr	r1, [pc, #372]	; (8002b94 <EXTI9_5_IRQHandler+0x2f8>)
 8002a1e:	700b      	strb	r3, [r1, #0]
		 if((gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z) && (gSequencerMode_2 != SEQUENCER_MODE_WAIT) && (gSequencerMode_2 != SEQUENCER_MODE_RUN))
 8002a20:	7813      	ldrb	r3, [r2, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	f000 8102 	beq.w	8002c2e <EXTI9_5_IRQHandler+0x392>
 8002a2a:	7813      	ldrb	r3, [r2, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	f000 80fd 	beq.w	8002c2e <EXTI9_5_IRQHandler+0x392>
 8002a34:	7813      	ldrb	r3, [r2, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	f000 80f8 	beq.w	8002c2e <EXTI9_5_IRQHandler+0x392>
 8002a3e:	7813      	ldrb	r3, [r2, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80f4 	beq.w	8002c2e <EXTI9_5_IRQHandler+0x392>
			 if (Steps[1][gSequenceStepNumber_2].b.CycleLast)
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <EXTI9_5_IRQHandler+0x2fc>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	f103 0220 	add.w	r2, r3, #32
 8002a4e:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 8002a50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f013 0f20 	tst.w	r3, #32
 8002a5a:	f000 80a9 	beq.w	8002bb0 <EXTI9_5_IRQHandler+0x314>
											 gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8002a5e:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <EXTI9_5_IRQHandler+0x2f4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
											gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8002a64:	4d4c      	ldr	r5, [pc, #304]	; (8002b98 <EXTI9_5_IRQHandler+0x2fc>)
 8002a66:	7829      	ldrb	r1, [r5, #0]
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7ff fec5 	bl	80027f8 <GetNextStep>
 8002a6e:	7028      	strb	r0, [r5, #0]
											 PULSE_LED_II_ALL_ON;
 8002a70:	2104      	movs	r1, #4
 8002a72:	484a      	ldr	r0, [pc, #296]	; (8002b9c <EXTI9_5_IRQHandler+0x300>)
 8002a74:	f7fe fb37 	bl	80010e6 <GPIO_ResetBits>
											 PulseStatus;
 8002a78:	4940      	ldr	r1, [pc, #256]	; (8002b7c <EXTI9_5_IRQHandler+0x2e0>)
 8002a7a:	780a      	ldrb	r2, [r1, #0]
 8002a7c:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <EXTI9_5_IRQHandler+0x2d8>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	483d      	ldr	r0, [pc, #244]	; (8002b78 <EXTI9_5_IRQHandler+0x2dc>)
 8002a82:	7800      	ldrb	r0, [r0, #0]
 8002a84:	7809      	ldrb	r1, [r1, #0]
 8002a86:	4c3e      	ldr	r4, [pc, #248]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 8002a88:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002a8c:	6849      	ldr	r1, [r1, #4]
 8002a8e:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 8002a92:	9101      	str	r1, [sp, #4]
 8002a94:	9000      	str	r0, [sp, #0]
 8002a96:	f240 21a5 	movw	r1, #677	; 0x2a5
 8002a9a:	483b      	ldr	r0, [pc, #236]	; (8002b88 <EXTI9_5_IRQHandler+0x2ec>)
 8002a9c:	f003 fe09 	bl	80066b2 <iprintf>
											if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8002aa0:	782b      	ldrb	r3, [r5, #0]
 8002aa2:	3320      	adds	r3, #32
 8002aa4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8002aa8:	6863      	ldr	r3, [r4, #4]
 8002aaa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002aae:	d159      	bne.n	8002b64 <EXTI9_5_IRQHandler+0x2c8>
											if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8002ab0:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <EXTI9_5_IRQHandler+0x2fc>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f103 0220 	add.w	r2, r3, #32
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 8002aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002ac4:	d16e      	bne.n	8002ba4 <EXTI9_5_IRQHandler+0x308>
											TIM_Cmd(TIM8, ENABLE);
 8002ac6:	4c36      	ldr	r4, [pc, #216]	; (8002ba0 <EXTI9_5_IRQHandler+0x304>)
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4620      	mov	r0, r4
 8002acc:	f7fe fcf2 	bl	80014b4 <TIM_Cmd>
											TIM_SetCounter(TIM8, 0x00);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f7fe fcdf 	bl	8001496 <TIM_SetCounter>
											return;
 8002ad8:	e136      	b.n	8002d48 <EXTI9_5_IRQHandler+0x4ac>
							PULSE_LED_I_1_ON;
 8002ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ade:	4829      	ldr	r0, [pc, #164]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 8002ae0:	f7fe fb01 	bl	80010e6 <GPIO_ResetBits>
 8002ae4:	e76f      	b.n	80029c6 <EXTI9_5_IRQHandler+0x12a>
							PULSE_LED_I_2_ON;
 8002ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aea:	4826      	ldr	r0, [pc, #152]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 8002aec:	f7fe fafb 	bl	80010e6 <GPIO_ResetBits>
 8002af0:	e773      	b.n	80029da <EXTI9_5_IRQHandler+0x13e>
			InitStart_1_SignalTimer();
 8002af2:	f7ff fb1b 	bl	800212c <InitStart_1_SignalTimer>
			gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8002af6:	2000      	movs	r0, #0
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <EXTI9_5_IRQHandler+0x2d8>)
 8002afa:	7018      	strb	r0, [r3, #0]
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8002afc:	4c1f      	ldr	r4, [pc, #124]	; (8002b7c <EXTI9_5_IRQHandler+0x2e0>)
 8002afe:	7821      	ldrb	r1, [r4, #0]
 8002b00:	f7ff fe7a 	bl	80027f8 <GetNextStep>
 8002b04:	7020      	strb	r0, [r4, #0]
			PULSE_LED_I_ALL_ON;
 8002b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b0a:	481e      	ldr	r0, [pc, #120]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 8002b0c:	f7fe faeb 	bl	80010e6 <GPIO_ResetBits>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002b10:	7822      	ldrb	r2, [r4, #0]
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 8002b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002b1e:	d112      	bne.n	8002b46 <EXTI9_5_IRQHandler+0x2aa>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <EXTI9_5_IRQHandler+0x2e0>)
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <EXTI9_5_IRQHandler+0x2e4>)
 8002b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002b30:	d10f      	bne.n	8002b52 <EXTI9_5_IRQHandler+0x2b6>
			TIM_Cmd(TIM14, ENABLE);
 8002b32:	4c16      	ldr	r4, [pc, #88]	; (8002b8c <EXTI9_5_IRQHandler+0x2f0>)
 8002b34:	2101      	movs	r1, #1
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7fe fcbc 	bl	80014b4 <TIM_Cmd>
			TIM_SetCounter(TIM14, 0x00);
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe fca9 	bl	8001496 <TIM_SetCounter>
 8002b44:	e757      	b.n	80029f6 <EXTI9_5_IRQHandler+0x15a>
				PULSE_LED_I_1_ON;
 8002b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b4a:	480e      	ldr	r0, [pc, #56]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 8002b4c:	f7fe facb 	bl	80010e6 <GPIO_ResetBits>
 8002b50:	e7e6      	b.n	8002b20 <EXTI9_5_IRQHandler+0x284>
				PULSE_LED_I_2_ON;
 8002b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b56:	480b      	ldr	r0, [pc, #44]	; (8002b84 <EXTI9_5_IRQHandler+0x2e8>)
 8002b58:	f7fe fac5 	bl	80010e6 <GPIO_ResetBits>
 8002b5c:	e7e9      	b.n	8002b32 <EXTI9_5_IRQHandler+0x296>
				InitStart_1_SignalTimer();
 8002b5e:	f7ff fae5 	bl	800212c <InitStart_1_SignalTimer>
 8002b62:	e74e      	b.n	8002a02 <EXTI9_5_IRQHandler+0x166>
												PULSE_LED_II_1_ON;
 8002b64:	2108      	movs	r1, #8
 8002b66:	480d      	ldr	r0, [pc, #52]	; (8002b9c <EXTI9_5_IRQHandler+0x300>)
 8002b68:	f7fe fabd 	bl	80010e6 <GPIO_ResetBits>
 8002b6c:	e7a0      	b.n	8002ab0 <EXTI9_5_IRQHandler+0x214>
 8002b6e:	bf00      	nop
 8002b70:	40013c00 	.word	0x40013c00
 8002b74:	200002c1 	.word	0x200002c1
 8002b78:	200002bd 	.word	0x200002bd
 8002b7c:	200002bf 	.word	0x200002bf
 8002b80:	200008a4 	.word	0x200008a4
 8002b84:	40020400 	.word	0x40020400
 8002b88:	08006790 	.word	0x08006790
 8002b8c:	40002000 	.word	0x40002000
 8002b90:	200002c2 	.word	0x200002c2
 8002b94:	200002be 	.word	0x200002be
 8002b98:	200002c0 	.word	0x200002c0
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40010400 	.word	0x40010400
												PULSE_LED_II_2_ON;
 8002ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba8:	48a1      	ldr	r0, [pc, #644]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002baa:	f7fe fa9c 	bl	80010e6 <GPIO_ResetBits>
 8002bae:	e78a      	b.n	8002ac6 <EXTI9_5_IRQHandler+0x22a>
			 	 	 	gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8002bb0:	4ba0      	ldr	r3, [pc, #640]	; (8002e34 <EXTI9_5_IRQHandler+0x598>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
						gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8002bb6:	4da0      	ldr	r5, [pc, #640]	; (8002e38 <EXTI9_5_IRQHandler+0x59c>)
 8002bb8:	7829      	ldrb	r1, [r5, #0]
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f7ff fe1c 	bl	80027f8 <GetNextStep>
 8002bc0:	7028      	strb	r0, [r5, #0]
						 PulseStatus;
 8002bc2:	499e      	ldr	r1, [pc, #632]	; (8002e3c <EXTI9_5_IRQHandler+0x5a0>)
 8002bc4:	780a      	ldrb	r2, [r1, #0]
 8002bc6:	4b9e      	ldr	r3, [pc, #632]	; (8002e40 <EXTI9_5_IRQHandler+0x5a4>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	489e      	ldr	r0, [pc, #632]	; (8002e44 <EXTI9_5_IRQHandler+0x5a8>)
 8002bcc:	7800      	ldrb	r0, [r0, #0]
 8002bce:	7809      	ldrb	r1, [r1, #0]
 8002bd0:	4c9d      	ldr	r4, [pc, #628]	; (8002e48 <EXTI9_5_IRQHandler+0x5ac>)
 8002bd2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002bd6:	6849      	ldr	r1, [r1, #4]
 8002bd8:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	9000      	str	r0, [sp, #0]
 8002be0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8002be4:	4899      	ldr	r0, [pc, #612]	; (8002e4c <EXTI9_5_IRQHandler+0x5b0>)
 8002be6:	f003 fd64 	bl	80066b2 <iprintf>
						PULSE_LED_II_ALL_ON;
 8002bea:	2104      	movs	r1, #4
 8002bec:	4890      	ldr	r0, [pc, #576]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002bee:	f7fe fa7a 	bl	80010e6 <GPIO_ResetBits>
						if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8002bf2:	782b      	ldrb	r3, [r5, #0]
 8002bf4:	3320      	adds	r3, #32
 8002bf6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002c00:	f040 80a4 	bne.w	8002d4c <EXTI9_5_IRQHandler+0x4b0>
						if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8002c04:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <EXTI9_5_IRQHandler+0x59c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f103 0220 	add.w	r2, r3, #32
 8002c0c:	4b8e      	ldr	r3, [pc, #568]	; (8002e48 <EXTI9_5_IRQHandler+0x5ac>)
 8002c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002c18:	f040 809d 	bne.w	8002d56 <EXTI9_5_IRQHandler+0x4ba>
						TIM_Cmd(TIM8, ENABLE);
 8002c1c:	4c8c      	ldr	r4, [pc, #560]	; (8002e50 <EXTI9_5_IRQHandler+0x5b4>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7fe fc47 	bl	80014b4 <TIM_Cmd>
						TIM_SetCounter(TIM8, 0x00);
 8002c26:	2100      	movs	r1, #0
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7fe fc34 	bl	8001496 <TIM_SetCounter>
		if(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z)
 8002c2e:	4b81      	ldr	r3, [pc, #516]	; (8002e34 <EXTI9_5_IRQHandler+0x598>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	f000 8094 	beq.w	8002d62 <EXTI9_5_IRQHandler+0x4c6>
		if(gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z)
 8002c3a:	4b7e      	ldr	r3, [pc, #504]	; (8002e34 <EXTI9_5_IRQHandler+0x598>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	f000 80d1 	beq.w	8002de8 <EXTI9_5_IRQHandler+0x54c>
		EXTI_ClearITPendingBit(EXTI_Line6);
 8002c46:	2040      	movs	r0, #64	; 0x40
 8002c48:	f7fe f9f0 	bl	800102c <EXTI_ClearITPendingBit>
	 	if (EXTI->PR & (1<<5)) {
 8002c4c:	4b81      	ldr	r3, [pc, #516]	; (8002e54 <EXTI9_5_IRQHandler+0x5b8>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f013 0f20 	tst.w	r3, #32
 8002c54:	d036      	beq.n	8002cc4 <EXTI9_5_IRQHandler+0x428>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 8002c56:	4b80      	ldr	r3, [pc, #512]	; (8002e58 <EXTI9_5_IRQHandler+0x5bc>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4a77      	ldr	r2, [pc, #476]	; (8002e3c <EXTI9_5_IRQHandler+0x5a0>)
 8002c60:	7013      	strb	r3, [r2, #0]
			if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8002c62:	4b7e      	ldr	r3, [pc, #504]	; (8002e5c <EXTI9_5_IRQHandler+0x5c0>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b943      	cbnz	r3, 8002c7a <EXTI9_5_IRQHandler+0x3de>
				DisplayUpdateFlags.b.MainDisplay = 1;
 8002c68:	4b7d      	ldr	r3, [pc, #500]	; (8002e60 <EXTI9_5_IRQHandler+0x5c4>)
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	f042 0202 	orr.w	r2, r2, #2
 8002c78:	701a      	strb	r2, [r3, #0]
				PULSE_LED_I_ALL_ON;
 8002c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c7e:	4879      	ldr	r0, [pc, #484]	; (8002e64 <EXTI9_5_IRQHandler+0x5c8>)
 8002c80:	f7fe fa31 	bl	80010e6 <GPIO_ResetBits>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002c84:	4b6d      	ldr	r3, [pc, #436]	; (8002e3c <EXTI9_5_IRQHandler+0x5a0>)
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <EXTI9_5_IRQHandler+0x5ac>)
 8002c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002c94:	f040 80ab 	bne.w	8002dee <EXTI9_5_IRQHandler+0x552>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <EXTI9_5_IRQHandler+0x5a0>)
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <EXTI9_5_IRQHandler+0x5ac>)
 8002c9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002ca8:	f040 80a7 	bne.w	8002dfa <EXTI9_5_IRQHandler+0x55e>
				TIM_Cmd(TIM14, ENABLE);
 8002cac:	4c6e      	ldr	r4, [pc, #440]	; (8002e68 <EXTI9_5_IRQHandler+0x5cc>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7fe fbff 	bl	80014b4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7fe fbec 	bl	8001496 <TIM_SetCounter>
		EXTI_ClearITPendingBit(EXTI_Line5);
 8002cbe:	2020      	movs	r0, #32
 8002cc0:	f7fe f9b4 	bl	800102c <EXTI_ClearITPendingBit>
	 	if (EXTI->PR & (1<<7)) {
 8002cc4:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <EXTI9_5_IRQHandler+0x5b8>)
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ccc:	d033      	beq.n	8002d36 <EXTI9_5_IRQHandler+0x49a>
		gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 8002cce:	4b62      	ldr	r3, [pc, #392]	; (8002e58 <EXTI9_5_IRQHandler+0x5bc>)
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <EXTI9_5_IRQHandler+0x59c>)
 8002cd8:	7013      	strb	r3, [r2, #0]
		if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8002cda:	4b60      	ldr	r3, [pc, #384]	; (8002e5c <EXTI9_5_IRQHandler+0x5c0>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	f000 8090 	beq.w	8002e06 <EXTI9_5_IRQHandler+0x56a>
				PULSE_LED_II_ALL_ON;
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	4851      	ldr	r0, [pc, #324]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002cea:	f7fe f9fc 	bl	80010e6 <GPIO_ResetBits>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8002cee:	4b52      	ldr	r3, [pc, #328]	; (8002e38 <EXTI9_5_IRQHandler+0x59c>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	f103 0220 	add.w	r2, r3, #32
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <EXTI9_5_IRQHandler+0x5ac>)
 8002cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002d02:	f040 808a 	bne.w	8002e1a <EXTI9_5_IRQHandler+0x57e>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8002d06:	4b4c      	ldr	r3, [pc, #304]	; (8002e38 <EXTI9_5_IRQHandler+0x59c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f103 0220 	add.w	r2, r3, #32
 8002d0e:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <EXTI9_5_IRQHandler+0x5ac>)
 8002d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002d1a:	f040 8083 	bne.w	8002e24 <EXTI9_5_IRQHandler+0x588>
				TIM_Cmd(TIM8, ENABLE);
 8002d1e:	4c4c      	ldr	r4, [pc, #304]	; (8002e50 <EXTI9_5_IRQHandler+0x5b4>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7fe fbc6 	bl	80014b4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7fe fbb3 	bl	8001496 <TIM_SetCounter>
		EXTI_ClearITPendingBit(EXTI_Line7);
 8002d30:	2080      	movs	r0, #128	; 0x80
 8002d32:	f7fe f97b 	bl	800102c <EXTI_ClearITPendingBit>
	DisplayUpdateFlags.b.MainDisplay = 1;
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <EXTI9_5_IRQHandler+0x5c4>)
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.StepsDisplay = 1;	 
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	f042 0202 	orr.w	r2, r2, #2
 8002d46:	701a      	strb	r2, [r3, #0]
};
 8002d48:	b003      	add	sp, #12
 8002d4a:	bd30      	pop	{r4, r5, pc}
							PULSE_LED_II_1_ON;
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	4838      	ldr	r0, [pc, #224]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002d50:	f7fe f9c9 	bl	80010e6 <GPIO_ResetBits>
 8002d54:	e756      	b.n	8002c04 <EXTI9_5_IRQHandler+0x368>
							PULSE_LED_II_2_ON;
 8002d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d5a:	4835      	ldr	r0, [pc, #212]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002d5c:	f7fe f9c3 	bl	80010e6 <GPIO_ResetBits>
 8002d60:	e75c      	b.n	8002c1c <EXTI9_5_IRQHandler+0x380>
			InitStart_2_SignalTimer();
 8002d62:	f7ff f9ff 	bl	8002164 <InitStart_2_SignalTimer>
						gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8002d66:	4b33      	ldr	r3, [pc, #204]	; (8002e34 <EXTI9_5_IRQHandler+0x598>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
						PulseStatus;
 8002d6c:	4933      	ldr	r1, [pc, #204]	; (8002e3c <EXTI9_5_IRQHandler+0x5a0>)
 8002d6e:	780a      	ldrb	r2, [r1, #0]
 8002d70:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <EXTI9_5_IRQHandler+0x5a4>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4833      	ldr	r0, [pc, #204]	; (8002e44 <EXTI9_5_IRQHandler+0x5a8>)
 8002d76:	7800      	ldrb	r0, [r0, #0]
 8002d78:	7809      	ldrb	r1, [r1, #0]
 8002d7a:	4c33      	ldr	r4, [pc, #204]	; (8002e48 <EXTI9_5_IRQHandler+0x5ac>)
 8002d7c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002d80:	6849      	ldr	r1, [r1, #4]
 8002d82:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 8002d86:	9101      	str	r1, [sp, #4]
 8002d88:	9000      	str	r0, [sp, #0]
 8002d8a:	f240 21cd 	movw	r1, #717	; 0x2cd
 8002d8e:	482f      	ldr	r0, [pc, #188]	; (8002e4c <EXTI9_5_IRQHandler+0x5b0>)
 8002d90:	f003 fc8f 	bl	80066b2 <iprintf>
						PULSE_LED_II_ALL_ON;
 8002d94:	2104      	movs	r1, #4
 8002d96:	4826      	ldr	r0, [pc, #152]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002d98:	f7fe f9a5 	bl	80010e6 <GPIO_ResetBits>
						if (Steps[0][gSequenceStepNumber_2].b.OutputPulse1) {
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <EXTI9_5_IRQHandler+0x59c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8002da4:	6863      	ldr	r3, [r4, #4]
 8002da6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002daa:	d112      	bne.n	8002dd2 <EXTI9_5_IRQHandler+0x536>
						if (Steps[0][gSequenceStepNumber_2].b.OutputPulse2) {
 8002dac:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <EXTI9_5_IRQHandler+0x59c>)
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <EXTI9_5_IRQHandler+0x5ac>)
 8002db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002dbc:	d10e      	bne.n	8002ddc <EXTI9_5_IRQHandler+0x540>
						TIM_Cmd(TIM8, ENABLE);
 8002dbe:	4c24      	ldr	r4, [pc, #144]	; (8002e50 <EXTI9_5_IRQHandler+0x5b4>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7fe fb76 	bl	80014b4 <TIM_Cmd>
						TIM_SetCounter(TIM8, 0x00);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7fe fb63 	bl	8001496 <TIM_SetCounter>
 8002dd0:	e733      	b.n	8002c3a <EXTI9_5_IRQHandler+0x39e>
							PULSE_LED_II_1_ON;
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	4816      	ldr	r0, [pc, #88]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002dd6:	f7fe f986 	bl	80010e6 <GPIO_ResetBits>
 8002dda:	e7e7      	b.n	8002dac <EXTI9_5_IRQHandler+0x510>
							PULSE_LED_II_2_ON;
 8002ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002de0:	4813      	ldr	r0, [pc, #76]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002de2:	f7fe f980 	bl	80010e6 <GPIO_ResetBits>
 8002de6:	e7ea      	b.n	8002dbe <EXTI9_5_IRQHandler+0x522>
							InitStart_1_SignalTimer();
 8002de8:	f7ff f9a0 	bl	800212c <InitStart_1_SignalTimer>
 8002dec:	e72b      	b.n	8002c46 <EXTI9_5_IRQHandler+0x3aa>
					PULSE_LED_I_1_ON;
 8002dee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002df2:	481c      	ldr	r0, [pc, #112]	; (8002e64 <EXTI9_5_IRQHandler+0x5c8>)
 8002df4:	f7fe f977 	bl	80010e6 <GPIO_ResetBits>
 8002df8:	e74e      	b.n	8002c98 <EXTI9_5_IRQHandler+0x3fc>
					PULSE_LED_I_2_ON;
 8002dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dfe:	4819      	ldr	r0, [pc, #100]	; (8002e64 <EXTI9_5_IRQHandler+0x5c8>)
 8002e00:	f7fe f971 	bl	80010e6 <GPIO_ResetBits>
 8002e04:	e752      	b.n	8002cac <EXTI9_5_IRQHandler+0x410>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <EXTI9_5_IRQHandler+0x5c4>)
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	f042 0202 	orr.w	r2, r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e765      	b.n	8002ce6 <EXTI9_5_IRQHandler+0x44a>
					PULSE_LED_II_1_ON;
 8002e1a:	2108      	movs	r1, #8
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002e1e:	f7fe f962 	bl	80010e6 <GPIO_ResetBits>
 8002e22:	e770      	b.n	8002d06 <EXTI9_5_IRQHandler+0x46a>
					PULSE_LED_II_2_ON;
 8002e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e28:	4801      	ldr	r0, [pc, #4]	; (8002e30 <EXTI9_5_IRQHandler+0x594>)
 8002e2a:	f7fe f95c 	bl	80010e6 <GPIO_ResetBits>
 8002e2e:	e776      	b.n	8002d1e <EXTI9_5_IRQHandler+0x482>
 8002e30:	40020000 	.word	0x40020000
 8002e34:	200002c2 	.word	0x200002c2
 8002e38:	200002c0 	.word	0x200002c0
 8002e3c:	200002bf 	.word	0x200002bf
 8002e40:	200002c1 	.word	0x200002c1
 8002e44:	200002bd 	.word	0x200002bd
 8002e48:	200008a4 	.word	0x200008a4
 8002e4c:	08006790 	.word	0x08006790
 8002e50:	40010400 	.word	0x40010400
 8002e54:	40013c00 	.word	0x40013c00
 8002e58:	20000274 	.word	0x20000274
 8002e5c:	200002b0 	.word	0x200002b0
 8002e60:	200002f0 	.word	0x200002f0
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40002000 	.word	0x40002000
 8002e6c:	00000000 	.word	0x00000000

08002e70 <TIM4_IRQHandler>:

/*
	Timer interrupt handler for 1 section steps
*/
void TIM4_IRQHandler()
{
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e72:	b083      	sub	sp, #12
	float deltaVoltage;
	unsigned long CurStep;
	
	
	/* Clear interrupt flag */
	TIM4->SR = (uint16_t) ~TIM_IT_Update;
 8002e74:	4e76      	ldr	r6, [pc, #472]	; (8003050 <TIM4_IRQHandler+0x1e0>)
 8002e76:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002e7a:	8233      	strh	r3, [r6, #16]

	/* Calculate next step duration */		
	StepWidth_1 = GetStepWidth(0, gSequenceStepNumber_1);
 8002e7c:	4d75      	ldr	r5, [pc, #468]	; (8003054 <TIM4_IRQHandler+0x1e4>)
 8002e7e:	7829      	ldrb	r1, [r5, #0]
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff fa9b 	bl	80023bc <GetStepWidth>
 8002e86:	4604      	mov	r4, r0
					
					
		/* Calculate prescaler/multiplier*/

		TIM4->PSC = (uint16_t) ((((((float) AddData[ADC_TIMEMULTIPLY_Ch_1])*3.5f)/CalConstants[ADC_TIMEMULTIPLY_Ch_1])+0.5f)*STEP_TIMER_PRESCALER);
 8002e88:	4b73      	ldr	r3, [pc, #460]	; (8003058 <TIM4_IRQHandler+0x1e8>)
 8002e8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002e92:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8002e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e9a:	4b70      	ldr	r3, [pc, #448]	; (800305c <TIM4_IRQHandler+0x1ec>)
 8002e9c:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ea0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002ea4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ea8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eb0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003060 <TIM4_IRQHandler+0x1f0>
 8002eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ebc:	ee17 3a90 	vmov	r3, s15
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	8533      	strh	r3, [r6, #40]	; 0x28
		

		if (Steps[0][gSequenceStepNumber_1].b.Sloped) {
 8002ec4:	782b      	ldrb	r3, [r5, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4a66      	ldr	r2, [pc, #408]	; (8003064 <TIM4_IRQHandler+0x1f4>)
 8002eca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ece:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ed2:	d05c      	beq.n	8002f8e <TIM4_IRQHandler+0x11e>
			//Calculate the voltage in slope mode
			CurStep = GetStepVoltage(0, gSequenceStepNumber_1);
 8002ed4:	7829      	ldrb	r1, [r5, #0]
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7ff fb38 	bl	800254c <GetStepVoltage>
 8002edc:	4605      	mov	r5, r0
			if(gSequencerMode_1 == SEQUENCER_MODE_RUN || gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)
 8002ede:	4b62      	ldr	r3, [pc, #392]	; (8003068 <TIM4_IRQHandler+0x1f8>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b123      	cbz	r3, 8002eee <TIM4_IRQHandler+0x7e>
 8002ee4:	4b60      	ldr	r3, [pc, #384]	; (8003068 <TIM4_IRQHandler+0x1f8>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d145      	bne.n	8002f7a <TIM4_IRQHandler+0x10a>
			{
				if (PreviousStep>CurStep) {
 8002eee:	4b5f      	ldr	r3, [pc, #380]	; (800306c <TIM4_IRQHandler+0x1fc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	42ab      	cmp	r3, r5
 8002ef4:	d822      	bhi.n	8002f3c <TIM4_IRQHandler+0xcc>
					deltaVoltage =  (float) (PreviousStep-CurStep) / StepWidth_1;
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep - (unsigned int) (deltaVoltage*gStepWidth_1) );
				};
				if (CurStep>PreviousStep) {
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <TIM4_IRQHandler+0x1fc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	42ab      	cmp	r3, r5
 8002efc:	d250      	bcs.n	8002fa0 <TIM4_IRQHandler+0x130>
					deltaVoltage =  (float) (CurStep-PreviousStep) / StepWidth_1;
 8002efe:	4b5b      	ldr	r3, [pc, #364]	; (800306c <TIM4_IRQHandler+0x1fc>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	1aad      	subs	r5, r5, r2
 8002f04:	ee07 5a90 	vmov	s15, r5
 8002f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0c:	ee07 4a10 	vmov	s14, r4
 8002f10:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002f14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep + (unsigned int) (deltaVoltage*gStepWidth_1) );
 8002f18:	4a55      	ldr	r2, [pc, #340]	; (8003070 <TIM4_IRQHandler+0x200>)
 8002f1a:	edd2 7a00 	vldr	s15, [r2]
 8002f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f2a:	ee17 1a90 	vmov	r1, s15
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4419      	add	r1, r3
 8002f32:	b289      	uxth	r1, r1
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fe f803 	bl	8000f40 <DAC_SetChannel1Data>
 8002f3a:	e031      	b.n	8002fa0 <TIM4_IRQHandler+0x130>
					deltaVoltage =  (float) (PreviousStep-CurStep) / StepWidth_1;
 8002f3c:	4a4b      	ldr	r2, [pc, #300]	; (800306c <TIM4_IRQHandler+0x1fc>)
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	1b5b      	subs	r3, r3, r5
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f4a:	ee07 4a90 	vmov	s15, r4
 8002f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f52:	eec7 6a27 	vdiv.f32	s13, s14, s15
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep - (unsigned int) (deltaVoltage*gStepWidth_1) );
 8002f56:	6811      	ldr	r1, [r2, #0]
 8002f58:	4b45      	ldr	r3, [pc, #276]	; (8003070 <TIM4_IRQHandler+0x200>)
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f6a:	ee17 3a90 	vmov	r3, s15
 8002f6e:	1ac9      	subs	r1, r1, r3
 8002f70:	b289      	uxth	r1, r1
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fd ffe4 	bl	8000f40 <DAC_SetChannel1Data>
 8002f78:	e7bd      	b.n	8002ef6 <TIM4_IRQHandler+0x86>
				};
			}			
			else 
			{
				DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 8002f7a:	4b36      	ldr	r3, [pc, #216]	; (8003054 <TIM4_IRQHandler+0x1e4>)
 8002f7c:	7819      	ldrb	r1, [r3, #0]
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7ff fae4 	bl	800254c <GetStepVoltage>
 8002f84:	b281      	uxth	r1, r0
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fd ffda 	bl	8000f40 <DAC_SetChannel1Data>
 8002f8c:	e008      	b.n	8002fa0 <TIM4_IRQHandler+0x130>
			}
		} else {
			//Calculate the voltage in not slope mode
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <TIM4_IRQHandler+0x1e4>)
 8002f90:	7819      	ldrb	r1, [r3, #0]
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7ff fada 	bl	800254c <GetStepVoltage>
 8002f98:	b281      	uxth	r1, r0
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fd ffd0 	bl	8000f40 <DAC_SetChannel1Data>
		};
		
			/*additional channels - ref and time*/
			MAX5135_DAC_send(EXT_DAC_CH_0, Steps[0][gSequenceStepNumber_1].b.TLevel >> 2);
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <TIM4_IRQHandler+0x1e4>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <TIM4_IRQHandler+0x1f4>)
 8002fa8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8002fac:	f3c1 3189 	ubfx	r1, r1, #14, #10
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fe fd7b 	bl	8001aac <MAX5135_DAC_send>
			MAX5135_DAC_send(EXT_DAC_CH_1, 1023 - (unsigned int) (((double) 1023/ (double) StepWidth_1)*((double) gStepWidth_1)) );
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7fd fa50 	bl	800045c <__aeabi_ui2d>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	a121      	add	r1, pc, #132	; (adr r1, 8003048 <TIM4_IRQHandler+0x1d8>)
 8002fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fc6:	f7fd fbed 	bl	80007a4 <__aeabi_ddiv>
 8002fca:	4606      	mov	r6, r0
 8002fcc:	460f      	mov	r7, r1
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <TIM4_IRQHandler+0x200>)
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	f7fd fa43 	bl	800045c <__aeabi_ui2d>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4630      	mov	r0, r6
 8002fdc:	4639      	mov	r1, r7
 8002fde:	f7fd fab7 	bl	8000550 <__aeabi_dmul>
 8002fe2:	f7fd fcc7 	bl	8000974 <__aeabi_d2uiz>
 8002fe6:	f5c0 717f 	rsb	r1, r0, #1020	; 0x3fc
 8002fea:	3103      	adds	r1, #3
 8002fec:	2001      	movs	r0, #1
 8002fee:	f7fe fd5d 	bl	8001aac <MAX5135_DAC_send>
		
		
		/* Increment step counter */ 
		if ((gSequencerMode_1 == SEQUENCER_MODE_RUN)|| ((gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)))
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <TIM4_IRQHandler+0x1f8>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	b123      	cbz	r3, 8003002 <TIM4_IRQHandler+0x192>
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <TIM4_IRQHandler+0x1f8>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d103      	bne.n	800300a <TIM4_IRQHandler+0x19a>
		{
			gStepWidth_1++;
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <TIM4_IRQHandler+0x200>)
 8003004:	6813      	ldr	r3, [r2, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	6013      	str	r3, [r2, #0]
		};

		if ((gStepWidth_1 < StepWidth_1)) {
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <TIM4_IRQHandler+0x200>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	42a3      	cmp	r3, r4
 8003010:	d234      	bcs.n	800307c <TIM4_IRQHandler+0x20c>
						TIM_Cmd(TIM14, ENABLE);
						TIM_SetCounter(TIM14, 0x00);
					};
		};
	
	if (gSequencerMode_1 == SEQUENCER_MODE_WAIT) {
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <TIM4_IRQHandler+0x1f8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	f000 8189 	beq.w	8003330 <TIM4_IRQHandler+0x4c0>
			TIM_Cmd(TIM14, ENABLE);
			TIM_SetCounter(TIM14, 0x00);
		}
	};	

	if (gSequencerMode_1 == SEQUENCER_MODE_WAIT_STROBE) {
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <TIM4_IRQHandler+0x1f8>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b03      	cmp	r3, #3
 8003026:	f000 81c6 	beq.w	80033b6 <TIM4_IRQHandler+0x546>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); //(float) AddData[6]/(float) (CalConstants[6]/15.0)
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
		gSequencerMode_1 = gPrevSequencerMode_1;
	}
		
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <TIM4_IRQHandler+0x204>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b943      	cbnz	r3, 8003042 <TIM4_IRQHandler+0x1d2>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <TIM4_IRQHandler+0x208>)
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	f042 0202 	orr.w	r2, r2, #2
 8003040:	701a      	strb	r2, [r3, #0]
	};		
	
		return;
};
 8003042:	b003      	add	sp, #12
 8003044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003046:	bf00      	nop
 8003048:	00000000 	.word	0x00000000
 800304c:	408ff800 	.word	0x408ff800
 8003050:	40000800 	.word	0x40000800
 8003054:	200002bf 	.word	0x200002bf
 8003058:	200007f8 	.word	0x200007f8
 800305c:	20000250 	.word	0x20000250
 8003060:	46241000 	.word	0x46241000
 8003064:	200008a4 	.word	0x200008a4
 8003068:	200002c1 	.word	0x200002c1
 800306c:	200002a0 	.word	0x200002a0
 8003070:	200002c4 	.word	0x200002c4
 8003074:	200002b0 	.word	0x200002b0
 8003078:	200002f0 	.word	0x200002f0
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
 800307c:	4ba1      	ldr	r3, [pc, #644]	; (8003304 <TIM4_IRQHandler+0x494>)
 800307e:	7819      	ldrb	r1, [r3, #0]
 8003080:	2000      	movs	r0, #0
 8003082:	f7ff fa63 	bl	800254c <GetStepVoltage>
 8003086:	4ba0      	ldr	r3, [pc, #640]	; (8003308 <TIM4_IRQHandler+0x498>)
 8003088:	6018      	str	r0, [r3, #0]
			if ( (gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)   ) { 
 800308a:	4ba0      	ldr	r3, [pc, #640]	; (800330c <TIM4_IRQHandler+0x49c>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b06      	cmp	r3, #6
 8003092:	d074      	beq.n	800317e <TIM4_IRQHandler+0x30e>
			if (Steps[0][gSequenceStepNumber_1].b.OpModeSTOP) {
 8003094:	4b9b      	ldr	r3, [pc, #620]	; (8003304 <TIM4_IRQHandler+0x494>)
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	4b9d      	ldr	r3, [pc, #628]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 800309a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f013 0f02 	tst.w	r3, #2
 80030a4:	d006      	beq.n	80030b4 <TIM4_IRQHandler+0x244>
				gPrevSequencerMode_1 = gSequencerMode_1;
 80030a6:	4a99      	ldr	r2, [pc, #612]	; (800330c <TIM4_IRQHandler+0x49c>)
 80030a8:	7813      	ldrb	r3, [r2, #0]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	4999      	ldr	r1, [pc, #612]	; (8003314 <TIM4_IRQHandler+0x4a4>)
 80030ae:	700b      	strb	r3, [r1, #0]
				gSequencerMode_1 = SEQUENCER_MODE_STOP;				
 80030b0:	2302      	movs	r3, #2
 80030b2:	7013      	strb	r3, [r2, #0]
			if ((Steps[0][gSequenceStepNumber_1].b.OpModeENABLE))  {
 80030b4:	4b93      	ldr	r3, [pc, #588]	; (8003304 <TIM4_IRQHandler+0x494>)
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	4b95      	ldr	r3, [pc, #596]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 80030ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f013 0f08 	tst.w	r3, #8
 80030c4:	d15f      	bne.n	8003186 <TIM4_IRQHandler+0x316>
			if ( (Steps[0][gSequenceStepNumber_1].b.OpModeSUSTAIN)) {
 80030c6:	4b8f      	ldr	r3, [pc, #572]	; (8003304 <TIM4_IRQHandler+0x494>)
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	4b91      	ldr	r3, [pc, #580]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 80030cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f013 0f04 	tst.w	r3, #4
 80030d6:	d16a      	bne.n	80031ae <TIM4_IRQHandler+0x33e>
			if ( (!(Steps[0][gSequenceStepNumber_1].b.OpModeSTOP)) &&
 80030d8:	4b8a      	ldr	r3, [pc, #552]	; (8003304 <TIM4_IRQHandler+0x494>)
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	4b8c      	ldr	r3, [pc, #560]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 80030de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f013 0f02 	tst.w	r3, #2
 80030e8:	d10e      	bne.n	8003108 <TIM4_IRQHandler+0x298>
					(!(Steps[0][gSequenceStepNumber_1].b.OpModeENABLE)) &&
 80030ea:	4b86      	ldr	r3, [pc, #536]	; (8003304 <TIM4_IRQHandler+0x494>)
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 80030f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030f4:	685b      	ldr	r3, [r3, #4]
			if ( (!(Steps[0][gSequenceStepNumber_1].b.OpModeSTOP)) &&
 80030f6:	f013 0f08 	tst.w	r3, #8
 80030fa:	d105      	bne.n	8003108 <TIM4_IRQHandler+0x298>
					(!(Steps[0][gSequenceStepNumber_1].b.OpModeSUSTAIN)) ) {
 80030fc:	4b81      	ldr	r3, [pc, #516]	; (8003304 <TIM4_IRQHandler+0x494>)
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	4b83      	ldr	r3, [pc, #524]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 8003102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003106:	685b      	ldr	r3, [r3, #4]
			gStepWidth_1 = 0;
 8003108:	4b83      	ldr	r3, [pc, #524]	; (8003318 <TIM4_IRQHandler+0x4a8>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
			if (gSequencerMode_1 == SEQUENCER_MODE_RUN) {
 800310e:	4b7f      	ldr	r3, [pc, #508]	; (800330c <TIM4_IRQHandler+0x49c>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d05a      	beq.n	80031cc <TIM4_IRQHandler+0x35c>
		if (gSequencerMode_1 == SEQUENCER_MODE_STOP) {
 8003116:	4b7d      	ldr	r3, [pc, #500]	; (800330c <TIM4_IRQHandler+0x49c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	f000 8099 	beq.w	8003254 <TIM4_IRQHandler+0x3e4>
		if (gSequencerMode_1 == SEQUENCER_MODE_ADVANCE) {
 8003122:	4b7a      	ldr	r3, [pc, #488]	; (800330c <TIM4_IRQHandler+0x49c>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b06      	cmp	r3, #6
 800312a:	f47f af72 	bne.w	8003012 <TIM4_IRQHandler+0x1a2>
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 800312e:	4c75      	ldr	r4, [pc, #468]	; (8003304 <TIM4_IRQHandler+0x494>)
 8003130:	7821      	ldrb	r1, [r4, #0]
 8003132:	2000      	movs	r0, #0
 8003134:	f7ff fb60 	bl	80027f8 <GetNextStep>
 8003138:	7020      	strb	r0, [r4, #0]
						PULSE_LED_I_ALL_ON;
 800313a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800313e:	4877      	ldr	r0, [pc, #476]	; (800331c <TIM4_IRQHandler+0x4ac>)
 8003140:	f7fd ffd1 	bl	80010e6 <GPIO_ResetBits>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8003144:	7822      	ldrb	r2, [r4, #0]
 8003146:	4b72      	ldr	r3, [pc, #456]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 8003148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003152:	f040 80ca 	bne.w	80032ea <TIM4_IRQHandler+0x47a>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8003156:	4b6b      	ldr	r3, [pc, #428]	; (8003304 <TIM4_IRQHandler+0x494>)
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 800315c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003166:	f040 80c6 	bne.w	80032f6 <TIM4_IRQHandler+0x486>
						TIM_Cmd(TIM14, ENABLE);
 800316a:	4c6d      	ldr	r4, [pc, #436]	; (8003320 <TIM4_IRQHandler+0x4b0>)
 800316c:	2101      	movs	r1, #1
 800316e:	4620      	mov	r0, r4
 8003170:	f7fe f9a0 	bl	80014b4 <TIM_Cmd>
						TIM_SetCounter(TIM14, 0x00);
 8003174:	2100      	movs	r1, #0
 8003176:	4620      	mov	r0, r4
 8003178:	f7fe f98d 	bl	8001496 <TIM_SetCounter>
 800317c:	e749      	b.n	8003012 <TIM4_IRQHandler+0x1a2>
				gSequencerMode_1 =  SEQUENCER_MODE_STOP;
 800317e:	4b63      	ldr	r3, [pc, #396]	; (800330c <TIM4_IRQHandler+0x49c>)
 8003180:	2202      	movs	r2, #2
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e786      	b.n	8003094 <TIM4_IRQHandler+0x224>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0)) 
 8003186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800318a:	4864      	ldr	r0, [pc, #400]	; (800331c <TIM4_IRQHandler+0x4ac>)
 800318c:	f7fd ffa2 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003190:	2800      	cmp	r0, #0
 8003192:	d198      	bne.n	80030c6 <TIM4_IRQHandler+0x256>
				if(gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z)
 8003194:	4b5d      	ldr	r3, [pc, #372]	; (800330c <TIM4_IRQHandler+0x49c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b04      	cmp	r3, #4
 800319c:	d093      	beq.n	80030c6 <TIM4_IRQHandler+0x256>
					gPrevSequencerMode_1 = gSequencerMode_1;
 800319e:	4a5b      	ldr	r2, [pc, #364]	; (800330c <TIM4_IRQHandler+0x49c>)
 80031a0:	7813      	ldrb	r3, [r2, #0]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	495b      	ldr	r1, [pc, #364]	; (8003314 <TIM4_IRQHandler+0x4a4>)
 80031a6:	700b      	strb	r3, [r1, #0]
					gSequencerMode_1 = SEQUENCER_MODE_WAIT_HI_Z;
 80031a8:	2304      	movs	r3, #4
 80031aa:	7013      	strb	r3, [r2, #0]
 80031ac:	e78b      	b.n	80030c6 <TIM4_IRQHandler+0x256>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
 80031ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031b2:	485a      	ldr	r0, [pc, #360]	; (800331c <TIM4_IRQHandler+0x4ac>)
 80031b4:	f7fd ff8e 	bl	80010d4 <GPIO_ReadInputDataBit>
 80031b8:	2801      	cmp	r0, #1
 80031ba:	d18d      	bne.n	80030d8 <TIM4_IRQHandler+0x268>
					gPrevSequencerMode_1 = gSequencerMode_1;
 80031bc:	4a53      	ldr	r2, [pc, #332]	; (800330c <TIM4_IRQHandler+0x49c>)
 80031be:	7813      	ldrb	r3, [r2, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4954      	ldr	r1, [pc, #336]	; (8003314 <TIM4_IRQHandler+0x4a4>)
 80031c4:	700b      	strb	r3, [r1, #0]
					gSequencerMode_1 = SEQUENCER_MODE_STAY_HI_Z;
 80031c6:	2305      	movs	r3, #5
 80031c8:	7013      	strb	r3, [r2, #0]
 80031ca:	e785      	b.n	80030d8 <TIM4_IRQHandler+0x268>
				gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 80031cc:	4c4d      	ldr	r4, [pc, #308]	; (8003304 <TIM4_IRQHandler+0x494>)
 80031ce:	7821      	ldrb	r1, [r4, #0]
 80031d0:	4610      	mov	r0, r2
 80031d2:	f7ff fb11 	bl	80027f8 <GetNextStep>
 80031d6:	7020      	strb	r0, [r4, #0]
				PULSE_LED_I_ALL_ON;
 80031d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031dc:	484f      	ldr	r0, [pc, #316]	; (800331c <TIM4_IRQHandler+0x4ac>)
 80031de:	f7fd ff82 	bl	80010e6 <GPIO_ResetBits>
				PulseStatus
 80031e2:	7822      	ldrb	r2, [r4, #0]
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <TIM4_IRQHandler+0x49c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	494a      	ldr	r1, [pc, #296]	; (8003314 <TIM4_IRQHandler+0x4a4>)
 80031ea:	7808      	ldrb	r0, [r1, #0]
 80031ec:	7821      	ldrb	r1, [r4, #0]
 80031ee:	4d48      	ldr	r5, [pc, #288]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 80031f0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80031f4:	6849      	ldr	r1, [r1, #4]
 80031f6:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 80031fa:	9101      	str	r1, [sp, #4]
 80031fc:	9000      	str	r0, [sp, #0]
 80031fe:	f240 417c 	movw	r1, #1148	; 0x47c
 8003202:	4848      	ldr	r0, [pc, #288]	; (8003324 <TIM4_IRQHandler+0x4b4>)
 8003204:	f003 fa55 	bl	80066b2 <iprintf>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8003208:	7823      	ldrb	r3, [r4, #0]
 800320a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800320e:	686b      	ldr	r3, [r5, #4]
 8003210:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003214:	d112      	bne.n	800323c <TIM4_IRQHandler+0x3cc>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <TIM4_IRQHandler+0x494>)
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 800321c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003226:	d10f      	bne.n	8003248 <TIM4_IRQHandler+0x3d8>
				TIM_Cmd(TIM14, ENABLE);
 8003228:	4c3d      	ldr	r4, [pc, #244]	; (8003320 <TIM4_IRQHandler+0x4b0>)
 800322a:	2101      	movs	r1, #1
 800322c:	4620      	mov	r0, r4
 800322e:	f7fe f941 	bl	80014b4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8003232:	2100      	movs	r1, #0
 8003234:	4620      	mov	r0, r4
 8003236:	f7fe f92e 	bl	8001496 <TIM_SetCounter>
 800323a:	e76c      	b.n	8003116 <TIM4_IRQHandler+0x2a6>
					PULSE_LED_I_1_ON;
 800323c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003240:	4836      	ldr	r0, [pc, #216]	; (800331c <TIM4_IRQHandler+0x4ac>)
 8003242:	f7fd ff50 	bl	80010e6 <GPIO_ResetBits>
 8003246:	e7e6      	b.n	8003216 <TIM4_IRQHandler+0x3a6>
					PULSE_LED_I_2_ON;
 8003248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800324c:	4833      	ldr	r0, [pc, #204]	; (800331c <TIM4_IRQHandler+0x4ac>)
 800324e:	f7fd ff4a 	bl	80010e6 <GPIO_ResetBits>
 8003252:	e7e9      	b.n	8003228 <TIM4_IRQHandler+0x3b8>
				printf("STOP \n");
 8003254:	4834      	ldr	r0, [pc, #208]	; (8003328 <TIM4_IRQHandler+0x4b8>)
 8003256:	f003 fa4f 	bl	80066f8 <puts>
				if (gPrevSequencerMode_1 == gSequencerMode_2)
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <TIM4_IRQHandler+0x4a4>)
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <TIM4_IRQHandler+0x4bc>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	429a      	cmp	r2, r3
 8003268:	f47f af5b 	bne.w	8003122 <TIM4_IRQHandler+0x2b2>
						PULSE_LED_I_ALL_ON;
 800326c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003270:	482a      	ldr	r0, [pc, #168]	; (800331c <TIM4_IRQHandler+0x4ac>)
 8003272:	f7fd ff38 	bl	80010e6 <GPIO_ResetBits>
						PulseStatus;
 8003276:	4d23      	ldr	r5, [pc, #140]	; (8003304 <TIM4_IRQHandler+0x494>)
 8003278:	782a      	ldrb	r2, [r5, #0]
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <TIM4_IRQHandler+0x49c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4925      	ldr	r1, [pc, #148]	; (8003314 <TIM4_IRQHandler+0x4a4>)
 8003280:	7808      	ldrb	r0, [r1, #0]
 8003282:	7829      	ldrb	r1, [r5, #0]
 8003284:	4c22      	ldr	r4, [pc, #136]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 8003286:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800328a:	6849      	ldr	r1, [r1, #4]
 800328c:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 8003290:	9101      	str	r1, [sp, #4]
 8003292:	9000      	str	r0, [sp, #0]
 8003294:	f240 418f 	movw	r1, #1167	; 0x48f
 8003298:	4822      	ldr	r0, [pc, #136]	; (8003324 <TIM4_IRQHandler+0x4b4>)
 800329a:	f003 fa0a 	bl	80066b2 <iprintf>
							if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 800329e:	782b      	ldrb	r3, [r5, #0]
 80032a0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80032a4:	6863      	ldr	r3, [r4, #4]
 80032a6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80032aa:	d112      	bne.n	80032d2 <TIM4_IRQHandler+0x462>
							if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 80032ac:	4b15      	ldr	r3, [pc, #84]	; (8003304 <TIM4_IRQHandler+0x494>)
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <TIM4_IRQHandler+0x4a0>)
 80032b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80032bc:	d10f      	bne.n	80032de <TIM4_IRQHandler+0x46e>
						TIM_Cmd(TIM14, ENABLE);
 80032be:	4c18      	ldr	r4, [pc, #96]	; (8003320 <TIM4_IRQHandler+0x4b0>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7fe f8f6 	bl	80014b4 <TIM_Cmd>
						TIM_SetCounter(TIM14, 0x00);
 80032c8:	2100      	movs	r1, #0
 80032ca:	4620      	mov	r0, r4
 80032cc:	f7fe f8e3 	bl	8001496 <TIM_SetCounter>
 80032d0:	e727      	b.n	8003122 <TIM4_IRQHandler+0x2b2>
								PULSE_LED_I_1_ON;
 80032d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d6:	4811      	ldr	r0, [pc, #68]	; (800331c <TIM4_IRQHandler+0x4ac>)
 80032d8:	f7fd ff05 	bl	80010e6 <GPIO_ResetBits>
 80032dc:	e7e6      	b.n	80032ac <TIM4_IRQHandler+0x43c>
								PULSE_LED_I_2_ON;
 80032de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032e2:	480e      	ldr	r0, [pc, #56]	; (800331c <TIM4_IRQHandler+0x4ac>)
 80032e4:	f7fd feff 	bl	80010e6 <GPIO_ResetBits>
 80032e8:	e7e9      	b.n	80032be <TIM4_IRQHandler+0x44e>
							PULSE_LED_I_1_ON;
 80032ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032ee:	480b      	ldr	r0, [pc, #44]	; (800331c <TIM4_IRQHandler+0x4ac>)
 80032f0:	f7fd fef9 	bl	80010e6 <GPIO_ResetBits>
 80032f4:	e72f      	b.n	8003156 <TIM4_IRQHandler+0x2e6>
							PULSE_LED_I_2_ON;
 80032f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032fa:	4808      	ldr	r0, [pc, #32]	; (800331c <TIM4_IRQHandler+0x4ac>)
 80032fc:	f7fd fef3 	bl	80010e6 <GPIO_ResetBits>
 8003300:	e733      	b.n	800316a <TIM4_IRQHandler+0x2fa>
 8003302:	bf00      	nop
 8003304:	200002bf 	.word	0x200002bf
 8003308:	200002a0 	.word	0x200002a0
 800330c:	200002c1 	.word	0x200002c1
 8003310:	200008a4 	.word	0x200008a4
 8003314:	200002bd 	.word	0x200002bd
 8003318:	200002c4 	.word	0x200002c4
 800331c:	40020400 	.word	0x40020400
 8003320:	40002000 	.word	0x40002000
 8003324:	08006790 	.word	0x08006790
 8003328:	080067d4 	.word	0x080067d4
 800332c:	200002c2 	.word	0x200002c2
		if(gSequenceStepNumber_1 != (unsigned int) (pots_step[0]-1))
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <TIM4_IRQHandler+0x570>)
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <TIM4_IRQHandler+0x574>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	3b01      	subs	r3, #1
 800333c:	429a      	cmp	r2, r3
 800333e:	f43f ae6e 	beq.w	800301e <TIM4_IRQHandler+0x1ae>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); 
 8003342:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <TIM4_IRQHandler+0x574>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	3b01      	subs	r3, #1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4c25      	ldr	r4, [pc, #148]	; (80033e0 <TIM4_IRQHandler+0x570>)
 800334c:	7023      	strb	r3, [r4, #0]
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 800334e:	7821      	ldrb	r1, [r4, #0]
 8003350:	2000      	movs	r0, #0
 8003352:	f7ff f8fb 	bl	800254c <GetStepVoltage>
 8003356:	b281      	uxth	r1, r0
 8003358:	2000      	movs	r0, #0
 800335a:	f7fd fdf1 	bl	8000f40 <DAC_SetChannel1Data>
			PULSE_LED_I_ALL_ON;
 800335e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003362:	4821      	ldr	r0, [pc, #132]	; (80033e8 <TIM4_IRQHandler+0x578>)
 8003364:	f7fd febf 	bl	80010e6 <GPIO_ResetBits>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8003368:	7822      	ldrb	r2, [r4, #0]
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <TIM4_IRQHandler+0x57c>)
 800336c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003376:	d112      	bne.n	800339e <TIM4_IRQHandler+0x52e>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <TIM4_IRQHandler+0x570>)
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <TIM4_IRQHandler+0x57c>)
 800337e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003388:	d10f      	bne.n	80033aa <TIM4_IRQHandler+0x53a>
			TIM_Cmd(TIM14, ENABLE);
 800338a:	4c19      	ldr	r4, [pc, #100]	; (80033f0 <TIM4_IRQHandler+0x580>)
 800338c:	2101      	movs	r1, #1
 800338e:	4620      	mov	r0, r4
 8003390:	f7fe f890 	bl	80014b4 <TIM_Cmd>
			TIM_SetCounter(TIM14, 0x00);
 8003394:	2100      	movs	r1, #0
 8003396:	4620      	mov	r0, r4
 8003398:	f7fe f87d 	bl	8001496 <TIM_SetCounter>
 800339c:	e63f      	b.n	800301e <TIM4_IRQHandler+0x1ae>
				PULSE_LED_I_1_ON;
 800339e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033a2:	4811      	ldr	r0, [pc, #68]	; (80033e8 <TIM4_IRQHandler+0x578>)
 80033a4:	f7fd fe9f 	bl	80010e6 <GPIO_ResetBits>
 80033a8:	e7e6      	b.n	8003378 <TIM4_IRQHandler+0x508>
				PULSE_LED_I_2_ON;
 80033aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033ae:	480e      	ldr	r0, [pc, #56]	; (80033e8 <TIM4_IRQHandler+0x578>)
 80033b0:	f7fd fe99 	bl	80010e6 <GPIO_ResetBits>
 80033b4:	e7e9      	b.n	800338a <TIM4_IRQHandler+0x51a>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); //(float) AddData[6]/(float) (CalConstants[6]/15.0)
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <TIM4_IRQHandler+0x574>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <TIM4_IRQHandler+0x570>)
 80033c0:	7013      	strb	r3, [r2, #0]
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 80033c2:	7811      	ldrb	r1, [r2, #0]
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7ff f8c1 	bl	800254c <GetStepVoltage>
 80033ca:	b281      	uxth	r1, r0
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fd fdb7 	bl	8000f40 <DAC_SetChannel1Data>
		gSequencerMode_1 = gPrevSequencerMode_1;
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <TIM4_IRQHandler+0x584>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <TIM4_IRQHandler+0x588>)
 80033da:	7013      	strb	r3, [r2, #0]
 80033dc:	e625      	b.n	800302a <TIM4_IRQHandler+0x1ba>
 80033de:	bf00      	nop
 80033e0:	200002bf 	.word	0x200002bf
 80033e4:	20000274 	.word	0x20000274
 80033e8:	40020400 	.word	0x40020400
 80033ec:	200008a4 	.word	0x200008a4
 80033f0:	40002000 	.word	0x40002000
 80033f4:	200002bd 	.word	0x200002bd
 80033f8:	200002c1 	.word	0x200002c1
 80033fc:	00000000 	.word	0x00000000

08003400 <TIM5_IRQHandler>:

/*
 Timer interrupt handler for 1 section steps
*/
void TIM5_IRQHandler()
{
 8003400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003404:	b083      	sub	sp, #12
	unsigned long int StepWidth_2=0;	
	float deltaVoltage;
	unsigned long CurStep;

	/* Clear interrupt flag */
	TIM5->SR = (uint16_t) ~TIM_IT_Update;
 8003406:	4e78      	ldr	r6, [pc, #480]	; (80035e8 <TIM5_IRQHandler+0x1e8>)
 8003408:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800340c:	8233      	strh	r3, [r6, #16]
	
	/* Calculate next step duration */	
	
		/* Calculate next step duration */
		StepWidth_2 = GetStepWidth(1, gSequenceStepNumber_2);
 800340e:	4d77      	ldr	r5, [pc, #476]	; (80035ec <TIM5_IRQHandler+0x1ec>)
 8003410:	7829      	ldrb	r1, [r5, #0]
 8003412:	2001      	movs	r0, #1
 8003414:	f7fe ffd2 	bl	80023bc <GetStepWidth>
 8003418:	4604      	mov	r4, r0

		/* Calculate prescaler/multiplier*/
		TIM5->PSC = (uint16_t) (((((AddData[ADC_TIMEMULTIPLY_Ch_2])*3.5)/CalConstants[ADC_TIMEMULTIPLY_Ch_2])+0.5)*STEP_TIMER_PRESCALER);
 800341a:	4b75      	ldr	r3, [pc, #468]	; (80035f0 <TIM5_IRQHandler+0x1f0>)
 800341c:	6958      	ldr	r0, [r3, #20]
 800341e:	f7fd f81d 	bl	800045c <__aeabi_ui2d>
 8003422:	2200      	movs	r2, #0
 8003424:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <TIM5_IRQHandler+0x1f4>)
 8003426:	f7fd f893 	bl	8000550 <__aeabi_dmul>
 800342a:	4680      	mov	r8, r0
 800342c:	4689      	mov	r9, r1
 800342e:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <TIM5_IRQHandler+0x1f8>)
 8003430:	6958      	ldr	r0, [r3, #20]
 8003432:	f7fd f813 	bl	800045c <__aeabi_ui2d>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4640      	mov	r0, r8
 800343c:	4649      	mov	r1, r9
 800343e:	f7fd f9b1 	bl	80007a4 <__aeabi_ddiv>
 8003442:	2200      	movs	r2, #0
 8003444:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <TIM5_IRQHandler+0x1fc>)
 8003446:	f7fc fecd 	bl	80001e4 <__adddf3>
 800344a:	a363      	add	r3, pc, #396	; (adr r3, 80035d8 <TIM5_IRQHandler+0x1d8>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f7fd f87e 	bl	8000550 <__aeabi_dmul>
 8003454:	f7fd fa8e 	bl	8000974 <__aeabi_d2uiz>
 8003458:	b280      	uxth	r0, r0
 800345a:	8530      	strh	r0, [r6, #40]	; 0x28
		
		if (Steps[1][gSequenceStepNumber_2].b.Sloped) {
 800345c:	782b      	ldrb	r3, [r5, #0]
 800345e:	3320      	adds	r3, #32
 8003460:	4a67      	ldr	r2, [pc, #412]	; (8003600 <TIM5_IRQHandler+0x200>)
 8003462:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003466:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800346a:	d05c      	beq.n	8003526 <TIM5_IRQHandler+0x126>
			//Calculate the voltage in slope mode
			CurStep = GetStepVoltage(1, gSequenceStepNumber_2);
 800346c:	7829      	ldrb	r1, [r5, #0]
 800346e:	2001      	movs	r0, #1
 8003470:	f7ff f86c 	bl	800254c <GetStepVoltage>
 8003474:	4605      	mov	r5, r0
			if(gSequencerMode_2 == SEQUENCER_MODE_RUN || gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)
 8003476:	4b63      	ldr	r3, [pc, #396]	; (8003604 <TIM5_IRQHandler+0x204>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b123      	cbz	r3, 8003486 <TIM5_IRQHandler+0x86>
 800347c:	4b61      	ldr	r3, [pc, #388]	; (8003604 <TIM5_IRQHandler+0x204>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b06      	cmp	r3, #6
 8003484:	d145      	bne.n	8003512 <TIM5_IRQHandler+0x112>
			{
				if (PreviousStep_2>CurStep) {
 8003486:	4b60      	ldr	r3, [pc, #384]	; (8003608 <TIM5_IRQHandler+0x208>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	42ab      	cmp	r3, r5
 800348c:	d822      	bhi.n	80034d4 <TIM5_IRQHandler+0xd4>
					deltaVoltage =  (float) (PreviousStep_2-CurStep) / StepWidth_2;
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 - (unsigned int) (deltaVoltage*gStepWidth_2) );
				};
				if (CurStep>PreviousStep_2) {
 800348e:	4b5e      	ldr	r3, [pc, #376]	; (8003608 <TIM5_IRQHandler+0x208>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	42ab      	cmp	r3, r5
 8003494:	d250      	bcs.n	8003538 <TIM5_IRQHandler+0x138>
					deltaVoltage =  (float) (CurStep-PreviousStep_2) / StepWidth_2;
 8003496:	4b5c      	ldr	r3, [pc, #368]	; (8003608 <TIM5_IRQHandler+0x208>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	1aad      	subs	r5, r5, r2
 800349c:	ee07 5a90 	vmov	s15, r5
 80034a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a4:	ee07 4a10 	vmov	s14, r4
 80034a8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80034ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 + (unsigned int) (deltaVoltage*gStepWidth_2) );
 80034b0:	4a56      	ldr	r2, [pc, #344]	; (800360c <TIM5_IRQHandler+0x20c>)
 80034b2:	edd2 7a00 	vldr	s15, [r2]
 80034b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c2:	ee17 1a90 	vmov	r1, s15
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4419      	add	r1, r3
 80034ca:	b289      	uxth	r1, r1
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7fd fd47 	bl	8000f60 <DAC_SetChannel2Data>
 80034d2:	e031      	b.n	8003538 <TIM5_IRQHandler+0x138>
					deltaVoltage =  (float) (PreviousStep_2-CurStep) / StepWidth_2;
 80034d4:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <TIM5_IRQHandler+0x208>)
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	1b5b      	subs	r3, r3, r5
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034e2:	ee07 4a90 	vmov	s15, r4
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 - (unsigned int) (deltaVoltage*gStepWidth_2) );
 80034ee:	6811      	ldr	r1, [r2, #0]
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <TIM5_IRQHandler+0x20c>)
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003502:	ee17 3a90 	vmov	r3, s15
 8003506:	1ac9      	subs	r1, r1, r3
 8003508:	b289      	uxth	r1, r1
 800350a:	2000      	movs	r0, #0
 800350c:	f7fd fd28 	bl	8000f60 <DAC_SetChannel2Data>
 8003510:	e7bd      	b.n	800348e <TIM5_IRQHandler+0x8e>
				};	
			}
			else
			{
				DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <TIM5_IRQHandler+0x1ec>)
 8003514:	7819      	ldrb	r1, [r3, #0]
 8003516:	2001      	movs	r0, #1
 8003518:	f7ff f818 	bl	800254c <GetStepVoltage>
 800351c:	b281      	uxth	r1, r0
 800351e:	2000      	movs	r0, #0
 8003520:	f7fd fd1e 	bl	8000f60 <DAC_SetChannel2Data>
 8003524:	e008      	b.n	8003538 <TIM5_IRQHandler+0x138>
			}
			
		} else {
			//Calculate the voltage in not slope mode
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <TIM5_IRQHandler+0x1ec>)
 8003528:	7819      	ldrb	r1, [r3, #0]
 800352a:	2001      	movs	r0, #1
 800352c:	f7ff f80e 	bl	800254c <GetStepVoltage>
 8003530:	b281      	uxth	r1, r0
 8003532:	2000      	movs	r0, #0
 8003534:	f7fd fd14 	bl	8000f60 <DAC_SetChannel2Data>
		};

			MAX5135_DAC_send(EXT_DAC_CH_2, Steps[1][gSequenceStepNumber_2].b.TLevel >> 2);
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <TIM5_IRQHandler+0x1ec>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	3320      	adds	r3, #32
 800353e:	4a30      	ldr	r2, [pc, #192]	; (8003600 <TIM5_IRQHandler+0x200>)
 8003540:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8003544:	f3c1 3189 	ubfx	r1, r1, #14, #10
 8003548:	2002      	movs	r0, #2
 800354a:	f7fe faaf 	bl	8001aac <MAX5135_DAC_send>
			MAX5135_DAC_send(EXT_DAC_CH_3, 0x3FF - (unsigned int) (((double) 0x3FF/ (double) StepWidth_2)*((double) gStepWidth_2)) );
 800354e:	4620      	mov	r0, r4
 8003550:	f7fc ff84 	bl	800045c <__aeabi_ui2d>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	a121      	add	r1, pc, #132	; (adr r1, 80035e0 <TIM5_IRQHandler+0x1e0>)
 800355a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800355e:	f7fd f921 	bl	80007a4 <__aeabi_ddiv>
 8003562:	4606      	mov	r6, r0
 8003564:	460f      	mov	r7, r1
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <TIM5_IRQHandler+0x20c>)
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	f7fc ff77 	bl	800045c <__aeabi_ui2d>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4630      	mov	r0, r6
 8003574:	4639      	mov	r1, r7
 8003576:	f7fc ffeb 	bl	8000550 <__aeabi_dmul>
 800357a:	f7fd f9fb 	bl	8000974 <__aeabi_d2uiz>
 800357e:	f5c0 717f 	rsb	r1, r0, #1020	; 0x3fc
 8003582:	3103      	adds	r1, #3
 8003584:	2003      	movs	r0, #3
 8003586:	f7fe fa91 	bl	8001aac <MAX5135_DAC_send>

	/* Increment step counter */
		if ((gSequencerMode_2 == SEQUENCER_MODE_RUN ) || ((gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)))
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <TIM5_IRQHandler+0x204>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b123      	cbz	r3, 800359a <TIM5_IRQHandler+0x19a>
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <TIM5_IRQHandler+0x204>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b06      	cmp	r3, #6
 8003598:	d103      	bne.n	80035a2 <TIM5_IRQHandler+0x1a2>
		{
			gStepWidth_2++;
 800359a:	4a1c      	ldr	r2, [pc, #112]	; (800360c <TIM5_IRQHandler+0x20c>)
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	3301      	adds	r3, #1
 80035a0:	6013      	str	r3, [r2, #0]
		};

		if ((gStepWidth_2 < StepWidth_2)) {
 80035a2:	4b1a      	ldr	r3, [pc, #104]	; (800360c <TIM5_IRQHandler+0x20c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	42a3      	cmp	r3, r4
 80035a8:	d234      	bcs.n	8003614 <TIM5_IRQHandler+0x214>

			}
		};
	

	if (gSequencerMode_2 == SEQUENCER_MODE_WAIT) {
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <TIM5_IRQHandler+0x204>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	f000 8141 	beq.w	8003838 <TIM5_IRQHandler+0x438>
			TIM_Cmd(TIM8, ENABLE);
			TIM_SetCounter(TIM8, 0x00);
		}
	};	
	
		if (gSequencerMode_2 == SEQUENCER_MODE_WAIT_STROBE) {
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <TIM5_IRQHandler+0x204>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b03      	cmp	r3, #3
 80035be:	f000 819f 	beq.w	8003900 <TIM5_IRQHandler+0x500>

		gSequencerMode_2 = gPrevSequencerMode_2;
	}
	
	
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <TIM5_IRQHandler+0x210>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f000 81ad 	beq.w	8003928 <TIM5_IRQHandler+0x528>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};	
		return;
};
 80035ce:	b003      	add	sp, #12
 80035d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035d4:	f3af 8000 	nop.w
 80035d8:	00000000 	.word	0x00000000
 80035dc:	40c48200 	.word	0x40c48200
 80035e0:	00000000 	.word	0x00000000
 80035e4:	408ff800 	.word	0x408ff800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	200002c0 	.word	0x200002c0
 80035f0:	200007f8 	.word	0x200007f8
 80035f4:	400c0000 	.word	0x400c0000
 80035f8:	20000250 	.word	0x20000250
 80035fc:	3fe00000 	.word	0x3fe00000
 8003600:	200008a4 	.word	0x200008a4
 8003604:	200002c2 	.word	0x200002c2
 8003608:	200002a4 	.word	0x200002a4
 800360c:	200002c8 	.word	0x200002c8
 8003610:	200002b0 	.word	0x200002b0
			PreviousStep_2 = GetStepVoltage(1, gSequenceStepNumber_2);	
 8003614:	4bab      	ldr	r3, [pc, #684]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003616:	7819      	ldrb	r1, [r3, #0]
 8003618:	2001      	movs	r0, #1
 800361a:	f7fe ff97 	bl	800254c <GetStepVoltage>
 800361e:	4baa      	ldr	r3, [pc, #680]	; (80038c8 <TIM5_IRQHandler+0x4c8>)
 8003620:	6018      	str	r0, [r3, #0]
			if((gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)) { 
 8003622:	4baa      	ldr	r3, [pc, #680]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b06      	cmp	r3, #6
 800362a:	f000 8096 	beq.w	800375a <TIM5_IRQHandler+0x35a>
			if (Steps[1][gSequenceStepNumber_2].b.OpModeSTOP) {
 800362e:	4ba5      	ldr	r3, [pc, #660]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	f103 0220 	add.w	r2, r3, #32
 8003636:	4ba6      	ldr	r3, [pc, #664]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 8003638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f013 0f02 	tst.w	r3, #2
 8003642:	d006      	beq.n	8003652 <TIM5_IRQHandler+0x252>
				gPrevSequencerMode_2 = gSequencerMode_2;
 8003644:	4aa1      	ldr	r2, [pc, #644]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 8003646:	7813      	ldrb	r3, [r2, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	49a2      	ldr	r1, [pc, #648]	; (80038d4 <TIM5_IRQHandler+0x4d4>)
 800364c:	700b      	strb	r3, [r1, #0]
				gSequencerMode_2 = SEQUENCER_MODE_STOP;				
 800364e:	2302      	movs	r3, #2
 8003650:	7013      	strb	r3, [r2, #0]
			if ( (Steps[1][gSequenceStepNumber_2].b.OpModeENABLE))  {
 8003652:	4b9c      	ldr	r3, [pc, #624]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f103 0220 	add.w	r2, r3, #32
 800365a:	4b9d      	ldr	r3, [pc, #628]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 800365c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f013 0f08 	tst.w	r3, #8
 8003666:	d17c      	bne.n	8003762 <TIM5_IRQHandler+0x362>
			if ( (Steps[1][gSequenceStepNumber_2].b.OpModeSUSTAIN)) {
 8003668:	4b96      	ldr	r3, [pc, #600]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f103 0220 	add.w	r2, r3, #32
 8003670:	4b97      	ldr	r3, [pc, #604]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 8003672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f013 0f04 	tst.w	r3, #4
 800367c:	f040 8086 	bne.w	800378c <TIM5_IRQHandler+0x38c>
			if ( (!(Steps[1][gSequenceStepNumber_2].b.OpModeSTOP)) &&
 8003680:	4b90      	ldr	r3, [pc, #576]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f103 0220 	add.w	r2, r3, #32
 8003688:	4b91      	ldr	r3, [pc, #580]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 800368a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f013 0f02 	tst.w	r3, #2
 8003694:	d112      	bne.n	80036bc <TIM5_IRQHandler+0x2bc>
					(!(Steps[1][gSequenceStepNumber_2].b.OpModeENABLE)) &&
 8003696:	4b8b      	ldr	r3, [pc, #556]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	f103 0220 	add.w	r2, r3, #32
 800369e:	4b8c      	ldr	r3, [pc, #560]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 80036a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036a4:	685b      	ldr	r3, [r3, #4]
			if ( (!(Steps[1][gSequenceStepNumber_2].b.OpModeSTOP)) &&
 80036a6:	f013 0f08 	tst.w	r3, #8
 80036aa:	d107      	bne.n	80036bc <TIM5_IRQHandler+0x2bc>
					(!(Steps[1][gSequenceStepNumber_2].b.OpModeSUSTAIN)) ) {
 80036ac:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	f103 0220 	add.w	r2, r3, #32
 80036b4:	4b86      	ldr	r3, [pc, #536]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 80036b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036ba:	685b      	ldr	r3, [r3, #4]
			gStepWidth_2 = 0;
 80036bc:	4b86      	ldr	r3, [pc, #536]	; (80038d8 <TIM5_IRQHandler+0x4d8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
			if (gSequencerMode_2 == SEQUENCER_MODE_RUN) {
 80036c2:	4b82      	ldr	r3, [pc, #520]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d077      	beq.n	80037ba <TIM5_IRQHandler+0x3ba>
			if (gSequencerMode_2 == SEQUENCER_MODE_STOP) {
 80036ca:	4b80      	ldr	r3, [pc, #512]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f47f af6a 	bne.w	80035aa <TIM5_IRQHandler+0x1aa>
							printf("STOP \n");
 80036d6:	4881      	ldr	r0, [pc, #516]	; (80038dc <TIM5_IRQHandler+0x4dc>)
 80036d8:	f003 f80e 	bl	80066f8 <puts>
							if (gPrevSequencerMode_2 == gSequencerMode_2)
 80036dc:	4b7d      	ldr	r3, [pc, #500]	; (80038d4 <TIM5_IRQHandler+0x4d4>)
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	4b7a      	ldr	r3, [pc, #488]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	429a      	cmp	r2, r3
 80036ea:	f47f af5e 	bne.w	80035aa <TIM5_IRQHandler+0x1aa>
									PULSE_LED_II_ALL_ON;
 80036ee:	2104      	movs	r1, #4
 80036f0:	487b      	ldr	r0, [pc, #492]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 80036f2:	f7fd fcf8 	bl	80010e6 <GPIO_ResetBits>
									PulseStatus;
 80036f6:	497b      	ldr	r1, [pc, #492]	; (80038e4 <TIM5_IRQHandler+0x4e4>)
 80036f8:	780a      	ldrb	r2, [r1, #0]
 80036fa:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <TIM5_IRQHandler+0x4e8>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	487b      	ldr	r0, [pc, #492]	; (80038ec <TIM5_IRQHandler+0x4ec>)
 8003700:	7800      	ldrb	r0, [r0, #0]
 8003702:	7809      	ldrb	r1, [r1, #0]
 8003704:	4c72      	ldr	r4, [pc, #456]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 8003706:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800370a:	6849      	ldr	r1, [r1, #4]
 800370c:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 8003710:	9101      	str	r1, [sp, #4]
 8003712:	9000      	str	r0, [sp, #0]
 8003714:	f240 514f 	movw	r1, #1359	; 0x54f
 8003718:	4875      	ldr	r0, [pc, #468]	; (80038f0 <TIM5_IRQHandler+0x4f0>)
 800371a:	f002 ffca 	bl	80066b2 <iprintf>
										if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 800371e:	4b69      	ldr	r3, [pc, #420]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	3320      	adds	r3, #32
 8003724:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800372e:	d178      	bne.n	8003822 <TIM5_IRQHandler+0x422>
										if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8003730:	4b64      	ldr	r3, [pc, #400]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	f103 0220 	add.w	r2, r3, #32
 8003738:	4b65      	ldr	r3, [pc, #404]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 800373a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003744:	d172      	bne.n	800382c <TIM5_IRQHandler+0x42c>
									TIM_Cmd(TIM8, ENABLE);
 8003746:	4c6b      	ldr	r4, [pc, #428]	; (80038f4 <TIM5_IRQHandler+0x4f4>)
 8003748:	2101      	movs	r1, #1
 800374a:	4620      	mov	r0, r4
 800374c:	f7fd feb2 	bl	80014b4 <TIM_Cmd>
									TIM_SetCounter(TIM8, 0x00);
 8003750:	2100      	movs	r1, #0
 8003752:	4620      	mov	r0, r4
 8003754:	f7fd fe9f 	bl	8001496 <TIM_SetCounter>
 8003758:	e727      	b.n	80035aa <TIM5_IRQHandler+0x1aa>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 800375a:	4b5c      	ldr	r3, [pc, #368]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e765      	b.n	800362e <TIM5_IRQHandler+0x22e>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0)) 
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	4864      	ldr	r0, [pc, #400]	; (80038f8 <TIM5_IRQHandler+0x4f8>)
 8003766:	f7fd fcb5 	bl	80010d4 <GPIO_ReadInputDataBit>
 800376a:	2800      	cmp	r0, #0
 800376c:	f47f af7c 	bne.w	8003668 <TIM5_IRQHandler+0x268>
					if(gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z)
 8003770:	4b56      	ldr	r3, [pc, #344]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b04      	cmp	r3, #4
 8003778:	f43f af76 	beq.w	8003668 <TIM5_IRQHandler+0x268>
						gPrevSequencerMode_2 = gSequencerMode_2;
 800377c:	4a53      	ldr	r2, [pc, #332]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 800377e:	7813      	ldrb	r3, [r2, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	4954      	ldr	r1, [pc, #336]	; (80038d4 <TIM5_IRQHandler+0x4d4>)
 8003784:	700b      	strb	r3, [r1, #0]
						gSequencerMode_2 = SEQUENCER_MODE_WAIT_HI_Z;
 8003786:	2304      	movs	r3, #4
 8003788:	7013      	strb	r3, [r2, #0]
 800378a:	e76d      	b.n	8003668 <TIM5_IRQHandler+0x268>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1)) 
 800378c:	2140      	movs	r1, #64	; 0x40
 800378e:	485a      	ldr	r0, [pc, #360]	; (80038f8 <TIM5_IRQHandler+0x4f8>)
 8003790:	f7fd fca0 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003794:	2801      	cmp	r0, #1
 8003796:	f47f af73 	bne.w	8003680 <TIM5_IRQHandler+0x280>
					if(gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 800379a:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	f43f af6d 	beq.w	8003680 <TIM5_IRQHandler+0x280>
						gPrevSequencerMode_2 = gSequencerMode_2;
 80037a6:	4a49      	ldr	r2, [pc, #292]	; (80038cc <TIM5_IRQHandler+0x4cc>)
 80037a8:	7813      	ldrb	r3, [r2, #0]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	4949      	ldr	r1, [pc, #292]	; (80038d4 <TIM5_IRQHandler+0x4d4>)
 80037ae:	700b      	strb	r3, [r1, #0]
						gSequencerMode_2 = SEQUENCER_MODE_STAY_HI_Z;
 80037b0:	2305      	movs	r3, #5
 80037b2:	7013      	strb	r3, [r2, #0]
						InitStart_2_SignalTimer();
 80037b4:	f7fe fcd6 	bl	8002164 <InitStart_2_SignalTimer>
 80037b8:	e762      	b.n	8003680 <TIM5_IRQHandler+0x280>
					gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 80037ba:	4c42      	ldr	r4, [pc, #264]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 80037bc:	7821      	ldrb	r1, [r4, #0]
 80037be:	2001      	movs	r0, #1
 80037c0:	f7ff f81a 	bl	80027f8 <GetNextStep>
 80037c4:	7020      	strb	r0, [r4, #0]
				PULSE_LED_II_ALL_ON;
 80037c6:	2104      	movs	r1, #4
 80037c8:	4845      	ldr	r0, [pc, #276]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 80037ca:	f7fd fc8c 	bl	80010e6 <GPIO_ResetBits>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 80037ce:	7823      	ldrb	r3, [r4, #0]
 80037d0:	f103 0220 	add.w	r2, r3, #32
 80037d4:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 80037d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80037e0:	d114      	bne.n	800380c <TIM5_IRQHandler+0x40c>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 80037e2:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	f103 0220 	add.w	r2, r3, #32
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 80037ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80037f6:	d10e      	bne.n	8003816 <TIM5_IRQHandler+0x416>
				TIM_Cmd(TIM8, ENABLE);
 80037f8:	4c3e      	ldr	r4, [pc, #248]	; (80038f4 <TIM5_IRQHandler+0x4f4>)
 80037fa:	2101      	movs	r1, #1
 80037fc:	4620      	mov	r0, r4
 80037fe:	f7fd fe59 	bl	80014b4 <TIM_Cmd>
				TIM_SetCounter(TIM8, 0x00);
 8003802:	2100      	movs	r1, #0
 8003804:	4620      	mov	r0, r4
 8003806:	f7fd fe46 	bl	8001496 <TIM_SetCounter>
 800380a:	e75e      	b.n	80036ca <TIM5_IRQHandler+0x2ca>
					PULSE_LED_II_1_ON;
 800380c:	2108      	movs	r1, #8
 800380e:	4834      	ldr	r0, [pc, #208]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 8003810:	f7fd fc69 	bl	80010e6 <GPIO_ResetBits>
 8003814:	e7e5      	b.n	80037e2 <TIM5_IRQHandler+0x3e2>
					PULSE_LED_II_2_ON;
 8003816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800381a:	4831      	ldr	r0, [pc, #196]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 800381c:	f7fd fc63 	bl	80010e6 <GPIO_ResetBits>
 8003820:	e7ea      	b.n	80037f8 <TIM5_IRQHandler+0x3f8>
											PULSE_LED_II_1_ON;
 8003822:	2108      	movs	r1, #8
 8003824:	482e      	ldr	r0, [pc, #184]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 8003826:	f7fd fc5e 	bl	80010e6 <GPIO_ResetBits>
 800382a:	e781      	b.n	8003730 <TIM5_IRQHandler+0x330>
											PULSE_LED_II_2_ON;
 800382c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003830:	482b      	ldr	r0, [pc, #172]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 8003832:	f7fd fc58 	bl	80010e6 <GPIO_ResetBits>
 8003836:	e786      	b.n	8003746 <TIM5_IRQHandler+0x346>
		if(gSequenceStepNumber_2 != (unsigned int)(pots_step[1]-1))
 8003838:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <TIM5_IRQHandler+0x4fc>)
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	3b01      	subs	r3, #1
 8003844:	429a      	cmp	r2, r3
 8003846:	f43f aeb6 	beq.w	80035b6 <TIM5_IRQHandler+0x1b6>
			gSequenceStepNumber_2 = (unsigned int)(pots_step[1]-1);
 800384a:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <TIM5_IRQHandler+0x4fc>)
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	3b01      	subs	r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	4c1c      	ldr	r4, [pc, #112]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003854:	7023      	strb	r3, [r4, #0]
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003856:	7821      	ldrb	r1, [r4, #0]
 8003858:	2001      	movs	r0, #1
 800385a:	f7fe fe77 	bl	800254c <GetStepVoltage>
 800385e:	b281      	uxth	r1, r0
 8003860:	2000      	movs	r0, #0
 8003862:	f7fd fb7d 	bl	8000f60 <DAC_SetChannel2Data>
			PULSE_LED_II_ALL_ON;
 8003866:	2104      	movs	r1, #4
 8003868:	481d      	ldr	r0, [pc, #116]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 800386a:	f7fd fc3c 	bl	80010e6 <GPIO_ResetBits>
			if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 800386e:	7823      	ldrb	r3, [r4, #0]
 8003870:	f103 0220 	add.w	r2, r3, #32
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 8003876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003880:	d114      	bne.n	80038ac <TIM5_IRQHandler+0x4ac>
			if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <TIM5_IRQHandler+0x4c4>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	f103 0220 	add.w	r2, r3, #32
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <TIM5_IRQHandler+0x4d0>)
 800388c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003896:	d10e      	bne.n	80038b6 <TIM5_IRQHandler+0x4b6>
			TIM_Cmd(TIM8, ENABLE);
 8003898:	4c16      	ldr	r4, [pc, #88]	; (80038f4 <TIM5_IRQHandler+0x4f4>)
 800389a:	2101      	movs	r1, #1
 800389c:	4620      	mov	r0, r4
 800389e:	f7fd fe09 	bl	80014b4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 80038a2:	2100      	movs	r1, #0
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7fd fdf6 	bl	8001496 <TIM_SetCounter>
 80038aa:	e684      	b.n	80035b6 <TIM5_IRQHandler+0x1b6>
				PULSE_LED_II_1_ON;
 80038ac:	2108      	movs	r1, #8
 80038ae:	480c      	ldr	r0, [pc, #48]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 80038b0:	f7fd fc19 	bl	80010e6 <GPIO_ResetBits>
 80038b4:	e7e5      	b.n	8003882 <TIM5_IRQHandler+0x482>
				PULSE_LED_II_2_ON;
 80038b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038ba:	4809      	ldr	r0, [pc, #36]	; (80038e0 <TIM5_IRQHandler+0x4e0>)
 80038bc:	f7fd fc13 	bl	80010e6 <GPIO_ResetBits>
 80038c0:	e7ea      	b.n	8003898 <TIM5_IRQHandler+0x498>
 80038c2:	bf00      	nop
 80038c4:	200002c0 	.word	0x200002c0
 80038c8:	200002a4 	.word	0x200002a4
 80038cc:	200002c2 	.word	0x200002c2
 80038d0:	200008a4 	.word	0x200008a4
 80038d4:	200002be 	.word	0x200002be
 80038d8:	200002c8 	.word	0x200002c8
 80038dc:	080067d4 	.word	0x080067d4
 80038e0:	40020000 	.word	0x40020000
 80038e4:	200002bf 	.word	0x200002bf
 80038e8:	200002c1 	.word	0x200002c1
 80038ec:	200002bd 	.word	0x200002bd
 80038f0:	08006790 	.word	0x08006790
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40020400 	.word	0x40020400
 80038fc:	20000274 	.word	0x20000274
			gSequenceStepNumber_2 = (unsigned int)(pots_step[1]-1);
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <TIM5_IRQHandler+0x53c>)
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	3b01      	subs	r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <TIM5_IRQHandler+0x540>)
 800390a:	7013      	strb	r3, [r2, #0]
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 800390c:	7811      	ldrb	r1, [r2, #0]
 800390e:	2001      	movs	r0, #1
 8003910:	f7fe fe1c 	bl	800254c <GetStepVoltage>
 8003914:	b281      	uxth	r1, r0
 8003916:	2000      	movs	r0, #0
 8003918:	f7fd fb22 	bl	8000f60 <DAC_SetChannel2Data>
		gSequencerMode_2 = gPrevSequencerMode_2;
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <TIM5_IRQHandler+0x544>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <TIM5_IRQHandler+0x548>)
 8003924:	7013      	strb	r3, [r2, #0]
 8003926:	e64c      	b.n	80035c2 <TIM5_IRQHandler+0x1c2>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <TIM5_IRQHandler+0x54c>)
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	f042 0202 	orr.w	r2, r2, #2
 8003938:	701a      	strb	r2, [r3, #0]
		return;
 800393a:	e648      	b.n	80035ce <TIM5_IRQHandler+0x1ce>
 800393c:	20000274 	.word	0x20000274
 8003940:	200002c0 	.word	0x200002c0
 8003944:	200002be 	.word	0x200002be
 8003948:	200002c2 	.word	0x200002c2
 800394c:	200002f0 	.word	0x200002f0

08003950 <mTimersInit>:

/*
	Init 2 timers to control steps
*/
void mTimersInit(void)
{
 8003950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003954:	b084      	sub	sp, #16
	TIM_TimeBaseInitTypeDef myTimer;
	NVIC_InitTypeDef nvicStructure;
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003956:	2101      	movs	r1, #1
 8003958:	2004      	movs	r0, #4
 800395a:	f7fd fc47 	bl	80011ec <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseStructInit(&myTimer);
 800395e:	a801      	add	r0, sp, #4
 8003960:	f7fd fd90 	bl	8001484 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = STEP_TIMER_PRESCALER;
 8003964:	f642 1304 	movw	r3, #10500	; 0x2904
 8003968:	f8ad 3004 	strh.w	r3, [sp, #4]
	myTimer.TIM_Period = 1;
 800396c:	2401      	movs	r4, #1
 800396e:	9402      	str	r4, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 8003970:	2500      	movs	r5, #0
 8003972:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 8003976:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM4, &myTimer);	
 800397a:	4f4d      	ldr	r7, [pc, #308]	; (8003ab0 <mTimersInit+0x160>)
 800397c:	a901      	add	r1, sp, #4
 800397e:	4638      	mov	r0, r7
 8003980:	f7fd fd42 	bl	8001408 <TIM_TimeBaseInit>
	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8003984:	4621      	mov	r1, r4
 8003986:	4638      	mov	r0, r7
 8003988:	f7fd fd87 	bl	800149a <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM4, ENABLE);
 800398c:	4621      	mov	r1, r4
 800398e:	4638      	mov	r0, r7
 8003990:	f7fd fd90 	bl	80014b4 <TIM_Cmd>
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8003994:	4621      	mov	r1, r4
 8003996:	2008      	movs	r0, #8
 8003998:	f7fd fc28 	bl	80011ec <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInit(TIM5, &myTimer);
 800399c:	4e45      	ldr	r6, [pc, #276]	; (8003ab4 <mTimersInit+0x164>)
 800399e:	a901      	add	r1, sp, #4
 80039a0:	4630      	mov	r0, r6
 80039a2:	f7fd fd31 	bl	8001408 <TIM_TimeBaseInit>
	TIM_ARRPreloadConfig(TIM5, ENABLE);
 80039a6:	4621      	mov	r1, r4
 80039a8:	4630      	mov	r0, r6
 80039aa:	f7fd fd76 	bl	800149a <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM5, ENABLE);
 80039ae:	4621      	mov	r1, r4
 80039b0:	4630      	mov	r0, r6
 80039b2:	f7fd fd7f 	bl	80014b4 <TIM_Cmd>
	
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80039b6:	4622      	mov	r2, r4
 80039b8:	4621      	mov	r1, r4
 80039ba:	4638      	mov	r0, r7
 80039bc:	f7fd fd9a 	bl	80014f4 <TIM_ITConfig>
	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 80039c0:	4622      	mov	r2, r4
 80039c2:	4621      	mov	r1, r4
 80039c4:	4630      	mov	r0, r6
 80039c6:	f7fd fd95 	bl	80014f4 <TIM_ITConfig>
	
	
	
	nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 80039ca:	231e      	movs	r3, #30
 80039cc:	f88d 3000 	strb.w	r3, [sp]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80039d0:	f88d 5001 	strb.w	r5, [sp, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 80039d4:	f88d 5002 	strb.w	r5, [sp, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80039d8:	f88d 4003 	strb.w	r4, [sp, #3]
	NVIC_Init(&nvicStructure);
 80039dc:	4668      	mov	r0, sp
 80039de:	f7fd f9a1 	bl	8000d24 <NVIC_Init>
	
	nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 80039e2:	2332      	movs	r3, #50	; 0x32
 80039e4:	f88d 3000 	strb.w	r3, [sp]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80039e8:	f88d 5001 	strb.w	r5, [sp, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 80039ec:	f88d 5002 	strb.w	r5, [sp, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80039f0:	f88d 4003 	strb.w	r4, [sp, #3]
	NVIC_Init(&nvicStructure);
 80039f4:	4668      	mov	r0, sp
 80039f6:	f7fd f995 	bl	8000d24 <NVIC_Init>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80039fa:	4e2f      	ldr	r6, [pc, #188]	; (8003ab8 <mTimersInit+0x168>)
 80039fc:	f886 531e 	strb.w	r5, [r6, #798]	; 0x31e
 8003a00:	f886 5332 	strb.w	r5, [r6, #818]	; 0x332
	
	NVIC_SetPriority (TIM4_IRQn, 0);
	NVIC_SetPriority (TIM5_IRQn, 0);
	
	SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup_0;
 8003a04:	4b2d      	ldr	r3, [pc, #180]	; (8003abc <mTimersInit+0x16c>)
 8003a06:	4a2e      	ldr	r2, [pc, #184]	; (8003ac0 <mTimersInit+0x170>)
 8003a08:	60da      	str	r2, [r3, #12]
	
	gStepWidth_1 = 8;
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ac4 <mTimersInit+0x174>)
 8003a0e:	6013      	str	r3, [r2, #0]
	gStepWidth_2 = 8;
 8003a10:	4a2d      	ldr	r2, [pc, #180]	; (8003ac8 <mTimersInit+0x178>)
 8003a12:	6013      	str	r3, [r2, #0]
	gFullStepWidth_1 = 8;
 8003a14:	4a2d      	ldr	r2, [pc, #180]	; (8003acc <mTimersInit+0x17c>)
 8003a16:	6013      	str	r3, [r2, #0]
	gFullStepWidth_2 = 8;
 8003a18:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <mTimersInit+0x180>)
 8003a1a:	6013      	str	r3, [r2, #0]
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a22:	f7fd fbe3 	bl	80011ec <RCC_APB1PeriphClockCmd>
	
	TIM_TimeBaseStructInit(&myTimer);
 8003a26:	a801      	add	r0, sp, #4
 8003a28:	f7fd fd2c 	bl	8001484 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = 210;
 8003a2c:	f04f 08d2 	mov.w	r8, #210	; 0xd2
 8003a30:	f8ad 8004 	strh.w	r8, [sp, #4]
	myTimer.TIM_Period = 320;
 8003a34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003a38:	9302      	str	r3, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 8003a3a:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 8003a3e:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM14, &myTimer);	
 8003a42:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
 8003a46:	a901      	add	r1, sp, #4
 8003a48:	4638      	mov	r0, r7
 8003a4a:	f7fd fcdd 	bl	8001408 <TIM_TimeBaseInit>
	
	TIM_Cmd(TIM14, DISABLE);
 8003a4e:	4629      	mov	r1, r5
 8003a50:	4638      	mov	r0, r7
 8003a52:	f7fd fd2f 	bl	80014b4 <TIM_Cmd>
	TIM_ITConfig(TIM14, TIM_IT_Update, ENABLE);
 8003a56:	4622      	mov	r2, r4
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f7fd fd4a 	bl	80014f4 <TIM_ITConfig>
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8003a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a64:	6073      	str	r3, [r6, #4]
	NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8003a66:	4621      	mov	r1, r4
 8003a68:	2002      	movs	r0, #2
 8003a6a:	f7fd fbcd 	bl	8001208 <RCC_APB2PeriphClockCmd>
	
	TIM_TimeBaseStructInit(&myTimer);
 8003a6e:	a801      	add	r0, sp, #4
 8003a70:	f7fd fd08 	bl	8001484 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = 210;
 8003a74:	f8ad 8004 	strh.w	r8, [sp, #4]
	myTimer.TIM_Period = 640;// Seq2 pulse duration
 8003a78:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003a7c:	9302      	str	r3, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 8003a7e:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 8003a82:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM8, &myTimer);	
 8003a86:	f507 4764 	add.w	r7, r7, #58368	; 0xe400
 8003a8a:	a901      	add	r1, sp, #4
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	f7fd fcbb 	bl	8001408 <TIM_TimeBaseInit>
	
	TIM_Cmd(TIM8, DISABLE);
 8003a92:	4629      	mov	r1, r5
 8003a94:	4638      	mov	r0, r7
 8003a96:	f7fd fd0d 	bl	80014b4 <TIM_Cmd>
	TIM_ITConfig(TIM8, TIM_IT_Update, ENABLE);
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f7fd fd28 	bl	80014f4 <TIM_ITConfig>
 8003aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa8:	6073      	str	r3, [r6, #4]
	NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
	
};
 8003aaa:	b004      	add	sp, #16
 8003aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00
 8003ac0:	05fa0700 	.word	0x05fa0700
 8003ac4:	200002c4 	.word	0x200002c4
 8003ac8:	200002c8 	.word	0x200002c8
 8003acc:	200002b4 	.word	0x200002b4
 8003ad0:	200002b8 	.word	0x200002b8

08003ad4 <TIM8_UP_TIM13_IRQHandler>:

//Turn off pulses
//Section 1
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ad4:	b538      	push	{r3, r4, r5, lr}
	if(TIM_GetITStatus(TIM8, TIM_IT_Update) != RESET)
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	480e      	ldr	r0, [pc, #56]	; (8003b14 <TIM8_UP_TIM13_IRQHandler+0x40>)
 8003ada:	f7fd fd15 	bl	8001508 <TIM_GetITStatus>
 8003ade:	b900      	cbnz	r0, 8003ae2 <TIM8_UP_TIM13_IRQHandler+0xe>
		PULSE_LED_II_ALL_OFF;
		PULSE_LED_II_1_OFF;
		PULSE_LED_II_2_OFF;
		TIM_ClearITPendingBit(TIM8, TIM_IT_Update);
	}		
}
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}
		TIM_Cmd(TIM8, DISABLE);
 8003ae2:	4d0c      	ldr	r5, [pc, #48]	; (8003b14 <TIM8_UP_TIM13_IRQHandler+0x40>)
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f7fd fce4 	bl	80014b4 <TIM_Cmd>
		PULSE_LED_II_ALL_OFF;
 8003aec:	4c0a      	ldr	r4, [pc, #40]	; (8003b18 <TIM8_UP_TIM13_IRQHandler+0x44>)
 8003aee:	2104      	movs	r1, #4
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7fd faf6 	bl	80010e2 <GPIO_SetBits>
		PULSE_LED_II_1_OFF;
 8003af6:	2108      	movs	r1, #8
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7fd faf2 	bl	80010e2 <GPIO_SetBits>
		PULSE_LED_II_2_OFF;
 8003afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7fd faed 	bl	80010e2 <GPIO_SetBits>
		TIM_ClearITPendingBit(TIM8, TIM_IT_Update);
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f7fd fd08 	bl	8001520 <TIM_ClearITPendingBit>
}
 8003b10:	e7e6      	b.n	8003ae0 <TIM8_UP_TIM13_IRQHandler+0xc>
 8003b12:	bf00      	nop
 8003b14:	40010400 	.word	0x40010400
 8003b18:	40020000 	.word	0x40020000

08003b1c <TIM8_TRG_COM_TIM14_IRQHandler>:

//Section 2
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003b1c:	b538      	push	{r3, r4, r5, lr}
	if(TIM_GetITStatus(TIM14, TIM_IT_Update) != RESET)
 8003b1e:	2101      	movs	r1, #1
 8003b20:	480f      	ldr	r0, [pc, #60]	; (8003b60 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8003b22:	f7fd fcf1 	bl	8001508 <TIM_GetITStatus>
 8003b26:	b900      	cbnz	r0, 8003b2a <TIM8_TRG_COM_TIM14_IRQHandler+0xe>
		PULSE_LED_I_ALL_OFF;
		PULSE_LED_I_1_OFF;
		PULSE_LED_I_2_OFF;
		TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
	}		
}
 8003b28:	bd38      	pop	{r3, r4, r5, pc}
		TIM_Cmd(TIM14, DISABLE);
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	; (8003b60 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f7fd fcc0 	bl	80014b4 <TIM_Cmd>
		PULSE_LED_I_ALL_OFF;
 8003b34:	4c0b      	ldr	r4, [pc, #44]	; (8003b64 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>)
 8003b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f7fd fad1 	bl	80010e2 <GPIO_SetBits>
		PULSE_LED_I_1_OFF;
 8003b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b44:	4620      	mov	r0, r4
 8003b46:	f7fd facc 	bl	80010e2 <GPIO_SetBits>
		PULSE_LED_I_2_OFF;
 8003b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7fd fac7 	bl	80010e2 <GPIO_SetBits>
		TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
 8003b54:	2101      	movs	r1, #1
 8003b56:	4628      	mov	r0, r5
 8003b58:	f7fd fce2 	bl	8001520 <TIM_ClearITPendingBit>
}
 8003b5c:	e7e4      	b.n	8003b28 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>
 8003b5e:	bf00      	nop
 8003b60:	40002000 	.word	0x40002000
 8003b64:	40020400 	.word	0x40020400

08003b68 <TIM3_IRQHandler>:

//Timer Interrupt handler for start switch scan
//Section 1
void TIM3_IRQHandler()
{
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	b082      	sub	sp, #8
	TIM3->SR = (uint16_t) ~TIM_IT_Update;	
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <TIM3_IRQHandler+0x154>)
 8003b6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b72:	821a      	strh	r2, [r3, #16]
	
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003b74:	4b52      	ldr	r3, [pc, #328]	; (8003cc0 <TIM3_IRQHandler+0x158>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d010      	beq.n	8003ba0 <TIM3_IRQHandler+0x38>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0) ) {
	}
	else if((gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003b7e:	4b50      	ldr	r3, [pc, #320]	; (8003cc0 <TIM3_IRQHandler+0x158>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d013      	beq.n	8003bb0 <TIM3_IRQHandler+0x48>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
		TIM3->CR1 &= ~TIM_CR1_CEN;
	}
	
	if((gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)
 8003b88:	4b4d      	ldr	r3, [pc, #308]	; (8003cc0 <TIM3_IRQHandler+0x158>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d025      	beq.n	8003bde <TIM3_IRQHandler+0x76>
	{
PulseStatus;


	}
	else if((gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)
 8003b92:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <TIM3_IRQHandler+0x158>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d03c      	beq.n	8003c16 <TIM3_IRQHandler+0xae>
					};

					TIM_Cmd(TIM14, ENABLE);
					TIM_SetCounter(TIM14, 0x00);
	}
};
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0) ) {
 8003ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ba4:	4847      	ldr	r0, [pc, #284]	; (8003cc4 <TIM3_IRQHandler+0x15c>)
 8003ba6:	f7fd fa95 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d0ec      	beq.n	8003b88 <TIM3_IRQHandler+0x20>
 8003bae:	e7e6      	b.n	8003b7e <TIM3_IRQHandler+0x16>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
 8003bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bb4:	4843      	ldr	r0, [pc, #268]	; (8003cc4 <TIM3_IRQHandler+0x15c>)
 8003bb6:	f7fd fa8d 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003bba:	2801      	cmp	r0, #1
 8003bbc:	d1e4      	bne.n	8003b88 <TIM3_IRQHandler+0x20>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <TIM3_IRQHandler+0x158>)
 8003bc2:	7018      	strb	r0, [r3, #0]
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8003bc4:	4c40      	ldr	r4, [pc, #256]	; (8003cc8 <TIM3_IRQHandler+0x160>)
 8003bc6:	7821      	ldrb	r1, [r4, #0]
 8003bc8:	f7fe fe16 	bl	80027f8 <GetNextStep>
 8003bcc:	7020      	strb	r0, [r4, #0]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8003bce:	4a3b      	ldr	r2, [pc, #236]	; (8003cbc <TIM3_IRQHandler+0x154>)
 8003bd0:	8813      	ldrh	r3, [r2, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	8013      	strh	r3, [r2, #0]
 8003bdc:	e7d4      	b.n	8003b88 <TIM3_IRQHandler+0x20>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
 8003bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003be2:	4838      	ldr	r0, [pc, #224]	; (8003cc4 <TIM3_IRQHandler+0x15c>)
 8003be4:	f7fd fa76 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003be8:	2801      	cmp	r0, #1
 8003bea:	d1d2      	bne.n	8003b92 <TIM3_IRQHandler+0x2a>
PulseStatus;
 8003bec:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <TIM3_IRQHandler+0x160>)
 8003bee:	780a      	ldrb	r2, [r1, #0]
 8003bf0:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <TIM3_IRQHandler+0x158>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	4835      	ldr	r0, [pc, #212]	; (8003ccc <TIM3_IRQHandler+0x164>)
 8003bf6:	7800      	ldrb	r0, [r0, #0]
 8003bf8:	780c      	ldrb	r4, [r1, #0]
 8003bfa:	4935      	ldr	r1, [pc, #212]	; (8003cd0 <TIM3_IRQHandler+0x168>)
 8003bfc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8003c00:	6849      	ldr	r1, [r1, #4]
 8003c02:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 8003c06:	9101      	str	r1, [sp, #4]
 8003c08:	9000      	str	r0, [sp, #0]
 8003c0a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003c0e:	4831      	ldr	r0, [pc, #196]	; (8003cd4 <TIM3_IRQHandler+0x16c>)
 8003c10:	f002 fd4f 	bl	80066b2 <iprintf>
 8003c14:	e7c2      	b.n	8003b9c <TIM3_IRQHandler+0x34>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0))
 8003c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c1a:	482a      	ldr	r0, [pc, #168]	; (8003cc4 <TIM3_IRQHandler+0x15c>)
 8003c1c:	f7fd fa5a 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	d1bb      	bne.n	8003b9c <TIM3_IRQHandler+0x34>
		PulseStatus;
 8003c24:	4c28      	ldr	r4, [pc, #160]	; (8003cc8 <TIM3_IRQHandler+0x160>)
 8003c26:	7822      	ldrb	r2, [r4, #0]
 8003c28:	4e25      	ldr	r6, [pc, #148]	; (8003cc0 <TIM3_IRQHandler+0x158>)
 8003c2a:	7833      	ldrb	r3, [r6, #0]
 8003c2c:	4927      	ldr	r1, [pc, #156]	; (8003ccc <TIM3_IRQHandler+0x164>)
 8003c2e:	7808      	ldrb	r0, [r1, #0]
 8003c30:	7821      	ldrb	r1, [r4, #0]
 8003c32:	4d27      	ldr	r5, [pc, #156]	; (8003cd0 <TIM3_IRQHandler+0x168>)
 8003c34:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003c38:	6849      	ldr	r1, [r1, #4]
 8003c3a:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 8003c3e:	9101      	str	r1, [sp, #4]
 8003c40:	9000      	str	r0, [sp, #0]
 8003c42:	f240 610f 	movw	r1, #1551	; 0x60f
 8003c46:	4823      	ldr	r0, [pc, #140]	; (8003cd4 <TIM3_IRQHandler+0x16c>)
 8003c48:	f002 fd33 	bl	80066b2 <iprintf>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	7030      	strb	r0, [r6, #0]
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8003c50:	7821      	ldrb	r1, [r4, #0]
 8003c52:	f7fe fdd1 	bl	80027f8 <GetNextStep>
 8003c56:	7020      	strb	r0, [r4, #0]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <TIM3_IRQHandler+0x154>)
 8003c5a:	8813      	ldrh	r3, [r2, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8013      	strh	r3, [r2, #0]
		PULSE_LED_I_ALL_ON;
 8003c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c6a:	4816      	ldr	r0, [pc, #88]	; (8003cc4 <TIM3_IRQHandler+0x15c>)
 8003c6c:	f7fd fa3b 	bl	80010e6 <GPIO_ResetBits>
					if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8003c70:	7823      	ldrb	r3, [r4, #0]
 8003c72:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8003c76:	686b      	ldr	r3, [r5, #4]
 8003c78:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003c7c:	d112      	bne.n	8003ca4 <TIM3_IRQHandler+0x13c>
					if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <TIM3_IRQHandler+0x160>)
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <TIM3_IRQHandler+0x168>)
 8003c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003c8e:	d10f      	bne.n	8003cb0 <TIM3_IRQHandler+0x148>
					TIM_Cmd(TIM14, ENABLE);
 8003c90:	4c11      	ldr	r4, [pc, #68]	; (8003cd8 <TIM3_IRQHandler+0x170>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7fd fc0d 	bl	80014b4 <TIM_Cmd>
					TIM_SetCounter(TIM14, 0x00);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7fd fbfa 	bl	8001496 <TIM_SetCounter>
};
 8003ca2:	e77b      	b.n	8003b9c <TIM3_IRQHandler+0x34>
						PULSE_LED_I_1_ON;
 8003ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ca8:	4806      	ldr	r0, [pc, #24]	; (8003cc4 <TIM3_IRQHandler+0x15c>)
 8003caa:	f7fd fa1c 	bl	80010e6 <GPIO_ResetBits>
 8003cae:	e7e6      	b.n	8003c7e <TIM3_IRQHandler+0x116>
						PULSE_LED_I_2_ON;
 8003cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cb4:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <TIM3_IRQHandler+0x15c>)
 8003cb6:	f7fd fa16 	bl	80010e6 <GPIO_ResetBits>
 8003cba:	e7e9      	b.n	8003c90 <TIM3_IRQHandler+0x128>
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	200002c1 	.word	0x200002c1
 8003cc4:	40020400 	.word	0x40020400
 8003cc8:	200002bf 	.word	0x200002bf
 8003ccc:	200002bd 	.word	0x200002bd
 8003cd0:	200008a4 	.word	0x200008a4
 8003cd4:	08006790 	.word	0x08006790
 8003cd8:	40002000 	.word	0x40002000

08003cdc <TIM7_IRQHandler>:

//Section 2
void TIM7_IRQHandler()
{
 8003cdc:	b510      	push	{r4, lr}
	TIM7->SR = (uint16_t) ~TIM_IT_Update;	
 8003cde:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <TIM7_IRQHandler+0x104>)
 8003ce0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ce4:	821a      	strh	r2, [r3, #16]
	
	if ( (gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <TIM7_IRQHandler+0x108>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00f      	beq.n	8003d10 <TIM7_IRQHandler+0x34>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0) ) {
	}
	else if((gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003cf0:	4b3c      	ldr	r3, [pc, #240]	; (8003de4 <TIM7_IRQHandler+0x108>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d011      	beq.n	8003d1e <TIM7_IRQHandler+0x42>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
		TIM7->CR1 &= ~TIM_CR1_CEN;
	}
	
	if((gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) 
 8003cfa:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <TIM7_IRQHandler+0x108>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b05      	cmp	r3, #5
 8003d02:	d022      	beq.n	8003d4a <TIM7_IRQHandler+0x6e>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
	{
	}
	else if((gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) 
 8003d04:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <TIM7_IRQHandler+0x108>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d024      	beq.n	8003d58 <TIM7_IRQHandler+0x7c>
						};

						TIM_Cmd(TIM8, ENABLE);
						TIM_SetCounter(TIM8, 0x00);
	}
};
 8003d0e:	bd10      	pop	{r4, pc}
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0) ) {
 8003d10:	2140      	movs	r1, #64	; 0x40
 8003d12:	4835      	ldr	r0, [pc, #212]	; (8003de8 <TIM7_IRQHandler+0x10c>)
 8003d14:	f7fd f9de 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d0ee      	beq.n	8003cfa <TIM7_IRQHandler+0x1e>
 8003d1c:	e7e8      	b.n	8003cf0 <TIM7_IRQHandler+0x14>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
 8003d1e:	2140      	movs	r1, #64	; 0x40
 8003d20:	4831      	ldr	r0, [pc, #196]	; (8003de8 <TIM7_IRQHandler+0x10c>)
 8003d22:	f7fd f9d7 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003d26:	2801      	cmp	r0, #1
 8003d28:	d1e7      	bne.n	8003cfa <TIM7_IRQHandler+0x1e>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <TIM7_IRQHandler+0x108>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8003d30:	4c2e      	ldr	r4, [pc, #184]	; (8003dec <TIM7_IRQHandler+0x110>)
 8003d32:	7821      	ldrb	r1, [r4, #0]
 8003d34:	f7fe fd60 	bl	80027f8 <GetNextStep>
 8003d38:	7020      	strb	r0, [r4, #0]
		TIM7->CR1 &= ~TIM_CR1_CEN;
 8003d3a:	4a29      	ldr	r2, [pc, #164]	; (8003de0 <TIM7_IRQHandler+0x104>)
 8003d3c:	8813      	ldrh	r3, [r2, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	8013      	strh	r3, [r2, #0]
 8003d48:	e7d7      	b.n	8003cfa <TIM7_IRQHandler+0x1e>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	4826      	ldr	r0, [pc, #152]	; (8003de8 <TIM7_IRQHandler+0x10c>)
 8003d4e:	f7fd f9c1 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003d52:	2801      	cmp	r0, #1
 8003d54:	d1d6      	bne.n	8003d04 <TIM7_IRQHandler+0x28>
 8003d56:	e7da      	b.n	8003d0e <TIM7_IRQHandler+0x32>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0))
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	4823      	ldr	r0, [pc, #140]	; (8003de8 <TIM7_IRQHandler+0x10c>)
 8003d5c:	f7fd f9ba 	bl	80010d4 <GPIO_ReadInputDataBit>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d1d4      	bne.n	8003d0e <TIM7_IRQHandler+0x32>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8003d64:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <TIM7_IRQHandler+0x108>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8003d6a:	4c20      	ldr	r4, [pc, #128]	; (8003dec <TIM7_IRQHandler+0x110>)
 8003d6c:	7821      	ldrb	r1, [r4, #0]
 8003d6e:	2001      	movs	r0, #1
 8003d70:	f7fe fd42 	bl	80027f8 <GetNextStep>
 8003d74:	7020      	strb	r0, [r4, #0]
		TIM7->CR1 &= ~TIM_CR1_CEN;
 8003d76:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <TIM7_IRQHandler+0x104>)
 8003d78:	8813      	ldrh	r3, [r2, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8013      	strh	r3, [r2, #0]
		PULSE_LED_II_ALL_ON;
 8003d84:	2104      	movs	r1, #4
 8003d86:	481a      	ldr	r0, [pc, #104]	; (8003df0 <TIM7_IRQHandler+0x114>)
 8003d88:	f7fd f9ad 	bl	80010e6 <GPIO_ResetBits>
						if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8003d8c:	7823      	ldrb	r3, [r4, #0]
 8003d8e:	f103 0220 	add.w	r2, r3, #32
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <TIM7_IRQHandler+0x118>)
 8003d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003d9e:	d114      	bne.n	8003dca <TIM7_IRQHandler+0xee>
						if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <TIM7_IRQHandler+0x110>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f103 0220 	add.w	r2, r3, #32
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <TIM7_IRQHandler+0x118>)
 8003daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003db4:	d10e      	bne.n	8003dd4 <TIM7_IRQHandler+0xf8>
						TIM_Cmd(TIM8, ENABLE);
 8003db6:	4c10      	ldr	r4, [pc, #64]	; (8003df8 <TIM7_IRQHandler+0x11c>)
 8003db8:	2101      	movs	r1, #1
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f7fd fb7a 	bl	80014b4 <TIM_Cmd>
						TIM_SetCounter(TIM8, 0x00);
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f7fd fb67 	bl	8001496 <TIM_SetCounter>
};
 8003dc8:	e7a1      	b.n	8003d0e <TIM7_IRQHandler+0x32>
							PULSE_LED_II_1_ON;
 8003dca:	2108      	movs	r1, #8
 8003dcc:	4808      	ldr	r0, [pc, #32]	; (8003df0 <TIM7_IRQHandler+0x114>)
 8003dce:	f7fd f98a 	bl	80010e6 <GPIO_ResetBits>
 8003dd2:	e7e5      	b.n	8003da0 <TIM7_IRQHandler+0xc4>
							PULSE_LED_II_2_ON;
 8003dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dd8:	4805      	ldr	r0, [pc, #20]	; (8003df0 <TIM7_IRQHandler+0x114>)
 8003dda:	f7fd f984 	bl	80010e6 <GPIO_ResetBits>
 8003dde:	e7ea      	b.n	8003db6 <TIM7_IRQHandler+0xda>
 8003de0:	40001400 	.word	0x40001400
 8003de4:	200002c2 	.word	0x200002c2
 8003de8:	40020400 	.word	0x40020400
 8003dec:	200002c0 	.word	0x200002c0
 8003df0:	40020000 	.word	0x40020000
 8003df4:	200008a4 	.word	0x200008a4
 8003df8:	40010400 	.word	0x40010400

08003dfc <PulsesInit>:

/*
Init GPIO for pulses generation
*/
void PulsesInit()
{
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfe:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_Pulses;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003e00:	2101      	movs	r1, #1
 8003e02:	2002      	movs	r0, #2
 8003e04:	f7fd f9e4 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Pulses, 0, sizeof(GPIO_Pulses));
 8003e08:	2700      	movs	r7, #0
 8003e0a:	f8ad 7006 	strh.w	r7, [sp, #6]
	GPIO_Pulses.GPIO_Pin 		= PULSE_LED_I_ALL|PULSE_LED_I_1|PULSE_LED_I_2;
 8003e0e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003e12:	9300      	str	r3, [sp, #0]
	GPIO_Pulses.GPIO_Mode 	= GPIO_Mode_OUT;
 8003e14:	2401      	movs	r4, #1
 8003e16:	f88d 4004 	strb.w	r4, [sp, #4]
	GPIO_Pulses.GPIO_OType	= GPIO_OType_PP;
	GPIO_Pulses.GPIO_PuPd		= GPIO_PuPd_NOPULL;
	GPIO_Pulses.GPIO_Speed	= GPIO_Speed_100MHz;
 8003e1a:	2603      	movs	r6, #3
 8003e1c:	f88d 6005 	strb.w	r6, [sp, #5]
	
	GPIO_Init(GPIOB, &GPIO_Pulses);
 8003e20:	4d1a      	ldr	r5, [pc, #104]	; (8003e8c <PulsesInit+0x90>)
 8003e22:	4669      	mov	r1, sp
 8003e24:	4628      	mov	r0, r5
 8003e26:	f7fd f907 	bl	8001038 <GPIO_Init>
	
	PULSE_LED_I_ALL_OFF;
 8003e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f7fd f957 	bl	80010e2 <GPIO_SetBits>
	PULSE_LED_I_1_OFF;
 8003e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e38:	4628      	mov	r0, r5
 8003e3a:	f7fd f952 	bl	80010e2 <GPIO_SetBits>
	PULSE_LED_I_2_OFF;
 8003e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e42:	4628      	mov	r0, r5
 8003e44:	f7fd f94d 	bl	80010e2 <GPIO_SetBits>
		
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7fd f9c0 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Pulses, 0, sizeof(GPIO_Pulses));
 8003e50:	f8ad 7006 	strh.w	r7, [sp, #6]
	GPIO_Pulses.GPIO_Pin 		= PULSE_LED_II_ALL|PULSE_LED_II_1|PULSE_LED_II_2;
 8003e54:	f241 030c 	movw	r3, #4108	; 0x100c
 8003e58:	9300      	str	r3, [sp, #0]
	GPIO_Pulses.GPIO_Mode 	= GPIO_Mode_OUT;
 8003e5a:	f88d 4004 	strb.w	r4, [sp, #4]
	GPIO_Pulses.GPIO_OType	= GPIO_OType_PP;
	GPIO_Pulses.GPIO_PuPd		= GPIO_PuPd_NOPULL;
	GPIO_Pulses.GPIO_Speed	= GPIO_Speed_100MHz;
 8003e5e:	f88d 6005 	strb.w	r6, [sp, #5]
	
	GPIO_Init(GPIOA, &GPIO_Pulses);
 8003e62:	4c0b      	ldr	r4, [pc, #44]	; (8003e90 <PulsesInit+0x94>)
 8003e64:	4669      	mov	r1, sp
 8003e66:	4620      	mov	r0, r4
 8003e68:	f7fd f8e6 	bl	8001038 <GPIO_Init>
	
	PULSE_LED_II_ALL_OFF;
 8003e6c:	2104      	movs	r1, #4
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7fd f937 	bl	80010e2 <GPIO_SetBits>
	PULSE_LED_II_1_OFF;
 8003e74:	2108      	movs	r1, #8
 8003e76:	4620      	mov	r0, r4
 8003e78:	f7fd f933 	bl	80010e2 <GPIO_SetBits>
	PULSE_LED_II_2_OFF;
 8003e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e80:	4620      	mov	r0, r4
 8003e82:	f7fd f92e 	bl	80010e2 <GPIO_SetBits>
};
 8003e86:	b003      	add	sp, #12
 8003e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40020400 	.word	0x40020400
 8003e90:	40020000 	.word	0x40020000

08003e94 <DisplayLedsIOInit>:

/*
Init GPIOs for display leds
*/
void DisplayLedsIOInit(void)
{
 8003e94:	b500      	push	{lr}
 8003e96:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	//Ã�ËœÃ�Â½Ã�Â¸Ã‘â€ Ã�Â¸Ã�Â°Ã�Â»Ã�Â¸Ã�Â·Ã�Â°Ã‘ï¿½ Ã�Â¿Ã�ÂµÃ‘â‚¬Ã�Â¸Ã‘â€žÃ�ÂµÃ‘â‚¬Ã�Â¸Ã�Â¸ Ã�Â´Ã�Â»Ã‘ï¿½ Ã‘Æ’Ã�Â¿Ã‘â‚¬Ã�Â°Ã�Â²Ã�Â»Ã�ÂµÃ�Â½Ã�Â¸Ã‘ï¿½ Ã‘ï¿½Ã�Â²Ã�ÂµÃ‘â€šÃ�Â¾Ã�Â´Ã�Â¸Ã�Â¾Ã�Â´Ã�Â°Ã�Â¼Ã�Â¸ DISPLAY
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4608      	mov	r0, r1
 8003e9c:	f7fd f998 	bl	80011d0 <RCC_AHB1PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin 	= DISPLAY_LED_I|DISPLAY_LED_II;
 8003ea0:	23c0      	movs	r3, #192	; 0xc0
 8003ea2:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003eb6:	4669      	mov	r1, sp
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <DisplayLedsIOInit+0x30>)
 8003eba:	f7fd f8bd 	bl	8001038 <GPIO_Init>
};
 8003ebe:	b003      	add	sp, #12
 8003ec0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ec4:	40020000 	.word	0x40020000

08003ec8 <InternalDACInit>:

/*
 Init internal DAC
*/
void InternalDACInit(void)
{
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	b086      	sub	sp, #24
	DAC_InitTypeDef mDacInit;
	GPIO_InitTypeDef mGPIO_InitStructure;
	
	DAC_StructInit(&mDacInit);
 8003ecc:	a802      	add	r0, sp, #8
 8003ece:	f7fd f81d 	bl	8000f0c <DAC_StructInit>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	f7fd f97b 	bl	80011d0 <RCC_AHB1PeriphClockCmd>

	//GPIOs init
	
	mGPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_4|GPIO_Pin_5;
 8003eda:	2330      	movs	r3, #48	; 0x30
 8003edc:	9300      	str	r3, [sp, #0]
	mGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_Init(GPIOA, &mGPIO_InitStructure);
 8003ee4:	4669      	mov	r1, sp
 8003ee6:	4814      	ldr	r0, [pc, #80]	; (8003f38 <InternalDACInit+0x70>)
 8003ee8:	f7fd f8a6 	bl	8001038 <GPIO_Init>
		
	/* DAC Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8003eec:	2101      	movs	r1, #1
 8003eee:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003ef2:	f7fd f97b 	bl	80011ec <RCC_APB1PeriphClockCmd>
	
	//DAC init
	mDacInit.DAC_Trigger 				= DAC_Trigger_None;
 8003ef6:	2400      	movs	r4, #0
 8003ef8:	9402      	str	r4, [sp, #8]
	mDacInit.DAC_OutputBuffer 	= DAC_OutputBuffer_Disable;
 8003efa:	2302      	movs	r3, #2
 8003efc:	9305      	str	r3, [sp, #20]
	mDacInit.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8003efe:	9403      	str	r4, [sp, #12]

	DAC_DeInit();
 8003f00:	f7fc ffdf 	bl	8000ec2 <DAC_DeInit>
	
	DAC_Init(DAC_Channel_1, &mDacInit);
 8003f04:	a902      	add	r1, sp, #8
 8003f06:	4620      	mov	r0, r4
 8003f08:	f7fc ffe8 	bl	8000edc <DAC_Init>
	DAC_Init(DAC_Channel_2, &mDacInit);
 8003f0c:	a902      	add	r1, sp, #8
 8003f0e:	2010      	movs	r0, #16
 8003f10:	f7fc ffe4 	bl	8000edc <DAC_Init>
	
	DAC_Cmd(DAC_Channel_1, ENABLE);
 8003f14:	2101      	movs	r1, #1
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7fc fffe 	bl	8000f18 <DAC_Cmd>
	DAC_Cmd(DAC_Channel_2, ENABLE);
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	2010      	movs	r0, #16
 8003f20:	f7fc fffa 	bl	8000f18 <DAC_Cmd>
	
	DAC_SetChannel1Data(DAC_Align_12b_R, 0);
 8003f24:	4621      	mov	r1, r4
 8003f26:	4620      	mov	r0, r4
 8003f28:	f7fd f80a 	bl	8000f40 <DAC_SetChannel1Data>
	DAC_SetChannel2Data(DAC_Align_12b_R, 0);
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f7fd f816 	bl	8000f60 <DAC_SetChannel2Data>
};
 8003f34:	b006      	add	sp, #24
 8003f36:	bd10      	pop	{r4, pc}
 8003f38:	40020000 	.word	0x40020000

08003f3c <keyb_proc>:

/*
	Scan all switches
*/
unsigned char keyb_proc(uButtons * key)
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	4604      	mov	r4, r0
	unsigned char StepNum = 0, Section = 0, max_step;
	uStep tmpStep;
	
	if(Is_Expander_Present()) max_step = 31;
 8003f42:	f7fd fea1 	bl	8001c88 <Is_Expander_Present>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f000 82d5 	beq.w	80044f6 <keyb_proc+0x5ba>
 8003f4c:	261f      	movs	r6, #31
	else max_step = 15;
			 
	/* Determine step num for different DisplayModes */
	if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 8003f4e:	4bc6      	ldr	r3, [pc, #792]	; (8004268 <keyb_proc+0x32c>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 82d1 	bne.w	80044fa <keyb_proc+0x5be>
		StepNum = gSequenceStepNumber_1;
 8003f58:	4bc4      	ldr	r3, [pc, #784]	; (800426c <keyb_proc+0x330>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 8003f5e:	4ac2      	ldr	r2, [pc, #776]	; (8004268 <keyb_proc+0x32c>)
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	2a01      	cmp	r2, #1
 8003f66:	f000 82ca 	beq.w	80044fe <keyb_proc+0x5c2>
 8003f6a:	2200      	movs	r2, #0
		StepNum = gSequenceStepNumber_2;
		Section = 1;
	};
	if (gDisplayMode == DISPLAY_MODE_EDIT_1) {
 8003f6c:	49be      	ldr	r1, [pc, #760]	; (8004268 <keyb_proc+0x32c>)
 8003f6e:	7809      	ldrb	r1, [r1, #0]
 8003f70:	b2c9      	uxtb	r1, r1
 8003f72:	2902      	cmp	r1, #2
 8003f74:	f000 82c7 	beq.w	8004506 <keyb_proc+0x5ca>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_EDIT_2) {
 8003f78:	49bb      	ldr	r1, [pc, #748]	; (8004268 <keyb_proc+0x32c>)
 8003f7a:	7809      	ldrb	r1, [r1, #0]
 8003f7c:	b2c9      	uxtb	r1, r1
 8003f7e:	2903      	cmp	r1, #3
 8003f80:	f000 82c5 	beq.w	800450e <keyb_proc+0x5d2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	
	if (gDisplayMode == DISPLAY_MODE_SAVE_1) {
 8003f84:	49b8      	ldr	r1, [pc, #736]	; (8004268 <keyb_proc+0x32c>)
 8003f86:	7809      	ldrb	r1, [r1, #0]
 8003f88:	b2c9      	uxtb	r1, r1
 8003f8a:	2904      	cmp	r1, #4
 8003f8c:	f000 82c3 	beq.w	8004516 <keyb_proc+0x5da>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_SAVE_2) {
 8003f90:	49b5      	ldr	r1, [pc, #724]	; (8004268 <keyb_proc+0x32c>)
 8003f92:	7809      	ldrb	r1, [r1, #0]
 8003f94:	b2c9      	uxtb	r1, r1
 8003f96:	2905      	cmp	r1, #5
 8003f98:	f000 82c1 	beq.w	800451e <keyb_proc+0x5e2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	if (gDisplayMode == DISPLAY_MODE_LOAD_1) {
 8003f9c:	49b2      	ldr	r1, [pc, #712]	; (8004268 <keyb_proc+0x32c>)
 8003f9e:	7809      	ldrb	r1, [r1, #0]
 8003fa0:	b2c9      	uxtb	r1, r1
 8003fa2:	2906      	cmp	r1, #6
 8003fa4:	f000 82bf 	beq.w	8004526 <keyb_proc+0x5ea>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_LOAD_2) {
 8003fa8:	49af      	ldr	r1, [pc, #700]	; (8004268 <keyb_proc+0x32c>)
 8003faa:	7809      	ldrb	r1, [r1, #0]
 8003fac:	b2c9      	uxtb	r1, r1
 8003fae:	2907      	cmp	r1, #7
 8003fb0:	f000 82bd 	beq.w	800452e <keyb_proc+0x5f2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	
	tmpStep = Steps[Section][StepNum];	
 8003fb4:	4617      	mov	r7, r2
 8003fb6:	461d      	mov	r5, r3
 8003fb8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8003fbc:	4aac      	ldr	r2, [pc, #688]	; (8004270 <keyb_proc+0x334>)
 8003fbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fc6:	ab02      	add	r3, sp, #8
 8003fc8:	e903 0003 	stmdb	r3, {r0, r1}
				
	
		/* Middle section */
		
		if ( !key->b.Voltage0 ) {
 8003fcc:	7862      	ldrb	r2, [r4, #1]
 8003fce:	f012 0f10 	tst.w	r2, #16
 8003fd2:	d10f      	bne.n	8003ff4 <keyb_proc+0xb8>
			tmpStep.b.Voltage0 = 1;
 8003fd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
 8003fd8:	f043 0310 	orr.w	r3, r3, #16
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 8003fdc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003fe0:	f36f 0100 	bfc	r1, #0, #1
 8003fe4:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	f36f 0382 	bfc	r3, #2, #1
 8003ff0:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage2 ) {
 8003ff4:	f012 0f20 	tst.w	r2, #32
 8003ff8:	d111      	bne.n	800401e <keyb_proc+0xe2>
			tmpStep.b.Voltage0 = 0;
 8003ffa:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 1;
 8003ffe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
			tmpStep.b.Voltage4 = 0;
 8004002:	f043 0320 	orr.w	r3, r3, #32
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 8004006:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800400a:	f36f 0100 	bfc	r1, #0, #1
 800400e:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8004012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004016:	f36f 0382 	bfc	r3, #2, #1
 800401a:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage4 ) {
 800401e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004022:	d111      	bne.n	8004048 <keyb_proc+0x10c>
			tmpStep.b.Voltage0 = 0;
 8004024:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 1;
 8004028:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
			tmpStep.b.Voltage6 = 0;
 800402c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			tmpStep.b.Voltage8 = 0;
 8004030:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004034:	f36f 0100 	bfc	r1, #0, #1
 8004038:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 800403c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004040:	f36f 0382 	bfc	r3, #2, #1
 8004044:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage6 ) {
 8004048:	f012 0f80 	tst.w	r2, #128	; 0x80
 800404c:	d10f      	bne.n	800406e <keyb_proc+0x132>
			tmpStep.b.Voltage0 = 0;
 800404e:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 1;
 8004052:	f003 038f 	and.w	r3, r3, #143	; 0x8f
			tmpStep.b.Voltage8 = 0;
 8004056:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800405a:	f36f 0100 	bfc	r1, #0, #1
 800405e:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8004062:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004066:	f36f 0382 	bfc	r3, #2, #1
 800406a:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage8 ) {
 800406e:	78a3      	ldrb	r3, [r4, #2]
 8004070:	f013 0f01 	tst.w	r3, #1
 8004074:	d10d      	bne.n	8004092 <keyb_proc+0x156>
			tmpStep.b.Voltage0 = 0;
 8004076:	f89d 1003 	ldrb.w	r1, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 1;
 800407a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800407e:	f040 0001 	orr.w	r0, r0, #1
 8004082:	f88d 0004 	strb.w	r0, [sp, #4]
			tmpStep.b.FullRange = 0;
 8004086:	f001 010f 	and.w	r1, r1, #15
 800408a:	f36f 0182 	bfc	r1, #2, #1
 800408e:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.FullRangeOn ) {
 8004092:	f012 0f01 	tst.w	r2, #1
 8004096:	d10d      	bne.n	80040b4 <keyb_proc+0x178>
			tmpStep.b.Voltage0 = 0;
 8004098:	f89d 1003 	ldrb.w	r1, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 800409c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80040a0:	f36f 0000 	bfc	r0, #0, #1
 80040a4:	f88d 0004 	strb.w	r0, [sp, #4]
			tmpStep.b.FullRange = 1;
 80040a8:	f001 010f 	and.w	r1, r1, #15
 80040ac:	f041 0104 	orr.w	r1, r1, #4
 80040b0:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.Pulse1On ) {
 80040b4:	78e1      	ldrb	r1, [r4, #3]
 80040b6:	f011 0f10 	tst.w	r1, #16
 80040ba:	d105      	bne.n	80040c8 <keyb_proc+0x18c>
			tmpStep.b.OutputPulse1 = 1;
 80040bc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80040c0:	f040 0008 	orr.w	r0, r0, #8
 80040c4:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse1Off ) {
 80040c8:	f011 0f20 	tst.w	r1, #32
 80040cc:	d105      	bne.n	80040da <keyb_proc+0x19e>
			tmpStep.b.OutputPulse1 = 0;
 80040ce:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80040d2:	f36f 00c3 	bfc	r0, #3, #1
 80040d6:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse2On ) {
 80040da:	f011 0f40 	tst.w	r1, #64	; 0x40
 80040de:	d105      	bne.n	80040ec <keyb_proc+0x1b0>
			tmpStep.b.OutputPulse2 = 1;
 80040e0:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80040e4:	f040 0010 	orr.w	r0, r0, #16
 80040e8:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse2Off ) {
 80040ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80040f0:	d105      	bne.n	80040fe <keyb_proc+0x1c2>
			tmpStep.b.OutputPulse2 = 0;
 80040f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80040f6:	f36f 1104 	bfc	r1, #4, #1
 80040fa:	f88d 1005 	strb.w	r1, [sp, #5]
		};
		
		if ( !key->b.OutputQuantize ) {
 80040fe:	7821      	ldrb	r1, [r4, #0]
 8004100:	f011 0f10 	tst.w	r1, #16
 8004104:	d105      	bne.n	8004112 <keyb_proc+0x1d6>
			tmpStep.b.Quantize = 1;
 8004106:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800410a:	f040 0001 	orr.w	r0, r0, #1
 800410e:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.OutputContinuous ) {
 8004112:	f011 0f20 	tst.w	r1, #32
 8004116:	d105      	bne.n	8004124 <keyb_proc+0x1e8>
			tmpStep.b.Quantize = 0;
 8004118:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800411c:	f36f 0000 	bfc	r0, #0, #1
 8004120:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.IntegrationSloped ) {
 8004124:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004128:	d105      	bne.n	8004136 <keyb_proc+0x1fa>
			tmpStep.b.Sloped = 1;
 800412a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800412e:	f040 0002 	orr.w	r0, r0, #2
 8004132:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.IntegrationStepped ) {
 8004136:	f011 0f80 	tst.w	r1, #128	; 0x80
 800413a:	d105      	bne.n	8004148 <keyb_proc+0x20c>
			tmpStep.b.Sloped = 0;
 800413c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8004140:	f36f 0141 	bfc	r1, #1, #1
 8004144:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.SourceExternal ) {
 8004148:	f012 0f04 	tst.w	r2, #4
 800414c:	d105      	bne.n	800415a <keyb_proc+0x21e>
			tmpStep.b.VoltageSource = 1;
 800414e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8004152:	f041 0108 	orr.w	r1, r1, #8
 8004156:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.SourceInternal ) {
 800415a:	f012 0f08 	tst.w	r2, #8
 800415e:	d105      	bne.n	800416c <keyb_proc+0x230>
			tmpStep.b.VoltageSource = 0;
 8004160:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004164:	f36f 02c3 	bfc	r2, #3, #1
 8004168:	f88d 2003 	strb.w	r2, [sp, #3]
		};
		
		if ( !key->b.StopOn ) {
 800416c:	f013 0f02 	tst.w	r3, #2
 8004170:	d13d      	bne.n	80041ee <keyb_proc+0x2b2>
			tmpStep.b.OpModeSTOP = 1;
 8004172:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeENABLE = 0;
 8004176:	f042 0202 	orr.w	r2, r2, #2
			tmpStep.b.OpModeSUSTAIN = 0;
 800417a:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 800417e:	f36f 0282 	bfc	r2, #2, #1
 8004182:	f88d 2004 	strb.w	r2, [sp, #4]
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <keyb_proc+0x32c>)
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	b122      	cbz	r2, 8004196 <keyb_proc+0x25a>
 800418c:	4a36      	ldr	r2, [pc, #216]	; (8004268 <keyb_proc+0x32c>)
 800418e:	7812      	ldrb	r2, [r2, #0]
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	2a02      	cmp	r2, #2
 8004194:	d105      	bne.n	80041a2 <keyb_proc+0x266>
 8004196:	4a37      	ldr	r2, [pc, #220]	; (8004274 <keyb_proc+0x338>)
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	2a05      	cmp	r2, #5
 800419e:	f000 81ca 	beq.w	8004536 <keyb_proc+0x5fa>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 80041a2:	4a31      	ldr	r2, [pc, #196]	; (8004268 <keyb_proc+0x32c>)
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	2a01      	cmp	r2, #1
 80041aa:	f000 81c8 	beq.w	800453e <keyb_proc+0x602>
 80041ae:	4a2e      	ldr	r2, [pc, #184]	; (8004268 <keyb_proc+0x32c>)
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	2a03      	cmp	r2, #3
 80041b6:	f000 81c2 	beq.w	800453e <keyb_proc+0x602>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 80041ba:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <keyb_proc+0x32c>)
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	b122      	cbz	r2, 80041ca <keyb_proc+0x28e>
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <keyb_proc+0x32c>)
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	2a02      	cmp	r2, #2
 80041c8:	d105      	bne.n	80041d6 <keyb_proc+0x29a>
 80041ca:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <keyb_proc+0x338>)
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	2a04      	cmp	r2, #4
 80041d2:	f000 81cd 	beq.w	8004570 <keyb_proc+0x634>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 80041d6:	4a24      	ldr	r2, [pc, #144]	; (8004268 <keyb_proc+0x32c>)
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	2a01      	cmp	r2, #1
 80041de:	f000 81cb 	beq.w	8004578 <keyb_proc+0x63c>
 80041e2:	4a21      	ldr	r2, [pc, #132]	; (8004268 <keyb_proc+0x32c>)
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	2a03      	cmp	r2, #3
 80041ea:	f000 81c5 	beq.w	8004578 <keyb_proc+0x63c>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
				};
		};
		
		if ( !key->b.StopOff ) {
 80041ee:	f013 0f04 	tst.w	r3, #4
 80041f2:	d105      	bne.n	8004200 <keyb_proc+0x2c4>
			tmpStep.b.OpModeSTOP = 0;
 80041f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80041f8:	f36f 0241 	bfc	r2, #1, #1
 80041fc:	f88d 2004 	strb.w	r2, [sp, #4]
			/* Determine step num for different DisplayModes */
		};
		
		if ( !key->b.SustainOn ) {
 8004200:	f013 0f08 	tst.w	r3, #8
 8004204:	d123      	bne.n	800424e <keyb_proc+0x312>
			tmpStep.b.OpModeSUSTAIN = 1;
 8004206:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeSTOP = 0;
 800420a:	f042 0204 	orr.w	r2, r2, #4
			tmpStep.b.OpModeENABLE = 0;
 800420e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8004212:	f36f 02c3 	bfc	r2, #3, #1
 8004216:	f88d 2004 	strb.w	r2, [sp, #4]
				if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 800421a:	4a13      	ldr	r2, [pc, #76]	; (8004268 <keyb_proc+0x32c>)
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	b122      	cbz	r2, 800422a <keyb_proc+0x2ee>
 8004220:	4a11      	ldr	r2, [pc, #68]	; (8004268 <keyb_proc+0x32c>)
 8004222:	7812      	ldrb	r2, [r2, #0]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	2a02      	cmp	r2, #2
 8004228:	d105      	bne.n	8004236 <keyb_proc+0x2fa>
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <keyb_proc+0x338>)
 800422c:	7812      	ldrb	r2, [r2, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	2a04      	cmp	r2, #4
 8004232:	f000 81ab 	beq.w	800458c <keyb_proc+0x650>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004236:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <keyb_proc+0x32c>)
 8004238:	7812      	ldrb	r2, [r2, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	2a01      	cmp	r2, #1
 800423e:	f000 81ab 	beq.w	8004598 <keyb_proc+0x65c>
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <keyb_proc+0x32c>)
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	2a03      	cmp	r2, #3
 800424a:	f000 81a5 	beq.w	8004598 <keyb_proc+0x65c>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.SustainOff ) {
 800424e:	f013 0f10 	tst.w	r3, #16
 8004252:	d128      	bne.n	80042a6 <keyb_proc+0x36a>
			tmpStep.b.OpModeSUSTAIN = 0;
 8004254:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004258:	f36f 0282 	bfc	r2, #2, #1
 800425c:	f88d 2004 	strb.w	r2, [sp, #4]
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 8004260:	4a01      	ldr	r2, [pc, #4]	; (8004268 <keyb_proc+0x32c>)
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	b16a      	cbz	r2, 8004282 <keyb_proc+0x346>
 8004266:	e007      	b.n	8004278 <keyb_proc+0x33c>
 8004268:	200002b0 	.word	0x200002b0
 800426c:	200002bf 	.word	0x200002bf
 8004270:	200008a4 	.word	0x200008a4
 8004274:	200002c1 	.word	0x200002c1
 8004278:	4ab6      	ldr	r2, [pc, #728]	; (8004554 <keyb_proc+0x618>)
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	2a02      	cmp	r2, #2
 8004280:	d105      	bne.n	800428e <keyb_proc+0x352>
 8004282:	4ab5      	ldr	r2, [pc, #724]	; (8004558 <keyb_proc+0x61c>)
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	2a05      	cmp	r2, #5
 800428a:	f000 8191 	beq.w	80045b0 <keyb_proc+0x674>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 800428e:	4ab1      	ldr	r2, [pc, #708]	; (8004554 <keyb_proc+0x618>)
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	2a01      	cmp	r2, #1
 8004296:	f000 8191 	beq.w	80045bc <keyb_proc+0x680>
 800429a:	4aae      	ldr	r2, [pc, #696]	; (8004554 <keyb_proc+0x618>)
 800429c:	7812      	ldrb	r2, [r2, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	2a03      	cmp	r2, #3
 80042a2:	f000 818b 	beq.w	80045bc <keyb_proc+0x680>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.EnableOn ) {
 80042a6:	f013 0f20 	tst.w	r3, #32
 80042aa:	d123      	bne.n	80042f4 <keyb_proc+0x3b8>
			tmpStep.b.OpModeENABLE = 1;
 80042ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeSTOP = 0;
 80042b0:	f042 0208 	orr.w	r2, r2, #8
			tmpStep.b.OpModeSUSTAIN = 0;
 80042b4:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80042b8:	f36f 0282 	bfc	r2, #2, #1
 80042bc:	f88d 2004 	strb.w	r2, [sp, #4]
						if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 80042c0:	4aa4      	ldr	r2, [pc, #656]	; (8004554 <keyb_proc+0x618>)
 80042c2:	7812      	ldrb	r2, [r2, #0]
 80042c4:	b122      	cbz	r2, 80042d0 <keyb_proc+0x394>
 80042c6:	4aa3      	ldr	r2, [pc, #652]	; (8004554 <keyb_proc+0x618>)
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	2a02      	cmp	r2, #2
 80042ce:	d105      	bne.n	80042dc <keyb_proc+0x3a0>
 80042d0:	4aa1      	ldr	r2, [pc, #644]	; (8004558 <keyb_proc+0x61c>)
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	2a05      	cmp	r2, #5
 80042d8:	f000 817c 	beq.w	80045d4 <keyb_proc+0x698>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 80042dc:	4a9d      	ldr	r2, [pc, #628]	; (8004554 <keyb_proc+0x618>)
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	2a01      	cmp	r2, #1
 80042e4:	f000 817c 	beq.w	80045e0 <keyb_proc+0x6a4>
 80042e8:	4a9a      	ldr	r2, [pc, #616]	; (8004554 <keyb_proc+0x618>)
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	2a03      	cmp	r2, #3
 80042f0:	f000 8176 	beq.w	80045e0 <keyb_proc+0x6a4>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.EnableOff ) {
 80042f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042f8:	d11f      	bne.n	800433a <keyb_proc+0x3fe>
			tmpStep.b.OpModeENABLE = 0;
 80042fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80042fe:	f36f 02c3 	bfc	r2, #3, #1
 8004302:	f88d 2004 	strb.w	r2, [sp, #4]
				if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004306:	4a93      	ldr	r2, [pc, #588]	; (8004554 <keyb_proc+0x618>)
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	b122      	cbz	r2, 8004316 <keyb_proc+0x3da>
 800430c:	4a91      	ldr	r2, [pc, #580]	; (8004554 <keyb_proc+0x618>)
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	2a02      	cmp	r2, #2
 8004314:	d105      	bne.n	8004322 <keyb_proc+0x3e6>
 8004316:	4a90      	ldr	r2, [pc, #576]	; (8004558 <keyb_proc+0x61c>)
 8004318:	7812      	ldrb	r2, [r2, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	2a04      	cmp	r2, #4
 800431e:	f000 816b 	beq.w	80045f8 <keyb_proc+0x6bc>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004322:	4a8c      	ldr	r2, [pc, #560]	; (8004554 <keyb_proc+0x618>)
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	2a01      	cmp	r2, #1
 800432a:	f000 816b 	beq.w	8004604 <keyb_proc+0x6c8>
 800432e:	4a89      	ldr	r2, [pc, #548]	; (8004554 <keyb_proc+0x618>)
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	2a03      	cmp	r2, #3
 8004336:	f000 8165 	beq.w	8004604 <keyb_proc+0x6c8>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.FirstOn ) {
 800433a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800433e:	d107      	bne.n	8004350 <keyb_proc+0x414>
			tmpStep.b.CycleFirst = 1;
 8004340:	f89d 3004 	ldrb.w	r3, [sp, #4]
			tmpStep.b.CycleLast = 0;
 8004344:	f043 0310 	orr.w	r3, r3, #16
 8004348:	f36f 1345 	bfc	r3, #5, #1
 800434c:	f88d 3004 	strb.w	r3, [sp, #4]
		};
		
		if ( !key->b.FirstOff ) {
 8004350:	79a3      	ldrb	r3, [r4, #6]
 8004352:	f013 0f01 	tst.w	r3, #1
 8004356:	d105      	bne.n	8004364 <keyb_proc+0x428>
			tmpStep.b.CycleFirst = 0;
 8004358:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800435c:	f36f 1204 	bfc	r2, #4, #1
 8004360:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.LastOn ) {		
 8004364:	f013 0f02 	tst.w	r3, #2
 8004368:	d107      	bne.n	800437a <keyb_proc+0x43e>
			tmpStep.b.CycleLast = 1;
 800436a:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.CycleFirst = 0;
 800436e:	f042 0220 	orr.w	r2, r2, #32
 8004372:	f36f 1204 	bfc	r2, #4, #1
 8004376:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.LastOff ) {
 800437a:	f013 0f04 	tst.w	r3, #4
 800437e:	d105      	bne.n	800438c <keyb_proc+0x450>
			tmpStep.b.CycleLast = 0;
 8004380:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004384:	f36f 1245 	bfc	r2, #5, #1
 8004388:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.TimeSourceExternal ) {
 800438c:	7922      	ldrb	r2, [r4, #4]
 800438e:	f012 0f01 	tst.w	r2, #1
 8004392:	d105      	bne.n	80043a0 <keyb_proc+0x464>
			tmpStep.b.TimeSource = 1;
 8004394:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004398:	f041 0104 	orr.w	r1, r1, #4
 800439c:	f88d 1005 	strb.w	r1, [sp, #5]
		};
		
		if ( !key->b.TimeSourceInternal ) {
 80043a0:	f012 0f02 	tst.w	r2, #2
 80043a4:	d105      	bne.n	80043b2 <keyb_proc+0x476>
			tmpStep.b.TimeSource = 0;
 80043a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80043aa:	f36f 0282 	bfc	r2, #2, #1
 80043ae:	f88d 2005 	strb.w	r2, [sp, #5]
		};
		
		if (!key->b.TimeRange1) {
 80043b2:	f013 0f08 	tst.w	r3, #8
 80043b6:	d10f      	bne.n	80043d8 <keyb_proc+0x49c>
			tmpStep.b.TimeRange_p03 = 1;
 80043b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 80043bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043c0:	f36f 12c7 	bfc	r2, #7, #1
 80043c4:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 80043c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0;                        
 80043cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043d0:	f36f 0241 	bfc	r2, #1, #1
 80043d4:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange2) {
 80043d8:	f013 0f10 	tst.w	r3, #16
 80043dc:	d10f      	bne.n	80043fe <keyb_proc+0x4c2>
			tmpStep.b.TimeRange_p03 = 0;
 80043de:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  1;
 80043e2:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 80043e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ea:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 80043ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0; 
 80043f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043f6:	f36f 0241 	bfc	r2, #1, #1
 80043fa:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange3) {
 80043fe:	f013 0f20 	tst.w	r3, #32
 8004402:	d10f      	bne.n	8004424 <keyb_proc+0x4e8>
			tmpStep.b.TimeRange_p03 = 0;
 8004404:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 8004408:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800440c:	f36f 12c7 	bfc	r2, #7, #1
 8004410:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   1;
 8004414:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0; 
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	f36f 0241 	bfc	r2, #1, #1
 8004420:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange4) {
 8004424:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004428:	d10f      	bne.n	800444a <keyb_proc+0x50e>
			tmpStep.b.TimeRange_p03 = 0;
 800442a:	f89d 3004 	ldrb.w	r3, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 800442e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 8004432:	f36f 13c7 	bfc	r3, #7, #1
 8004436:	f88d 3004 	strb.w	r3, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 800443a:	f89d 3005 	ldrb.w	r3, [sp, #5]
			tmpStep.b.TimeRange_30 =  1; 
 800443e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004442:	f043 0302 	orr.w	r3, r3, #2
 8004446:	f88d 3005 	strb.w	r3, [sp, #5]
		};
		
		if (!key->b.ClearUp)  {
 800444a:	7823      	ldrb	r3, [r4, #0]
 800444c:	f013 0f01 	tst.w	r3, #1
 8004450:	f000 80e4 	beq.w	800461c <keyb_proc+0x6e0>
				DisplayUpdateFlags.b.StepsDisplay = 1;
				DisplayUpdateFlags.b.MainDisplay = 1;
			};			
		};
		
		if (!key->b.ClearDown)  {
 8004454:	7823      	ldrb	r3, [r4, #0]
 8004456:	f013 0f02 	tst.w	r3, #2
 800445a:	f000 813d 	beq.w	80046d8 <keyb_proc+0x79c>
		};
		

		
		//switch to edit mode
		if ( !key->b.StepLeft ) {
 800445e:	7823      	ldrb	r3, [r4, #0]
 8004460:	f013 0f04 	tst.w	r3, #4
 8004464:	f040 8234 	bne.w	80048d0 <keyb_proc+0x994>
			if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 8004468:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <keyb_proc+0x618>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b92b      	cbnz	r3, 800447a <keyb_proc+0x53e>
				gDisplayMode = DISPLAY_MODE_EDIT_1;
 800446e:	4b39      	ldr	r3, [pc, #228]	; (8004554 <keyb_proc+0x618>)
 8004470:	2202      	movs	r2, #2
 8004472:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 1;
 8004474:	4b39      	ldr	r3, [pc, #228]	; (800455c <keyb_proc+0x620>)
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
			};
			if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 800447a:	4b36      	ldr	r3, [pc, #216]	; (8004554 <keyb_proc+0x618>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	f000 816e 	beq.w	8004762 <keyb_proc+0x826>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
				gEditModeStepNum = 1;
			};
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 8004486:	4b33      	ldr	r3, [pc, #204]	; (8004554 <keyb_proc+0x618>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	f000 816f 	beq.w	8004770 <keyb_proc+0x834>
						(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 8004492:	4b30      	ldr	r3, [pc, #192]	; (8004554 <keyb_proc+0x618>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 8004498:	2b03      	cmp	r3, #3
 800449a:	f000 8169 	beq.w	8004770 <keyb_proc+0x834>
					DisplayUpdateFlags.b.StepsDisplay = 1;
				};
			};
			
			//if in save or load mode left buttons select memory cell for save/recall
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 800449e:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <keyb_proc+0x618>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d00f      	beq.n	80044c8 <keyb_proc+0x58c>
 80044a8:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <keyb_proc+0x618>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d00a      	beq.n	80044c8 <keyb_proc+0x58c>
				 (gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 80044b2:	4b28      	ldr	r3, [pc, #160]	; (8004554 <keyb_proc+0x618>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 80044b8:	2b06      	cmp	r3, #6
 80044ba:	d005      	beq.n	80044c8 <keyb_proc+0x58c>
				 (gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <keyb_proc+0x618>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b07      	cmp	r3, #7
 80044c4:	f040 8207 	bne.w	80048d6 <keyb_proc+0x99a>
				if (gEditModeStepNum > 0) {
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <keyb_proc+0x620>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 81ba 	beq.w	8004846 <keyb_proc+0x90a>
					if(counterL == 0) gEditModeStepNum--;
 80044d2:	4a23      	ldr	r2, [pc, #140]	; (8004560 <keyb_proc+0x624>)
 80044d4:	8812      	ldrh	r2, [r2, #0]
 80044d6:	2a00      	cmp	r2, #0
 80044d8:	f040 81a5 	bne.w	8004826 <keyb_proc+0x8ea>
 80044dc:	3b01      	subs	r3, #1
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <keyb_proc+0x620>)
 80044e0:	7013      	strb	r3, [r2, #0]
						{
							counterL = 500;
							gEditModeStepNum--;
						}
					}
					counterL++;
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <keyb_proc+0x624>)
 80044e4:	8813      	ldrh	r3, [r2, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 80044ea:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <keyb_proc+0x628>)
 80044ec:	7813      	ldrb	r3, [r2, #0]
 80044ee:	f043 0302 	orr.w	r3, r3, #2
 80044f2:	7013      	strb	r3, [r2, #0]
 80044f4:	e1ef      	b.n	80048d6 <keyb_proc+0x99a>
	else max_step = 15;
 80044f6:	260f      	movs	r6, #15
 80044f8:	e529      	b.n	8003f4e <keyb_proc+0x12>
	unsigned char StepNum = 0, Section = 0, max_step;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e52f      	b.n	8003f5e <keyb_proc+0x22>
		StepNum = gSequenceStepNumber_2;
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <keyb_proc+0x62c>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e532      	b.n	8003f6c <keyb_proc+0x30>
		StepNum = gEditModeStepNum;
 8004506:	4b15      	ldr	r3, [pc, #84]	; (800455c <keyb_proc+0x620>)
 8004508:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 800450a:	2200      	movs	r2, #0
 800450c:	e534      	b.n	8003f78 <keyb_proc+0x3c>
		StepNum = gEditModeStepNum;
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <keyb_proc+0x620>)
 8004510:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 8004512:	2201      	movs	r2, #1
 8004514:	e536      	b.n	8003f84 <keyb_proc+0x48>
		StepNum = gEditModeStepNum;
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <keyb_proc+0x620>)
 8004518:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 800451a:	2200      	movs	r2, #0
 800451c:	e538      	b.n	8003f90 <keyb_proc+0x54>
		StepNum = gEditModeStepNum;
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <keyb_proc+0x620>)
 8004520:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 8004522:	2201      	movs	r2, #1
 8004524:	e53a      	b.n	8003f9c <keyb_proc+0x60>
		StepNum = gEditModeStepNum;
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <keyb_proc+0x620>)
 8004528:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 800452a:	2200      	movs	r2, #0
 800452c:	e53c      	b.n	8003fa8 <keyb_proc+0x6c>
		StepNum = gEditModeStepNum;
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <keyb_proc+0x620>)
 8004530:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 8004532:	2201      	movs	r2, #1
 8004534:	e53e      	b.n	8003fb4 <keyb_proc+0x78>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <keyb_proc+0x61c>)
 8004538:	2102      	movs	r1, #2
 800453a:	7011      	strb	r1, [r2, #0]
 800453c:	e631      	b.n	80041a2 <keyb_proc+0x266>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 800453e:	4a0b      	ldr	r2, [pc, #44]	; (800456c <keyb_proc+0x630>)
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	2a05      	cmp	r2, #5
 8004546:	f47f ae38 	bne.w	80041ba <keyb_proc+0x27e>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 800454a:	4a08      	ldr	r2, [pc, #32]	; (800456c <keyb_proc+0x630>)
 800454c:	2102      	movs	r1, #2
 800454e:	7011      	strb	r1, [r2, #0]
 8004550:	e633      	b.n	80041ba <keyb_proc+0x27e>
 8004552:	bf00      	nop
 8004554:	200002b0 	.word	0x200002b0
 8004558:	200002c1 	.word	0x200002c1
 800455c:	200002b1 	.word	0x200002b1
 8004560:	200002ac 	.word	0x200002ac
 8004564:	200002f0 	.word	0x200002f0
 8004568:	200002c0 	.word	0x200002c0
 800456c:	200002c2 	.word	0x200002c2
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8004570:	4a9b      	ldr	r2, [pc, #620]	; (80047e0 <keyb_proc+0x8a4>)
 8004572:	2102      	movs	r1, #2
 8004574:	7011      	strb	r1, [r2, #0]
 8004576:	e62e      	b.n	80041d6 <keyb_proc+0x29a>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004578:	4a9a      	ldr	r2, [pc, #616]	; (80047e4 <keyb_proc+0x8a8>)
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	2a04      	cmp	r2, #4
 8004580:	f47f ae35 	bne.w	80041ee <keyb_proc+0x2b2>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8004584:	4a97      	ldr	r2, [pc, #604]	; (80047e4 <keyb_proc+0x8a8>)
 8004586:	2102      	movs	r1, #2
 8004588:	7011      	strb	r1, [r2, #0]
 800458a:	e630      	b.n	80041ee <keyb_proc+0x2b2>
				gSequencerMode_1 = gPrevSequencerMode_1;
 800458c:	4a96      	ldr	r2, [pc, #600]	; (80047e8 <keyb_proc+0x8ac>)
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	4993      	ldr	r1, [pc, #588]	; (80047e0 <keyb_proc+0x8a4>)
 8004594:	700a      	strb	r2, [r1, #0]
 8004596:	e64e      	b.n	8004236 <keyb_proc+0x2fa>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004598:	4a92      	ldr	r2, [pc, #584]	; (80047e4 <keyb_proc+0x8a8>)
 800459a:	7812      	ldrb	r2, [r2, #0]
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	2a04      	cmp	r2, #4
 80045a0:	f47f ae55 	bne.w	800424e <keyb_proc+0x312>
				gSequencerMode_2 = gPrevSequencerMode_2;
 80045a4:	4a91      	ldr	r2, [pc, #580]	; (80047ec <keyb_proc+0x8b0>)
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	498e      	ldr	r1, [pc, #568]	; (80047e4 <keyb_proc+0x8a8>)
 80045ac:	700a      	strb	r2, [r1, #0]
 80045ae:	e64e      	b.n	800424e <keyb_proc+0x312>
				gSequencerMode_1 = gPrevSequencerMode_1;
 80045b0:	4a8d      	ldr	r2, [pc, #564]	; (80047e8 <keyb_proc+0x8ac>)
 80045b2:	7812      	ldrb	r2, [r2, #0]
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	498a      	ldr	r1, [pc, #552]	; (80047e0 <keyb_proc+0x8a4>)
 80045b8:	700a      	strb	r2, [r1, #0]
 80045ba:	e668      	b.n	800428e <keyb_proc+0x352>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 80045bc:	4a89      	ldr	r2, [pc, #548]	; (80047e4 <keyb_proc+0x8a8>)
 80045be:	7812      	ldrb	r2, [r2, #0]
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	2a05      	cmp	r2, #5
 80045c4:	f47f ae6f 	bne.w	80042a6 <keyb_proc+0x36a>
				gSequencerMode_2 = gPrevSequencerMode_2;
 80045c8:	4a88      	ldr	r2, [pc, #544]	; (80047ec <keyb_proc+0x8b0>)
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	4985      	ldr	r1, [pc, #532]	; (80047e4 <keyb_proc+0x8a8>)
 80045d0:	700a      	strb	r2, [r1, #0]
 80045d2:	e668      	b.n	80042a6 <keyb_proc+0x36a>
				gSequencerMode_1 = gPrevSequencerMode_1;
 80045d4:	4a84      	ldr	r2, [pc, #528]	; (80047e8 <keyb_proc+0x8ac>)
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	4981      	ldr	r1, [pc, #516]	; (80047e0 <keyb_proc+0x8a4>)
 80045dc:	700a      	strb	r2, [r1, #0]
 80045de:	e67d      	b.n	80042dc <keyb_proc+0x3a0>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 80045e0:	4a80      	ldr	r2, [pc, #512]	; (80047e4 <keyb_proc+0x8a8>)
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	2a05      	cmp	r2, #5
 80045e8:	f47f ae84 	bne.w	80042f4 <keyb_proc+0x3b8>
				gSequencerMode_2 = gPrevSequencerMode_2;
 80045ec:	4a7f      	ldr	r2, [pc, #508]	; (80047ec <keyb_proc+0x8b0>)
 80045ee:	7812      	ldrb	r2, [r2, #0]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	497c      	ldr	r1, [pc, #496]	; (80047e4 <keyb_proc+0x8a8>)
 80045f4:	700a      	strb	r2, [r1, #0]
 80045f6:	e67d      	b.n	80042f4 <keyb_proc+0x3b8>
				gSequencerMode_1 = gPrevSequencerMode_1;
 80045f8:	4a7b      	ldr	r2, [pc, #492]	; (80047e8 <keyb_proc+0x8ac>)
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	4978      	ldr	r1, [pc, #480]	; (80047e0 <keyb_proc+0x8a4>)
 8004600:	700a      	strb	r2, [r1, #0]
 8004602:	e68e      	b.n	8004322 <keyb_proc+0x3e6>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004604:	4a77      	ldr	r2, [pc, #476]	; (80047e4 <keyb_proc+0x8a8>)
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	2a04      	cmp	r2, #4
 800460c:	f47f ae95 	bne.w	800433a <keyb_proc+0x3fe>
				gSequencerMode_2 = gPrevSequencerMode_2;
 8004610:	4a76      	ldr	r2, [pc, #472]	; (80047ec <keyb_proc+0x8b0>)
 8004612:	7812      	ldrb	r2, [r2, #0]
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	4973      	ldr	r1, [pc, #460]	; (80047e4 <keyb_proc+0x8a8>)
 8004618:	700a      	strb	r2, [r1, #0]
 800461a:	e68e      	b.n	800433a <keyb_proc+0x3fe>
			InitClear_Timer();
 800461c:	f7fd fdbe 	bl	800219c <InitClear_Timer>
			if (gDisplayMode == DISPLAY_MODE_LOAD_1) {
 8004620:	4b73      	ldr	r3, [pc, #460]	; (80047f0 <keyb_proc+0x8b4>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b06      	cmp	r3, #6
 8004628:	d018      	beq.n	800465c <keyb_proc+0x720>
			else if (gDisplayMode == DISPLAY_MODE_LOAD_2) {
 800462a:	4b71      	ldr	r3, [pc, #452]	; (80047f0 <keyb_proc+0x8b4>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b07      	cmp	r3, #7
 8004632:	d027      	beq.n	8004684 <keyb_proc+0x748>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 8004634:	4b6e      	ldr	r3, [pc, #440]	; (80047f0 <keyb_proc+0x8b4>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d137      	bne.n	80046ac <keyb_proc+0x770>
				gDisplayMode = DISPLAY_MODE_LOAD_1;
 800463c:	4b6c      	ldr	r3, [pc, #432]	; (80047f0 <keyb_proc+0x8b4>)
 800463e:	2206      	movs	r2, #6
 8004640:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 8004642:	4b6c      	ldr	r3, [pc, #432]	; (80047f4 <keyb_proc+0x8b8>)
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004648:	4b6b      	ldr	r3, [pc, #428]	; (80047f8 <keyb_proc+0x8bc>)
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	f042 0202 	orr.w	r2, r2, #2
 8004650:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	e6fb      	b.n	8004454 <keyb_proc+0x518>
				LoadSequence(gEditModeStepNum);
 800465c:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <keyb_proc+0x8b8>)
 800465e:	7818      	ldrb	r0, [r3, #0]
 8004660:	f7fd fe28 	bl	80022b4 <LoadSequence>
				gKeysNotValid = 1;
 8004664:	4b65      	ldr	r3, [pc, #404]	; (80047fc <keyb_proc+0x8c0>)
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 800466a:	2100      	movs	r1, #0
 800466c:	4b60      	ldr	r3, [pc, #384]	; (80047f0 <keyb_proc+0x8b4>)
 800466e:	7019      	strb	r1, [r3, #0]
				gPrevSequencerMode_1 = gSequencerMode_1;
 8004670:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <keyb_proc+0x8a4>)
 8004672:	7813      	ldrb	r3, [r2, #0]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	485c      	ldr	r0, [pc, #368]	; (80047e8 <keyb_proc+0x8ac>)
 8004678:	7003      	strb	r3, [r0, #0]
				gSequenceStepNumber_1 = 0;
 800467a:	4b61      	ldr	r3, [pc, #388]	; (8004800 <keyb_proc+0x8c4>)
 800467c:	7019      	strb	r1, [r3, #0]
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 800467e:	2302      	movs	r3, #2
 8004680:	7013      	strb	r3, [r2, #0]
 8004682:	e6e7      	b.n	8004454 <keyb_proc+0x518>
				LoadSequence(gEditModeStepNum);
 8004684:	4b5b      	ldr	r3, [pc, #364]	; (80047f4 <keyb_proc+0x8b8>)
 8004686:	7818      	ldrb	r0, [r3, #0]
 8004688:	f7fd fe14 	bl	80022b4 <LoadSequence>
				gKeysNotValid = 1;
 800468c:	2301      	movs	r3, #1
 800468e:	4a5b      	ldr	r2, [pc, #364]	; (80047fc <keyb_proc+0x8c0>)
 8004690:	7013      	strb	r3, [r2, #0]
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 8004692:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <keyb_proc+0x8b4>)
 8004694:	7013      	strb	r3, [r2, #0]
				gPrevSequencerMode_2 = gSequencerMode_2;
 8004696:	4a53      	ldr	r2, [pc, #332]	; (80047e4 <keyb_proc+0x8a8>)
 8004698:	7813      	ldrb	r3, [r2, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	4953      	ldr	r1, [pc, #332]	; (80047ec <keyb_proc+0x8b0>)
 800469e:	700b      	strb	r3, [r1, #0]
				gSequenceStepNumber_2 = 0;
 80046a0:	4b58      	ldr	r3, [pc, #352]	; (8004804 <keyb_proc+0x8c8>)
 80046a2:	2100      	movs	r1, #0
 80046a4:	7019      	strb	r1, [r3, #0]
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 80046a6:	2302      	movs	r3, #2
 80046a8:	7013      	strb	r3, [r2, #0]
 80046aa:	e6d3      	b.n	8004454 <keyb_proc+0x518>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 80046ac:	4b50      	ldr	r3, [pc, #320]	; (80047f0 <keyb_proc+0x8b4>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	f47f aece 	bne.w	8004454 <keyb_proc+0x518>
				gDisplayMode = DISPLAY_MODE_LOAD_2;
 80046b8:	4b4d      	ldr	r3, [pc, #308]	; (80047f0 <keyb_proc+0x8b4>)
 80046ba:	2207      	movs	r2, #7
 80046bc:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 80046be:	4b4d      	ldr	r3, [pc, #308]	; (80047f4 <keyb_proc+0x8b8>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 80046c4:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <keyb_proc+0x8bc>)
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	f042 0202 	orr.w	r2, r2, #2
 80046cc:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e6bd      	b.n	8004454 <keyb_proc+0x518>
			InitClear_Timer();
 80046d8:	f7fd fd60 	bl	800219c <InitClear_Timer>
			if (gDisplayMode == DISPLAY_MODE_SAVE_1) {
 80046dc:	4b44      	ldr	r3, [pc, #272]	; (80047f0 <keyb_proc+0x8b4>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d017      	beq.n	8004716 <keyb_proc+0x7da>
			else if (gDisplayMode == DISPLAY_MODE_SAVE_2) {
 80046e6:	4b42      	ldr	r3, [pc, #264]	; (80047f0 <keyb_proc+0x8b4>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d01a      	beq.n	8004726 <keyb_proc+0x7ea>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 80046f0:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <keyb_proc+0x8b4>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	b9fb      	cbnz	r3, 8004736 <keyb_proc+0x7fa>
				gDisplayMode = DISPLAY_MODE_SAVE_1;
 80046f6:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <keyb_proc+0x8b4>)
 80046f8:	2204      	movs	r2, #4
 80046fa:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 80046fc:	4b3d      	ldr	r3, [pc, #244]	; (80047f4 <keyb_proc+0x8b8>)
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <keyb_proc+0x8bc>)
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	f042 0202 	orr.w	r2, r2, #2
 800470a:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e6a3      	b.n	800445e <keyb_proc+0x522>
				SaveSequence(gEditModeStepNum);
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <keyb_proc+0x8b8>)
 8004718:	7818      	ldrb	r0, [r3, #0]
 800471a:	f7fd fd8d 	bl	8002238 <SaveSequence>
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 800471e:	4b34      	ldr	r3, [pc, #208]	; (80047f0 <keyb_proc+0x8b4>)
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e69b      	b.n	800445e <keyb_proc+0x522>
				SaveSequence(gEditModeStepNum);
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <keyb_proc+0x8b8>)
 8004728:	7818      	ldrb	r0, [r3, #0]
 800472a:	f7fd fd85 	bl	8002238 <SaveSequence>
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 800472e:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <keyb_proc+0x8b4>)
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e693      	b.n	800445e <keyb_proc+0x522>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 8004736:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <keyb_proc+0x8b4>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	f47f ae8e 	bne.w	800445e <keyb_proc+0x522>
				gDisplayMode = DISPLAY_MODE_SAVE_2;
 8004742:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <keyb_proc+0x8b4>)
 8004744:	2205      	movs	r2, #5
 8004746:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <keyb_proc+0x8b8>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 800474e:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <keyb_proc+0x8bc>)
 8004750:	781a      	ldrb	r2, [r3, #0]
 8004752:	f042 0202 	orr.w	r2, r2, #2
 8004756:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e67d      	b.n	800445e <keyb_proc+0x522>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
 8004762:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <keyb_proc+0x8b4>)
 8004764:	2203      	movs	r2, #3
 8004766:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 1;
 8004768:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <keyb_proc+0x8b8>)
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e68a      	b.n	8004486 <keyb_proc+0x54a>
				if (gEditModeStepNum > 0) {
 8004770:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <keyb_proc+0x8b8>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b30b      	cbz	r3, 80047ba <keyb_proc+0x87e>
					if(counterL == 0) gEditModeStepNum--;
 8004776:	4a24      	ldr	r2, [pc, #144]	; (8004808 <keyb_proc+0x8cc>)
 8004778:	8812      	ldrh	r2, [r2, #0]
 800477a:	b982      	cbnz	r2, 800479e <keyb_proc+0x862>
 800477c:	3b01      	subs	r3, #1
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <keyb_proc+0x8b8>)
 8004780:	7013      	strb	r3, [r2, #0]
					counterL++;
 8004782:	4a21      	ldr	r2, [pc, #132]	; (8004808 <keyb_proc+0x8cc>)
 8004784:	8813      	ldrh	r3, [r2, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <keyb_proc+0x8bc>)
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004794:	781a      	ldrb	r2, [r3, #0]
 8004796:	f042 0202 	orr.w	r2, r2, #2
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e67f      	b.n	800449e <keyb_proc+0x562>
					else if(counterL >= 500)
 800479e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80047a2:	d3ee      	bcc.n	8004782 <keyb_proc+0x846>
						if(counterL > 600)
 80047a4:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 80047a8:	d9eb      	bls.n	8004782 <keyb_proc+0x846>
							counterL = 500;
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <keyb_proc+0x8cc>)
 80047ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80047b0:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum--;
 80047b2:	3b01      	subs	r3, #1
 80047b4:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <keyb_proc+0x8b8>)
 80047b6:	7013      	strb	r3, [r2, #0]
 80047b8:	e7e3      	b.n	8004782 <keyb_proc+0x846>
					if(counterL == 0) gEditModeStepNum = max_step;
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <keyb_proc+0x8cc>)
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	bb2b      	cbnz	r3, 800480c <keyb_proc+0x8d0>
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <keyb_proc+0x8b8>)
 80047c2:	701e      	strb	r6, [r3, #0]
					counterL++;
 80047c4:	4a10      	ldr	r2, [pc, #64]	; (8004808 <keyb_proc+0x8cc>)
 80047c6:	8813      	ldrh	r3, [r2, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <keyb_proc+0x8bc>)
 80047ce:	781a      	ldrb	r2, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	f042 0202 	orr.w	r2, r2, #2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e65e      	b.n	800449e <keyb_proc+0x562>
 80047e0:	200002c1 	.word	0x200002c1
 80047e4:	200002c2 	.word	0x200002c2
 80047e8:	200002bd 	.word	0x200002bd
 80047ec:	200002be 	.word	0x200002be
 80047f0:	200002b0 	.word	0x200002b0
 80047f4:	200002b1 	.word	0x200002b1
 80047f8:	200002f0 	.word	0x200002f0
 80047fc:	200002bc 	.word	0x200002bc
 8004800:	200002bf 	.word	0x200002bf
 8004804:	200002c0 	.word	0x200002c0
 8004808:	200002ac 	.word	0x200002ac
					else if(counterL >= 500)
 800480c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004810:	d3d8      	bcc.n	80047c4 <keyb_proc+0x888>
						if(counterL > 600)
 8004812:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004816:	d9d5      	bls.n	80047c4 <keyb_proc+0x888>
							counterL = 500;
 8004818:	4b95      	ldr	r3, [pc, #596]	; (8004a70 <keyb_proc+0xb34>)
 800481a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800481e:	801a      	strh	r2, [r3, #0]
							gEditModeStepNum = max_step;
 8004820:	4b94      	ldr	r3, [pc, #592]	; (8004a74 <keyb_proc+0xb38>)
 8004822:	701e      	strb	r6, [r3, #0]
 8004824:	e7ce      	b.n	80047c4 <keyb_proc+0x888>
					else if(counterL >= 500)
 8004826:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 800482a:	f4ff ae5a 	bcc.w	80044e2 <keyb_proc+0x5a6>
						if(counterL > 600)
 800482e:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8004832:	f67f ae56 	bls.w	80044e2 <keyb_proc+0x5a6>
							counterL = 500;
 8004836:	4a8e      	ldr	r2, [pc, #568]	; (8004a70 <keyb_proc+0xb34>)
 8004838:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800483c:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum--;
 800483e:	3b01      	subs	r3, #1
 8004840:	4a8c      	ldr	r2, [pc, #560]	; (8004a74 <keyb_proc+0xb38>)
 8004842:	7013      	strb	r3, [r2, #0]
 8004844:	e64d      	b.n	80044e2 <keyb_proc+0x5a6>
				} else {
					if(counterL == 0) 
 8004846:	4b8a      	ldr	r3, [pc, #552]	; (8004a70 <keyb_proc+0xb34>)
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b17b      	cbz	r3, 800486c <keyb_proc+0x930>
								bank = 1;
							}
							}
							else gEditModeStepNum = 31;
					}
					else if(counterL >= 500)
 800484c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004850:	d302      	bcc.n	8004858 <keyb_proc+0x91c>
					{
						if(counterL > 600)
 8004852:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004856:	d820      	bhi.n	800489a <keyb_proc+0x95e>
								}
							}
							else gEditModeStepNum = 31;
						}
					}
					counterL++;
 8004858:	4a85      	ldr	r2, [pc, #532]	; (8004a70 <keyb_proc+0xb34>)
 800485a:	8813      	ldrh	r3, [r2, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	8013      	strh	r3, [r2, #0]

					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004860:	4a85      	ldr	r2, [pc, #532]	; (8004a78 <keyb_proc+0xb3c>)
 8004862:	7813      	ldrb	r3, [r2, #0]
 8004864:	f043 0302 	orr.w	r3, r3, #2
 8004868:	7013      	strb	r3, [r2, #0]
 800486a:	e034      	b.n	80048d6 <keyb_proc+0x99a>
							if(!Is_Expander_Present())
 800486c:	f7fd fa0c 	bl	8001c88 <Is_Expander_Present>
 8004870:	b978      	cbnz	r0, 8004892 <keyb_proc+0x956>
							gEditModeStepNum = 15;
 8004872:	4b80      	ldr	r3, [pc, #512]	; (8004a74 <keyb_proc+0xb38>)
 8004874:	220f      	movs	r2, #15
 8004876:	701a      	strb	r2, [r3, #0]
							if(bank == 1) 
 8004878:	4b80      	ldr	r3, [pc, #512]	; (8004a7c <keyb_proc+0xb40>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b01      	cmp	r3, #1
 8004880:	d003      	beq.n	800488a <keyb_proc+0x94e>
								bank = 1;
 8004882:	4b7e      	ldr	r3, [pc, #504]	; (8004a7c <keyb_proc+0xb40>)
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e7e6      	b.n	8004858 <keyb_proc+0x91c>
								bank = 2;
 800488a:	4b7c      	ldr	r3, [pc, #496]	; (8004a7c <keyb_proc+0xb40>)
 800488c:	2202      	movs	r2, #2
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e7e2      	b.n	8004858 <keyb_proc+0x91c>
							else gEditModeStepNum = 31;
 8004892:	4b78      	ldr	r3, [pc, #480]	; (8004a74 <keyb_proc+0xb38>)
 8004894:	221f      	movs	r2, #31
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e7de      	b.n	8004858 <keyb_proc+0x91c>
							counterL = 500;
 800489a:	4b75      	ldr	r3, [pc, #468]	; (8004a70 <keyb_proc+0xb34>)
 800489c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048a0:	801a      	strh	r2, [r3, #0]
							if(!Is_Expander_Present())
 80048a2:	f7fd f9f1 	bl	8001c88 <Is_Expander_Present>
 80048a6:	b978      	cbnz	r0, 80048c8 <keyb_proc+0x98c>
								gEditModeStepNum = 15;
 80048a8:	4b72      	ldr	r3, [pc, #456]	; (8004a74 <keyb_proc+0xb38>)
 80048aa:	220f      	movs	r2, #15
 80048ac:	701a      	strb	r2, [r3, #0]
								if(bank == 1) 
 80048ae:	4b73      	ldr	r3, [pc, #460]	; (8004a7c <keyb_proc+0xb40>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d003      	beq.n	80048c0 <keyb_proc+0x984>
									bank = 1;
 80048b8:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <keyb_proc+0xb40>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	e7cb      	b.n	8004858 <keyb_proc+0x91c>
									bank = 2;
 80048c0:	4b6e      	ldr	r3, [pc, #440]	; (8004a7c <keyb_proc+0xb40>)
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e7c7      	b.n	8004858 <keyb_proc+0x91c>
							else gEditModeStepNum = 31;
 80048c8:	4b6a      	ldr	r3, [pc, #424]	; (8004a74 <keyb_proc+0xb38>)
 80048ca:	221f      	movs	r2, #31
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	e7c3      	b.n	8004858 <keyb_proc+0x91c>
				};
			};
		}
		else 
		{
			counterL = 0;
 80048d0:	4b67      	ldr	r3, [pc, #412]	; (8004a70 <keyb_proc+0xb34>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	801a      	strh	r2, [r3, #0]
		};
		
		if ( !key->b.StepRight ) {
 80048d6:	7823      	ldrb	r3, [r4, #0]
 80048d8:	f013 0f08 	tst.w	r3, #8
 80048dc:	f040 80f6 	bne.w	8004acc <keyb_proc+0xb90>
			if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 80048e0:	4b67      	ldr	r3, [pc, #412]	; (8004a80 <keyb_proc+0xb44>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	b923      	cbnz	r3, 80048f0 <keyb_proc+0x9b4>
				gDisplayMode = DISPLAY_MODE_EDIT_1;
 80048e6:	4b66      	ldr	r3, [pc, #408]	; (8004a80 <keyb_proc+0xb44>)
 80048e8:	2202      	movs	r2, #2
 80048ea:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = max_step;
 80048ec:	4b61      	ldr	r3, [pc, #388]	; (8004a74 <keyb_proc+0xb38>)
 80048ee:	701e      	strb	r6, [r3, #0]
			};
			if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 80048f0:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <keyb_proc+0xb44>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d033      	beq.n	8004962 <keyb_proc+0xa26>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
				gEditModeStepNum = max_step;
			};
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 80048fa:	4b61      	ldr	r3, [pc, #388]	; (8004a80 <keyb_proc+0xb44>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d034      	beq.n	800496e <keyb_proc+0xa32>
						(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 8004904:	4b5e      	ldr	r3, [pc, #376]	; (8004a80 <keyb_proc+0xb44>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 800490a:	2b03      	cmp	r3, #3
 800490c:	d02f      	beq.n	800496e <keyb_proc+0xa32>
					DisplayUpdateFlags.b.StepsDisplay = 1;
				};
			};			
						
			//if in save or load mode right buttons select memory cell for save/recall
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 800490e:	4b5c      	ldr	r3, [pc, #368]	; (8004a80 <keyb_proc+0xb44>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b04      	cmp	r3, #4
 8004916:	d00f      	beq.n	8004938 <keyb_proc+0x9fc>
 8004918:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <keyb_proc+0xb44>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b05      	cmp	r3, #5
 8004920:	d00a      	beq.n	8004938 <keyb_proc+0x9fc>
				(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2)) {
 8004922:	4b57      	ldr	r3, [pc, #348]	; (8004a80 <keyb_proc+0xb44>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8004928:	2b06      	cmp	r3, #6
 800492a:	d005      	beq.n	8004938 <keyb_proc+0x9fc>
				(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2)) {
 800492c:	4b54      	ldr	r3, [pc, #336]	; (8004a80 <keyb_proc+0xb44>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b07      	cmp	r3, #7
 8004934:	f040 80cd 	bne.w	8004ad2 <keyb_proc+0xb96>
				if (gEditModeStepNum < max_step) {
 8004938:	4b4e      	ldr	r3, [pc, #312]	; (8004a74 <keyb_proc+0xb38>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	42b3      	cmp	r3, r6
 800493e:	d26c      	bcs.n	8004a1a <keyb_proc+0xade>
					if(counterR == 0) gEditModeStepNum++;
 8004940:	4a50      	ldr	r2, [pc, #320]	; (8004a84 <keyb_proc+0xb48>)
 8004942:	8812      	ldrh	r2, [r2, #0]
 8004944:	2a00      	cmp	r2, #0
 8004946:	d15a      	bne.n	80049fe <keyb_proc+0xac2>
 8004948:	3301      	adds	r3, #1
 800494a:	4a4a      	ldr	r2, [pc, #296]	; (8004a74 <keyb_proc+0xb38>)
 800494c:	7013      	strb	r3, [r2, #0]
						{
							counterR = 500;
							gEditModeStepNum++;
						}
					}
					counterR++;
 800494e:	4a4d      	ldr	r2, [pc, #308]	; (8004a84 <keyb_proc+0xb48>)
 8004950:	8813      	ldrh	r3, [r2, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004956:	4a48      	ldr	r2, [pc, #288]	; (8004a78 <keyb_proc+0xb3c>)
 8004958:	7813      	ldrb	r3, [r2, #0]
 800495a:	f043 0302 	orr.w	r3, r3, #2
 800495e:	7013      	strb	r3, [r2, #0]
 8004960:	e0b7      	b.n	8004ad2 <keyb_proc+0xb96>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
 8004962:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <keyb_proc+0xb44>)
 8004964:	2203      	movs	r2, #3
 8004966:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = max_step;
 8004968:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <keyb_proc+0xb38>)
 800496a:	701e      	strb	r6, [r3, #0]
 800496c:	e7c5      	b.n	80048fa <keyb_proc+0x9be>
				if (gEditModeStepNum < max_step) {
 800496e:	4b41      	ldr	r3, [pc, #260]	; (8004a74 <keyb_proc+0xb38>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	42b3      	cmp	r3, r6
 8004974:	d221      	bcs.n	80049ba <keyb_proc+0xa7e>
					if(counterR == 0) gEditModeStepNum++;
 8004976:	4a43      	ldr	r2, [pc, #268]	; (8004a84 <keyb_proc+0xb48>)
 8004978:	8812      	ldrh	r2, [r2, #0]
 800497a:	b982      	cbnz	r2, 800499e <keyb_proc+0xa62>
 800497c:	3301      	adds	r3, #1
 800497e:	4a3d      	ldr	r2, [pc, #244]	; (8004a74 <keyb_proc+0xb38>)
 8004980:	7013      	strb	r3, [r2, #0]
					counterR++;
 8004982:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <keyb_proc+0xb48>)
 8004984:	8813      	ldrh	r3, [r2, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <keyb_proc+0xb3c>)
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	f042 0202 	orr.w	r2, r2, #2
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e7b7      	b.n	800490e <keyb_proc+0x9d2>
					else if(counterR >= 500)
 800499e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80049a2:	d3ee      	bcc.n	8004982 <keyb_proc+0xa46>
						if(counterR > 600)
 80049a4:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 80049a8:	d9eb      	bls.n	8004982 <keyb_proc+0xa46>
							counterR = 500;
 80049aa:	4a36      	ldr	r2, [pc, #216]	; (8004a84 <keyb_proc+0xb48>)
 80049ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80049b0:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum++;
 80049b2:	3301      	adds	r3, #1
 80049b4:	4a2f      	ldr	r2, [pc, #188]	; (8004a74 <keyb_proc+0xb38>)
 80049b6:	7013      	strb	r3, [r2, #0]
 80049b8:	e7e3      	b.n	8004982 <keyb_proc+0xa46>
					if(counterR == 0) gEditModeStepNum = 0;
 80049ba:	4b32      	ldr	r3, [pc, #200]	; (8004a84 <keyb_proc+0xb48>)
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b983      	cbnz	r3, 80049e2 <keyb_proc+0xaa6>
 80049c0:	4b2c      	ldr	r3, [pc, #176]	; (8004a74 <keyb_proc+0xb38>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
					counterR++;
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <keyb_proc+0xb48>)
 80049c8:	8813      	ldrh	r3, [r2, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <keyb_proc+0xb3c>)
 80049d0:	781a      	ldrb	r2, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 80049d8:	781a      	ldrb	r2, [r3, #0]
 80049da:	f042 0202 	orr.w	r2, r2, #2
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e795      	b.n	800490e <keyb_proc+0x9d2>
					else if(counterR >= 500)
 80049e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049e6:	d3ee      	bcc.n	80049c6 <keyb_proc+0xa8a>
						if(counterR > 600)
 80049e8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80049ec:	d9eb      	bls.n	80049c6 <keyb_proc+0xa8a>
							counterR = 500;
 80049ee:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <keyb_proc+0xb48>)
 80049f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80049f4:	801a      	strh	r2, [r3, #0]
							gEditModeStepNum = 0;
 80049f6:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <keyb_proc+0xb38>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e7e3      	b.n	80049c6 <keyb_proc+0xa8a>
					else if(counterR >= 500)
 80049fe:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8004a02:	d3a4      	bcc.n	800494e <keyb_proc+0xa12>
						if(counterR > 600)
 8004a04:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8004a08:	d9a1      	bls.n	800494e <keyb_proc+0xa12>
							counterR = 500;
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	; (8004a84 <keyb_proc+0xb48>)
 8004a0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004a10:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum++;
 8004a12:	3301      	adds	r3, #1
 8004a14:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <keyb_proc+0xb38>)
 8004a16:	7013      	strb	r3, [r2, #0]
 8004a18:	e799      	b.n	800494e <keyb_proc+0xa12>
				} else {
					
					if(counterR == 0) 
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <keyb_proc+0xb48>)
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b17b      	cbz	r3, 8004a40 <keyb_proc+0xb04>
							else 
							{
								gEditModeStepNum = 0;
							}
					}
					else if(counterR >= 500)
 8004a20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a24:	d302      	bcc.n	8004a2c <keyb_proc+0xaf0>
					{
						if(counterR > 600)
 8004a26:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004a2a:	d82d      	bhi.n	8004a88 <keyb_proc+0xb4c>
							{
								gEditModeStepNum = 0;
							}
						}
					}
					counterR++;
 8004a2c:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <keyb_proc+0xb48>)
 8004a2e:	8813      	ldrh	r3, [r2, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	8013      	strh	r3, [r2, #0]

					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004a34:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <keyb_proc+0xb3c>)
 8004a36:	7813      	ldrb	r3, [r2, #0]
 8004a38:	f043 0302 	orr.w	r3, r3, #2
 8004a3c:	7013      	strb	r3, [r2, #0]
 8004a3e:	e048      	b.n	8004ad2 <keyb_proc+0xb96>
							if(!Is_Expander_Present())
 8004a40:	f7fd f922 	bl	8001c88 <Is_Expander_Present>
 8004a44:	b978      	cbnz	r0, 8004a66 <keyb_proc+0xb2a>
								gEditModeStepNum = 0;
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <keyb_proc+0xb38>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
								if(bank == 1) 
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <keyb_proc+0xb40>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d003      	beq.n	8004a5e <keyb_proc+0xb22>
									bank = 1;
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <keyb_proc+0xb40>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e7e6      	b.n	8004a2c <keyb_proc+0xaf0>
									bank = 2;
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <keyb_proc+0xb40>)
 8004a60:	2202      	movs	r2, #2
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	e7e2      	b.n	8004a2c <keyb_proc+0xaf0>
								gEditModeStepNum = 0;
 8004a66:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <keyb_proc+0xb38>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e7de      	b.n	8004a2c <keyb_proc+0xaf0>
 8004a6e:	bf00      	nop
 8004a70:	200002ac 	.word	0x200002ac
 8004a74:	200002b1 	.word	0x200002b1
 8004a78:	200002f0 	.word	0x200002f0
 8004a7c:	20000270 	.word	0x20000270
 8004a80:	200002b0 	.word	0x200002b0
 8004a84:	200002ae 	.word	0x200002ae
							counterR = 500;
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <keyb_proc+0xb84>)
 8004a8a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a8e:	801a      	strh	r2, [r3, #0]
							if(!Is_Expander_Present())
 8004a90:	f7fd f8fa 	bl	8001c88 <Is_Expander_Present>
 8004a94:	b978      	cbnz	r0, 8004ab6 <keyb_proc+0xb7a>
								gEditModeStepNum = 0;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <keyb_proc+0xb88>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
								if(bank == 1) 
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <keyb_proc+0xb8c>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d003      	beq.n	8004aae <keyb_proc+0xb72>
									bank = 1;
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <keyb_proc+0xb8c>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e7be      	b.n	8004a2c <keyb_proc+0xaf0>
									bank = 2;
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <keyb_proc+0xb8c>)
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e7ba      	b.n	8004a2c <keyb_proc+0xaf0>
								gEditModeStepNum = 0;
 8004ab6:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <keyb_proc+0xb88>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e7b6      	b.n	8004a2c <keyb_proc+0xaf0>
 8004abe:	bf00      	nop
 8004ac0:	200002ae 	.word	0x200002ae
 8004ac4:	200002b1 	.word	0x200002b1
 8004ac8:	20000270 	.word	0x20000270
				};
			};
		}
		else 
		{
			counterR = 0;
 8004acc:	4baa      	ldr	r3, [pc, #680]	; (8004d78 <keyb_proc+0xe3c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	801a      	strh	r2, [r3, #0]
		};
	key_locked = 1;
 8004ad2:	4baa      	ldr	r3, [pc, #680]	; (8004d7c <keyb_proc+0xe40>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
	
		
		//Sections 1/2
	if (gKeysNotValid == 0) {
 8004ad8:	4ba9      	ldr	r3, [pc, #676]	; (8004d80 <keyb_proc+0xe44>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b9c3      	cbnz	r3, 8004b10 <keyb_proc+0xbd4>
		
	if (!key->b.StageAddress1Display) {
 8004ade:	7963      	ldrb	r3, [r4, #5]
 8004ae0:	f013 0f04 	tst.w	r3, #4
 8004ae4:	d105      	bne.n	8004af2 <keyb_proc+0xbb6>
			if (gDisplayMode != DISPLAY_MODE_VIEW_1) {			
 8004ae6:	4ba7      	ldr	r3, [pc, #668]	; (8004d84 <keyb_proc+0xe48>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	b113      	cbz	r3, 8004af2 <keyb_proc+0xbb6>
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 8004aec:	4ba5      	ldr	r3, [pc, #660]	; (8004d84 <keyb_proc+0xe48>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]
			};		
		};
		

		if (!key->b.StageAddress2Display) {
 8004af2:	7923      	ldrb	r3, [r4, #4]
 8004af4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004af8:	d10a      	bne.n	8004b10 <keyb_proc+0xbd4>
			if (gDisplayMode != DISPLAY_MODE_VIEW_2) {			
 8004afa:	4ba2      	ldr	r3, [pc, #648]	; (8004d84 <keyb_proc+0xe48>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d005      	beq.n	8004b10 <keyb_proc+0xbd4>
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 8004b04:	4b9f      	ldr	r3, [pc, #636]	; (8004d84 <keyb_proc+0xe48>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
				key_locked = 0;
 8004b0a:	4b9c      	ldr	r3, [pc, #624]	; (8004d7c <keyb_proc+0xe40>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
		};
	};
		
	

		if ( (!key->b.StageAddress1Reset)  ) {
 8004b10:	7963      	ldrb	r3, [r4, #5]
 8004b12:	f013 0f02 	tst.w	r3, #2
 8004b16:	d11f      	bne.n	8004b58 <keyb_proc+0xc1c>
				if(gSequencerMode_1 != SEQUENCER_MODE_WAIT)
 8004b18:	4b9b      	ldr	r3, [pc, #620]	; (8004d88 <keyb_proc+0xe4c>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d01a      	beq.n	8004b58 <keyb_proc+0xc1c>
				{
				gSequenceStepNumber_1 = 0;
 8004b22:	4b9a      	ldr	r3, [pc, #616]	; (8004d8c <keyb_proc+0xe50>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004b28:	4b99      	ldr	r3, [pc, #612]	; (8004d90 <keyb_proc+0xe54>)
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	f042 0202 	orr.w	r2, r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
				if (gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z || gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 8004b3a:	4b93      	ldr	r3, [pc, #588]	; (8004d88 <keyb_proc+0xe4c>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d004      	beq.n	8004b4e <keyb_proc+0xc12>
 8004b44:	4b90      	ldr	r3, [pc, #576]	; (8004d88 <keyb_proc+0xe4c>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d104      	bne.n	8004b58 <keyb_proc+0xc1c>
				gSequencerMode_1 = gPrevSequencerMode_1;
 8004b4e:	4b91      	ldr	r3, [pc, #580]	; (8004d94 <keyb_proc+0xe58>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	4a8c      	ldr	r2, [pc, #560]	; (8004d88 <keyb_proc+0xe4c>)
 8004b56:	7013      	strb	r3, [r2, #0]
				}
			};
		};
					

		if ( (!key->b.StageAddress2Reset)  ) {
 8004b58:	7923      	ldrb	r3, [r4, #4]
 8004b5a:	f013 0f20 	tst.w	r3, #32
 8004b5e:	d11f      	bne.n	8004ba0 <keyb_proc+0xc64>
				if(gSequencerMode_2 != SEQUENCER_MODE_WAIT)
 8004b60:	4a8d      	ldr	r2, [pc, #564]	; (8004d98 <keyb_proc+0xe5c>)
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	2a01      	cmp	r2, #1
 8004b68:	d01a      	beq.n	8004ba0 <keyb_proc+0xc64>
				{						
					gSequenceStepNumber_2 = 0;
 8004b6a:	4a8c      	ldr	r2, [pc, #560]	; (8004d9c <keyb_proc+0xe60>)
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	7011      	strb	r1, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 8004b70:	4a87      	ldr	r2, [pc, #540]	; (8004d90 <keyb_proc+0xe54>)
 8004b72:	7811      	ldrb	r1, [r2, #0]
 8004b74:	f041 0101 	orr.w	r1, r1, #1
 8004b78:	7011      	strb	r1, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004b7a:	7811      	ldrb	r1, [r2, #0]
 8004b7c:	f041 0102 	orr.w	r1, r1, #2
 8004b80:	7011      	strb	r1, [r2, #0]
					
					if (gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z || gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8004b82:	4a85      	ldr	r2, [pc, #532]	; (8004d98 <keyb_proc+0xe5c>)
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	2a04      	cmp	r2, #4
 8004b8a:	d004      	beq.n	8004b96 <keyb_proc+0xc5a>
 8004b8c:	4a82      	ldr	r2, [pc, #520]	; (8004d98 <keyb_proc+0xe5c>)
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	2a05      	cmp	r2, #5
 8004b94:	d104      	bne.n	8004ba0 <keyb_proc+0xc64>
					gSequencerMode_2 = gPrevSequencerMode_2;
 8004b96:	4a82      	ldr	r2, [pc, #520]	; (8004da0 <keyb_proc+0xe64>)
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	497e      	ldr	r1, [pc, #504]	; (8004d98 <keyb_proc+0xe5c>)
 8004b9e:	700a      	strb	r2, [r1, #0]
				}
		};
		}
				
		if( key->b.Empty5 && strobe_banana_flag1 == 0)
 8004ba0:	f013 0f10 	tst.w	r3, #16
 8004ba4:	d03a      	beq.n	8004c1c <keyb_proc+0xce0>
 8004ba6:	4b7f      	ldr	r3, [pc, #508]	; (8004da4 <keyb_proc+0xe68>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d136      	bne.n	8004c1c <keyb_proc+0xce0>
		{
			strobe_banana_flag1 = 1;
 8004bae:	4b7d      	ldr	r3, [pc, #500]	; (8004da4 <keyb_proc+0xe68>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
				gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 8004bb4:	4b7c      	ldr	r3, [pc, #496]	; (8004da8 <keyb_proc+0xe6c>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	4a73      	ldr	r2, [pc, #460]	; (8004d8c <keyb_proc+0xe50>)
 8004bbe:	7013      	strb	r3, [r2, #0]
			
			if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8004bc0:	4b70      	ldr	r3, [pc, #448]	; (8004d84 <keyb_proc+0xe48>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	b943      	cbnz	r3, 8004bd8 <keyb_proc+0xc9c>
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004bc6:	4b72      	ldr	r3, [pc, #456]	; (8004d90 <keyb_proc+0xe54>)
 8004bc8:	781a      	ldrb	r2, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	f042 0202 	orr.w	r2, r2, #2
 8004bd6:	701a      	strb	r2, [r3, #0]
			};
			
				PULSE_LED_I_ALL_ON;
 8004bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bdc:	4873      	ldr	r0, [pc, #460]	; (8004dac <keyb_proc+0xe70>)
 8004bde:	f7fc fa82 	bl	80010e6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004be2:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <keyb_proc+0xe50>)
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <keyb_proc+0xe74>)
 8004be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004bf2:	f040 816e 	bne.w	8004ed2 <keyb_proc+0xf96>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004bf6:	4b65      	ldr	r3, [pc, #404]	; (8004d8c <keyb_proc+0xe50>)
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	4b6d      	ldr	r3, [pc, #436]	; (8004db0 <keyb_proc+0xe74>)
 8004bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004c06:	f040 816a 	bne.w	8004ede <keyb_proc+0xfa2>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 8004c0a:	4e6a      	ldr	r6, [pc, #424]	; (8004db4 <keyb_proc+0xe78>)
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7fc fc50 	bl	80014b4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8004c14:	2100      	movs	r1, #0
 8004c16:	4630      	mov	r0, r6
 8004c18:	f7fc fc3d 	bl	8001496 <TIM_SetCounter>
		}
		
		if(!key->b.Empty5) 
 8004c1c:	7923      	ldrb	r3, [r4, #4]
 8004c1e:	f013 0f10 	tst.w	r3, #16
 8004c22:	d102      	bne.n	8004c2a <keyb_proc+0xcee>
		{
			strobe_banana_flag1 = 0;
 8004c24:	4b5f      	ldr	r3, [pc, #380]	; (8004da4 <keyb_proc+0xe68>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
		}
		if ( (!key->b.StageAddress1PulseSelect) ) {
 8004c2a:	7963      	ldrb	r3, [r4, #5]
 8004c2c:	f013 0f10 	tst.w	r3, #16
 8004c30:	d133      	bne.n	8004c9a <keyb_proc+0xd5e>
				gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 8004c32:	4b5d      	ldr	r3, [pc, #372]	; (8004da8 <keyb_proc+0xe6c>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4a54      	ldr	r2, [pc, #336]	; (8004d8c <keyb_proc+0xe50>)
 8004c3c:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8004c3e:	4b51      	ldr	r3, [pc, #324]	; (8004d84 <keyb_proc+0xe48>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b943      	cbnz	r3, 8004c56 <keyb_proc+0xd1a>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8004c44:	4b52      	ldr	r3, [pc, #328]	; (8004d90 <keyb_proc+0xe54>)
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8004c4e:	781a      	ldrb	r2, [r3, #0]
 8004c50:	f042 0202 	orr.w	r2, r2, #2
 8004c54:	701a      	strb	r2, [r3, #0]
	};
			
				PULSE_LED_I_ALL_ON;
 8004c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c5a:	4854      	ldr	r0, [pc, #336]	; (8004dac <keyb_proc+0xe70>)
 8004c5c:	f7fc fa43 	bl	80010e6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004c60:	4b4a      	ldr	r3, [pc, #296]	; (8004d8c <keyb_proc+0xe50>)
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	4b52      	ldr	r3, [pc, #328]	; (8004db0 <keyb_proc+0xe74>)
 8004c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004c70:	f040 813b 	bne.w	8004eea <keyb_proc+0xfae>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004c74:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <keyb_proc+0xe50>)
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	4b4d      	ldr	r3, [pc, #308]	; (8004db0 <keyb_proc+0xe74>)
 8004c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004c84:	f040 8137 	bne.w	8004ef6 <keyb_proc+0xfba>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 8004c88:	4e4a      	ldr	r6, [pc, #296]	; (8004db4 <keyb_proc+0xe78>)
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f7fc fc11 	bl	80014b4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8004c92:	2100      	movs	r1, #0
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7fc fbfe 	bl	8001496 <TIM_SetCounter>
		};
		
						
		if( key->b.Empty2 && strobe_banana_flag2 == 0)
 8004c9a:	78e3      	ldrb	r3, [r4, #3]
 8004c9c:	f013 0f08 	tst.w	r3, #8
 8004ca0:	d033      	beq.n	8004d0a <keyb_proc+0xdce>
 8004ca2:	4b45      	ldr	r3, [pc, #276]	; (8004db8 <keyb_proc+0xe7c>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d12f      	bne.n	8004d0a <keyb_proc+0xdce>
		{
			strobe_banana_flag2 = 1;
 8004caa:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <keyb_proc+0xe7c>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
				gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 8004cb0:	4b3d      	ldr	r3, [pc, #244]	; (8004da8 <keyb_proc+0xe6c>)
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	4a38      	ldr	r2, [pc, #224]	; (8004d9c <keyb_proc+0xe60>)
 8004cba:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <keyb_proc+0xe48>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	f000 811d 	beq.w	8004f02 <keyb_proc+0xfc6>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};
			
				PULSE_LED_II_ALL_ON;
 8004cc8:	2104      	movs	r1, #4
 8004cca:	483c      	ldr	r0, [pc, #240]	; (8004dbc <keyb_proc+0xe80>)
 8004ccc:	f7fc fa0b 	bl	80010e6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004cd0:	4b2e      	ldr	r3, [pc, #184]	; (8004d8c <keyb_proc+0xe50>)
 8004cd2:	781a      	ldrb	r2, [r3, #0]
 8004cd4:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <keyb_proc+0xe74>)
 8004cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ce0:	f040 8119 	bne.w	8004f16 <keyb_proc+0xfda>
					PULSE_LED_II_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004ce4:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <keyb_proc+0xe50>)
 8004ce6:	781a      	ldrb	r2, [r3, #0]
 8004ce8:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <keyb_proc+0xe74>)
 8004cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004cf4:	f040 8114 	bne.w	8004f20 <keyb_proc+0xfe4>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 8004cf8:	4e31      	ldr	r6, [pc, #196]	; (8004dc0 <keyb_proc+0xe84>)
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f7fc fbd9 	bl	80014b4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8004d02:	2100      	movs	r1, #0
 8004d04:	4630      	mov	r0, r6
 8004d06:	f7fc fbc6 	bl	8001496 <TIM_SetCounter>
		}
		
		if(!key->b.Empty2) 
 8004d0a:	78e3      	ldrb	r3, [r4, #3]
 8004d0c:	f013 0f08 	tst.w	r3, #8
 8004d10:	d102      	bne.n	8004d18 <keyb_proc+0xddc>
		{
			strobe_banana_flag2 = 0;
 8004d12:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <keyb_proc+0xe7c>)
 8004d14:	2100      	movs	r1, #0
 8004d16:	7011      	strb	r1, [r2, #0]
		}


		if ( (!key->b.StageAddress2PulseSelect)) {
 8004d18:	f013 0f02 	tst.w	r3, #2
 8004d1c:	d158      	bne.n	8004dd0 <keyb_proc+0xe94>
				gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 8004d1e:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <keyb_proc+0xe6c>)
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <keyb_proc+0xe60>)
 8004d28:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8004d2a:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <keyb_proc+0xe48>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f000 80fb 	beq.w	8004f2c <keyb_proc+0xff0>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};
			
				PULSE_LED_II_ALL_ON;
 8004d36:	2104      	movs	r1, #4
 8004d38:	4820      	ldr	r0, [pc, #128]	; (8004dbc <keyb_proc+0xe80>)
 8004d3a:	f7fc f9d4 	bl	80010e6 <GPIO_ResetBits>
				
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8004d3e:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <keyb_proc+0xe60>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	f103 0220 	add.w	r2, r3, #32
 8004d46:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <keyb_proc+0xe74>)
 8004d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d52:	f040 80f5 	bne.w	8004f40 <keyb_proc+0x1004>
					PULSE_LED_II_1_ON;
				};
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <keyb_proc+0xe60>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	f103 0220 	add.w	r2, r3, #32
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <keyb_proc+0xe74>)
 8004d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004d6a:	f040 80ee 	bne.w	8004f4a <keyb_proc+0x100e>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 8004d6e:	4e14      	ldr	r6, [pc, #80]	; (8004dc0 <keyb_proc+0xe84>)
 8004d70:	2101      	movs	r1, #1
 8004d72:	4630      	mov	r0, r6
 8004d74:	e026      	b.n	8004dc4 <keyb_proc+0xe88>
 8004d76:	bf00      	nop
 8004d78:	200002ae 	.word	0x200002ae
 8004d7c:	200002cc 	.word	0x200002cc
 8004d80:	200002bc 	.word	0x200002bc
 8004d84:	200002b0 	.word	0x200002b0
 8004d88:	200002c1 	.word	0x200002c1
 8004d8c:	200002bf 	.word	0x200002bf
 8004d90:	200002f0 	.word	0x200002f0
 8004d94:	200002bd 	.word	0x200002bd
 8004d98:	200002c2 	.word	0x200002c2
 8004d9c:	200002c0 	.word	0x200002c0
 8004da0:	200002be 	.word	0x200002be
 8004da4:	200002d8 	.word	0x200002d8
 8004da8:	20000274 	.word	0x20000274
 8004dac:	40020400 	.word	0x40020400
 8004db0:	200008a4 	.word	0x200008a4
 8004db4:	40002000 	.word	0x40002000
 8004db8:	200002d9 	.word	0x200002d9
 8004dbc:	40020000 	.word	0x40020000
 8004dc0:	40010400 	.word	0x40010400
 8004dc4:	f7fc fb76 	bl	80014b4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f7fc fb63 	bl	8001496 <TIM_SetCounter>
		};		
	
				
	/* Stage address ADVANCE 1 KEY*/
	if (!key->b.StageAddress1ContiniousSelect) {
 8004dd0:	7963      	ldrb	r3, [r4, #5]
 8004dd2:	f013 0f20 	tst.w	r3, #32
 8004dd6:	f040 80be 	bne.w	8004f56 <keyb_proc+0x101a>
		if (gSequencerMode_1 != SEQUENCER_MODE_WAIT) {
 8004dda:	4aae      	ldr	r2, [pc, #696]	; (8005094 <keyb_proc+0x1158>)
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	2a01      	cmp	r2, #1
 8004de2:	d00e      	beq.n	8004e02 <keyb_proc+0xec6>
			gPrevSequencerMode_1 = gSequencerMode_1;
 8004de4:	49ab      	ldr	r1, [pc, #684]	; (8005094 <keyb_proc+0x1158>)
 8004de6:	780a      	ldrb	r2, [r1, #0]
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	48ab      	ldr	r0, [pc, #684]	; (8005098 <keyb_proc+0x115c>)
 8004dec:	7002      	strb	r2, [r0, #0]
			gSequencerMode_1 = SEQUENCER_MODE_WAIT;		
 8004dee:	2201      	movs	r2, #1
 8004df0:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004df2:	49aa      	ldr	r1, [pc, #680]	; (800509c <keyb_proc+0x1160>)
 8004df4:	780a      	ldrb	r2, [r1, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	700a      	strb	r2, [r1, #0]
			key_locked = 0;
 8004dfc:	4aa8      	ldr	r2, [pc, #672]	; (80050a0 <keyb_proc+0x1164>)
 8004dfe:	2100      	movs	r1, #0
 8004e00:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;
			key_locked = 0;
		};
	};
	
	if (!key->b.StageAddress2ContiniousSelect) {	
 8004e02:	78e2      	ldrb	r2, [r4, #3]
 8004e04:	f012 0f04 	tst.w	r2, #4
 8004e08:	f040 80bd 	bne.w	8004f86 <keyb_proc+0x104a>
		if (gSequencerMode_2 != SEQUENCER_MODE_WAIT) {
 8004e0c:	4aa5      	ldr	r2, [pc, #660]	; (80050a4 <keyb_proc+0x1168>)
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	2a01      	cmp	r2, #1
 8004e14:	d00e      	beq.n	8004e34 <keyb_proc+0xef8>
			gPrevSequencerMode_2 = gSequencerMode_2;
 8004e16:	49a3      	ldr	r1, [pc, #652]	; (80050a4 <keyb_proc+0x1168>)
 8004e18:	780a      	ldrb	r2, [r1, #0]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	48a2      	ldr	r0, [pc, #648]	; (80050a8 <keyb_proc+0x116c>)
 8004e1e:	7002      	strb	r2, [r0, #0]
			gSequencerMode_2 = SEQUENCER_MODE_WAIT;
 8004e20:	2201      	movs	r2, #1
 8004e22:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004e24:	499d      	ldr	r1, [pc, #628]	; (800509c <keyb_proc+0x1160>)
 8004e26:	780a      	ldrb	r2, [r1, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	700a      	strb	r2, [r1, #0]
			key_locked = 0;
 8004e2e:	4a9c      	ldr	r2, [pc, #624]	; (80050a0 <keyb_proc+0x1164>)
 8004e30:	2100      	movs	r1, #0
 8004e32:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;			
			key_locked = 0;
		};
	};
	
	if (!key->b.StageAddress1Advance) {
 8004e34:	f013 0f01 	tst.w	r3, #1
 8004e38:	f040 80d9 	bne.w	8004fee <keyb_proc+0x10b2>
		
		advanced_counter_1++;
 8004e3c:	4a9b      	ldr	r2, [pc, #620]	; (80050ac <keyb_proc+0x1170>)
 8004e3e:	7813      	ldrb	r3, [r2, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	7013      	strb	r3, [r2, #0]
		//if(advanced_counter_1 == 10)
		{
		if(gSequencerMode_1 != SEQUENCER_MODE_WAIT)
 8004e46:	4b93      	ldr	r3, [pc, #588]	; (8005094 <keyb_proc+0x1158>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	f000 80d1 	beq.w	8004ff4 <keyb_proc+0x10b8>
		{
		if(gSequencerMode_1 == SEQUENCER_MODE_RUN)
 8004e52:	4b90      	ldr	r3, [pc, #576]	; (8005094 <keyb_proc+0x1158>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80ad 	beq.w	8004fb6 <keyb_proc+0x107a>
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
			gStepWidth_1 = 0;
		}
		else{
			if(gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z )(gPrevSequencerMode_1 = gSequencerMode_1);
 8004e5c:	4b8d      	ldr	r3, [pc, #564]	; (8005094 <keyb_proc+0x1158>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d009      	beq.n	8004e7a <keyb_proc+0xf3e>
 8004e66:	4b8b      	ldr	r3, [pc, #556]	; (8005094 <keyb_proc+0x1158>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d004      	beq.n	8004e7a <keyb_proc+0xf3e>
 8004e70:	4b88      	ldr	r3, [pc, #544]	; (8005094 <keyb_proc+0x1158>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	4a88      	ldr	r2, [pc, #544]	; (8005098 <keyb_proc+0x115c>)
 8004e78:	7013      	strb	r3, [r2, #0]
			
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8004e7a:	4e8d      	ldr	r6, [pc, #564]	; (80050b0 <keyb_proc+0x1174>)
 8004e7c:	7831      	ldrb	r1, [r6, #0]
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7fd fcba 	bl	80027f8 <GetNextStep>
 8004e84:	7030      	strb	r0, [r6, #0]
		}
		gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8004e86:	4b83      	ldr	r3, [pc, #524]	; (8005094 <keyb_proc+0x1158>)
 8004e88:	2202      	movs	r2, #2
 8004e8a:	701a      	strb	r2, [r3, #0]
						PULSE_LED_I_ALL_ON;
 8004e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e90:	4888      	ldr	r0, [pc, #544]	; (80050b4 <keyb_proc+0x1178>)
 8004e92:	f7fc f928 	bl	80010e6 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004e96:	4b86      	ldr	r3, [pc, #536]	; (80050b0 <keyb_proc+0x1174>)
 8004e98:	781a      	ldrb	r2, [r3, #0]
 8004e9a:	4b87      	ldr	r3, [pc, #540]	; (80050b8 <keyb_proc+0x117c>)
 8004e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ea6:	f040 8096 	bne.w	8004fd6 <keyb_proc+0x109a>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004eaa:	4b81      	ldr	r3, [pc, #516]	; (80050b0 <keyb_proc+0x1174>)
 8004eac:	781a      	ldrb	r2, [r3, #0]
 8004eae:	4b82      	ldr	r3, [pc, #520]	; (80050b8 <keyb_proc+0x117c>)
 8004eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004eba:	f040 8092 	bne.w	8004fe2 <keyb_proc+0x10a6>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 8004ebe:	4e7f      	ldr	r6, [pc, #508]	; (80050bc <keyb_proc+0x1180>)
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f7fc faf6 	bl	80014b4 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7fc fae3 	bl	8001496 <TIM_SetCounter>
 8004ed0:	e090      	b.n	8004ff4 <keyb_proc+0x10b8>
					PULSE_LED_I_1_ON;
 8004ed2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ed6:	4877      	ldr	r0, [pc, #476]	; (80050b4 <keyb_proc+0x1178>)
 8004ed8:	f7fc f905 	bl	80010e6 <GPIO_ResetBits>
 8004edc:	e68b      	b.n	8004bf6 <keyb_proc+0xcba>
					PULSE_LED_I_2_ON;
 8004ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ee2:	4874      	ldr	r0, [pc, #464]	; (80050b4 <keyb_proc+0x1178>)
 8004ee4:	f7fc f8ff 	bl	80010e6 <GPIO_ResetBits>
 8004ee8:	e68f      	b.n	8004c0a <keyb_proc+0xcce>
					PULSE_LED_I_1_ON;
 8004eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eee:	4871      	ldr	r0, [pc, #452]	; (80050b4 <keyb_proc+0x1178>)
 8004ef0:	f7fc f8f9 	bl	80010e6 <GPIO_ResetBits>
 8004ef4:	e6be      	b.n	8004c74 <keyb_proc+0xd38>
					PULSE_LED_I_2_ON;
 8004ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004efa:	486e      	ldr	r0, [pc, #440]	; (80050b4 <keyb_proc+0x1178>)
 8004efc:	f7fc f8f3 	bl	80010e6 <GPIO_ResetBits>
 8004f00:	e6c2      	b.n	8004c88 <keyb_proc+0xd4c>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8004f02:	4b66      	ldr	r3, [pc, #408]	; (800509c <keyb_proc+0x1160>)
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	f042 0202 	orr.w	r2, r2, #2
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	e6d8      	b.n	8004cc8 <keyb_proc+0xd8c>
					PULSE_LED_II_1_ON;
 8004f16:	2108      	movs	r1, #8
 8004f18:	4869      	ldr	r0, [pc, #420]	; (80050c0 <keyb_proc+0x1184>)
 8004f1a:	f7fc f8e4 	bl	80010e6 <GPIO_ResetBits>
 8004f1e:	e6e1      	b.n	8004ce4 <keyb_proc+0xda8>
					PULSE_LED_II_2_ON;
 8004f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f24:	4866      	ldr	r0, [pc, #408]	; (80050c0 <keyb_proc+0x1184>)
 8004f26:	f7fc f8de 	bl	80010e6 <GPIO_ResetBits>
 8004f2a:	e6e5      	b.n	8004cf8 <keyb_proc+0xdbc>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8004f2c:	4b5b      	ldr	r3, [pc, #364]	; (800509c <keyb_proc+0x1160>)
 8004f2e:	781a      	ldrb	r2, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8004f36:	781a      	ldrb	r2, [r3, #0]
 8004f38:	f042 0202 	orr.w	r2, r2, #2
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e6fa      	b.n	8004d36 <keyb_proc+0xdfa>
					PULSE_LED_II_1_ON;
 8004f40:	2108      	movs	r1, #8
 8004f42:	485f      	ldr	r0, [pc, #380]	; (80050c0 <keyb_proc+0x1184>)
 8004f44:	f7fc f8cf 	bl	80010e6 <GPIO_ResetBits>
 8004f48:	e705      	b.n	8004d56 <keyb_proc+0xe1a>
					PULSE_LED_II_2_ON;
 8004f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f4e:	485c      	ldr	r0, [pc, #368]	; (80050c0 <keyb_proc+0x1184>)
 8004f50:	f7fc f8c9 	bl	80010e6 <GPIO_ResetBits>
 8004f54:	e70b      	b.n	8004d6e <keyb_proc+0xe32>
		if (gSequencerMode_1 == SEQUENCER_MODE_WAIT) {
 8004f56:	4a4f      	ldr	r2, [pc, #316]	; (8005094 <keyb_proc+0x1158>)
 8004f58:	7812      	ldrb	r2, [r2, #0]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	2a01      	cmp	r2, #1
 8004f5e:	f47f af50 	bne.w	8004e02 <keyb_proc+0xec6>
			gSequencerMode_1 = gPrevSequencerMode_1;
 8004f62:	4a4d      	ldr	r2, [pc, #308]	; (8005098 <keyb_proc+0x115c>)
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	494a      	ldr	r1, [pc, #296]	; (8005094 <keyb_proc+0x1158>)
 8004f6a:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004f6c:	4a4b      	ldr	r2, [pc, #300]	; (800509c <keyb_proc+0x1160>)
 8004f6e:	7811      	ldrb	r1, [r2, #0]
 8004f70:	f041 0101 	orr.w	r1, r1, #1
 8004f74:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;
 8004f76:	7811      	ldrb	r1, [r2, #0]
 8004f78:	f041 0102 	orr.w	r1, r1, #2
 8004f7c:	7011      	strb	r1, [r2, #0]
			key_locked = 0;
 8004f7e:	4a48      	ldr	r2, [pc, #288]	; (80050a0 <keyb_proc+0x1164>)
 8004f80:	2100      	movs	r1, #0
 8004f82:	7011      	strb	r1, [r2, #0]
 8004f84:	e73d      	b.n	8004e02 <keyb_proc+0xec6>
		if (gSequencerMode_2 == SEQUENCER_MODE_WAIT) {			
 8004f86:	4a47      	ldr	r2, [pc, #284]	; (80050a4 <keyb_proc+0x1168>)
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	2a01      	cmp	r2, #1
 8004f8e:	f47f af51 	bne.w	8004e34 <keyb_proc+0xef8>
			gSequencerMode_2 = gPrevSequencerMode_2;
 8004f92:	4a45      	ldr	r2, [pc, #276]	; (80050a8 <keyb_proc+0x116c>)
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	4942      	ldr	r1, [pc, #264]	; (80050a4 <keyb_proc+0x1168>)
 8004f9a:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004f9c:	4a3f      	ldr	r2, [pc, #252]	; (800509c <keyb_proc+0x1160>)
 8004f9e:	7811      	ldrb	r1, [r2, #0]
 8004fa0:	f041 0101 	orr.w	r1, r1, #1
 8004fa4:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;			
 8004fa6:	7811      	ldrb	r1, [r2, #0]
 8004fa8:	f041 0102 	orr.w	r1, r1, #2
 8004fac:	7011      	strb	r1, [r2, #0]
			key_locked = 0;
 8004fae:	4a3c      	ldr	r2, [pc, #240]	; (80050a0 <keyb_proc+0x1164>)
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	7011      	strb	r1, [r2, #0]
 8004fb4:	e73e      	b.n	8004e34 <keyb_proc+0xef8>
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
 8004fb6:	4e3e      	ldr	r6, [pc, #248]	; (80050b0 <keyb_proc+0x1174>)
 8004fb8:	7831      	ldrb	r1, [r6, #0]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	f7fd fac6 	bl	800254c <GetStepVoltage>
 8004fc0:	4b40      	ldr	r3, [pc, #256]	; (80050c4 <keyb_proc+0x1188>)
 8004fc2:	6018      	str	r0, [r3, #0]
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8004fc4:	7831      	ldrb	r1, [r6, #0]
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f7fd fc16 	bl	80027f8 <GetNextStep>
 8004fcc:	7030      	strb	r0, [r6, #0]
			gStepWidth_1 = 0;
 8004fce:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <keyb_proc+0x118c>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e757      	b.n	8004e86 <keyb_proc+0xf4a>
					PULSE_LED_I_1_ON;
 8004fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fda:	4836      	ldr	r0, [pc, #216]	; (80050b4 <keyb_proc+0x1178>)
 8004fdc:	f7fc f883 	bl	80010e6 <GPIO_ResetBits>
 8004fe0:	e763      	b.n	8004eaa <keyb_proc+0xf6e>
					PULSE_LED_I_2_ON;
 8004fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fe6:	4833      	ldr	r0, [pc, #204]	; (80050b4 <keyb_proc+0x1178>)
 8004fe8:	f7fc f87d 	bl	80010e6 <GPIO_ResetBits>
 8004fec:	e767      	b.n	8004ebe <keyb_proc+0xf82>
	}	}
	} else advanced_counter_1 = 0;
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <keyb_proc+0x1170>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
	
		if (!key->b.StageAddress2Advance) {
 8004ff4:	7963      	ldrb	r3, [r4, #5]
 8004ff6:	f013 0f08 	tst.w	r3, #8
 8004ffa:	f040 8088 	bne.w	800510e <keyb_proc+0x11d2>
			
		advanced_counter_2++;
 8004ffe:	4a33      	ldr	r2, [pc, #204]	; (80050cc <keyb_proc+0x1190>)
 8005000:	7813      	ldrb	r3, [r2, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	7013      	strb	r3, [r2, #0]
//		if(advanced_counter_2 == 10)
		{
		if(gSequencerMode_2 != SEQUENCER_MODE_WAIT)
 8005008:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <keyb_proc+0x1168>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b01      	cmp	r3, #1
 8005010:	f000 8080 	beq.w	8005114 <keyb_proc+0x11d8>
				{
		if(gSequencerMode_2 == SEQUENCER_MODE_RUN)
 8005014:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <keyb_proc+0x1168>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05d      	beq.n	80050d8 <keyb_proc+0x119c>
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
			gStepWidth_2 = 0;
		}
		else 
		{
			if(gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z )(gPrevSequencerMode_2 = gSequencerMode_2);
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <keyb_proc+0x1168>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b05      	cmp	r3, #5
 8005024:	d009      	beq.n	800503a <keyb_proc+0x10fe>
 8005026:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <keyb_proc+0x1168>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b04      	cmp	r3, #4
 800502e:	d004      	beq.n	800503a <keyb_proc+0x10fe>
 8005030:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <keyb_proc+0x1168>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <keyb_proc+0x116c>)
 8005038:	7013      	strb	r3, [r2, #0]
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 800503a:	4c25      	ldr	r4, [pc, #148]	; (80050d0 <keyb_proc+0x1194>)
 800503c:	7821      	ldrb	r1, [r4, #0]
 800503e:	2001      	movs	r0, #1
 8005040:	f7fd fbda 	bl	80027f8 <GetNextStep>
 8005044:	7020      	strb	r0, [r4, #0]
		}
		gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8005046:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <keyb_proc+0x1168>)
 8005048:	2202      	movs	r2, #2
 800504a:	701a      	strb	r2, [r3, #0]
				PULSE_LED_II_ALL_ON;
 800504c:	2104      	movs	r1, #4
 800504e:	481c      	ldr	r0, [pc, #112]	; (80050c0 <keyb_proc+0x1184>)
 8005050:	f7fc f849 	bl	80010e6 <GPIO_ResetBits>
				
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8005054:	4b1e      	ldr	r3, [pc, #120]	; (80050d0 <keyb_proc+0x1194>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f103 0220 	add.w	r2, r3, #32
 800505c:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <keyb_proc+0x117c>)
 800505e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005068:	d146      	bne.n	80050f8 <keyb_proc+0x11bc>
					PULSE_LED_II_1_ON;
				};
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 800506a:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <keyb_proc+0x1194>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f103 0220 	add.w	r2, r3, #32
 8005072:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <keyb_proc+0x117c>)
 8005074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800507e:	d140      	bne.n	8005102 <keyb_proc+0x11c6>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 8005080:	4c14      	ldr	r4, [pc, #80]	; (80050d4 <keyb_proc+0x1198>)
 8005082:	2101      	movs	r1, #1
 8005084:	4620      	mov	r0, r4
 8005086:	f7fc fa15 	bl	80014b4 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 800508a:	2100      	movs	r1, #0
 800508c:	4620      	mov	r0, r4
 800508e:	f7fc fa02 	bl	8001496 <TIM_SetCounter>
 8005092:	e03f      	b.n	8005114 <keyb_proc+0x11d8>
 8005094:	200002c1 	.word	0x200002c1
 8005098:	200002bd 	.word	0x200002bd
 800509c:	200002f0 	.word	0x200002f0
 80050a0:	200002cc 	.word	0x200002cc
 80050a4:	200002c2 	.word	0x200002c2
 80050a8:	200002be 	.word	0x200002be
 80050ac:	200002a8 	.word	0x200002a8
 80050b0:	200002bf 	.word	0x200002bf
 80050b4:	40020400 	.word	0x40020400
 80050b8:	200008a4 	.word	0x200008a4
 80050bc:	40002000 	.word	0x40002000
 80050c0:	40020000 	.word	0x40020000
 80050c4:	200002a0 	.word	0x200002a0
 80050c8:	200002c4 	.word	0x200002c4
 80050cc:	200002a9 	.word	0x200002a9
 80050d0:	200002c0 	.word	0x200002c0
 80050d4:	40010400 	.word	0x40010400
			PreviousStep_2 = GetStepVoltage(1, gSequenceStepNumber_2);
 80050d8:	4c1b      	ldr	r4, [pc, #108]	; (8005148 <keyb_proc+0x120c>)
 80050da:	7821      	ldrb	r1, [r4, #0]
 80050dc:	2001      	movs	r0, #1
 80050de:	f7fd fa35 	bl	800254c <GetStepVoltage>
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <keyb_proc+0x1210>)
 80050e4:	6018      	str	r0, [r3, #0]
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 80050e6:	7821      	ldrb	r1, [r4, #0]
 80050e8:	2001      	movs	r0, #1
 80050ea:	f7fd fb85 	bl	80027f8 <GetNextStep>
 80050ee:	7020      	strb	r0, [r4, #0]
			gStepWidth_2 = 0;
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <keyb_proc+0x1214>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e7a6      	b.n	8005046 <keyb_proc+0x110a>
					PULSE_LED_II_1_ON;
 80050f8:	2108      	movs	r1, #8
 80050fa:	4816      	ldr	r0, [pc, #88]	; (8005154 <keyb_proc+0x1218>)
 80050fc:	f7fb fff3 	bl	80010e6 <GPIO_ResetBits>
 8005100:	e7b3      	b.n	800506a <keyb_proc+0x112e>
					PULSE_LED_II_2_ON;
 8005102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005106:	4813      	ldr	r0, [pc, #76]	; (8005154 <keyb_proc+0x1218>)
 8005108:	f7fb ffed 	bl	80010e6 <GPIO_ResetBits>
 800510c:	e7b8      	b.n	8005080 <keyb_proc+0x1144>
	
			}
	}
	}else advanced_counter_2 = 0;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <keyb_proc+0x121c>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
				
	if (gKeysNotValid == 0) {
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <keyb_proc+0x1220>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	b12b      	cbz	r3, 8005126 <keyb_proc+0x11ea>
		Steps[Section][StepNum] = tmpStep;				
		DisplayUpdateFlags.b.MainDisplay = 1;	
	} else {
		gKeysNotValid = 0;
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <keyb_proc+0x1220>)
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
	};
				
	return 1;
}
 8005120:	2001      	movs	r0, #1
 8005122:	b003      	add	sp, #12
 8005124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Steps[Section][StepNum] = tmpStep;				
 8005126:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 800512a:	4f0d      	ldr	r7, [pc, #52]	; (8005160 <keyb_proc+0x1224>)
 800512c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8005130:	ab02      	add	r3, sp, #8
 8005132:	e913 0003 	ldmdb	r3, {r0, r1}
 8005136:	e885 0003 	stmia.w	r5, {r0, r1}
		DisplayUpdateFlags.b.MainDisplay = 1;	
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <keyb_proc+0x1228>)
 800513c:	7813      	ldrb	r3, [r2, #0]
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	7013      	strb	r3, [r2, #0]
 8005144:	e7ec      	b.n	8005120 <keyb_proc+0x11e4>
 8005146:	bf00      	nop
 8005148:	200002c0 	.word	0x200002c0
 800514c:	200002a4 	.word	0x200002a4
 8005150:	200002c8 	.word	0x200002c8
 8005154:	40020000 	.word	0x40020000
 8005158:	200002a9 	.word	0x200002a9
 800515c:	200002bc 	.word	0x200002bc
 8005160:	200008a4 	.word	0x200008a4
 8005164:	200002f0 	.word	0x200002f0

08005168 <UpdateModeSection>:

/*
	Update leds function
*/
void UpdateModeSection(void)
{
 8005168:	b510      	push	{r4, lr}
 800516a:	b082      	sub	sp, #8
	unsigned char StepNum = 0, Section = 0;
	uLeds mLeds;
	uStep *mStep;
	
	mLeds.value[0] = 0xFF;
 800516c:	23ff      	movs	r3, #255	; 0xff
 800516e:	f88d 3004 	strb.w	r3, [sp, #4]
	mLeds.value[1] = 0xFF;
 8005172:	f88d 3005 	strb.w	r3, [sp, #5]
	mLeds.value[2] = 0xFF;
 8005176:	f88d 3006 	strb.w	r3, [sp, #6]
	mLeds.value[3] = 0xFF;
 800517a:	f88d 3007 	strb.w	r3, [sp, #7]

	if ((gSequencerMode_1 == SEQUENCER_MODE_RUN) ||
 800517e:	4bbd      	ldr	r3, [pc, #756]	; (8005474 <UpdateModeSection+0x30c>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b123      	cbz	r3, 800518e <UpdateModeSection+0x26>
			(gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)) {
 8005184:	4bbb      	ldr	r3, [pc, #748]	; (8005474 <UpdateModeSection+0x30c>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_1 == SEQUENCER_MODE_RUN) ||
 800518a:	2b06      	cmp	r3, #6
 800518c:	d105      	bne.n	800519a <UpdateModeSection+0x32>
		mLeds.b.Seq1Run = 0;
 800518e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005192:	f36f 0382 	bfc	r3, #2, #1
 8005196:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT) ||
 800519a:	4bb6      	ldr	r3, [pc, #728]	; (8005474 <UpdateModeSection+0x30c>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d009      	beq.n	80051b8 <UpdateModeSection+0x50>
			(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 80051a4:	4bb3      	ldr	r3, [pc, #716]	; (8005474 <UpdateModeSection+0x30c>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	b2db      	uxtb	r3, r3
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT) ||
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d004      	beq.n	80051b8 <UpdateModeSection+0x50>
			(gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)  ) {
 80051ae:	4bb1      	ldr	r3, [pc, #708]	; (8005474 <UpdateModeSection+0x30c>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	b2db      	uxtb	r3, r3
			(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 80051b4:	2b05      	cmp	r3, #5
 80051b6:	d105      	bne.n	80051c4 <UpdateModeSection+0x5c>
		mLeds.b.Seq1Wait = 0;
 80051b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051bc:	f36f 0341 	bfc	r3, #1, #1
 80051c0:	f88d 3004 	strb.w	r3, [sp, #4]
	};
			
	if (gSequencerMode_1 == SEQUENCER_MODE_STOP) {
 80051c4:	4bab      	ldr	r3, [pc, #684]	; (8005474 <UpdateModeSection+0x30c>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	f000 8173 	beq.w	80054b6 <UpdateModeSection+0x34e>
		mLeds.b.Seq1Stop = 0;
	};
	
	if ((gSequencerMode_2 == SEQUENCER_MODE_RUN) ||
 80051d0:	4ba9      	ldr	r3, [pc, #676]	; (8005478 <UpdateModeSection+0x310>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b123      	cbz	r3, 80051e0 <UpdateModeSection+0x78>
			(gSequencerMode_2 == SEQUENCER_MODE_ADVANCE) ) {
 80051d6:	4ba8      	ldr	r3, [pc, #672]	; (8005478 <UpdateModeSection+0x310>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_2 == SEQUENCER_MODE_RUN) ||
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d105      	bne.n	80051ec <UpdateModeSection+0x84>
		mLeds.b.Seq2Run = 0;
 80051e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051e4:	f36f 1345 	bfc	r3, #5, #1
 80051e8:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if ((gSequencerMode_2 == SEQUENCER_MODE_WAIT) ||
 80051ec:	4ba2      	ldr	r3, [pc, #648]	; (8005478 <UpdateModeSection+0x310>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d009      	beq.n	800520a <UpdateModeSection+0xa2>
			(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 80051f6:	4ba0      	ldr	r3, [pc, #640]	; (8005478 <UpdateModeSection+0x310>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_2 == SEQUENCER_MODE_WAIT) ||
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d004      	beq.n	800520a <UpdateModeSection+0xa2>
			(gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) ) {
 8005200:	4b9d      	ldr	r3, [pc, #628]	; (8005478 <UpdateModeSection+0x310>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	b2db      	uxtb	r3, r3
			(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 8005206:	2b05      	cmp	r3, #5
 8005208:	d105      	bne.n	8005216 <UpdateModeSection+0xae>
		mLeds.b.Seq2Wait = 0;
 800520a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800520e:	f36f 1304 	bfc	r3, #4, #1
 8005212:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if (gSequencerMode_2 == SEQUENCER_MODE_STOP) {
 8005216:	4b98      	ldr	r3, [pc, #608]	; (8005478 <UpdateModeSection+0x310>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	f000 8151 	beq.w	80054c4 <UpdateModeSection+0x35c>
		mLeds.b.Seq2Stop = 0;
	};
	
	
	/* Determine step num for different DisplayModes*/
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8005222:	4b96      	ldr	r3, [pc, #600]	; (800547c <UpdateModeSection+0x314>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f040 8153 	bne.w	80054d2 <UpdateModeSection+0x36a>
		StepNum = gSequenceStepNumber_1;
 800522c:	4b94      	ldr	r3, [pc, #592]	; (8005480 <UpdateModeSection+0x318>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
		Section = 0;
	}
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8005232:	4a92      	ldr	r2, [pc, #584]	; (800547c <UpdateModeSection+0x314>)
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	2a01      	cmp	r2, #1
 800523a:	f000 814c 	beq.w	80054d6 <UpdateModeSection+0x36e>
 800523e:	2100      	movs	r1, #0
		StepNum = gSequenceStepNumber_2;
		Section = 1;
	};
	if ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) {
 8005240:	4a8e      	ldr	r2, [pc, #568]	; (800547c <UpdateModeSection+0x314>)
 8005242:	7812      	ldrb	r2, [r2, #0]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	2a02      	cmp	r2, #2
 8005248:	f000 814a 	beq.w	80054e0 <UpdateModeSection+0x378>
		StepNum = gEditModeStepNum;
		Section = 0;
	}
	if ( gDisplayMode == DISPLAY_MODE_EDIT_2 ) {
 800524c:	4a8b      	ldr	r2, [pc, #556]	; (800547c <UpdateModeSection+0x314>)
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	2a03      	cmp	r2, #3
 8005254:	f000 8148 	beq.w	80054e8 <UpdateModeSection+0x380>
		Section = 1;
	};
	
	mStep = (uStep*) &Steps[Section][StepNum];
	
	mLeds.b.VoltageFull  	= ~mStep->b.FullRange;
 8005258:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800525c:	4a89      	ldr	r2, [pc, #548]	; (8005484 <UpdateModeSection+0x31c>)
 800525e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005262:	78da      	ldrb	r2, [r3, #3]
 8005264:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8005268:	f082 0201 	eor.w	r2, r2, #1
 800526c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005270:	f362 0182 	bfi	r1, r2, #2, #1
 8005274:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage0     	= ~mStep->b.Voltage0;
 8005278:	78da      	ldrb	r2, [r3, #3]
 800527a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800527e:	f082 0201 	eor.w	r2, r2, #1
 8005282:	b2c9      	uxtb	r1, r1
 8005284:	f362 1104 	bfi	r1, r2, #4, #1
 8005288:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage2     	= ~mStep->b.Voltage2;
 800528c:	78da      	ldrb	r2, [r3, #3]
 800528e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8005292:	f082 0201 	eor.w	r2, r2, #1
 8005296:	b2c9      	uxtb	r1, r1
 8005298:	f362 1145 	bfi	r1, r2, #5, #1
 800529c:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage4     	= ~mStep->b.Voltage4;
 80052a0:	78da      	ldrb	r2, [r3, #3]
 80052a2:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80052a6:	f082 0201 	eor.w	r2, r2, #1
 80052aa:	b2c9      	uxtb	r1, r1
 80052ac:	f362 1186 	bfi	r1, r2, #6, #1
 80052b0:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage6     	= ~mStep->b.Voltage6;
 80052b4:	78da      	ldrb	r2, [r3, #3]
 80052b6:	ea6f 12d2 	mvn.w	r2, r2, lsr #7
 80052ba:	b2c9      	uxtb	r1, r1
 80052bc:	f362 11c7 	bfi	r1, r2, #7, #1
 80052c0:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Voltage8     	= ~mStep->b.Voltage8;
 80052c4:	791a      	ldrb	r2, [r3, #4]
 80052c6:	f002 0201 	and.w	r2, r2, #1
 80052ca:	f082 0201 	eor.w	r2, r2, #1
 80052ce:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80052d2:	f362 0100 	bfi	r1, r2, #0, #1
 80052d6:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.Pulse1       	= ~mStep->b.OutputPulse1; //hack for Gate1 Gate2 leds
 80052da:	795a      	ldrb	r2, [r3, #5]
 80052dc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80052e0:	f082 0201 	eor.w	r2, r2, #1
 80052e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80052e8:	f362 1186 	bfi	r1, r2, #6, #1
 80052ec:	f88d 1004 	strb.w	r1, [sp, #4]
  mLeds.b.Pulse2       	= ~mStep->b.OutputPulse2;
 80052f0:	795a      	ldrb	r2, [r3, #5]
 80052f2:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80052f6:	f082 0201 	eor.w	r2, r2, #1
 80052fa:	b2c9      	uxtb	r1, r1
 80052fc:	f362 11c7 	bfi	r1, r2, #7, #1
 8005300:	f88d 1004 	strb.w	r1, [sp, #4]
  mLeds.b.CycleFirst   	= ~mStep->b.CycleFirst;
 8005304:	791a      	ldrb	r2, [r3, #4]
 8005306:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800530a:	f082 0201 	eor.w	r2, r2, #1
 800530e:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005312:	f362 1104 	bfi	r1, r2, #4, #1
 8005316:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.CycleLast    	= ~mStep->b.CycleLast;
 800531a:	791a      	ldrb	r2, [r3, #4]
 800531c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8005320:	f082 0201 	eor.w	r2, r2, #1
 8005324:	b2c9      	uxtb	r1, r1
 8005326:	f362 1145 	bfi	r1, r2, #5, #1
 800532a:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.VoltageSource = ~mStep->b.VoltageSource;
 800532e:	78da      	ldrb	r2, [r3, #3]
 8005330:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8005334:	f082 0201 	eor.w	r2, r2, #1
 8005338:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800533c:	f362 01c3 	bfi	r1, r2, #3, #1
 8005340:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Integration   = ~mStep->b.Sloped;
 8005344:	78da      	ldrb	r2, [r3, #3]
 8005346:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800534a:	f082 0201 	eor.w	r2, r2, #1
 800534e:	b2c9      	uxtb	r1, r1
 8005350:	f362 0141 	bfi	r1, r2, #1, #1
 8005354:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Quantization  = ~mStep->b.Quantize;
 8005358:	78da      	ldrb	r2, [r3, #3]
 800535a:	f002 0201 	and.w	r2, r2, #1
 800535e:	f082 0201 	eor.w	r2, r2, #1
 8005362:	b2c9      	uxtb	r1, r1
 8005364:	f362 0100 	bfi	r1, r2, #0, #1
 8005368:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.TimeRange0   	= ~mStep->b.TimeRange_p03;
 800536c:	791a      	ldrb	r2, [r3, #4]
 800536e:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8005372:	f082 0201 	eor.w	r2, r2, #1
 8005376:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800537a:	f362 1186 	bfi	r1, r2, #6, #1
 800537e:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.TimeRange1   	= ~mStep->b.TimeRange_p3;
 8005382:	791a      	ldrb	r2, [r3, #4]
 8005384:	ea6f 12d2 	mvn.w	r2, r2, lsr #7
 8005388:	b2c9      	uxtb	r1, r1
 800538a:	f362 11c7 	bfi	r1, r2, #7, #1
 800538e:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.TimeRange2   	= ~mStep->b.TimeRange_3;
 8005392:	795a      	ldrb	r2, [r3, #5]
 8005394:	f002 0201 	and.w	r2, r2, #1
 8005398:	f082 0201 	eor.w	r2, r2, #1
 800539c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80053a0:	f362 0100 	bfi	r1, r2, #0, #1
 80053a4:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.TimeRange3   	= ~mStep->b.TimeRange_30;
 80053a8:	795a      	ldrb	r2, [r3, #5]
 80053aa:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80053ae:	f082 0201 	eor.w	r2, r2, #1
 80053b2:	b2c9      	uxtb	r1, r1
 80053b4:	f362 0141 	bfi	r1, r2, #1, #1
 80053b8:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.TimeSource   	= ~mStep->b.TimeSource;
 80053bc:	795a      	ldrb	r2, [r3, #5]
 80053be:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80053c2:	f082 0201 	eor.w	r2, r2, #1
 80053c6:	b2c9      	uxtb	r1, r1
 80053c8:	f362 0182 	bfi	r1, r2, #2, #1
 80053cc:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.OPStop       	= ~mStep->b.OpModeSTOP;
 80053d0:	791a      	ldrb	r2, [r3, #4]
 80053d2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80053d6:	f082 0201 	eor.w	r2, r2, #1
 80053da:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80053de:	f362 0141 	bfi	r1, r2, #1, #1
 80053e2:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.OPSustain    	= ~mStep->b.OpModeSUSTAIN;
 80053e6:	791a      	ldrb	r2, [r3, #4]
 80053e8:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80053ec:	f082 0201 	eor.w	r2, r2, #1
 80053f0:	b2c9      	uxtb	r1, r1
 80053f2:	f362 0182 	bfi	r1, r2, #2, #1
 80053f6:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.OPEnable     	= ~mStep->b.OpModeENABLE;
 80053fa:	791b      	ldrb	r3, [r3, #4]
 80053fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005400:	f083 0301 	eor.w	r3, r3, #1
 8005404:	b2ca      	uxtb	r2, r1
 8005406:	f363 02c3 	bfi	r2, r3, #3, #1
 800540a:	f88d 2006 	strb.w	r2, [sp, #6]
	
	if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <UpdateModeSection+0x314>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b04      	cmp	r3, #4
 8005416:	d00e      	beq.n	8005436 <UpdateModeSection+0x2ce>
 8005418:	4b18      	ldr	r3, [pc, #96]	; (800547c <UpdateModeSection+0x314>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b05      	cmp	r3, #5
 8005420:	d009      	beq.n	8005436 <UpdateModeSection+0x2ce>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 8005422:	4b16      	ldr	r3, [pc, #88]	; (800547c <UpdateModeSection+0x314>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8005428:	2b06      	cmp	r3, #6
 800542a:	d004      	beq.n	8005436 <UpdateModeSection+0x2ce>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 800542c:	4b13      	ldr	r3, [pc, #76]	; (800547c <UpdateModeSection+0x314>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b07      	cmp	r3, #7
 8005434:	d17f      	bne.n	8005536 <UpdateModeSection+0x3ce>
		mLeds.value[0] = 0xFF;
 8005436:	23ff      	movs	r3, #255	; 0xff
 8005438:	f88d 3004 	strb.w	r3, [sp, #4]
		mLeds.value[1] = 0xFF;
 800543c:	f88d 3005 	strb.w	r3, [sp, #5]
		mLeds.value[2] = 0xFF;
 8005440:	f88d 3006 	strb.w	r3, [sp, #6]
		mLeds.value[3] = 0xFF;
 8005444:	f88d 3007 	strb.w	r3, [sp, #7]
					
		if((gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2))
 8005448:	4b0c      	ldr	r3, [pc, #48]	; (800547c <UpdateModeSection+0x314>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b04      	cmp	r3, #4
 8005450:	d04e      	beq.n	80054f0 <UpdateModeSection+0x388>
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <UpdateModeSection+0x314>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b05      	cmp	r3, #5
 800545a:	d049      	beq.n	80054f0 <UpdateModeSection+0x388>
			{
				 mLeds.b.Seq1Wait = 1;
			}
			else save_counter = 0;
		}
		else if((gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2))
 800545c:	4b07      	ldr	r3, [pc, #28]	; (800547c <UpdateModeSection+0x314>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b06      	cmp	r3, #6
 8005464:	d010      	beq.n	8005488 <UpdateModeSection+0x320>
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <UpdateModeSection+0x314>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b07      	cmp	r3, #7
 800546e:	d154      	bne.n	800551a <UpdateModeSection+0x3b2>
 8005470:	e00a      	b.n	8005488 <UpdateModeSection+0x320>
 8005472:	bf00      	nop
 8005474:	200002c1 	.word	0x200002c1
 8005478:	200002c2 	.word	0x200002c2
 800547c:	200002b0 	.word	0x200002b0
 8005480:	200002bf 	.word	0x200002bf
 8005484:	200008a4 	.word	0x200008a4
		{
			mLeds.b.Seq1Wait = 1;
 8005488:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800548c:	f043 0302 	orr.w	r3, r3, #2
 8005490:	f88d 3004 	strb.w	r3, [sp, #4]
			load_counter++;
 8005494:	4b51      	ldr	r3, [pc, #324]	; (80055dc <UpdateModeSection+0x474>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	3201      	adds	r2, #1
 800549a:	601a      	str	r2, [r3, #0]
			if(load_counter < 1500)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	f240 53db 	movw	r3, #1499	; 0x5db
 80054a2:	429a      	cmp	r2, r3
 80054a4:	f200 8081 	bhi.w	80055aa <UpdateModeSection+0x442>
			{
				 mLeds.b.Seq2Wait = 0;
 80054a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054ac:	f36f 1304 	bfc	r3, #4, #1
 80054b0:	f88d 3004 	strb.w	r3, [sp, #4]
 80054b4:	e031      	b.n	800551a <UpdateModeSection+0x3b2>
		mLeds.b.Seq1Stop = 0;
 80054b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054ba:	f36f 0300 	bfc	r3, #0, #1
 80054be:	f88d 3004 	strb.w	r3, [sp, #4]
 80054c2:	e685      	b.n	80051d0 <UpdateModeSection+0x68>
		mLeds.b.Seq2Stop = 0;
 80054c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054c8:	f36f 03c3 	bfc	r3, #3, #1
 80054cc:	f88d 3004 	strb.w	r3, [sp, #4]
 80054d0:	e6a7      	b.n	8005222 <UpdateModeSection+0xba>
	unsigned char StepNum = 0, Section = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e6ad      	b.n	8005232 <UpdateModeSection+0xca>
		StepNum = gSequenceStepNumber_2;
 80054d6:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <UpdateModeSection+0x478>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	b2db      	uxtb	r3, r3
		Section = 1;
 80054dc:	2101      	movs	r1, #1
 80054de:	e6af      	b.n	8005240 <UpdateModeSection+0xd8>
		StepNum = gEditModeStepNum;
 80054e0:	4b40      	ldr	r3, [pc, #256]	; (80055e4 <UpdateModeSection+0x47c>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 80054e4:	2100      	movs	r1, #0
 80054e6:	e6b1      	b.n	800524c <UpdateModeSection+0xe4>
		StepNum = gEditModeStepNum;
 80054e8:	4b3e      	ldr	r3, [pc, #248]	; (80055e4 <UpdateModeSection+0x47c>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 80054ec:	2101      	movs	r1, #1
 80054ee:	e6b3      	b.n	8005258 <UpdateModeSection+0xf0>
			mLeds.b.Seq2Wait = 1;
 80054f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054f4:	f043 0310 	orr.w	r3, r3, #16
 80054f8:	f88d 3004 	strb.w	r3, [sp, #4]
			save_counter++;
 80054fc:	4b3a      	ldr	r3, [pc, #232]	; (80055e8 <UpdateModeSection+0x480>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	3201      	adds	r2, #1
 8005502:	601a      	str	r2, [r3, #0]
			if(save_counter < 1500)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f240 53db 	movw	r3, #1499	; 0x5db
 800550a:	429a      	cmp	r2, r3
 800550c:	d83c      	bhi.n	8005588 <UpdateModeSection+0x420>
				 mLeds.b.Seq1Wait = 0;
 800550e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005512:	f36f 0341 	bfc	r3, #1, #1
 8005516:	f88d 3004 	strb.w	r3, [sp, #4]
			else load_counter = 0;
			
			
		}
			
		if(!Is_Expander_Present())
 800551a:	f7fc fbb5 	bl	8001c88 <Is_Expander_Present>
 800551e:	b950      	cbnz	r0, 8005536 <UpdateModeSection+0x3ce>
		{	
			if(bank == 1) mLeds.value[0] &= ~(1 << 6);
 8005520:	4b32      	ldr	r3, [pc, #200]	; (80055ec <UpdateModeSection+0x484>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d050      	beq.n	80055cc <UpdateModeSection+0x464>
			else mLeds.value[0] &= ~(1 << 7);
 800552a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800552e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005532:	f88d 3004 	strb.w	r3, [sp, #4]
		}
	};
	
	//Send data to leds
	LEDS_modes_SendStruct(&mLeds);
 8005536:	a801      	add	r0, sp, #4
 8005538:	f7fc fbf2 	bl	8001d20 <LEDS_modes_SendStruct>
	
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_1) ||
 800553c:	4b2c      	ldr	r3, [pc, #176]	; (80055f0 <UpdateModeSection+0x488>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b123      	cbz	r3, 800554c <UpdateModeSection+0x3e4>
			(gDisplayMode == DISPLAY_MODE_EDIT_1) ) {
 8005542:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <UpdateModeSection+0x488>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_1) ||
 8005548:	2b02      	cmp	r3, #2
 800554a:	d108      	bne.n	800555e <UpdateModeSection+0x3f6>
		DISPLAY_LED_I_ON;
 800554c:	4c29      	ldr	r4, [pc, #164]	; (80055f4 <UpdateModeSection+0x48c>)
 800554e:	2140      	movs	r1, #64	; 0x40
 8005550:	4620      	mov	r0, r4
 8005552:	f7fb fdc6 	bl	80010e2 <GPIO_SetBits>
		DISPLAY_LED_II_OFF;
 8005556:	2180      	movs	r1, #128	; 0x80
 8005558:	4620      	mov	r0, r4
 800555a:	f7fb fdc4 	bl	80010e6 <GPIO_ResetBits>
	};
			
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_2) ||
 800555e:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <UpdateModeSection+0x488>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	d004      	beq.n	8005572 <UpdateModeSection+0x40a>
			(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 8005568:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <UpdateModeSection+0x488>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_2) ||
 800556e:	2b03      	cmp	r3, #3
 8005570:	d108      	bne.n	8005584 <UpdateModeSection+0x41c>
		DISPLAY_LED_II_ON;
 8005572:	4c20      	ldr	r4, [pc, #128]	; (80055f4 <UpdateModeSection+0x48c>)
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	4620      	mov	r0, r4
 8005578:	f7fb fdb3 	bl	80010e2 <GPIO_SetBits>
		DISPLAY_LED_I_OFF;
 800557c:	2140      	movs	r1, #64	; 0x40
 800557e:	4620      	mov	r0, r4
 8005580:	f7fb fdb1 	bl	80010e6 <GPIO_ResetBits>
	};
};
 8005584:	b002      	add	sp, #8
 8005586:	bd10      	pop	{r4, pc}
			else if(save_counter < 3000)
 8005588:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <UpdateModeSection+0x480>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8005590:	429a      	cmp	r2, r3
 8005592:	d806      	bhi.n	80055a2 <UpdateModeSection+0x43a>
				 mLeds.b.Seq1Wait = 1;
 8005594:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005598:	f043 0302 	orr.w	r3, r3, #2
 800559c:	f88d 3004 	strb.w	r3, [sp, #4]
 80055a0:	e7bb      	b.n	800551a <UpdateModeSection+0x3b2>
			else save_counter = 0;
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <UpdateModeSection+0x480>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e7b7      	b.n	800551a <UpdateModeSection+0x3b2>
			else if(load_counter < 3000)
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <UpdateModeSection+0x474>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d806      	bhi.n	80055c4 <UpdateModeSection+0x45c>
				 mLeds.b.Seq2Wait = 1;
 80055b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055ba:	f043 0310 	orr.w	r3, r3, #16
 80055be:	f88d 3004 	strb.w	r3, [sp, #4]
 80055c2:	e7aa      	b.n	800551a <UpdateModeSection+0x3b2>
			else load_counter = 0;
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <UpdateModeSection+0x474>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e7a6      	b.n	800551a <UpdateModeSection+0x3b2>
			if(bank == 1) mLeds.value[0] &= ~(1 << 6);
 80055cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	f88d 3004 	strb.w	r3, [sp, #4]
 80055d8:	e7ad      	b.n	8005536 <UpdateModeSection+0x3ce>
 80055da:	bf00      	nop
 80055dc:	200002d0 	.word	0x200002d0
 80055e0:	200002c0 	.word	0x200002c0
 80055e4:	200002b1 	.word	0x200002b1
 80055e8:	200002d4 	.word	0x200002d4
 80055ec:	20000270 	.word	0x20000270
 80055f0:	200002b0 	.word	0x200002b0
 80055f4:	40020000 	.word	0x40020000

080055f8 <UpdateStepSection>:

/*
	Steps section leds update function
*/
void UpdateStepSection(void)
{
 80055f8:	b508      	push	{r3, lr}
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 80055fa:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <UpdateStepSection+0x6c>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b33b      	cbz	r3, 8005650 <UpdateStepSection+0x58>
		LED_STEP_LightStep(gSequenceStepNumber_1);
	};
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8005600:	4b18      	ldr	r3, [pc, #96]	; (8005664 <UpdateStepSection+0x6c>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b01      	cmp	r3, #1
 8005608:	d027      	beq.n	800565a <UpdateStepSection+0x62>
		LED_STEP_LightStep(gSequenceStepNumber_2);
	};
	if ( ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) ||
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <UpdateStepSection+0x6c>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d018      	beq.n	8005646 <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_EDIT_2 ) ||
 8005614:	4b13      	ldr	r3, [pc, #76]	; (8005664 <UpdateStepSection+0x6c>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
	if ( ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) ||
 800561a:	2b03      	cmp	r3, #3
 800561c:	d013      	beq.n	8005646 <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_SAVE_1 ) ||
 800561e:	4b11      	ldr	r3, [pc, #68]	; (8005664 <UpdateStepSection+0x6c>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_EDIT_2 ) ||
 8005624:	2b04      	cmp	r3, #4
 8005626:	d00e      	beq.n	8005646 <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_SAVE_2 ) ||
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <UpdateStepSection+0x6c>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_SAVE_1 ) ||
 800562e:	2b05      	cmp	r3, #5
 8005630:	d009      	beq.n	8005646 <UpdateStepSection+0x4e>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || 
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <UpdateStepSection+0x6c>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_SAVE_2 ) ||
 8005638:	2b06      	cmp	r3, #6
 800563a:	d004      	beq.n	8005646 <UpdateStepSection+0x4e>
		(gDisplayMode == DISPLAY_MODE_LOAD_2)
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <UpdateStepSection+0x6c>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b2db      	uxtb	r3, r3
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || 
 8005642:	2b07      	cmp	r3, #7
 8005644:	d103      	bne.n	800564e <UpdateStepSection+0x56>
		) {
		LED_STEP_LightStep(gEditModeStepNum);
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <UpdateStepSection+0x70>)
 8005648:	7818      	ldrb	r0, [r3, #0]
 800564a:	f7fc fbe3 	bl	8001e14 <LED_STEP_LightStep>
	};
};
 800564e:	bd08      	pop	{r3, pc}
		LED_STEP_LightStep(gSequenceStepNumber_1);
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <UpdateStepSection+0x74>)
 8005652:	7818      	ldrb	r0, [r3, #0]
 8005654:	f7fc fbde 	bl	8001e14 <LED_STEP_LightStep>
 8005658:	e7d2      	b.n	8005600 <UpdateStepSection+0x8>
		LED_STEP_LightStep(gSequenceStepNumber_2);
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <UpdateStepSection+0x78>)
 800565c:	7818      	ldrb	r0, [r3, #0]
 800565e:	f7fc fbd9 	bl	8001e14 <LED_STEP_LightStep>
 8005662:	e7d2      	b.n	800560a <UpdateStepSection+0x12>
 8005664:	200002b0 	.word	0x200002b0
 8005668:	200002b1 	.word	0x200002b1
 800566c:	200002bf 	.word	0x200002bf
 8005670:	200002c0 	.word	0x200002c0

08005674 <Calibration>:


void Calibration(void)
{	//printf("%d \n ",__LINE__);
 8005674:	b530      	push	{r4, r5, lr}
 8005676:	b083      	sub	sp, #12
	unsigned int i=0;
	uButtons myButtons;
	uLeds mLeds;	
	myButtons.value = GetButton();
 8005678:	f7fc f964 	bl	8001944 <GetButton>
 800567c:	460d      	mov	r5, r1
	
	mLeds.value[0]  	= 0xFF;
 800567e:	23ff      	movs	r3, #255	; 0xff
 8005680:	f88d 3004 	strb.w	r3, [sp, #4]
	mLeds.value[1]  	= 0xFF;
 8005684:	f88d 3005 	strb.w	r3, [sp, #5]
	mLeds.value[2]  	= 0xFF;
 8005688:	f88d 3006 	strb.w	r3, [sp, #6]
	mLeds.value[3]  	= 0xFF;
 800568c:	f88d 3007 	strb.w	r3, [sp, #7]
	DISPLAY_LED_II_OFF;
 8005690:	4c34      	ldr	r4, [pc, #208]	; (8005764 <Calibration+0xf0>)
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	4620      	mov	r0, r4
 8005696:	f7fb fd26 	bl	80010e6 <GPIO_ResetBits>
	DISPLAY_LED_I_OFF;
 800569a:	2140      	movs	r1, #64	; 0x40
 800569c:	4620      	mov	r0, r4
 800569e:	f7fb fd22 	bl	80010e6 <GPIO_ResetBits>
	unsigned int i=0;
 80056a2:	2400      	movs	r4, #0
	
	while(myButtons.b.StageAddress2Advance)
 80056a4:	e014      	b.n	80056d0 <Calibration+0x5c>
			mLeds.b.Seq1Stop = 0;
			mLeds.b.Seq2Run = 1;
			mLeds.b.Seq2Wait = 1;
			mLeds.b.Seq2Stop = 0;
		}
		else if(i < 4000)
 80056a6:	f5b4 6f7a 	cmp.w	r4, #4000	; 0xfa0
 80056aa:	d225      	bcs.n	80056f8 <Calibration+0x84>
		{
			mLeds.b.Seq1Run = 0;
 80056ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Wait = 1;
 80056b0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			mLeds.b.Seq1Stop = 1;
			mLeds.b.Seq2Run = 0;
 80056b4:	f043 0303 	orr.w	r3, r3, #3
			mLeds.b.Seq2Wait = 1;
 80056b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
			mLeds.b.Seq2Stop = 1;
 80056bc:	f043 0318 	orr.w	r3, r3, #24
 80056c0:	f88d 3004 	strb.w	r3, [sp, #4]
			mLeds.b.Seq2Wait = 0;
			mLeds.b.Seq2Stop = 1;
		}
		else i = 0;
		
		LEDS_modes_SendStruct(&mLeds);
 80056c4:	a801      	add	r0, sp, #4
 80056c6:	f7fc fb2b 	bl	8001d20 <LEDS_modes_SendStruct>
		myButtons.value = GetButton();
 80056ca:	f7fc f93b 	bl	8001944 <GetButton>
 80056ce:	460d      	mov	r5, r1
	while(myButtons.b.StageAddress2Advance)
 80056d0:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80056d4:	d025      	beq.n	8005722 <Calibration+0xae>
		i++;
 80056d6:	3401      	adds	r4, #1
		if(i < 2000)
 80056d8:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80056dc:	d2e3      	bcs.n	80056a6 <Calibration+0x32>
			mLeds.b.Seq1Run = 1;
 80056de:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Stop = 0;
 80056e2:	f043 0306 	orr.w	r3, r3, #6
			mLeds.b.Seq2Run = 1;
 80056e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
			mLeds.b.Seq2Stop = 0;
 80056ea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80056ee:	f36f 03c3 	bfc	r3, #3, #1
 80056f2:	f88d 3004 	strb.w	r3, [sp, #4]
 80056f6:	e7e5      	b.n	80056c4 <Calibration+0x50>
		else if(i < 6000)
 80056f8:	f241 736f 	movw	r3, #5999	; 0x176f
 80056fc:	429c      	cmp	r4, r3
 80056fe:	d80e      	bhi.n	800571e <Calibration+0xaa>
			mLeds.b.Seq1Run = 1;
 8005700:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Wait = 0;
 8005704:	f043 0304 	orr.w	r3, r3, #4
			mLeds.b.Seq1Stop = 1;
 8005708:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
			mLeds.b.Seq2Wait = 0;
 800570c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
			mLeds.b.Seq2Stop = 1;
 8005710:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005714:	f043 0308 	orr.w	r3, r3, #8
 8005718:	f88d 3004 	strb.w	r3, [sp, #4]
 800571c:	e7d2      	b.n	80056c4 <Calibration+0x50>
		else i = 0;
 800571e:	2400      	movs	r4, #0
 8005720:	e7d0      	b.n	80056c4 <Calibration+0x50>
	}
	//Measure external inputs
	//printf("Measure %d \n ",__LINE__);

	for(i = 0; i < 8 ; i++)
 8005722:	2300      	movs	r3, #0
 8005724:	e000      	b.n	8005728 <Calibration+0xb4>
 8005726:	3301      	adds	r3, #1
 8005728:	2b07      	cmp	r3, #7
 800572a:	d80f      	bhi.n	800574c <Calibration+0xd8>
	{
		CalConstants[i] = AddData[i];
 800572c:	4a0e      	ldr	r2, [pc, #56]	; (8005768 <Calibration+0xf4>)
 800572e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005732:	4a0e      	ldr	r2, [pc, #56]	; (800576c <Calibration+0xf8>)
 8005734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(CalConstants[i] < 100) CalConstants[i] = 4095;
 8005738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800573c:	2a63      	cmp	r2, #99	; 0x63
 800573e:	d8f2      	bhi.n	8005726 <Calibration+0xb2>
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <Calibration+0xf8>)
 8005742:	f640 71ff 	movw	r1, #4095	; 0xfff
 8005746:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800574a:	e7ec      	b.n	8005726 <Calibration+0xb2>
		//printf ("\n CalConstants[%d] %d \n", i,CalConstants[i]);

	};
	ADCPause();
 800574c:	f7fc fc3e 	bl	8001fcc <ADCPause>
	//printf("ADCPause %d \n ",__LINE__);
	//Store calibration consstants
	CAT25512_write_block(100*sizeof(Steps), (unsigned char *) CalConstants, sizeof(CalConstants));
 8005750:	2220      	movs	r2, #32
 8005752:	4906      	ldr	r1, [pc, #24]	; (800576c <Calibration+0xf8>)
 8005754:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8005758:	f7fb ffd0 	bl	80016fc <CAT25512_write_block>
	mADC_init();
 800575c:	f7fc fb8a 	bl	8001e74 <mADC_init>
		else i = 0;
		LEDS_modes_SendStruct(&mLeds);
		myButtons.value = GetButton();
	}

}
 8005760:	b003      	add	sp, #12
 8005762:	bd30      	pop	{r4, r5, pc}
 8005764:	40020000 	.word	0x40020000
 8005768:	200007f8 	.word	0x200007f8
 800576c:	20000250 	.word	0x20000250

08005770 <delay_ms>:




void delay_ms(unsigned int ms)
{
 8005770:	b510      	push	{r4, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 8005776:	a801      	add	r0, sp, #4
 8005778:	f7fb fcce 	bl	8001118 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000)*ms;
 800577c:	9b02      	ldr	r3, [sp, #8]
 800577e:	4a08      	ldr	r2, [pc, #32]	; (80057a0 <delay_ms+0x30>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	0b5b      	lsrs	r3, r3, #13
 8005786:	fb04 f303 	mul.w	r3, r4, r3
 800578a:	9305      	str	r3, [sp, #20]
	for (; nCount!=0; nCount--);
 800578c:	e002      	b.n	8005794 <delay_ms+0x24>
 800578e:	9b05      	ldr	r3, [sp, #20]
 8005790:	3b01      	subs	r3, #1
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	9b05      	ldr	r3, [sp, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f9      	bne.n	800578e <delay_ms+0x1e>
}
 800579a:	b006      	add	sp, #24
 800579c:	bd10      	pop	{r4, pc}
 800579e:	bf00      	nop
 80057a0:	d1b71759 	.word	0xd1b71759

080057a4 <TIM6_DAC_IRQHandler>:
{
 80057a4:	b538      	push	{r3, r4, r5, lr}
	TIM6->SR = (uint16_t) ~TIM_IT_Update;	
 80057a6:	4b7b      	ldr	r3, [pc, #492]	; (8005994 <TIM6_DAC_IRQHandler+0x1f0>)
 80057a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80057ac:	821a      	strh	r2, [r3, #16]
	myButtons.value = GetButton();
 80057ae:	f7fc f8c9 	bl	8001944 <GetButton>
	if(clear_counter1 < 30 && clear_counter2 < 30)
 80057b2:	4b79      	ldr	r3, [pc, #484]	; (8005998 <TIM6_DAC_IRQHandler+0x1f4>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b1d      	cmp	r3, #29
 80057b8:	d82d      	bhi.n	8005816 <TIM6_DAC_IRQHandler+0x72>
 80057ba:	4a78      	ldr	r2, [pc, #480]	; (800599c <TIM6_DAC_IRQHandler+0x1f8>)
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	2a1d      	cmp	r2, #29
 80057c0:	d829      	bhi.n	8005816 <TIM6_DAC_IRQHandler+0x72>
 80057c2:	b2c0      	uxtb	r0, r0
		if(!myButtons.b.ClearUp || !myButtons.b.ClearDown) 
 80057c4:	f000 0103 	and.w	r1, r0, #3
 80057c8:	2903      	cmp	r1, #3
 80057ca:	d014      	beq.n	80057f6 <TIM6_DAC_IRQHandler+0x52>
			if(!myButtons.b.ClearUp) clear_counter1++;
 80057cc:	f010 0f01 	tst.w	r0, #1
 80057d0:	d109      	bne.n	80057e6 <TIM6_DAC_IRQHandler+0x42>
 80057d2:	3301      	adds	r3, #1
 80057d4:	4970      	ldr	r1, [pc, #448]	; (8005998 <TIM6_DAC_IRQHandler+0x1f4>)
 80057d6:	700b      	strb	r3, [r1, #0]
			if(!myButtons.b.ClearDown) clear_counter2++;
 80057d8:	f010 0f02 	tst.w	r0, #2
 80057dc:	d107      	bne.n	80057ee <TIM6_DAC_IRQHandler+0x4a>
 80057de:	3201      	adds	r2, #1
 80057e0:	4b6e      	ldr	r3, [pc, #440]	; (800599c <TIM6_DAC_IRQHandler+0x1f8>)
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e01d      	b.n	8005822 <TIM6_DAC_IRQHandler+0x7e>
			else clear_counter1 = 0;
 80057e6:	4b6c      	ldr	r3, [pc, #432]	; (8005998 <TIM6_DAC_IRQHandler+0x1f4>)
 80057e8:	2100      	movs	r1, #0
 80057ea:	7019      	strb	r1, [r3, #0]
 80057ec:	e7f4      	b.n	80057d8 <TIM6_DAC_IRQHandler+0x34>
			else clear_counter2 = 0;
 80057ee:	4b6b      	ldr	r3, [pc, #428]	; (800599c <TIM6_DAC_IRQHandler+0x1f8>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e015      	b.n	8005822 <TIM6_DAC_IRQHandler+0x7e>
			clear_counter1 = 0;
 80057f6:	2100      	movs	r1, #0
 80057f8:	4b67      	ldr	r3, [pc, #412]	; (8005998 <TIM6_DAC_IRQHandler+0x1f4>)
 80057fa:	7019      	strb	r1, [r3, #0]
			clear_counter2 = 0;
 80057fc:	4b67      	ldr	r3, [pc, #412]	; (800599c <TIM6_DAC_IRQHandler+0x1f8>)
 80057fe:	7019      	strb	r1, [r3, #0]
			TIM_SetCounter(TIM6, 0x00);
 8005800:	4c64      	ldr	r4, [pc, #400]	; (8005994 <TIM6_DAC_IRQHandler+0x1f0>)
 8005802:	4620      	mov	r0, r4
 8005804:	f7fb fe47 	bl	8001496 <TIM_SetCounter>
			TIM6->CR1 &= ~TIM_CR1_CEN;
 8005808:	8823      	ldrh	r3, [r4, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	8023      	strh	r3, [r4, #0]
 8005814:	e005      	b.n	8005822 <TIM6_DAC_IRQHandler+0x7e>
	else if(clear_counter1 == 30 || clear_counter2 == 30)
 8005816:	2b1e      	cmp	r3, #30
 8005818:	d004      	beq.n	8005824 <TIM6_DAC_IRQHandler+0x80>
 800581a:	4b60      	ldr	r3, [pc, #384]	; (800599c <TIM6_DAC_IRQHandler+0x1f8>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b1e      	cmp	r3, #30
 8005820:	d000      	beq.n	8005824 <TIM6_DAC_IRQHandler+0x80>
};
 8005822:	bd38      	pop	{r3, r4, r5, pc}
		LED_STEP_SendWord(0x0000);
 8005824:	2000      	movs	r0, #0
 8005826:	f7fc fadd 	bl	8001de4 <LED_STEP_SendWord>
		delay_ms(500);
 800582a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800582e:	f7ff ff9f 	bl	8005770 <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 8005832:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005836:	f7fc fad5 	bl	8001de4 <LED_STEP_SendWord>
		delay_ms(500);
 800583a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800583e:	f7ff ff97 	bl	8005770 <delay_ms>
		LED_STEP_SendWord(0x0000);
 8005842:	2000      	movs	r0, #0
 8005844:	f7fc face 	bl	8001de4 <LED_STEP_SendWord>
		delay_ms(500);
 8005848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800584c:	f7ff ff90 	bl	8005770 <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 8005850:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005854:	f7fc fac6 	bl	8001de4 <LED_STEP_SendWord>
		delay_ms(500);
 8005858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800585c:	f7ff ff88 	bl	8005770 <delay_ms>
		LED_STEP_SendWord(0x0000);
 8005860:	2000      	movs	r0, #0
 8005862:	f7fc fabf 	bl	8001de4 <LED_STEP_SendWord>
		delay_ms(500);
 8005866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800586a:	f7ff ff81 	bl	8005770 <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 800586e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005872:	f7fc fab7 	bl	8001de4 <LED_STEP_SendWord>
		TIM_SetCounter(TIM6, 0x00);
 8005876:	4c47      	ldr	r4, [pc, #284]	; (8005994 <TIM6_DAC_IRQHandler+0x1f0>)
 8005878:	2100      	movs	r1, #0
 800587a:	4620      	mov	r0, r4
 800587c:	f7fb fe0b 	bl	8001496 <TIM_SetCounter>
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8005880:	8823      	ldrh	r3, [r4, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	b29b      	uxth	r3, r3
 800588a:	8023      	strh	r3, [r4, #0]
		if(clear_counter1 == 30)
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <TIM6_DAC_IRQHandler+0x1f4>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b1e      	cmp	r3, #30
 8005892:	d023      	beq.n	80058dc <TIM6_DAC_IRQHandler+0x138>
		else if(clear_counter2 == 30)
 8005894:	4b41      	ldr	r3, [pc, #260]	; (800599c <TIM6_DAC_IRQHandler+0x1f8>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b1e      	cmp	r3, #30
 800589a:	d047      	beq.n	800592c <TIM6_DAC_IRQHandler+0x188>
		clear_counter1 = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	4a3e      	ldr	r2, [pc, #248]	; (8005998 <TIM6_DAC_IRQHandler+0x1f4>)
 80058a0:	7013      	strb	r3, [r2, #0]
		clear_counter2 = 0;
 80058a2:	4a3e      	ldr	r2, [pc, #248]	; (800599c <TIM6_DAC_IRQHandler+0x1f8>)
 80058a4:	7013      	strb	r3, [r2, #0]
		if (gDisplayMode == DISPLAY_MODE_LOAD_1 || gDisplayMode == DISPLAY_MODE_SAVE_1) gDisplayMode = DISPLAY_MODE_VIEW_1;
 80058a6:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <TIM6_DAC_IRQHandler+0x1fc>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d004      	beq.n	80058ba <TIM6_DAC_IRQHandler+0x116>
 80058b0:	4b3b      	ldr	r3, [pc, #236]	; (80059a0 <TIM6_DAC_IRQHandler+0x1fc>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d102      	bne.n	80058c0 <TIM6_DAC_IRQHandler+0x11c>
 80058ba:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <TIM6_DAC_IRQHandler+0x1fc>)
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
		if (gDisplayMode == DISPLAY_MODE_LOAD_2 || gDisplayMode == DISPLAY_MODE_SAVE_2) gDisplayMode = DISPLAY_MODE_VIEW_2; 		
 80058c0:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <TIM6_DAC_IRQHandler+0x1fc>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	d004      	beq.n	80058d4 <TIM6_DAC_IRQHandler+0x130>
 80058ca:	4b35      	ldr	r3, [pc, #212]	; (80059a0 <TIM6_DAC_IRQHandler+0x1fc>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b05      	cmp	r3, #5
 80058d2:	d1a6      	bne.n	8005822 <TIM6_DAC_IRQHandler+0x7e>
 80058d4:	4b32      	ldr	r3, [pc, #200]	; (80059a0 <TIM6_DAC_IRQHandler+0x1fc>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
};
 80058da:	e7a2      	b.n	8005822 <TIM6_DAC_IRQHandler+0x7e>
			Steps[0][0].val[3] = 0x00;
 80058dc:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <TIM6_DAC_IRQHandler+0x200>)
 80058de:	2300      	movs	r3, #0
 80058e0:	70d3      	strb	r3, [r2, #3]
			Steps[0][0].val[4] = 0x00;
 80058e2:	7113      	strb	r3, [r2, #4]
			Steps[0][0].val[5] = 0x00;
 80058e4:	7153      	strb	r3, [r2, #5]
			Steps[0][0].b.TimeRange_p3 = 1;
 80058e6:	6851      	ldr	r1, [r2, #4]
 80058e8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80058ec:	6051      	str	r1, [r2, #4]
			Steps[0][0].b.FullRange = 1;
 80058ee:	6811      	ldr	r1, [r2, #0]
 80058f0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80058f4:	6011      	str	r1, [r2, #0]
			for(i=0; i<16; i++)
 80058f6:	e010      	b.n	800591a <TIM6_DAC_IRQHandler+0x176>
				Steps[0][i] = Steps[0][0];
 80058f8:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <TIM6_DAC_IRQHandler+0x200>)
 80058fa:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80058fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005902:	e884 0003 	stmia.w	r4, {r0, r1}
				Steps[0][i+16] = Steps[0][0];
 8005906:	f103 0410 	add.w	r4, r3, #16
 800590a:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800590e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005912:	e884 0003 	stmia.w	r4, {r0, r1}
			for(i=0; i<16; i++)
 8005916:	3301      	adds	r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d9ec      	bls.n	80058f8 <TIM6_DAC_IRQHandler+0x154>
			gSequencerMode_1 = SEQUENCER_MODE_STOP;
 800591e:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <TIM6_DAC_IRQHandler+0x204>)
 8005920:	2202      	movs	r2, #2
 8005922:	701a      	strb	r2, [r3, #0]
			gSequenceStepNumber_1 = 0;
 8005924:	4b21      	ldr	r3, [pc, #132]	; (80059ac <TIM6_DAC_IRQHandler+0x208>)
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e7b7      	b.n	800589c <TIM6_DAC_IRQHandler+0xf8>
			Steps[1][0].val[3] = 0x00;
 800592c:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <TIM6_DAC_IRQHandler+0x200>)
 800592e:	2300      	movs	r3, #0
 8005930:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103
			Steps[1][0].val[4] = 0x00;
 8005934:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
			Steps[1][0].val[5] = 0x00;
 8005938:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
			Steps[1][0].b.TimeRange_p3 = 1;
 800593c:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 8005940:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005944:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			Steps[1][0].b.FullRange = 1;
 8005948:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 800594c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005950:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			for(i=0; i<16; i++)
 8005954:	e014      	b.n	8005980 <TIM6_DAC_IRQHandler+0x1dc>
				Steps[1][i] = Steps[1][0];
 8005956:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <TIM6_DAC_IRQHandler+0x200>)
 8005958:	f103 0520 	add.w	r5, r3, #32
 800595c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005960:	f502 7480 	add.w	r4, r2, #256	; 0x100
 8005964:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005968:	e885 0003 	stmia.w	r5, {r0, r1}
				Steps[1][i+16] = Steps[1][0];
 800596c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005970:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005974:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005978:	e882 0003 	stmia.w	r2, {r0, r1}
			for(i=0; i<16; i++)
 800597c:	3301      	adds	r3, #1
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d9e8      	bls.n	8005956 <TIM6_DAC_IRQHandler+0x1b2>
			gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <TIM6_DAC_IRQHandler+0x20c>)
 8005986:	2202      	movs	r2, #2
 8005988:	701a      	strb	r2, [r3, #0]
			gSequenceStepNumber_2 = 0;
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <TIM6_DAC_IRQHandler+0x210>)
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	e784      	b.n	800589c <TIM6_DAC_IRQHandler+0xf8>
 8005992:	bf00      	nop
 8005994:	40001000 	.word	0x40001000
 8005998:	200002aa 	.word	0x200002aa
 800599c:	200002ab 	.word	0x200002ab
 80059a0:	200002b0 	.word	0x200002b0
 80059a4:	200008a4 	.word	0x200008a4
 80059a8:	200002c1 	.word	0x200002c1
 80059ac:	200002bf 	.word	0x200002bf
 80059b0:	200002c2 	.word	0x200002c2
 80059b4:	200002c0 	.word	0x200002c0

080059b8 <main>:
 {
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ba:	b089      	sub	sp, #36	; 0x24
	DisplayUpdateFlags.value = 0x00;
 80059bc:	4bb4      	ldr	r3, [pc, #720]	; (8005c90 <main+0x2d8>)
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.MainDisplay 	= 1;
 80059c2:	781a      	ldrb	r2, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.StepsDisplay = 1;
 80059ca:	781a      	ldrb	r2, [r3, #0]
 80059cc:	f042 0202 	orr.w	r2, r2, #2
 80059d0:	701a      	strb	r2, [r3, #0]
	Steps[0][0].b.TimeRange_p3 = 1;
 80059d2:	4bb0      	ldr	r3, [pc, #704]	; (8005c94 <main+0x2dc>)
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059da:	605a      	str	r2, [r3, #4]
	Steps[0][0].b.FullRange = 1;
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80059e2:	601a      	str	r2, [r3, #0]
	Steps[1][0] = Steps[0][0];
 80059e4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80059e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80059ec:	e882 0003 	stmia.w	r2, {r0, r1}
	for(_cnt=1;_cnt<=15;_cnt++) 
 80059f0:	2201      	movs	r2, #1
 80059f2:	e020      	b.n	8005a36 <main+0x7e>
		Steps[0][_cnt] = Steps[0][0];		
 80059f4:	4ba7      	ldr	r3, [pc, #668]	; (8005c94 <main+0x2dc>)
 80059f6:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 80059fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80059fe:	e884 0003 	stmia.w	r4, {r0, r1}
		Steps[1][_cnt] = Steps[0][0];
 8005a02:	f102 0420 	add.w	r4, r2, #32
 8005a06:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a0e:	e884 0003 	stmia.w	r4, {r0, r1}
		Steps[0][_cnt+16] = Steps[0][0];		
 8005a12:	f102 0410 	add.w	r4, r2, #16
 8005a16:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005a1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a1e:	e884 0003 	stmia.w	r4, {r0, r1}
		Steps[1][_cnt+16] = Steps[0][0];
 8005a22:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8005a26:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005a2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a2e:	e884 0003 	stmia.w	r4, {r0, r1}
	for(_cnt=1;_cnt<=15;_cnt++) 
 8005a32:	3201      	adds	r2, #1
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	2a0f      	cmp	r2, #15
 8005a38:	d9dc      	bls.n	80059f4 <main+0x3c>
	RCC_GetClocksFreq(&RCC_Clocks);
 8005a3a:	4897      	ldr	r0, [pc, #604]	; (8005c98 <main+0x2e0>)
 8005a3c:	f7fb fb6c 	bl	8001118 <RCC_GetClocksFreq>
	PulsesInit();
 8005a40:	f7fe f9dc 	bl	8003dfc <PulsesInit>
	DisplayLedsIOInit();
 8005a44:	f7fe fa26 	bl	8003e94 <DisplayLedsIOInit>
	DipConfig_init();	
 8005a48:	f7fc f8c8 	bl	8001bdc <DipConfig_init>
	gDipConfig = GetDipConfig(); 
 8005a4c:	f7fc f8e0 	bl	8001c10 <GetDipConfig>
 8005a50:	4c92      	ldr	r4, [pc, #584]	; (8005c9c <main+0x2e4>)
 8005a52:	7020      	strb	r0, [r4, #0]
	LED_STEP_init();
 8005a54:	f7fc f97e 	bl	8001d54 <LED_STEP_init>
	LED_STEP_SendWord(0xFFFF);
 8005a58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a5c:	f7fc f9c2 	bl	8001de4 <LED_STEP_SendWord>
	delay_ms(1000);
 8005a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a64:	f7ff fe84 	bl	8005770 <delay_ms>
	LED_STEP_SendWord(0xFFF0|(*((uint8_t*) (&gDipConfig))));
 8005a68:	7820      	ldrb	r0, [r4, #0]
 8005a6a:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00
 8005a6e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
 8005a72:	f7fc f9b7 	bl	8001de4 <LED_STEP_SendWord>
	delay_ms(1000);
 8005a76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a7a:	f7ff fe79 	bl	8005770 <delay_ms>
	CAT25512_init();
 8005a7e:	f7fb fd8d 	bl	800159c <CAT25512_init>
	LEDS_modes_init();	
 8005a82:	f7fc f90b 	bl	8001c9c <LEDS_modes_init>
	mLeds.value[0] = 0xFF;
 8005a86:	23ff      	movs	r3, #255	; 0xff
	mLeds.value[1] = 0xFF;
 8005a88:	f88d 3015 	strb.w	r3, [sp, #21]
	mLeds.value[2] = 0xFF;
 8005a8c:	f88d 3016 	strb.w	r3, [sp, #22]
	mLeds.value[3] = 0xFF;
 8005a90:	f88d 3017 	strb.w	r3, [sp, #23]
	mLeds.b.Seq2Stop = 0;
 8005a94:	a808      	add	r0, sp, #32
 8005a96:	f06f 0309 	mvn.w	r3, #9
 8005a9a:	f800 3d0c 	strb.w	r3, [r0, #-12]!
	LEDS_modes_SendStruct(&mLeds);
 8005a9e:	f7fc f93f 	bl	8001d20 <LEDS_modes_SendStruct>
	init_HC165();
 8005aa2:	f7fb feb3 	bl	800180c <init_HC165>
	key_state = GetButton();
 8005aa6:	f7fb ff4d 	bl	8001944 <GetButton>
 8005aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
	prev_key_state = 0x7fbf67f7fffdff;//key_state;
 8005aae:	a376      	add	r3, pc, #472	; (adr r3, 8005c88 <main+0x2d0>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	e9cd 2300 	strd	r2, r3, [sp]
	MAX5135init();
 8005ab8:	f7fb ff90 	bl	80019dc <MAX5135init>
	ADC_POTS_selector_init();
 8005abc:	f7fc f828 	bl	8001b10 <ADC_POTS_selector_init>
	ADC_POTS_selector_Ch(0);
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	f7fc f87f 	bl	8001bc4 <ADC_POTS_selector_Ch>
	mADC_init();
 8005ac6:	f7fc f9d5 	bl	8001e74 <mADC_init>
	mTimersInit();
 8005aca:	f7fd ff41 	bl	8003950 <mTimersInit>
	mInterruptInit();
 8005ace:	f7fc fa85 	bl	8001fdc <mInterruptInit>
	InternalDACInit();
 8005ad2:	f7fe f9f9 	bl	8003ec8 <InternalDACInit>
	Init_Expander_GPIO();
 8005ad6:	f7fc f8bd 	bl	8001c54 <Init_Expander_GPIO>
	gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8005ada:	2302      	movs	r3, #2
 8005adc:	4a70      	ldr	r2, [pc, #448]	; (8005ca0 <main+0x2e8>)
 8005ade:	7013      	strb	r3, [r2, #0]
	gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8005ae0:	4a70      	ldr	r2, [pc, #448]	; (8005ca4 <main+0x2ec>)
 8005ae2:	7013      	strb	r3, [r2, #0]
	key_state = GetButton();
 8005ae4:	f7fb ff2e 	bl	8001944 <GetButton>
 8005ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
	myButtons.value = key_state;
 8005aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005af0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	if(!myButtons.b.StageAddress1Advance)
 8005af4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005af8:	d129      	bne.n	8005b4e <main+0x196>
		Calibration();
 8005afa:	f7ff fdbb 	bl	8005674 <Calibration>
		for(i = 0; i < 8; i++)
 8005afe:	2500      	movs	r5, #0
		if(gDipConfig.b.V_OUT_1V == 1) 
 8005b00:	4b66      	ldr	r3, [pc, #408]	; (8005c9c <main+0x2e4>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f013 0f02 	tst.w	r3, #2
 8005b08:	d136      	bne.n	8005b78 <main+0x1c0>
			if(gDipConfig.b.V_OUT_1V2 == 1)
 8005b0a:	4b64      	ldr	r3, [pc, #400]	; (8005c9c <main+0x2e4>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f013 0f01 	tst.w	r3, #1
 8005b12:	d139      	bne.n	8005b88 <main+0x1d0>
				offset = (4095.0/5.0);
 8005b14:	4b64      	ldr	r3, [pc, #400]	; (8005ca8 <main+0x2f0>)
 8005b16:	f240 3233 	movw	r2, #819	; 0x333
 8005b1a:	601a      	str	r2, [r3, #0]
				divider = 5.0;
 8005b1c:	4b63      	ldr	r3, [pc, #396]	; (8005cac <main+0x2f4>)
 8005b1e:	4a64      	ldr	r2, [pc, #400]	; (8005cb0 <main+0x2f8>)
 8005b20:	601a      	str	r2, [r3, #0]
		if (KeyThreshHoldCnt == 0) {
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	d038      	beq.n	8005b98 <main+0x1e0>
		if (KeyThreshHoldCnt == 2) {
 8005b26:	2d02      	cmp	r5, #2
 8005b28:	d03b      	beq.n	8005ba2 <main+0x1ea>
		KeyThreshHoldCnt++;
 8005b2a:	3501      	adds	r5, #1
 8005b2c:	b2ed      	uxtb	r5, r5
		if (KeyThreshHoldCnt > 2) {
 8005b2e:	2d02      	cmp	r5, #2
 8005b30:	d900      	bls.n	8005b34 <main+0x17c>
			KeyThreshHoldCnt = 0;
 8005b32:	2500      	movs	r5, #0
		if (DisplayUpdateFlags.b.MainDisplay) {
 8005b34:	4b56      	ldr	r3, [pc, #344]	; (8005c90 <main+0x2d8>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f013 0f01 	tst.w	r3, #1
 8005b3c:	d179      	bne.n	8005c32 <main+0x27a>
		if (DisplayUpdateFlags.b.StepsDisplay) {			
 8005b3e:	4b54      	ldr	r3, [pc, #336]	; (8005c90 <main+0x2d8>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	f013 0f02 	tst.w	r3, #2
 8005b46:	f040 8096 	bne.w	8005c76 <main+0x2be>
			for(i =0; i<10; i++)
 8005b4a:	2400      	movs	r4, #0
 8005b4c:	e13a      	b.n	8005dc4 <main+0x40c>
		CAT25512_read_block(100*sizeof(Steps), (unsigned char *) CalConstants, sizeof(CalConstants));
 8005b4e:	2220      	movs	r2, #32
 8005b50:	4958      	ldr	r1, [pc, #352]	; (8005cb4 <main+0x2fc>)
 8005b52:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8005b56:	f7fb fe35 	bl	80017c4 <CAT25512_read_block>
		for(i = 0; i < 8; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b07      	cmp	r3, #7
 8005b5e:	dcce      	bgt.n	8005afe <main+0x146>
			if(CalConstants[i] < 100) CalConstants[i] = 4095;
 8005b60:	4a54      	ldr	r2, [pc, #336]	; (8005cb4 <main+0x2fc>)
 8005b62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b66:	2a63      	cmp	r2, #99	; 0x63
 8005b68:	d804      	bhi.n	8005b74 <main+0x1bc>
 8005b6a:	4a52      	ldr	r2, [pc, #328]	; (8005cb4 <main+0x2fc>)
 8005b6c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8005b70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 0; i < 8; i++)
 8005b74:	3301      	adds	r3, #1
 8005b76:	e7f1      	b.n	8005b5c <main+0x1a4>
			offset = (4095.0/10.0);
 8005b78:	4b4b      	ldr	r3, [pc, #300]	; (8005ca8 <main+0x2f0>)
 8005b7a:	f240 1299 	movw	r2, #409	; 0x199
 8005b7e:	601a      	str	r2, [r3, #0]
			divider = 10.0;
 8005b80:	4b4a      	ldr	r3, [pc, #296]	; (8005cac <main+0x2f4>)
 8005b82:	4a4d      	ldr	r2, [pc, #308]	; (8005cb8 <main+0x300>)
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e7cc      	b.n	8005b22 <main+0x16a>
				offset = (4095.0/8.29);
 8005b88:	4b47      	ldr	r3, [pc, #284]	; (8005ca8 <main+0x2f0>)
 8005b8a:	f240 12ed 	movw	r2, #493	; 0x1ed
 8005b8e:	601a      	str	r2, [r3, #0]
				divider = 8.29;
 8005b90:	4b46      	ldr	r3, [pc, #280]	; (8005cac <main+0x2f4>)
 8005b92:	4a4a      	ldr	r2, [pc, #296]	; (8005cbc <main+0x304>)
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e7c4      	b.n	8005b22 <main+0x16a>
			key_state = GetButton();
 8005b98:	f7fb fed4 	bl	8001944 <GetButton>
 8005b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ba0:	e7c1      	b.n	8005b26 <main+0x16e>
			if (key_state == GetButton()) {	
 8005ba2:	f7fb fecf 	bl	8001944 <GetButton>
 8005ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005baa:	4299      	cmp	r1, r3
 8005bac:	bf08      	it	eq
 8005bae:	4290      	cmpeq	r0, r2
 8005bb0:	d1bb      	bne.n	8005b2a <main+0x172>
				myButtons.value = key_state;			
 8005bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
							if ( 	(gDisplayMode != DISPLAY_MODE_SAVE_1) && (gDisplayMode != DISPLAY_MODE_SAVE_2) &&
 8005bba:	4941      	ldr	r1, [pc, #260]	; (8005cc0 <main+0x308>)
 8005bbc:	7809      	ldrb	r1, [r1, #0]
 8005bbe:	b2c9      	uxtb	r1, r1
 8005bc0:	2904      	cmp	r1, #4
 8005bc2:	d022      	beq.n	8005c0a <main+0x252>
 8005bc4:	493e      	ldr	r1, [pc, #248]	; (8005cc0 <main+0x308>)
 8005bc6:	7809      	ldrb	r1, [r1, #0]
 8005bc8:	b2c9      	uxtb	r1, r1
 8005bca:	2905      	cmp	r1, #5
 8005bcc:	d01d      	beq.n	8005c0a <main+0x252>
						(gDisplayMode != DISPLAY_MODE_LOAD_1) && (gDisplayMode != DISPLAY_MODE_LOAD_2) ) 
 8005bce:	493c      	ldr	r1, [pc, #240]	; (8005cc0 <main+0x308>)
 8005bd0:	7809      	ldrb	r1, [r1, #0]
 8005bd2:	b2c9      	uxtb	r1, r1
							if ( 	(gDisplayMode != DISPLAY_MODE_SAVE_1) && (gDisplayMode != DISPLAY_MODE_SAVE_2) &&
 8005bd4:	2906      	cmp	r1, #6
 8005bd6:	d018      	beq.n	8005c0a <main+0x252>
						(gDisplayMode != DISPLAY_MODE_LOAD_1) && (gDisplayMode != DISPLAY_MODE_LOAD_2) ) 
 8005bd8:	4939      	ldr	r1, [pc, #228]	; (8005cc0 <main+0x308>)
 8005bda:	7809      	ldrb	r1, [r1, #0]
 8005bdc:	b2c9      	uxtb	r1, r1
 8005bde:	2907      	cmp	r1, #7
 8005be0:	d013      	beq.n	8005c0a <main+0x252>
				if (key_state != prev_key_state || myButtons.b.StepRight == 0 || myButtons.b.StepLeft == 0) {
 8005be2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bea:	428f      	cmp	r7, r1
 8005bec:	bf08      	it	eq
 8005bee:	4286      	cmpeq	r6, r0
 8005bf0:	d103      	bne.n	8005bfa <main+0x242>
 8005bf2:	f002 020c 	and.w	r2, r2, #12
 8005bf6:	2a0c      	cmp	r2, #12
 8005bf8:	d097      	beq.n	8005b2a <main+0x172>
						keyb_proc(&myButtons);
 8005bfa:	a806      	add	r0, sp, #24
 8005bfc:	f7fe f99e 	bl	8003f3c <keyb_proc>
						prev_key_state = key_state;
 8005c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c04:	e9cd 2300 	strd	r2, r3, [sp]
 8005c08:	e78f      	b.n	8005b2a <main+0x172>
							if (key_state != prev_key_state || myButtons.b.StepRight == 0 || myButtons.b.StepLeft == 0) {
 8005c0a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c12:	428f      	cmp	r7, r1
 8005c14:	bf08      	it	eq
 8005c16:	4286      	cmpeq	r6, r0
 8005c18:	d103      	bne.n	8005c22 <main+0x26a>
 8005c1a:	f002 020c 	and.w	r2, r2, #12
 8005c1e:	2a0c      	cmp	r2, #12
 8005c20:	d083      	beq.n	8005b2a <main+0x172>
						keyb_proc(&myButtons);
 8005c22:	a806      	add	r0, sp, #24
 8005c24:	f7fe f98a 	bl	8003f3c <keyb_proc>
						prev_key_state = key_state;
 8005c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c2c:	e9cd 2300 	strd	r2, r3, [sp]
 8005c30:	e77b      	b.n	8005b2a <main+0x172>
			UpdateModeSection();
 8005c32:	f7ff fa99 	bl	8005168 <UpdateModeSection>
			DisplayUpdateFlags.b.MainDisplay = 0;
 8005c36:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <main+0x2d8>)
 8005c38:	7813      	ldrb	r3, [r2, #0]
 8005c3a:	f36f 0300 	bfc	r3, #0, #1
 8005c3e:	7013      	strb	r3, [r2, #0]
			if ( 	(gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <main+0x308>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d00f      	beq.n	8005c6a <main+0x2b2>
 8005c4a:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <main+0x308>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	d00a      	beq.n	8005c6a <main+0x2b2>
						(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) 
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <main+0x308>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
			if ( 	(gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8005c5a:	2b06      	cmp	r3, #6
 8005c5c:	d005      	beq.n	8005c6a <main+0x2b2>
						(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) 
 8005c5e:	4b18      	ldr	r3, [pc, #96]	; (8005cc0 <main+0x308>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b07      	cmp	r3, #7
 8005c66:	f47f af6a 	bne.w	8005b3e <main+0x186>
				DisplayUpdateFlags.b.MainDisplay = 1;
 8005c6a:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <main+0x2d8>)
 8005c6c:	7813      	ldrb	r3, [r2, #0]
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	7013      	strb	r3, [r2, #0]
 8005c74:	e763      	b.n	8005b3e <main+0x186>
			UpdateStepSection();
 8005c76:	f7ff fcbf 	bl	80055f8 <UpdateStepSection>
			DisplayUpdateFlags.b.StepsDisplay = 0;
 8005c7a:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <main+0x2d8>)
 8005c7c:	7813      	ldrb	r3, [r2, #0]
 8005c7e:	f36f 0341 	bfc	r3, #1, #1
 8005c82:	7013      	strb	r3, [r2, #0]
 8005c84:	e761      	b.n	8005b4a <main+0x192>
 8005c86:	bf00      	nop
 8005c88:	f7fffdff 	.word	0xf7fffdff
 8005c8c:	007fbf67 	.word	0x007fbf67
 8005c90:	200002f0 	.word	0x200002f0
 8005c94:	200008a4 	.word	0x200008a4
 8005c98:	20000b24 	.word	0x20000b24
 8005c9c:	200002e8 	.word	0x200002e8
 8005ca0:	200002c1 	.word	0x200002c1
 8005ca4:	200002c2 	.word	0x200002c2
 8005ca8:	200008a0 	.word	0x200008a0
 8005cac:	20000898 	.word	0x20000898
 8005cb0:	40a00000 	.word	0x40a00000
 8005cb4:	20000250 	.word	0x20000250
 8005cb8:	41200000 	.word	0x41200000
 8005cbc:	4104a3d7 	.word	0x4104a3d7
 8005cc0:	200002b0 	.word	0x200002b0
			if(Is_Expander_Present()) max_step = 31;
 8005cc4:	f04f 0c1f 	mov.w	ip, #31
			previous_step[j] = pots_step[j];
 8005cc8:	4a48      	ldr	r2, [pc, #288]	; (8005dec <main+0x434>)
 8005cca:	5d13      	ldrb	r3, [r2, r4]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	4948      	ldr	r1, [pc, #288]	; (8005df0 <main+0x438>)
 8005cd0:	550b      	strb	r3, [r1, r4]
			if(pots_step[j] < (max_step+1)) next_step_tres = (pots_step[j])*CalConstants[ADC_STAGEADDRESS_Ch_1+j]/(max_step+1) + 20;
 8005cd2:	5d13      	ldrb	r3, [r2, r4]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f10c 0c01 	add.w	ip, ip, #1
 8005cda:	4563      	cmp	r3, ip
 8005cdc:	da24      	bge.n	8005d28 <main+0x370>
 8005cde:	5d17      	ldrb	r7, [r2, r4]
 8005ce0:	1da3      	adds	r3, r4, #6
 8005ce2:	4a44      	ldr	r2, [pc, #272]	; (8005df4 <main+0x43c>)
 8005ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce8:	fb07 f703 	mul.w	r7, r7, r3
 8005cec:	fbb7 f7fc 	udiv	r7, r7, ip
 8005cf0:	b2bf      	uxth	r7, r7
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	b2bf      	uxth	r7, r7
			if(pots_step[j] > 1) prev_step_tres = (pots_step[j]-1)*CalConstants[ADC_STAGEADDRESS_Ch_1+j]/(max_step+1) - 20;
 8005cf6:	4b3d      	ldr	r3, [pc, #244]	; (8005dec <main+0x434>)
 8005cf8:	5d1b      	ldrb	r3, [r3, r4]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d915      	bls.n	8005d2c <main+0x374>
 8005d00:	4b3a      	ldr	r3, [pc, #232]	; (8005dec <main+0x434>)
 8005d02:	5d1e      	ldrb	r6, [r3, r4]
 8005d04:	1e73      	subs	r3, r6, #1
 8005d06:	1da2      	adds	r2, r4, #6
 8005d08:	493a      	ldr	r1, [pc, #232]	; (8005df4 <main+0x43c>)
 8005d0a:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8005d0e:	fb06 f603 	mul.w	r6, r6, r3
 8005d12:	fbb6 f6fc 	udiv	r6, r6, ip
 8005d16:	b2b6      	uxth	r6, r6
 8005d18:	3e14      	subs	r6, #20
 8005d1a:	b2b6      	uxth	r6, r6
			acc = 0;
 8005d1c:	2100      	movs	r1, #0
			for(i =0; i<10; i++)
 8005d1e:	460a      	mov	r2, r1
 8005d20:	e018      	b.n	8005d54 <main+0x39c>
				max_step = 15;
 8005d22:	f04f 0c0f 	mov.w	ip, #15
 8005d26:	e7cf      	b.n	8005cc8 <main+0x310>
			next_step_tres = 0;
 8005d28:	2700      	movs	r7, #0
 8005d2a:	e7e4      	b.n	8005cf6 <main+0x33e>
			prev_step_tres = 0;
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	e7f5      	b.n	8005d1c <main+0x364>
					temp = (AddData[ADC_STAGEADDRESS_Ch_1]*4095/CalConstants[ADC_STAGEADDRESS_Ch_1]);
 8005d30:	4b31      	ldr	r3, [pc, #196]	; (8005df8 <main+0x440>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8005d38:	482e      	ldr	r0, [pc, #184]	; (8005df4 <main+0x43c>)
 8005d3a:	6980      	ldr	r0, [r0, #24]
 8005d3c:	fbb3 f3f0 	udiv	r3, r3, r0
 8005d40:	b29b      	uxth	r3, r3
					if(temp > 4095) temp = 4095; 
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d46:	d301      	bcc.n	8005d4c <main+0x394>
 8005d48:	f640 73ff 	movw	r3, #4095	; 0xfff
					acc += temp;
 8005d4c:	4419      	add	r1, r3
 8005d4e:	e000      	b.n	8005d52 <main+0x39a>
					acc += temp;
 8005d50:	4419      	add	r1, r3
			for(i =0; i<10; i++)
 8005d52:	3201      	adds	r2, #1
 8005d54:	2a09      	cmp	r2, #9
 8005d56:	dc10      	bgt.n	8005d7a <main+0x3c2>
				if(j == 0) 
 8005d58:	2c00      	cmp	r4, #0
 8005d5a:	d0e9      	beq.n	8005d30 <main+0x378>
					temp = (AddData[ADC_STAGEADDRESS_Ch_2]*4095/CalConstants[ADC_STAGEADDRESS_Ch_2]);
 8005d5c:	4b26      	ldr	r3, [pc, #152]	; (8005df8 <main+0x440>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8005d64:	4823      	ldr	r0, [pc, #140]	; (8005df4 <main+0x43c>)
 8005d66:	69c0      	ldr	r0, [r0, #28]
 8005d68:	fbb3 f3f0 	udiv	r3, r3, r0
 8005d6c:	b29b      	uxth	r3, r3
					if(temp > 4095) temp = 4095; 
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	d3ed      	bcc.n	8005d50 <main+0x398>
 8005d74:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005d78:	e7ea      	b.n	8005d50 <main+0x398>
			if(pots_step[j] < (max_step+1)) {if(acc/10 > next_step_tres) 
 8005d7a:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <main+0x434>)
 8005d7c:	5d1b      	ldrb	r3, [r3, r4]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	459c      	cmp	ip, r3
 8005d82:	dd0c      	ble.n	8005d9e <main+0x3e6>
 8005d84:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <main+0x444>)
 8005d86:	fb82 3201 	smull	r3, r2, r2, r1
 8005d8a:	17cb      	asrs	r3, r1, #31
 8005d8c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8005d90:	42bb      	cmp	r3, r7
 8005d92:	dd04      	ble.n	8005d9e <main+0x3e6>
				pots_step[j]++;
 8005d94:	4a15      	ldr	r2, [pc, #84]	; (8005dec <main+0x434>)
 8005d96:	5d13      	ldrb	r3, [r2, r4]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	5513      	strb	r3, [r2, r4]
			if(pots_step[j] > 1) {if(acc/10 < prev_step_tres) 
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <main+0x434>)
 8005da0:	5d1b      	ldrb	r3, [r3, r4]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d90c      	bls.n	8005dc2 <main+0x40a>
 8005da8:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <main+0x444>)
 8005daa:	fb83 2301 	smull	r2, r3, r3, r1
 8005dae:	17c9      	asrs	r1, r1, #31
 8005db0:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
 8005db4:	42b1      	cmp	r1, r6
 8005db6:	da04      	bge.n	8005dc2 <main+0x40a>
				pots_step[j]--;
 8005db8:	4a0c      	ldr	r2, [pc, #48]	; (8005dec <main+0x434>)
 8005dba:	5d13      	ldrb	r3, [r2, r4]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	5513      	strb	r3, [r2, r4]
	for(j = 0; j < 2; j++)
 8005dc2:	3401      	adds	r4, #1
 8005dc4:	2c01      	cmp	r4, #1
 8005dc6:	f73f ae9b 	bgt.w	8005b00 <main+0x148>
			if(Is_Expander_Present()) max_step = 31;
 8005dca:	f7fb ff5d 	bl	8001c88 <Is_Expander_Present>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	f47f af78 	bne.w	8005cc4 <main+0x30c>
				if(pots_step[j] > 16) pots_step[j] = 1;
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <main+0x434>)
 8005dd6:	5d1b      	ldrb	r3, [r3, r4]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d9a1      	bls.n	8005d22 <main+0x36a>
 8005dde:	4b03      	ldr	r3, [pc, #12]	; (8005dec <main+0x434>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	551a      	strb	r2, [r3, r4]
				max_step = 15;
 8005de4:	f04f 0c0f 	mov.w	ip, #15
 8005de8:	e76e      	b.n	8005cc8 <main+0x310>
 8005dea:	bf00      	nop
 8005dec:	20000274 	.word	0x20000274
 8005df0:	20000278 	.word	0x20000278
 8005df4:	20000250 	.word	0x20000250
 8005df8:	200007f8 	.word	0x200007f8
 8005dfc:	66666667 	.word	0x66666667

08005e00 <delay_us>:

void delay_us(unsigned int us)
{
 8005e00:	b510      	push	{r4, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 8005e06:	a801      	add	r0, sp, #4
 8005e08:	f7fb f986 	bl	8001118 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000000)*us;
 8005e0c:	9b02      	ldr	r3, [sp, #8]
 8005e0e:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <delay_us+0x30>)
 8005e10:	fba2 2303 	umull	r2, r3, r2, r3
 8005e14:	0d9b      	lsrs	r3, r3, #22
 8005e16:	fb04 f303 	mul.w	r3, r4, r3
 8005e1a:	9305      	str	r3, [sp, #20]
	for (; nCount!=0; nCount--);
 8005e1c:	e002      	b.n	8005e24 <delay_us+0x24>
 8005e1e:	9b05      	ldr	r3, [sp, #20]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	9b05      	ldr	r3, [sp, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f9      	bne.n	8005e1e <delay_us+0x1e>
}
 8005e2a:	b006      	add	sp, #24
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	bf00      	nop
 8005e30:	6b5fca6b 	.word	0x6b5fca6b

08005e34 <ADC_IRQHandler>:
{
 8005e34:	b538      	push	{r3, r4, r5, lr}
	if ( ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET) {
 8005e36:	2102      	movs	r1, #2
 8005e38:	4866      	ldr	r0, [pc, #408]	; (8005fd4 <ADC_IRQHandler+0x1a0>)
 8005e3a:	f7fb f838 	bl	8000eae <ADC_GetFlagStatus>
 8005e3e:	2801      	cmp	r0, #1
 8005e40:	d021      	beq.n	8005e86 <ADC_IRQHandler+0x52>
  unsigned char NeedInc = 0; //, i; // i not needed if not using boxcar averaging scheme
 8005e42:	2400      	movs	r4, #0
		if ( ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == SET ) {
 8005e44:	2102      	movs	r1, #2
 8005e46:	4864      	ldr	r0, [pc, #400]	; (8005fd8 <ADC_IRQHandler+0x1a4>)
 8005e48:	f7fb f831 	bl	8000eae <ADC_GetFlagStatus>
 8005e4c:	2801      	cmp	r0, #1
 8005e4e:	f000 8219 	beq.w	8006284 <ADC_IRQHandler+0x450>
	if(Is_Expander_Present())
 8005e52:	f7fb ff19 	bl	8001c88 <Is_Expander_Present>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f000 8236 	beq.w	80062c8 <ADC_IRQHandler+0x494>
	  if (NeedInc) {
 8005e5c:	b194      	cbz	r4, 8005e84 <ADC_IRQHandler+0x50>
		ADC_POT_sel_cnt++;
 8005e5e:	4a5f      	ldr	r2, [pc, #380]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005e60:	7813      	ldrb	r3, [r2, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	7013      	strb	r3, [r2, #0]
		if (ADC_POT_sel_cnt >= 72) {//40
 8005e68:	7813      	ldrb	r3, [r2, #0]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b47      	cmp	r3, #71	; 0x47
 8005e6e:	d902      	bls.n	8005e76 <ADC_IRQHandler+0x42>
			ADC_POT_sel_cnt = 0;
 8005e70:	4613      	mov	r3, r2
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
		ADC_POTS_selector_Ch(ADC_POT_sel_cnt);
 8005e76:	4b59      	ldr	r3, [pc, #356]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005e78:	7818      	ldrb	r0, [r3, #0]
 8005e7a:	f7fb fea3 	bl	8001bc4 <ADC_POTS_selector_Ch>
		delay_us(10); // don't know if there is time for this!
 8005e7e:	200a      	movs	r0, #10
 8005e80:	f7ff ffbe 	bl	8005e00 <delay_us>
};
 8005e84:	bd38      	pop	{r3, r4, r5, pc}
		if (  (ADC_POT_sel_cnt<=15)) {
 8005e86:	4b55      	ldr	r3, [pc, #340]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b0f      	cmp	r3, #15
 8005e8e:	f200 80ab 	bhi.w	8005fe8 <ADC_IRQHandler+0x1b4>
			if ( (Steps[1][ADC_POT_sel_cnt].b.WaitVoltageSlider == 1) ) {
 8005e92:	4b52      	ldr	r3, [pc, #328]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f103 0220 	add.w	r2, r3, #32
 8005e9a:	4b51      	ldr	r3, [pc, #324]	; (8005fe0 <ADC_IRQHandler+0x1ac>)
 8005e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005ea6:	d164      	bne.n	8005f72 <ADC_IRQHandler+0x13e>
			  steps_lp[1][ADC_POT_sel_cnt] += ((uint16_t) ADC1->DR - steps_lp[1][ADC_POT_sel_cnt]) >> 4;
 8005ea8:	4b4a      	ldr	r3, [pc, #296]	; (8005fd4 <ADC_IRQHandler+0x1a0>)
 8005eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eac:	b292      	uxth	r2, r2
 8005eae:	4b4b      	ldr	r3, [pc, #300]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005eb0:	7819      	ldrb	r1, [r3, #0]
 8005eb2:	484c      	ldr	r0, [pc, #304]	; (8005fe4 <ADC_IRQHandler+0x1b0>)
 8005eb4:	3120      	adds	r1, #32
 8005eb6:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8005eba:	1a51      	subs	r1, r2, r1
 8005ebc:	781c      	ldrb	r4, [r3, #0]
 8005ebe:	3420      	adds	r4, #32
 8005ec0:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 8005ec4:	eb02 1221 	add.w	r2, r2, r1, asr #4
 8005ec8:	b292      	uxth	r2, r2
 8005eca:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
			  Steps[1][ADC_POT_sel_cnt].b.VLevel += (steps_lp[1][ADC_POT_sel_cnt] - Steps[1][ADC_POT_sel_cnt].b.VLevel) >> 4;
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	3220      	adds	r2, #32
 8005ed2:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8005ed6:	7818      	ldrb	r0, [r3, #0]
 8005ed8:	4941      	ldr	r1, [pc, #260]	; (8005fe0 <ADC_IRQHandler+0x1ac>)
 8005eda:	3020      	adds	r0, #32
 8005edc:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
 8005ee0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005ee4:	1a10      	subs	r0, r2, r0
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	3320      	adds	r3, #32
 8005eea:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8005eee:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005ef2:	eb02 1220 	add.w	r2, r2, r0, asr #4
 8005ef6:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8005efa:	f362 000b 	bfi	r0, r2, #0, #12
 8005efe:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
			if ( (Steps[0][ADC_POT_sel_cnt].b.WaitVoltageSlider == 1) ) {
 8005f02:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005f04:	781a      	ldrb	r2, [r3, #0]
 8005f06:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <ADC_IRQHandler+0x1ac>)
 8005f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005f12:	d146      	bne.n	8005fa2 <ADC_IRQHandler+0x16e>
			  steps_lp[0][ADC_POT_sel_cnt] += ((uint16_t) ADC1->DR - steps_lp[0][ADC_POT_sel_cnt]) >> 4;
 8005f14:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <ADC_IRQHandler+0x1a0>)
 8005f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	4b30      	ldr	r3, [pc, #192]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005f1c:	7819      	ldrb	r1, [r3, #0]
 8005f1e:	b2c9      	uxtb	r1, r1
 8005f20:	4830      	ldr	r0, [pc, #192]	; (8005fe4 <ADC_IRQHandler+0x1b0>)
 8005f22:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8005f26:	1a51      	subs	r1, r2, r1
 8005f28:	781c      	ldrb	r4, [r3, #0]
 8005f2a:	b2e4      	uxtb	r4, r4
 8005f2c:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 8005f30:	eb02 1221 	add.w	r2, r2, r1, asr #4
 8005f34:	b292      	uxth	r2, r2
 8005f36:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
			  Steps[0][ADC_POT_sel_cnt].b.VLevel += (steps_lp[0][ADC_POT_sel_cnt] - Steps[0][ADC_POT_sel_cnt].b.VLevel) >> 4;
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8005f42:	7818      	ldrb	r0, [r3, #0]
 8005f44:	b2c0      	uxtb	r0, r0
 8005f46:	4926      	ldr	r1, [pc, #152]	; (8005fe0 <ADC_IRQHandler+0x1ac>)
 8005f48:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
 8005f4c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005f50:	1a10      	subs	r0, r2, r0
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8005f5a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005f5e:	eb02 1220 	add.w	r2, r2, r0, asr #4
 8005f62:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8005f66:	f362 000b 	bfi	r0, r2, #0, #12
 8005f6a:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
			NeedInc = 1;
 8005f6e:	2401      	movs	r4, #1
 8005f70:	e03b      	b.n	8005fea <ADC_IRQHandler+0x1b6>
			  if ((unsigned int) (ADC1->DR) >> 4 == (unsigned int) Steps[1][ADC_POT_sel_cnt].b.VLevel >>4 ) {
 8005f72:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <ADC_IRQHandler+0x1a0>)
 8005f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f76:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	3320      	adds	r3, #32
 8005f7c:	4918      	ldr	r1, [pc, #96]	; (8005fe0 <ADC_IRQHandler+0x1ac>)
 8005f7e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005f82:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8005f86:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8005f8a:	d1ba      	bne.n	8005f02 <ADC_IRQHandler+0xce>
						Steps[1][ADC_POT_sel_cnt].b.WaitVoltageSlider = 0;
 8005f8c:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f103 0220 	add.w	r2, r3, #32
 8005f94:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	f36f 324d 	bfc	r2, #13, #1
 8005f9e:	605a      	str	r2, [r3, #4]
 8005fa0:	e7af      	b.n	8005f02 <ADC_IRQHandler+0xce>
  			  if ((unsigned int) (ADC1->DR) >> 4 == (unsigned int) Steps[0][ADC_POT_sel_cnt].b.VLevel >>4 ) {
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <ADC_IRQHandler+0x1a0>)
 8005fa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	490c      	ldr	r1, [pc, #48]	; (8005fe0 <ADC_IRQHandler+0x1ac>)
 8005fae:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005fb2:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8005fb6:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8005fba:	d001      	beq.n	8005fc0 <ADC_IRQHandler+0x18c>
			NeedInc = 1;
 8005fbc:	2401      	movs	r4, #1
 8005fbe:	e014      	b.n	8005fea <ADC_IRQHandler+0x1b6>
						Steps[0][ADC_POT_sel_cnt].b.WaitVoltageSlider = 0;
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <ADC_IRQHandler+0x1a8>)
 8005fc2:	781a      	ldrb	r2, [r3, #0]
 8005fc4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	f36f 324d 	bfc	r2, #13, #1
 8005fce:	605a      	str	r2, [r3, #4]
			NeedInc = 1;
 8005fd0:	2401      	movs	r4, #1
 8005fd2:	e00a      	b.n	8005fea <ADC_IRQHandler+0x1b6>
 8005fd4:	40012000 	.word	0x40012000
 8005fd8:	40012100 	.word	0x40012100
 8005fdc:	2000029c 	.word	0x2000029c
 8005fe0:	200008a4 	.word	0x200008a4
 8005fe4:	20000aa4 	.word	0x20000aa4
  unsigned char NeedInc = 0; //, i; // i not needed if not using boxcar averaging scheme
 8005fe8:	2400      	movs	r4, #0
		if(Is_Expander_Present())
 8005fea:	f7fb fe4d 	bl	8001c88 <Is_Expander_Present>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	f000 8087 	beq.w	8006102 <ADC_IRQHandler+0x2ce>
			if (  (ADC_POT_sel_cnt>=40 && (ADC_POT_sel_cnt<=55))) {
 8005ff4:	4baf      	ldr	r3, [pc, #700]	; (80062b4 <ADC_IRQHandler+0x480>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b27      	cmp	r3, #39	; 0x27
 8005ffc:	d947      	bls.n	800608e <ADC_IRQHandler+0x25a>
 8005ffe:	4bad      	ldr	r3, [pc, #692]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b37      	cmp	r3, #55	; 0x37
 8006006:	d842      	bhi.n	800608e <ADC_IRQHandler+0x25a>
				if ( (Steps[1][ADC_POT_sel_cnt-24].b.WaitVoltageSlider == 1) ) {
 8006008:	4baa      	ldr	r3, [pc, #680]	; (80062b4 <ADC_IRQHandler+0x480>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	f103 0208 	add.w	r2, r3, #8
 8006010:	4ba9      	ldr	r3, [pc, #676]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800601c:	f040 80a1 	bne.w	8006162 <ADC_IRQHandler+0x32e>
					Steps[1][ADC_POT_sel_cnt-24].b.VLevel = ((unsigned int) (ADC1->DR)+(unsigned int) Steps[1][ADC_POT_sel_cnt-24].b.VLevel)/2;
 8006020:	4ba6      	ldr	r3, [pc, #664]	; (80062bc <ADC_IRQHandler+0x488>)
 8006022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006024:	48a3      	ldr	r0, [pc, #652]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006026:	7802      	ldrb	r2, [r0, #0]
 8006028:	49a3      	ldr	r1, [pc, #652]	; (80062b8 <ADC_IRQHandler+0x484>)
 800602a:	3208      	adds	r2, #8
 800602c:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8006030:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006034:	4413      	add	r3, r2
 8006036:	7802      	ldrb	r2, [r0, #0]
 8006038:	f3c3 034b 	ubfx	r3, r3, #1, #12
 800603c:	3208      	adds	r2, #8
 800603e:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
 8006042:	f363 000b 	bfi	r0, r3, #0, #12
 8006046:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
				if ( (Steps[0][ADC_POT_sel_cnt-24].b.WaitVoltageSlider == 1) ) {
 800604a:	4b9a      	ldr	r3, [pc, #616]	; (80062b4 <ADC_IRQHandler+0x480>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f1a3 0218 	sub.w	r2, r3, #24
 8006052:	4b99      	ldr	r3, [pc, #612]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800605e:	f040 8098 	bne.w	8006192 <ADC_IRQHandler+0x35e>
					Steps[0][ADC_POT_sel_cnt-24].b.VLevel = ((unsigned int) (ADC1->DR)+(unsigned int) Steps[0][ADC_POT_sel_cnt-24].b.VLevel)/2;
 8006062:	4b96      	ldr	r3, [pc, #600]	; (80062bc <ADC_IRQHandler+0x488>)
 8006064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006066:	4893      	ldr	r0, [pc, #588]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006068:	7802      	ldrb	r2, [r0, #0]
 800606a:	3a18      	subs	r2, #24
 800606c:	4992      	ldr	r1, [pc, #584]	; (80062b8 <ADC_IRQHandler+0x484>)
 800606e:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8006072:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006076:	4413      	add	r3, r2
 8006078:	7802      	ldrb	r2, [r0, #0]
 800607a:	3a18      	subs	r2, #24
 800607c:	f3c3 034b 	ubfx	r3, r3, #1, #12
 8006080:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
 8006084:	f363 000b 	bfi	r0, r3, #0, #12
 8006088:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
				NeedInc = 1;
 800608c:	2401      	movs	r4, #1
				if ((ADC_POT_sel_cnt>=56) && (ADC_POT_sel_cnt<=71)) {
 800608e:	4b89      	ldr	r3, [pc, #548]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b37      	cmp	r3, #55	; 0x37
 8006096:	d934      	bls.n	8006102 <ADC_IRQHandler+0x2ce>
 8006098:	4b86      	ldr	r3, [pc, #536]	; (80062b4 <ADC_IRQHandler+0x480>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b47      	cmp	r3, #71	; 0x47
 80060a0:	d82f      	bhi.n	8006102 <ADC_IRQHandler+0x2ce>
				  Steps[0][ADC_POT_sel_cnt-40].b.TLevel += ((unsigned int) ADC1->DR - Steps[0][ADC_POT_sel_cnt-40].b.TLevel) >> 4 ;
 80060a2:	4d86      	ldr	r5, [pc, #536]	; (80062bc <ADC_IRQHandler+0x488>)
 80060a4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80060a6:	4883      	ldr	r0, [pc, #524]	; (80062b4 <ADC_IRQHandler+0x480>)
 80060a8:	7802      	ldrb	r2, [r0, #0]
 80060aa:	3a28      	subs	r2, #40	; 0x28
 80060ac:	4b82      	ldr	r3, [pc, #520]	; (80062b8 <ADC_IRQHandler+0x484>)
 80060ae:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80060b2:	f3c4 340b 	ubfx	r4, r4, #12, #12
 80060b6:	1b0c      	subs	r4, r1, r4
 80060b8:	7802      	ldrb	r2, [r0, #0]
 80060ba:	3a28      	subs	r2, #40	; 0x28
 80060bc:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 80060c0:	f3c1 310b 	ubfx	r1, r1, #12, #12
 80060c4:	eb01 1114 	add.w	r1, r1, r4, lsr #4
 80060c8:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80060cc:	f361 3417 	bfi	r4, r1, #12, #12
 80060d0:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
				  Steps[1][ADC_POT_sel_cnt-40].b.TLevel += ((unsigned int) ADC1->DR - Steps[1][ADC_POT_sel_cnt-40].b.TLevel) >> 4 ;
 80060d4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80060d6:	7802      	ldrb	r2, [r0, #0]
 80060d8:	3a08      	subs	r2, #8
 80060da:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80060de:	f3c4 340b 	ubfx	r4, r4, #12, #12
 80060e2:	1b0c      	subs	r4, r1, r4
 80060e4:	7802      	ldrb	r2, [r0, #0]
 80060e6:	3a08      	subs	r2, #8
 80060e8:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 80060ec:	f3c1 310b 	ubfx	r1, r1, #12, #12
 80060f0:	eb01 1114 	add.w	r1, r1, r4, lsr #4
 80060f4:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80060f8:	f361 3017 	bfi	r0, r1, #12, #12
 80060fc:	f843 0032 	str.w	r0, [r3, r2, lsl #3]
				NeedInc = 1;
 8006100:	2401      	movs	r4, #1
		if ((ADC_POT_sel_cnt>=24) && (ADC_POT_sel_cnt<=39)) {
 8006102:	4b6c      	ldr	r3, [pc, #432]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b17      	cmp	r3, #23
 800610a:	f240 80b6 	bls.w	800627a <ADC_IRQHandler+0x446>
 800610e:	4b69      	ldr	r3, [pc, #420]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b27      	cmp	r3, #39	; 0x27
 8006116:	f200 80b0 	bhi.w	800627a <ADC_IRQHandler+0x446>
		  if (Steps[0][ADC_POT_sel_cnt-24].b.WaitTimeSlider) {		  // Are we waiting?
 800611a:	4b66      	ldr	r3, [pc, #408]	; (80062b4 <ADC_IRQHandler+0x480>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f1a3 0218 	sub.w	r2, r3, #24
 8006122:	4b65      	ldr	r3, [pc, #404]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800612e:	d04a      	beq.n	80061c6 <ADC_IRQHandler+0x392>
		    if ((unsigned int)Steps[0][ADC_POT_sel_cnt-24].b.TLevel >> 4 == (unsigned int)(ADC1->DR)>>4) // close enough, stop waiting
 8006130:	4b60      	ldr	r3, [pc, #384]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	3b18      	subs	r3, #24
 8006136:	4a60      	ldr	r2, [pc, #384]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006138:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800613c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006140:	4a5e      	ldr	r2, [pc, #376]	; (80062bc <ADC_IRQHandler+0x488>)
 8006142:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006144:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8006148:	d156      	bne.n	80061f8 <ADC_IRQHandler+0x3c4>
			Steps[0][ADC_POT_sel_cnt-24].b.WaitTimeSlider = 0;
 800614a:	4b5a      	ldr	r3, [pc, #360]	; (80062b4 <ADC_IRQHandler+0x480>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	f1a3 0218 	sub.w	r2, r3, #24
 8006152:	4b59      	ldr	r3, [pc, #356]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	f36f 328e 	bfc	r2, #14, #1
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	e04a      	b.n	80061f8 <ADC_IRQHandler+0x3c4>
						if ( (unsigned int) (ADC1->DR) == (unsigned int) Steps[1][ADC_POT_sel_cnt-24].b.VLevel ) {
 8006162:	4b56      	ldr	r3, [pc, #344]	; (80062bc <ADC_IRQHandler+0x488>)
 8006164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006166:	4b53      	ldr	r3, [pc, #332]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	4952      	ldr	r1, [pc, #328]	; (80062b8 <ADC_IRQHandler+0x484>)
 800616e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8006172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006176:	429a      	cmp	r2, r3
 8006178:	f47f af67 	bne.w	800604a <ADC_IRQHandler+0x216>
							Steps[1][ADC_POT_sel_cnt-24].b.WaitVoltageSlider = 0;
 800617c:	4b4d      	ldr	r3, [pc, #308]	; (80062b4 <ADC_IRQHandler+0x480>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f103 0208 	add.w	r2, r3, #8
 8006184:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	f36f 324d 	bfc	r2, #13, #1
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	e75b      	b.n	800604a <ADC_IRQHandler+0x216>
				if ( (unsigned int) (ADC1->DR) == (unsigned int) Steps[0][ADC_POT_sel_cnt-24].b.VLevel ) {
 8006192:	4b4a      	ldr	r3, [pc, #296]	; (80062bc <ADC_IRQHandler+0x488>)
 8006194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006196:	4b47      	ldr	r3, [pc, #284]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	3b18      	subs	r3, #24
 800619c:	4946      	ldr	r1, [pc, #280]	; (80062b8 <ADC_IRQHandler+0x484>)
 800619e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80061a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d001      	beq.n	80061ae <ADC_IRQHandler+0x37a>
				NeedInc = 1;
 80061aa:	2401      	movs	r4, #1
 80061ac:	e76f      	b.n	800608e <ADC_IRQHandler+0x25a>
							Steps[0][ADC_POT_sel_cnt-24].b.WaitVoltageSlider = 0;
 80061ae:	4b41      	ldr	r3, [pc, #260]	; (80062b4 <ADC_IRQHandler+0x480>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	f1a3 0218 	sub.w	r2, r3, #24
 80061b6:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	f36f 324d 	bfc	r2, #13, #1
 80061c0:	605a      	str	r2, [r3, #4]
				NeedInc = 1;
 80061c2:	2401      	movs	r4, #1
 80061c4:	e763      	b.n	800608e <ADC_IRQHandler+0x25a>
		      Steps[0][ADC_POT_sel_cnt-24].b.TLevel += ((unsigned int) ADC1->DR - Steps[0][ADC_POT_sel_cnt-24].b.TLevel) >> 4 ;
 80061c6:	4b3d      	ldr	r3, [pc, #244]	; (80062bc <ADC_IRQHandler+0x488>)
 80061c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061ca:	4c3a      	ldr	r4, [pc, #232]	; (80062b4 <ADC_IRQHandler+0x480>)
 80061cc:	7823      	ldrb	r3, [r4, #0]
 80061ce:	3b18      	subs	r3, #24
 80061d0:	4939      	ldr	r1, [pc, #228]	; (80062b8 <ADC_IRQHandler+0x484>)
 80061d2:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 80061d6:	f3c0 300b 	ubfx	r0, r0, #12, #12
 80061da:	1a10      	subs	r0, r2, r0
 80061dc:	7823      	ldrb	r3, [r4, #0]
 80061de:	3b18      	subs	r3, #24
 80061e0:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80061e4:	f3c2 320b 	ubfx	r2, r2, #12, #12
 80061e8:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 80061ec:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 80061f0:	f362 3017 	bfi	r0, r2, #12, #12
 80061f4:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
		  if (Steps[1][ADC_POT_sel_cnt-24].b.WaitTimeSlider) {		  // Are we waiting?
 80061f8:	4b2e      	ldr	r3, [pc, #184]	; (80062b4 <ADC_IRQHandler+0x480>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f103 0208 	add.w	r2, r3, #8
 8006200:	4b2d      	ldr	r3, [pc, #180]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800620c:	d01b      	beq.n	8006246 <ADC_IRQHandler+0x412>
		    if ((unsigned int)Steps[1][ADC_POT_sel_cnt-24].b.TLevel >> 4 == (unsigned int)(ADC1->DR)>>4) // close enough, stop waiting
 800620e:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	3308      	adds	r3, #8
 8006214:	4a28      	ldr	r2, [pc, #160]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006216:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800621a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800621e:	4a27      	ldr	r2, [pc, #156]	; (80062bc <ADC_IRQHandler+0x488>)
 8006220:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006222:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8006226:	d001      	beq.n	800622c <ADC_IRQHandler+0x3f8>
		  NeedInc = 1;
 8006228:	2401      	movs	r4, #1
 800622a:	e026      	b.n	800627a <ADC_IRQHandler+0x446>
			Steps[1][ADC_POT_sel_cnt-24].b.WaitTimeSlider = 0;
 800622c:	4b21      	ldr	r3, [pc, #132]	; (80062b4 <ADC_IRQHandler+0x480>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f103 0208 	add.w	r2, r3, #8
 8006234:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	f36f 328e 	bfc	r2, #14, #1
 8006240:	605a      	str	r2, [r3, #4]
		  NeedInc = 1;
 8006242:	2401      	movs	r4, #1
 8006244:	e019      	b.n	800627a <ADC_IRQHandler+0x446>
		      Steps[1][ADC_POT_sel_cnt-24].b.TLevel += ((unsigned int) ADC1->DR - Steps[1][ADC_POT_sel_cnt-24].b.TLevel) >> 4 ;
 8006246:	4b1d      	ldr	r3, [pc, #116]	; (80062bc <ADC_IRQHandler+0x488>)
 8006248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800624a:	4c1a      	ldr	r4, [pc, #104]	; (80062b4 <ADC_IRQHandler+0x480>)
 800624c:	7823      	ldrb	r3, [r4, #0]
 800624e:	491a      	ldr	r1, [pc, #104]	; (80062b8 <ADC_IRQHandler+0x484>)
 8006250:	3308      	adds	r3, #8
 8006252:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8006256:	f3c0 300b 	ubfx	r0, r0, #12, #12
 800625a:	1a10      	subs	r0, r2, r0
 800625c:	7823      	ldrb	r3, [r4, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8006264:	f3c2 320b 	ubfx	r2, r2, #12, #12
 8006268:	eb02 1210 	add.w	r2, r2, r0, lsr #4
 800626c:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8006270:	f362 3017 	bfi	r0, r2, #12, #12
 8006274:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
		  NeedInc = 1;
 8006278:	2401      	movs	r4, #1
		ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
 800627a:	2102      	movs	r1, #2
 800627c:	480f      	ldr	r0, [pc, #60]	; (80062bc <ADC_IRQHandler+0x488>)
 800627e:	f7fa fe1d 	bl	8000ebc <ADC_ClearFlag>
 8006282:	e5df      	b.n	8005e44 <ADC_IRQHandler+0x10>
		if ((ADC_POT_sel_cnt>=16) && (ADC_POT_sel_cnt<=23)) {
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b0f      	cmp	r3, #15
 800628c:	d90d      	bls.n	80062aa <ADC_IRQHandler+0x476>
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <ADC_IRQHandler+0x480>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b17      	cmp	r3, #23
 8006296:	d808      	bhi.n	80062aa <ADC_IRQHandler+0x476>
 			AddData[ADC_POT_sel_cnt-16] = (unsigned int)(ADC2->DR);
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <ADC_IRQHandler+0x480>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	3b10      	subs	r3, #16
 800629e:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <ADC_IRQHandler+0x48c>)
 80062a0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80062a2:	4a08      	ldr	r2, [pc, #32]	; (80062c4 <ADC_IRQHandler+0x490>)
 80062a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NeedInc = 1;
 80062a8:	2401      	movs	r4, #1
		ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
 80062aa:	2102      	movs	r1, #2
 80062ac:	4804      	ldr	r0, [pc, #16]	; (80062c0 <ADC_IRQHandler+0x48c>)
 80062ae:	f7fa fe05 	bl	8000ebc <ADC_ClearFlag>
 80062b2:	e5ce      	b.n	8005e52 <ADC_IRQHandler+0x1e>
 80062b4:	2000029c 	.word	0x2000029c
 80062b8:	200008a4 	.word	0x200008a4
 80062bc:	40012000 	.word	0x40012000
 80062c0:	40012100 	.word	0x40012100
 80062c4:	200007f8 	.word	0x200007f8
	  if (NeedInc) {
 80062c8:	2c00      	cmp	r4, #0
 80062ca:	f43f addb 	beq.w	8005e84 <ADC_IRQHandler+0x50>
		ADC_POT_sel_cnt++;
 80062ce:	4a0a      	ldr	r2, [pc, #40]	; (80062f8 <ADC_IRQHandler+0x4c4>)
 80062d0:	7813      	ldrb	r3, [r2, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	7013      	strb	r3, [r2, #0]
		if (ADC_POT_sel_cnt >= 40) {//40
 80062d8:	7813      	ldrb	r3, [r2, #0]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b27      	cmp	r3, #39	; 0x27
 80062de:	d902      	bls.n	80062e6 <ADC_IRQHandler+0x4b2>
			ADC_POT_sel_cnt = 0;
 80062e0:	4613      	mov	r3, r2
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
		ADC_POTS_selector_Ch(ADC_POT_sel_cnt);
 80062e6:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <ADC_IRQHandler+0x4c4>)
 80062e8:	7818      	ldrb	r0, [r3, #0]
 80062ea:	f7fb fc6b 	bl	8001bc4 <ADC_POTS_selector_Ch>
		delay_us(10);
 80062ee:	200a      	movs	r0, #10
 80062f0:	f7ff fd86 	bl	8005e00 <delay_us>
};
 80062f4:	e5c6      	b.n	8005e84 <ADC_IRQHandler+0x50>
 80062f6:	bf00      	nop
 80062f8:	2000029c 	.word	0x2000029c
 80062fc:	00000000 	.word	0x00000000

08006300 <delay_ns>:

void delay_ns(unsigned int ns)
{
 8006300:	b510      	push	{r4, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 8006306:	a801      	add	r0, sp, #4
 8006308:	f7fa ff06 	bl	8001118 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000000000)*ns;
 800630c:	a30a      	add	r3, pc, #40	; (adr r3, 8006338 <delay_ns+0x38>)
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	9802      	ldr	r0, [sp, #8]
 8006314:	2100      	movs	r1, #0
 8006316:	f7fa fb4d 	bl	80009b4 <__aeabi_ldivmod>
 800631a:	fb04 f000 	mul.w	r0, r4, r0
 800631e:	9005      	str	r0, [sp, #20]
	for (; nCount!=0; nCount--);
 8006320:	e002      	b.n	8006328 <delay_ns+0x28>
 8006322:	9b05      	ldr	r3, [sp, #20]
 8006324:	3b01      	subs	r3, #1
 8006326:	9305      	str	r3, [sp, #20]
 8006328:	9b05      	ldr	r3, [sp, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f9      	bne.n	8006322 <delay_ns+0x22>
}
 800632e:	b006      	add	sp, #24
 8006330:	bd10      	pop	{r4, pc}
 8006332:	bf00      	nop
 8006334:	f3af 8000 	nop.w
 8006338:	540be400 	.word	0x540be400
 800633c:	00000002 	.word	0x00000002

08006340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006346:	e003      	b.n	8006350 <LoopCopyDataInit>

08006348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800634a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800634c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800634e:	3104      	adds	r1, #4

08006350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006350:	480b      	ldr	r0, [pc, #44]	; (8006380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006358:	d3f6      	bcc.n	8006348 <CopyDataInit>
  ldr  r2, =_sbss
 800635a:	4a0b      	ldr	r2, [pc, #44]	; (8006388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800635c:	e002      	b.n	8006364 <LoopFillZerobss>

0800635e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800635e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006360:	f842 3b04 	str.w	r3, [r2], #4

08006364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006368:	d3f9      	bcc.n	800635e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800636a:	f000 f8a5 	bl	80064b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800636e:	f000 f9df 	bl	8006730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006372:	f7ff fb21 	bl	80059b8 <main>
  bx  lr    
 8006376:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006378:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800637c:	080067f0 	.word	0x080067f0
  ldr  r0, =_sdata
 8006380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006384:	2000027c 	.word	0x2000027c
  ldr  r2, =_sbss
 8006388:	20000280 	.word	0x20000280
  ldr  r3, = _ebss
 800638c:	20000b34 	.word	0x20000b34

08006390 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006390:	e7fe      	b.n	8006390 <CAN1_RX0_IRQHandler>

08006392 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006392:	4770      	bx	lr

08006394 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006394:	e7fe      	b.n	8006394 <HardFault_Handler>

08006396 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006396:	e7fe      	b.n	8006396 <MemManage_Handler>

08006398 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006398:	e7fe      	b.n	8006398 <BusFault_Handler>

0800639a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800639a:	e7fe      	b.n	800639a <UsageFault_Handler>

0800639c <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800639c:	4770      	bx	lr

0800639e <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 800639e:	4770      	bx	lr

080063a0 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80063a0:	4770      	bx	lr

080063a2 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
/*  TimingDelay_Decrement(); */
}
 80063a2:	4770      	bx	lr

080063a4 <_write>:
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	 int i=0;
	  for(i=0 ; i<len ; i++)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4293      	cmp	r3, r2
 80063a8:	da22      	bge.n	80063f0 <_write+0x4c>
{
 80063aa:	b410      	push	{r4}
 80063ac:	e003      	b.n	80063b6 <_write+0x12>
	  for(i=0 ; i<len ; i++)
 80063ae:	3301      	adds	r3, #1
	    ITM_SendChar((*ptr++));
 80063b0:	4621      	mov	r1, r4
	  for(i=0 ; i<len ; i++)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	da18      	bge.n	80063e8 <_write+0x44>
	    ITM_SendChar((*ptr++));
 80063b6:	1c4c      	adds	r4, r1, #1
 80063b8:	7808      	ldrb	r0, [r1, #0]

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80063ba:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80063be:	f8d1 1e80 	ldr.w	r1, [r1, #3712]	; 0xe80
 80063c2:	f011 0f01 	tst.w	r1, #1
 80063c6:	d0f2      	beq.n	80063ae <_write+0xa>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 80063c8:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80063cc:	f8d1 1e00 	ldr.w	r1, [r1, #3584]	; 0xe00
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80063d0:	f011 0f01 	tst.w	r1, #1
 80063d4:	d0eb      	beq.n	80063ae <_write+0xa>
  {
    while (ITM->PORT[0].u32 == 0);
 80063d6:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80063da:	6809      	ldr	r1, [r1, #0]
 80063dc:	2900      	cmp	r1, #0
 80063de:	d0fa      	beq.n	80063d6 <_write+0x32>
    ITM->PORT[0].u8 = (uint8_t) ch;
 80063e0:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80063e4:	7008      	strb	r0, [r1, #0]
 80063e6:	e7e2      	b.n	80063ae <_write+0xa>
	  return len;

	errno = ENOSYS;
	return -1;
}
 80063e8:	4610      	mov	r0, r2
 80063ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	4610      	mov	r0, r2
 80063f2:	4770      	bx	lr

080063f4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80063f4:	b082      	sub	sp, #8
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	9300      	str	r3, [sp, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80063fc:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <SetSysClock+0xb4>)
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8006406:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <SetSysClock+0xb4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	9300      	str	r3, [sp, #0]
    StartUpCounter++;
 8006410:	9b01      	ldr	r3, [sp, #4]
 8006412:	3301      	adds	r3, #1
 8006414:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006416:	9b00      	ldr	r3, [sp, #0]
 8006418:	b91b      	cbnz	r3, 8006422 <SetSysClock+0x2e>
 800641a:	9b01      	ldr	r3, [sp, #4]
 800641c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006420:	d1f1      	bne.n	8006406 <SetSysClock+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8006422:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <SetSysClock+0xb4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800642a:	d006      	beq.n	800643a <SetSysClock+0x46>
  {
    HSEStatus = (uint32_t)0x01;
 800642c:	2301      	movs	r3, #1
 800642e:	9300      	str	r3, [sp, #0]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 8006430:	9b00      	ldr	r3, [sp, #0]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d004      	beq.n	8006440 <SetSysClock+0x4c>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8006436:	b002      	add	sp, #8
 8006438:	4770      	bx	lr
    HSEStatus = (uint32_t)0x00;
 800643a:	2300      	movs	r3, #0
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	e7f7      	b.n	8006430 <SetSysClock+0x3c>
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <SetSysClock+0xb4>)
 8006442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006444:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006448:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800644a:	4918      	ldr	r1, [pc, #96]	; (80064ac <SetSysClock+0xb8>)
 800644c:	680a      	ldr	r2, [r1, #0]
 800644e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006452:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800645e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8006466:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8006468:	4a11      	ldr	r2, [pc, #68]	; (80064b0 <SetSysClock+0xbc>)
 800646a:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006472:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006474:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <SetSysClock+0xb4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800647c:	d0fa      	beq.n	8006474 <SetSysClock+0x80>
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <SetSysClock+0xc0>)
 8006480:	f240 7205 	movw	r2, #1797	; 0x705
 8006484:	601a      	str	r2, [r3, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006486:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	f022 0203 	bic.w	r2, r2, #3
 8006490:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	f042 0202 	orr.w	r2, r2, #2
 8006498:	609a      	str	r2, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800649a:	4b03      	ldr	r3, [pc, #12]	; (80064a8 <SetSysClock+0xb4>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 030c 	and.w	r3, r3, #12
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d1f9      	bne.n	800649a <SetSysClock+0xa6>
 80064a6:	e7c6      	b.n	8006436 <SetSysClock+0x42>
 80064a8:	40023800 	.word	0x40023800
 80064ac:	40007000 	.word	0x40007000
 80064b0:	07405419 	.word	0x07405419
 80064b4:	40023c00 	.word	0x40023c00

080064b8 <SystemInit>:
{
 80064b8:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064ba:	4c10      	ldr	r4, [pc, #64]	; (80064fc <SystemInit+0x44>)
 80064bc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80064c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <SystemInit+0x48>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80064d2:	2100      	movs	r1, #0
 80064d4:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80064dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064e0:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80064e2:	4a08      	ldr	r2, [pc, #32]	; (8006504 <SystemInit+0x4c>)
 80064e4:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064ec:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 80064ee:	60d9      	str	r1, [r3, #12]
  SetSysClock();
 80064f0:	f7ff ff80 	bl	80063f4 <SetSysClock>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064f8:	60a3      	str	r3, [r4, #8]
}
 80064fa:	bd10      	pop	{r4, pc}
 80064fc:	e000ed00 	.word	0xe000ed00
 8006500:	40023800 	.word	0x40023800
 8006504:	24003010 	.word	0x24003010

08006508 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8006508:	b470      	push	{r4, r5, r6}
	int div = 1;
 800650a:	2301      	movs	r3, #1
	while (d/div >= base)
 800650c:	e001      	b.n	8006512 <ts_itoa+0xa>
		div *= base;
 800650e:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 8006512:	fbb1 f4f3 	udiv	r4, r1, r3
 8006516:	4294      	cmp	r4, r2
 8006518:	d2f9      	bcs.n	800650e <ts_itoa+0x6>
 800651a:	e004      	b.n	8006526 <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 800651c:	6805      	ldr	r5, [r0, #0]
 800651e:	1c6e      	adds	r6, r5, #1
 8006520:	6006      	str	r6, [r0, #0]
 8006522:	3430      	adds	r4, #48	; 0x30
 8006524:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 8006526:	b16b      	cbz	r3, 8006544 <ts_itoa+0x3c>
		int num = d/div;
 8006528:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 800652c:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 8006530:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 8006534:	2c09      	cmp	r4, #9
 8006536:	ddf1      	ble.n	800651c <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 8006538:	6805      	ldr	r5, [r0, #0]
 800653a:	1c6e      	adds	r6, r5, #1
 800653c:	6006      	str	r6, [r0, #0]
 800653e:	3437      	adds	r4, #55	; 0x37
 8006540:	702c      	strb	r4, [r5, #0]
 8006542:	e7f0      	b.n	8006526 <ts_itoa+0x1e>
	}
}
 8006544:	bc70      	pop	{r4, r5, r6}
 8006546:	4770      	bx	lr

08006548 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8006548:	b530      	push	{r4, r5, lr}
 800654a:	b083      	sub	sp, #12
 800654c:	9001      	str	r0, [sp, #4]
 800654e:	460c      	mov	r4, r1
 8006550:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 8006552:	4605      	mov	r5, r0
	while(*fmt)
 8006554:	e03e      	b.n	80065d4 <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 8006556:	7863      	ldrb	r3, [r4, #1]
 8006558:	2b64      	cmp	r3, #100	; 0x64
 800655a:	d01c      	beq.n	8006596 <ts_formatstring+0x4e>
 800655c:	d90d      	bls.n	800657a <ts_formatstring+0x32>
 800655e:	2b73      	cmp	r3, #115	; 0x73
 8006560:	d04a      	beq.n	80065f8 <ts_formatstring+0xb0>
 8006562:	d916      	bls.n	8006592 <ts_formatstring+0x4a>
 8006564:	2b75      	cmp	r3, #117	; 0x75
 8006566:	d121      	bne.n	80065ac <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8006568:	9b00      	ldr	r3, [sp, #0]
 800656a:	1d1a      	adds	r2, r3, #4
 800656c:	9200      	str	r2, [sp, #0]
 800656e:	220a      	movs	r2, #10
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	a801      	add	r0, sp, #4
 8006574:	f7ff ffc8 	bl	8006508 <ts_itoa>
				break;
 8006578:	e02b      	b.n	80065d2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 800657a:	2b58      	cmp	r3, #88	; 0x58
 800657c:	d018      	beq.n	80065b0 <ts_formatstring+0x68>
 800657e:	2b63      	cmp	r3, #99	; 0x63
 8006580:	d01f      	beq.n	80065c2 <ts_formatstring+0x7a>
 8006582:	2b25      	cmp	r3, #37	; 0x25
 8006584:	d125      	bne.n	80065d2 <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	9201      	str	r2, [sp, #4]
 800658c:	2225      	movs	r2, #37	; 0x25
 800658e:	701a      	strb	r2, [r3, #0]
				  break;
 8006590:	e01f      	b.n	80065d2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 8006592:	2b69      	cmp	r3, #105	; 0x69
 8006594:	d11d      	bne.n	80065d2 <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 8006596:	9b00      	ldr	r3, [sp, #0]
 8006598:	1d1a      	adds	r2, r3, #4
 800659a:	9200      	str	r2, [sp, #0]
 800659c:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 800659e:	2900      	cmp	r1, #0
 80065a0:	db23      	blt.n	80065ea <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 80065a2:	220a      	movs	r2, #10
 80065a4:	a801      	add	r0, sp, #4
 80065a6:	f7ff ffaf 	bl	8006508 <ts_itoa>
				break;
 80065aa:	e012      	b.n	80065d2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 80065ac:	2b78      	cmp	r3, #120	; 0x78
 80065ae:	d110      	bne.n	80065d2 <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 80065b0:	9b00      	ldr	r3, [sp, #0]
 80065b2:	1d1a      	adds	r2, r3, #4
 80065b4:	9200      	str	r2, [sp, #0]
 80065b6:	2210      	movs	r2, #16
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	a801      	add	r0, sp, #4
 80065bc:	f7ff ffa4 	bl	8006508 <ts_itoa>
				break;
 80065c0:	e007      	b.n	80065d2 <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	9200      	str	r2, [sp, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	9b01      	ldr	r3, [sp, #4]
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	9101      	str	r1, [sp, #4]
 80065d0:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 80065d2:	3402      	adds	r4, #2
	while(*fmt)
 80065d4:	7823      	ldrb	r3, [r4, #0]
 80065d6:	b1f3      	cbz	r3, 8006616 <ts_formatstring+0xce>
		if (*fmt == '%')
 80065d8:	2b25      	cmp	r3, #37	; 0x25
 80065da:	d0bc      	beq.n	8006556 <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	9201      	str	r2, [sp, #4]
 80065e2:	7822      	ldrb	r2, [r4, #0]
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	3401      	adds	r4, #1
 80065e8:	e7f4      	b.n	80065d4 <ts_formatstring+0x8c>
						val *= -1;
 80065ea:	4249      	negs	r1, r1
						*buf++ = '-';
 80065ec:	9b01      	ldr	r3, [sp, #4]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	9201      	str	r2, [sp, #4]
 80065f2:	222d      	movs	r2, #45	; 0x2d
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	e7d4      	b.n	80065a2 <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 80065f8:	9b00      	ldr	r3, [sp, #0]
 80065fa:	1d1a      	adds	r2, r3, #4
 80065fc:	9200      	str	r2, [sp, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 8006600:	e005      	b.n	800660e <ts_formatstring+0xc6>
						*buf++ = *arg++;
 8006602:	9a01      	ldr	r2, [sp, #4]
 8006604:	1c51      	adds	r1, r2, #1
 8006606:	9101      	str	r1, [sp, #4]
 8006608:	7819      	ldrb	r1, [r3, #0]
 800660a:	7011      	strb	r1, [r2, #0]
 800660c:	3301      	adds	r3, #1
					while (*arg)
 800660e:	781a      	ldrb	r2, [r3, #0]
 8006610:	2a00      	cmp	r2, #0
 8006612:	d1f6      	bne.n	8006602 <ts_formatstring+0xba>
 8006614:	e7dd      	b.n	80065d2 <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800661c:	9801      	ldr	r0, [sp, #4]
 800661e:	1b40      	subs	r0, r0, r5
 8006620:	b003      	add	sp, #12
 8006622:	bd30      	pop	{r4, r5, pc}

08006624 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8006624:	b082      	sub	sp, #8
 8006626:	4603      	mov	r3, r0
 8006628:	9101      	str	r1, [sp, #4]
	int length = 0;
 800662a:	2000      	movs	r0, #0
	while (*fmt)
 800662c:	e01d      	b.n	800666a <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 800662e:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	3b58      	subs	r3, #88	; 0x58
 8006634:	2b20      	cmp	r3, #32
 8006636:	d837      	bhi.n	80066a8 <ts_formatlength+0x84>
 8006638:	e8df f003 	tbb	[pc, r3]
 800663c:	36363630 	.word	0x36363630
 8006640:	36363636 	.word	0x36363636
 8006644:	11363636 	.word	0x11363636
 8006648:	3636361d 	.word	0x3636361d
 800664c:	36361d36 	.word	0x36361d36
 8006650:	36363636 	.word	0x36363636
 8006654:	23363636 	.word	0x23363636
 8006658:	36361d36 	.word	0x36361d36
 800665c:	30          	.byte	0x30
 800665d:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	3304      	adds	r3, #4
 8006662:	9301      	str	r3, [sp, #4]
				  ++length;
 8006664:	3001      	adds	r0, #1
			++fmt;
 8006666:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 8006668:	3301      	adds	r3, #1
	while (*fmt)
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	b1fa      	cbz	r2, 80066ae <ts_formatlength+0x8a>
		if (*fmt == '%')
 800666e:	2a25      	cmp	r2, #37	; 0x25
 8006670:	d0dd      	beq.n	800662e <ts_formatlength+0xa>
			++length;
 8006672:	3001      	adds	r0, #1
 8006674:	e7f8      	b.n	8006668 <ts_formatlength+0x44>
				  length += 11;
 8006676:	300b      	adds	r0, #11
				  va_arg(va, int);
 8006678:	9b01      	ldr	r3, [sp, #4]
 800667a:	3304      	adds	r3, #4
 800667c:	9301      	str	r3, [sp, #4]
			++fmt;
 800667e:	460b      	mov	r3, r1
 8006680:	e7f2      	b.n	8006668 <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 8006682:	9b01      	ldr	r3, [sp, #4]
 8006684:	1d1a      	adds	r2, r3, #4
 8006686:	9201      	str	r2, [sp, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 800668a:	e001      	b.n	8006690 <ts_formatlength+0x6c>
			  			  ++length;
 800668c:	3001      	adds	r0, #1
			  		  while (*str++)
 800668e:	4613      	mov	r3, r2
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f9      	bne.n	800668c <ts_formatlength+0x68>
			++fmt;
 8006698:	460b      	mov	r3, r1
 800669a:	e7e5      	b.n	8006668 <ts_formatlength+0x44>
				  length += 8;
 800669c:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 800669e:	9b01      	ldr	r3, [sp, #4]
 80066a0:	3304      	adds	r3, #4
 80066a2:	9301      	str	r3, [sp, #4]
			++fmt;
 80066a4:	460b      	mov	r3, r1
 80066a6:	e7df      	b.n	8006668 <ts_formatlength+0x44>
				  ++length;
 80066a8:	3001      	adds	r0, #1
			++fmt;
 80066aa:	460b      	mov	r3, r1
				  break;
 80066ac:	e7dc      	b.n	8006668 <ts_formatlength+0x44>
	}
	return length;
}
 80066ae:	b002      	add	sp, #8
 80066b0:	4770      	bx	lr

080066b2 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80066b2:	b40f      	push	{r0, r1, r2, r3}
 80066b4:	b5b0      	push	{r4, r5, r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	f107 0418 	add.w	r4, r7, #24
 80066be:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 80066c2:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 80066c4:	4621      	mov	r1, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	f7ff ffac 	bl	8006624 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 80066cc:	3007      	adds	r0, #7
 80066ce:	f020 0007 	bic.w	r0, r0, #7
 80066d2:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 80066d6:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 80066d8:	4622      	mov	r2, r4
 80066da:	4629      	mov	r1, r5
 80066dc:	4668      	mov	r0, sp
 80066de:	f7ff ff33 	bl	8006548 <ts_formatstring>
		length = _write(1, buf, length);
 80066e2:	4602      	mov	r2, r0
 80066e4:	4669      	mov	r1, sp
 80066e6:	2001      	movs	r0, #1
 80066e8:	f7ff fe5c 	bl	80063a4 <_write>
		va_end(va);
	}
	return length;
}
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80066f4:	b004      	add	sp, #16
 80066f6:	4770      	bx	lr

080066f8 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4605      	mov	r5, r0
	int length = strlen(s);
 80066fc:	f7f9 fd64 	bl	80001c8 <strlen>
 8006700:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 8006702:	4602      	mov	r2, r0
 8006704:	4629      	mov	r1, r5
 8006706:	2001      	movs	r0, #1
 8006708:	f7ff fe4c 	bl	80063a4 <_write>
 800670c:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800670e:	2201      	movs	r2, #1
 8006710:	4906      	ldr	r1, [pc, #24]	; (800672c <puts+0x34>)
 8006712:	4610      	mov	r0, r2
 8006714:	f7ff fe46 	bl	80063a4 <_write>
 8006718:	4428      	add	r0, r5

	if (numbytes == (length+1))
 800671a:	3401      	adds	r4, #1
 800671c:	4284      	cmp	r4, r0
 800671e:	d101      	bne.n	8006724 <puts+0x2c>
	{
		res = 0;
 8006720:	2000      	movs	r0, #0
	{
		res = EOF;
	}

	return res;
}
 8006722:	bd38      	pop	{r3, r4, r5, pc}
		res = EOF;
 8006724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return res;
 8006728:	e7fb      	b.n	8006722 <puts+0x2a>
 800672a:	bf00      	nop
 800672c:	080067dc 	.word	0x080067dc

08006730 <__libc_init_array>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	4e0d      	ldr	r6, [pc, #52]	; (8006768 <__libc_init_array+0x38>)
 8006734:	4c0d      	ldr	r4, [pc, #52]	; (800676c <__libc_init_array+0x3c>)
 8006736:	1ba4      	subs	r4, r4, r6
 8006738:	10a4      	asrs	r4, r4, #2
 800673a:	2500      	movs	r5, #0
 800673c:	42a5      	cmp	r5, r4
 800673e:	d109      	bne.n	8006754 <__libc_init_array+0x24>
 8006740:	4e0b      	ldr	r6, [pc, #44]	; (8006770 <__libc_init_array+0x40>)
 8006742:	4c0c      	ldr	r4, [pc, #48]	; (8006774 <__libc_init_array+0x44>)
 8006744:	f000 f818 	bl	8006778 <_init>
 8006748:	1ba4      	subs	r4, r4, r6
 800674a:	10a4      	asrs	r4, r4, #2
 800674c:	2500      	movs	r5, #0
 800674e:	42a5      	cmp	r5, r4
 8006750:	d105      	bne.n	800675e <__libc_init_array+0x2e>
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006758:	4798      	blx	r3
 800675a:	3501      	adds	r5, #1
 800675c:	e7ee      	b.n	800673c <__libc_init_array+0xc>
 800675e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006762:	4798      	blx	r3
 8006764:	3501      	adds	r5, #1
 8006766:	e7f2      	b.n	800674e <__libc_init_array+0x1e>
 8006768:	080067e8 	.word	0x080067e8
 800676c:	080067e8 	.word	0x080067e8
 8006770:	080067e8 	.word	0x080067e8
 8006774:	080067ec 	.word	0x080067ec

08006778 <_init>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr

08006784 <_fini>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr
