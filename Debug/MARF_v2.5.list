
MARF_v2.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006558  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000027c  20000000  08006700  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002027c  2**0
                  CONTENTS
  8 .bss          000009b0  20000280  20000280  00020280  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  20000c30  20000c30  00020280  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013668  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002de8  00000000  00000000  00033914  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000063a0  00000000  00000000  000366fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df0  00000000  00000000  0003caa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  0003d890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014271  00000000  00000000  0003e550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d15b  00000000  00000000  000527c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00064d06  00000000  00000000  0005f91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002160  00000000  00000000  000c46a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000280 	.word	0x20000280
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066c8 	.word	0x080066c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000284 	.word	0x20000284
 80001c4:	080066c8 	.word	0x080066c8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_ldivmod>:
 80009b4:	b97b      	cbnz	r3, 80009d6 <__aeabi_ldivmod+0x22>
 80009b6:	b972      	cbnz	r2, 80009d6 <__aeabi_ldivmod+0x22>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bfbe      	ittt	lt
 80009bc:	2000      	movlt	r0, #0
 80009be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80009c2:	e006      	blt.n	80009d2 <__aeabi_ldivmod+0x1e>
 80009c4:	bf08      	it	eq
 80009c6:	2800      	cmpeq	r0, #0
 80009c8:	bf1c      	itt	ne
 80009ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80009ce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d2:	f000 b9a5 	b.w	8000d20 <__aeabi_idiv0>
 80009d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80009da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009de:	2900      	cmp	r1, #0
 80009e0:	db09      	blt.n	80009f6 <__aeabi_ldivmod+0x42>
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db1a      	blt.n	8000a1c <__aeabi_ldivmod+0x68>
 80009e6:	f000 f835 	bl	8000a54 <__udivmoddi4>
 80009ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f2:	b004      	add	sp, #16
 80009f4:	4770      	bx	lr
 80009f6:	4240      	negs	r0, r0
 80009f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db1b      	blt.n	8000a38 <__aeabi_ldivmod+0x84>
 8000a00:	f000 f828 	bl	8000a54 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4240      	negs	r0, r0
 8000a10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a14:	4252      	negs	r2, r2
 8000a16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a1a:	4770      	bx	lr
 8000a1c:	4252      	negs	r2, r2
 8000a1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a22:	f000 f817 	bl	8000a54 <__udivmoddi4>
 8000a26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a2e:	b004      	add	sp, #16
 8000a30:	4240      	negs	r0, r0
 8000a32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a36:	4770      	bx	lr
 8000a38:	4252      	negs	r2, r2
 8000a3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a3e:	f000 f809 	bl	8000a54 <__udivmoddi4>
 8000a42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a4a:	b004      	add	sp, #16
 8000a4c:	4252      	negs	r2, r2
 8000a4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9e08      	ldr	r6, [sp, #32]
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	4688      	mov	r8, r1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d14b      	bne.n	8000afa <__udivmoddi4+0xa6>
 8000a62:	428a      	cmp	r2, r1
 8000a64:	4615      	mov	r5, r2
 8000a66:	d967      	bls.n	8000b38 <__udivmoddi4+0xe4>
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	b14a      	cbz	r2, 8000a82 <__udivmoddi4+0x2e>
 8000a6e:	f1c2 0720 	rsb	r7, r2, #32
 8000a72:	fa01 f302 	lsl.w	r3, r1, r2
 8000a76:	fa20 f707 	lsr.w	r7, r0, r7
 8000a7a:	4095      	lsls	r5, r2
 8000a7c:	ea47 0803 	orr.w	r8, r7, r3
 8000a80:	4094      	lsls	r4, r2
 8000a82:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a86:	0c23      	lsrs	r3, r4, #16
 8000a88:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a8c:	fa1f fc85 	uxth.w	ip, r5
 8000a90:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a98:	fb07 f10c 	mul.w	r1, r7, ip
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	d909      	bls.n	8000ab4 <__udivmoddi4+0x60>
 8000aa0:	18eb      	adds	r3, r5, r3
 8000aa2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aa6:	f080 811b 	bcs.w	8000ce0 <__udivmoddi4+0x28c>
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	f240 8118 	bls.w	8000ce0 <__udivmoddi4+0x28c>
 8000ab0:	3f02      	subs	r7, #2
 8000ab2:	442b      	add	r3, r5
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000abc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ac8:	45a4      	cmp	ip, r4
 8000aca:	d909      	bls.n	8000ae0 <__udivmoddi4+0x8c>
 8000acc:	192c      	adds	r4, r5, r4
 8000ace:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ad2:	f080 8107 	bcs.w	8000ce4 <__udivmoddi4+0x290>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	f240 8104 	bls.w	8000ce4 <__udivmoddi4+0x290>
 8000adc:	3802      	subs	r0, #2
 8000ade:	442c      	add	r4, r5
 8000ae0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ae4:	eba4 040c 	sub.w	r4, r4, ip
 8000ae8:	2700      	movs	r7, #0
 8000aea:	b11e      	cbz	r6, 8000af4 <__udivmoddi4+0xa0>
 8000aec:	40d4      	lsrs	r4, r2
 8000aee:	2300      	movs	r3, #0
 8000af0:	e9c6 4300 	strd	r4, r3, [r6]
 8000af4:	4639      	mov	r1, r7
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0xbe>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	f000 80eb 	beq.w	8000cda <__udivmoddi4+0x286>
 8000b04:	2700      	movs	r7, #0
 8000b06:	e9c6 0100 	strd	r0, r1, [r6]
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f783 	clz	r7, r3
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	d147      	bne.n	8000baa <__udivmoddi4+0x156>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0xd0>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80fa 	bhi.w	8000d18 <__udivmoddi4+0x2c4>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0303 	sbc.w	r3, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	4698      	mov	r8, r3
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d0e0      	beq.n	8000af4 <__udivmoddi4+0xa0>
 8000b32:	e9c6 4800 	strd	r4, r8, [r6]
 8000b36:	e7dd      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000b38:	b902      	cbnz	r2, 8000b3c <__udivmoddi4+0xe8>
 8000b3a:	deff      	udf	#255	; 0xff
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	f040 808f 	bne.w	8000c64 <__udivmoddi4+0x210>
 8000b46:	1b49      	subs	r1, r1, r5
 8000b48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4c:	fa1f f885 	uxth.w	r8, r5
 8000b50:	2701      	movs	r7, #1
 8000b52:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b56:	0c23      	lsrs	r3, r4, #16
 8000b58:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb08 f10c 	mul.w	r1, r8, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x124>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x122>
 8000b70:	4299      	cmp	r1, r3
 8000b72:	f200 80cd 	bhi.w	8000d10 <__udivmoddi4+0x2bc>
 8000b76:	4684      	mov	ip, r0
 8000b78:	1a59      	subs	r1, r3, r1
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b80:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b88:	fb08 f800 	mul.w	r8, r8, r0
 8000b8c:	45a0      	cmp	r8, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x14c>
 8000b90:	192c      	adds	r4, r5, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x14a>
 8000b98:	45a0      	cmp	r8, r4
 8000b9a:	f200 80b6 	bhi.w	8000d0a <__udivmoddi4+0x2b6>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 0408 	sub.w	r4, r4, r8
 8000ba4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba8:	e79f      	b.n	8000aea <__udivmoddi4+0x96>
 8000baa:	f1c7 0c20 	rsb	ip, r7, #32
 8000bae:	40bb      	lsls	r3, r7
 8000bb0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bb4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bb8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bbc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bc4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bc8:	4325      	orrs	r5, r4
 8000bca:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bce:	0c2c      	lsrs	r4, r5, #16
 8000bd0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bd4:	fa1f fa8e 	uxth.w	sl, lr
 8000bd8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bdc:	fb09 f40a 	mul.w	r4, r9, sl
 8000be0:	429c      	cmp	r4, r3
 8000be2:	fa02 f207 	lsl.w	r2, r2, r7
 8000be6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b0>
 8000bec:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf4:	f080 8087 	bcs.w	8000d06 <__udivmoddi4+0x2b2>
 8000bf8:	429c      	cmp	r4, r3
 8000bfa:	f240 8084 	bls.w	8000d06 <__udivmoddi4+0x2b2>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4473      	add	r3, lr
 8000c04:	1b1b      	subs	r3, r3, r4
 8000c06:	b2ad      	uxth	r5, r5
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c10:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c14:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c18:	45a2      	cmp	sl, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1da>
 8000c1c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c24:	d26b      	bcs.n	8000cfe <__udivmoddi4+0x2aa>
 8000c26:	45a2      	cmp	sl, r4
 8000c28:	d969      	bls.n	8000cfe <__udivmoddi4+0x2aa>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4474      	add	r4, lr
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	fba0 8902 	umull	r8, r9, r0, r2
 8000c36:	eba4 040a 	sub.w	r4, r4, sl
 8000c3a:	454c      	cmp	r4, r9
 8000c3c:	46c2      	mov	sl, r8
 8000c3e:	464b      	mov	r3, r9
 8000c40:	d354      	bcc.n	8000cec <__udivmoddi4+0x298>
 8000c42:	d051      	beq.n	8000ce8 <__udivmoddi4+0x294>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d069      	beq.n	8000d1c <__udivmoddi4+0x2c8>
 8000c48:	ebb1 050a 	subs.w	r5, r1, sl
 8000c4c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c50:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c54:	40fd      	lsrs	r5, r7
 8000c56:	40fc      	lsrs	r4, r7
 8000c58:	ea4c 0505 	orr.w	r5, ip, r5
 8000c5c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c60:	2700      	movs	r7, #0
 8000c62:	e747      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f703 	lsr.w	r7, r0, r3
 8000c6c:	4095      	lsls	r5, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	fa21 f303 	lsr.w	r3, r1, r3
 8000c76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7a:	4338      	orrs	r0, r7
 8000c7c:	0c01      	lsrs	r1, r0, #16
 8000c7e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c82:	fa1f f885 	uxth.w	r8, r5
 8000c86:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8e:	fb07 f308 	mul.w	r3, r7, r8
 8000c92:	428b      	cmp	r3, r1
 8000c94:	fa04 f402 	lsl.w	r4, r4, r2
 8000c98:	d907      	bls.n	8000caa <__udivmoddi4+0x256>
 8000c9a:	1869      	adds	r1, r5, r1
 8000c9c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ca0:	d22f      	bcs.n	8000d02 <__udivmoddi4+0x2ae>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d92d      	bls.n	8000d02 <__udivmoddi4+0x2ae>
 8000ca6:	3f02      	subs	r7, #2
 8000ca8:	4429      	add	r1, r5
 8000caa:	1acb      	subs	r3, r1, r3
 8000cac:	b281      	uxth	r1, r0
 8000cae:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cba:	fb00 f308 	mul.w	r3, r0, r8
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x27e>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cc8:	d217      	bcs.n	8000cfa <__udivmoddi4+0x2a6>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d915      	bls.n	8000cfa <__udivmoddi4+0x2a6>
 8000cce:	3802      	subs	r0, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1ac9      	subs	r1, r1, r3
 8000cd4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cd8:	e73b      	b.n	8000b52 <__udivmoddi4+0xfe>
 8000cda:	4637      	mov	r7, r6
 8000cdc:	4630      	mov	r0, r6
 8000cde:	e709      	b.n	8000af4 <__udivmoddi4+0xa0>
 8000ce0:	4607      	mov	r7, r0
 8000ce2:	e6e7      	b.n	8000ab4 <__udivmoddi4+0x60>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	e6fb      	b.n	8000ae0 <__udivmoddi4+0x8c>
 8000ce8:	4541      	cmp	r1, r8
 8000cea:	d2ab      	bcs.n	8000c44 <__udivmoddi4+0x1f0>
 8000cec:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	e7a4      	b.n	8000c44 <__udivmoddi4+0x1f0>
 8000cfa:	4660      	mov	r0, ip
 8000cfc:	e7e9      	b.n	8000cd2 <__udivmoddi4+0x27e>
 8000cfe:	4618      	mov	r0, r3
 8000d00:	e795      	b.n	8000c2e <__udivmoddi4+0x1da>
 8000d02:	4667      	mov	r7, ip
 8000d04:	e7d1      	b.n	8000caa <__udivmoddi4+0x256>
 8000d06:	4681      	mov	r9, r0
 8000d08:	e77c      	b.n	8000c04 <__udivmoddi4+0x1b0>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	442c      	add	r4, r5
 8000d0e:	e747      	b.n	8000ba0 <__udivmoddi4+0x14c>
 8000d10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d14:	442b      	add	r3, r5
 8000d16:	e72f      	b.n	8000b78 <__udivmoddi4+0x124>
 8000d18:	4638      	mov	r0, r7
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xda>
 8000d1c:	4637      	mov	r7, r6
 8000d1e:	e6e9      	b.n	8000af4 <__udivmoddi4+0xa0>

08000d20 <__aeabi_idiv0>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000d24:	78c3      	ldrb	r3, [r0, #3]
 8000d26:	b953      	cbnz	r3, 8000d3e <NVIC_Init+0x1a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d28:	7803      	ldrb	r3, [r0, #0]
 8000d2a:	f003 011f 	and.w	r1, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d2e:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d30:	2201      	movs	r2, #1
 8000d32:	408a      	lsls	r2, r1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d34:	3320      	adds	r3, #32
 8000d36:	4912      	ldr	r1, [pc, #72]	; (8000d80 <NVIC_Init+0x5c>)
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3c:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <NVIC_Init+0x60>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	f3c3 2202 	ubfx	r2, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000d48:	f1c2 0104 	rsb	r1, r2, #4
 8000d4c:	b2c9      	uxtb	r1, r1
    tmpsub = tmpsub >> tmppriority;
 8000d4e:	230f      	movs	r3, #15
 8000d50:	4113      	asrs	r3, r2
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000d52:	7842      	ldrb	r2, [r0, #1]
 8000d54:	408a      	lsls	r2, r1
 8000d56:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000d58:	7881      	ldrb	r1, [r0, #2]
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	4313      	orrs	r3, r2
    tmppriority = tmppriority << 0x04;
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b2db      	uxtb	r3, r3
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d62:	7802      	ldrb	r2, [r0, #0]
 8000d64:	4906      	ldr	r1, [pc, #24]	; (8000d80 <NVIC_Init+0x5c>)
 8000d66:	440a      	add	r2, r1
 8000d68:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d6c:	7803      	ldrb	r3, [r0, #0]
 8000d6e:	f003 001f 	and.w	r0, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d72:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d74:	2201      	movs	r2, #1
 8000d76:	4082      	lsls	r2, r0
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000d88:	b410      	push	{r4}
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000d8a:	6842      	ldr	r2, [r0, #4]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000d8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000d94:	790c      	ldrb	r4, [r1, #4]
                                   ADC_InitStruct->ADC_Resolution);
 8000d96:	680b      	ldr	r3, [r1, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000d98:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000d9c:	4313      	orrs	r3, r2
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000d9e:	6043      	str	r3, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000da0:	6883      	ldr	r3, [r0, #8]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000da2:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <ADC_Init+0x4c>)
 8000da4:	401a      	ands	r2, r3
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000da6:	690b      	ldr	r3, [r1, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000da8:	68cc      	ldr	r4, [r1, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000daa:	4323      	orrs	r3, r4
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000dac:	688c      	ldr	r4, [r1, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000dae:	4323      	orrs	r3, r4
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000db0:	794c      	ldrb	r4, [r1, #5]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000db2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8000db6:	4313      	orrs	r3, r2
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000db8:	6083      	str	r3, [r0, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000dba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000dbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000dc0:	7d0a      	ldrb	r2, [r1, #20]
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	b2d2      	uxtb	r2, r2
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000dc6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000dca:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8000dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	c0fff7fd 	.word	0xc0fff7fd

08000dd8 <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000ddc:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000dde:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000de0:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000de2:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000de4:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	7503      	strb	r3, [r0, #20]
}
 8000dea:	4770      	bx	lr

08000dec <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000dec:	b410      	push	{r4}
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <ADC_CommonInit+0x24>)
 8000df0:	684b      	ldr	r3, [r1, #4]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <ADC_CommonInit+0x28>)
 8000df4:	401a      	ands	r2, r3
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000df6:	6803      	ldr	r3, [r0, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000df8:	6844      	ldr	r4, [r0, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000dfa:	4323      	orrs	r3, r4
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000dfc:	6884      	ldr	r4, [r0, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000dfe:	4323      	orrs	r3, r4
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000e00:	68c0      	ldr	r0, [r0, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000e02:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000e04:	4313      	orrs	r3, r2
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000e06:	604b      	str	r3, [r1, #4]
}
 8000e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40012300 	.word	0x40012300
 8000e14:	fffc30e0 	.word	0xfffc30e0

08000e18 <ADC_Cmd>:
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e18:	b921      	cbnz	r1, 8000e24 <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000e1a:	6883      	ldr	r3, [r0, #8]
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6083      	str	r3, [r0, #8]
  }
}
 8000e22:	4770      	bx	lr
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000e24:	6883      	ldr	r3, [r0, #8]
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6083      	str	r3, [r0, #8]
 8000e2c:	4770      	bx	lr

08000e2e <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000e2e:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000e30:	2909      	cmp	r1, #9
 8000e32:	d91d      	bls.n	8000e70 <ADC_RegularChannelConfig+0x42>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000e34:	68c5      	ldr	r5, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000e36:	f1a1 040a 	sub.w	r4, r1, #10
 8000e3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e3e:	2607      	movs	r6, #7
 8000e40:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e42:	ea25 0506 	bic.w	r5, r5, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000e46:	fa03 f404 	lsl.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e4a:	432c      	orrs	r4, r5
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000e4c:	60c4      	str	r4, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e4e:	2a06      	cmp	r2, #6
 8000e50:	d91a      	bls.n	8000e88 <ADC_RegularChannelConfig+0x5a>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000e52:	2a0c      	cmp	r2, #12
 8000e54:	d926      	bls.n	8000ea4 <ADC_RegularChannelConfig+0x76>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000e56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000e58:	3a0d      	subs	r2, #13
 8000e5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e5e:	241f      	movs	r4, #31
 8000e60:	4094      	lsls	r4, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e62:	ea23 0304 	bic.w	r3, r3, r4
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e6a:	431a      	orrs	r2, r3
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000e6c:	62c2      	str	r2, [r0, #44]	; 0x2c
  }
}
 8000e6e:	e017      	b.n	8000ea0 <ADC_RegularChannelConfig+0x72>
    tmpreg1 = ADCx->SMPR2;
 8000e70:	6905      	ldr	r5, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e72:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8000e76:	2407      	movs	r4, #7
 8000e78:	40b4      	lsls	r4, r6
    tmpreg1 &= ~tmpreg2;
 8000e7a:	ea25 0504 	bic.w	r5, r5, r4
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e7e:	fa03 f406 	lsl.w	r4, r3, r6
    tmpreg1 |= tmpreg2;
 8000e82:	432c      	orrs	r4, r5
    ADCx->SMPR2 = tmpreg1;
 8000e84:	6104      	str	r4, [r0, #16]
 8000e86:	e7e2      	b.n	8000e4e <ADC_RegularChannelConfig+0x20>
    tmpreg1 = ADCx->SQR3;
 8000e88:	6b43      	ldr	r3, [r0, #52]	; 0x34
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e8a:	3a01      	subs	r2, #1
 8000e8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e90:	241f      	movs	r4, #31
 8000e92:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 8000e94:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 8000e9c:	431a      	orrs	r2, r3
    ADCx->SQR3 = tmpreg1;
 8000e9e:	6342      	str	r2, [r0, #52]	; 0x34
}
 8000ea0:	bc70      	pop	{r4, r5, r6}
 8000ea2:	4770      	bx	lr
    tmpreg1 = ADCx->SQR2;
 8000ea4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000ea6:	3a07      	subs	r2, #7
 8000ea8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000eac:	241f      	movs	r4, #31
 8000eae:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 8000eb0:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 8000eb8:	431a      	orrs	r2, r3
    ADCx->SQR2 = tmpreg1;
 8000eba:	6302      	str	r2, [r0, #48]	; 0x30
 8000ebc:	e7f0      	b.n	8000ea0 <ADC_RegularChannelConfig+0x72>

08000ebe <ADC_ITConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000ebe:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
 8000ec6:	b922      	cbnz	r2, 8000ed2 <ADC_ITConfig+0x14>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000ec8:	6843      	ldr	r3, [r0, #4]
 8000eca:	ea23 0101 	bic.w	r1, r3, r1
 8000ece:	6041      	str	r1, [r0, #4]
  }
}
 8000ed0:	4770      	bx	lr
    ADCx->CR1 |= itmask;
 8000ed2:	6843      	ldr	r3, [r0, #4]
 8000ed4:	4319      	orrs	r1, r3
 8000ed6:	6041      	str	r1, [r0, #4]
 8000ed8:	4770      	bx	lr

08000eda <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000eda:	6803      	ldr	r3, [r0, #0]
 8000edc:	4219      	tst	r1, r3
 8000ede:	d101      	bne.n	8000ee4 <ADC_GetFlagStatus+0xa>
    bitstatus = SET;
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000ee0:	2000      	movs	r0, #0
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8000ee2:	4770      	bx	lr
    bitstatus = SET;
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	4770      	bx	lr

08000ee8 <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000ee8:	43c9      	mvns	r1, r1
 8000eea:	6001      	str	r1, [r0, #0]
}
 8000eec:	4770      	bx	lr

08000eee <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8000eee:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000ef6:	f000 f9ab 	bl	8001250 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8000efa:	2100      	movs	r1, #0
 8000efc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000f00:	f000 f9a6 	bl	8001250 <RCC_APB1PeriphResetCmd>
}
 8000f04:	bd08      	pop	{r3, pc}
	...

08000f08 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000f08:	b430      	push	{r4, r5}
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000f0a:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <DAC_Init+0x2c>)
 8000f0c:	6822      	ldr	r2, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000f0e:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000f12:	4083      	lsls	r3, r0
 8000f14:	ea22 0203 	bic.w	r2, r2, r3
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000f18:	680b      	ldr	r3, [r1, #0]
 8000f1a:	684d      	ldr	r5, [r1, #4]
 8000f1c:	432b      	orrs	r3, r5
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000f1e:	688d      	ldr	r5, [r1, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000f20:	432b      	orrs	r3, r5
             DAC_InitStruct->DAC_OutputBuffer);
 8000f22:	68c9      	ldr	r1, [r1, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000f24:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000f26:	fa03 f000 	lsl.w	r0, r3, r0
 8000f2a:	4310      	orrs	r0, r2
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000f2c:	6020      	str	r0, [r4, #0]
}
 8000f2e:	bc30      	pop	{r4, r5}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40007400 	.word	0x40007400

08000f38 <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000f3c:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8000f3e:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000f40:	60c3      	str	r3, [r0, #12]
}
 8000f42:	4770      	bx	lr

08000f44 <DAC_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f44:	b941      	cbnz	r1, 8000f58 <DAC_Cmd+0x14>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <DAC_Cmd+0x24>)
 8000f48:	680b      	ldr	r3, [r1, #0]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	fa02 f000 	lsl.w	r0, r2, r0
 8000f50:	ea23 0000 	bic.w	r0, r3, r0
 8000f54:	6008      	str	r0, [r1, #0]
  }
}
 8000f56:	4770      	bx	lr
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000f58:	4903      	ldr	r1, [pc, #12]	; (8000f68 <DAC_Cmd+0x24>)
 8000f5a:	680b      	ldr	r3, [r1, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	fa02 f000 	lsl.w	r0, r2, r0
 8000f62:	4318      	orrs	r0, r3
 8000f64:	6008      	str	r0, [r1, #0]
 8000f66:	4770      	bx	lr
 8000f68:	40007400 	.word	0x40007400

08000f6c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000f6c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <DAC_SetChannel1Data+0x1c>)
 8000f74:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000f76:	9b01      	ldr	r3, [sp, #4]
 8000f78:	4418      	add	r0, r3
 8000f7a:	3008      	adds	r0, #8
 8000f7c:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	6019      	str	r1, [r3, #0]
}
 8000f82:	b002      	add	sp, #8
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40007400 	.word	0x40007400

08000f8c <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8000f8c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <DAC_SetChannel2Data+0x1c>)
 8000f94:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000f96:	9b01      	ldr	r3, [sp, #4]
 8000f98:	4418      	add	r0, r3
 8000f9a:	3014      	adds	r0, #20
 8000f9c:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8000f9e:	9b01      	ldr	r3, [sp, #4]
 8000fa0:	6019      	str	r1, [r3, #0]
}
 8000fa2:	b002      	add	sp, #8
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40007400 	.word	0x40007400

08000fac <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <EXTI_DeInit+0x14>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8000fb2:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8000fb4:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8000fb6:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8000fb8:	4a02      	ldr	r2, [pc, #8]	; (8000fc4 <EXTI_DeInit+0x18>)
 8000fba:	615a      	str	r2, [r3, #20]
}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40013c00 	.word	0x40013c00
 8000fc4:	007fffff 	.word	0x007fffff

08000fc8 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000fc8:	7983      	ldrb	r3, [r0, #6]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d036      	beq.n	800103c <EXTI_Init+0x74>
{
 8000fce:	b410      	push	{r4}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <EXTI_Init+0x8c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	6801      	ldr	r1, [r0, #0]
 8000fd6:	ea22 0201 	bic.w	r2, r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	6801      	ldr	r1, [r0, #0]
 8000fe0:	ea22 0201 	bic.w	r2, r2, r1
 8000fe4:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000fe6:	7902      	ldrb	r2, [r0, #4]
 8000fe8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000fec:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000ff0:	6811      	ldr	r1, [r2, #0]
 8000ff2:	6804      	ldr	r4, [r0, #0]
 8000ff4:	4321      	orrs	r1, r4
 8000ff6:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	6801      	ldr	r1, [r0, #0]
 8000ffc:	ea22 0201 	bic.w	r2, r2, r1
 8001000:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	6801      	ldr	r1, [r0, #0]
 8001006:	ea22 0201 	bic.w	r2, r2, r1
 800100a:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800100c:	7943      	ldrb	r3, [r0, #5]
 800100e:	2b10      	cmp	r3, #16
 8001010:	d00a      	beq.n	8001028 <EXTI_Init+0x60>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001016:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	6801      	ldr	r1, [r0, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001026:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <EXTI_Init+0x8c>)
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	6801      	ldr	r1, [r0, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	6801      	ldr	r1, [r0, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	e7f2      	b.n	8001022 <EXTI_Init+0x5a>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800103c:	7903      	ldrb	r3, [r0, #4]
 800103e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001042:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	6801      	ldr	r1, [r0, #0]
 800104a:	ea22 0201 	bic.w	r2, r2, r1
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40013c00 	.word	0x40013c00

08001058 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001058:	4b01      	ldr	r3, [pc, #4]	; (8001060 <EXTI_ClearITPendingBit+0x8>)
 800105a:	6158      	str	r0, [r3, #20]
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40013c00 	.word	0x40013c00

08001064 <GPIO_Init>:
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001064:	2300      	movs	r3, #0
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d840      	bhi.n	80010ec <GPIO_Init+0x88>
{
 800106a:	b4f0      	push	{r4, r5, r6, r7}
 800106c:	e010      	b.n	8001090 <GPIO_Init+0x2c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800106e:	68c2      	ldr	r2, [r0, #12]
 8001070:	b29c      	uxth	r4, r3
 8001072:	0066      	lsls	r6, r4, #1
 8001074:	2403      	movs	r4, #3
 8001076:	40b4      	lsls	r4, r6
 8001078:	ea22 0204 	bic.w	r2, r2, r4
 800107c:	60c2      	str	r2, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800107e:	68c2      	ldr	r2, [r0, #12]
 8001080:	79cc      	ldrb	r4, [r1, #7]
 8001082:	fa04 f505 	lsl.w	r5, r4, r5
 8001086:	4315      	orrs	r5, r2
 8001088:	60c5      	str	r5, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800108a:	3301      	adds	r3, #1
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d82b      	bhi.n	80010e8 <GPIO_Init+0x84>
    pos = ((uint32_t)0x01) << pinpos;
 8001090:	2201      	movs	r2, #1
 8001092:	409a      	lsls	r2, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001094:	680c      	ldr	r4, [r1, #0]
    if (currentpin == pos)
 8001096:	43a2      	bics	r2, r4
 8001098:	d1f7      	bne.n	800108a <GPIO_Init+0x26>
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800109a:	6804      	ldr	r4, [r0, #0]
 800109c:	005d      	lsls	r5, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	40aa      	lsls	r2, r5
 80010a2:	43d2      	mvns	r2, r2
 80010a4:	4014      	ands	r4, r2
 80010a6:	6004      	str	r4, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010a8:	6804      	ldr	r4, [r0, #0]
 80010aa:	790e      	ldrb	r6, [r1, #4]
 80010ac:	40ae      	lsls	r6, r5
 80010ae:	4334      	orrs	r4, r6
 80010b0:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010b2:	790c      	ldrb	r4, [r1, #4]
 80010b4:	3c01      	subs	r4, #1
 80010b6:	b2e4      	uxtb	r4, r4
 80010b8:	2c01      	cmp	r4, #1
 80010ba:	d8d8      	bhi.n	800106e <GPIO_Init+0xa>
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80010bc:	6884      	ldr	r4, [r0, #8]
 80010be:	4022      	ands	r2, r4
 80010c0:	6082      	str	r2, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80010c2:	6882      	ldr	r2, [r0, #8]
 80010c4:	794c      	ldrb	r4, [r1, #5]
 80010c6:	40ac      	lsls	r4, r5
 80010c8:	4322      	orrs	r2, r4
 80010ca:	6082      	str	r2, [r0, #8]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80010cc:	6844      	ldr	r4, [r0, #4]
 80010ce:	b29f      	uxth	r7, r3
 80010d0:	2601      	movs	r6, #1
 80010d2:	40be      	lsls	r6, r7
 80010d4:	ea24 0406 	bic.w	r4, r4, r6
 80010d8:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80010da:	6844      	ldr	r4, [r0, #4]
 80010dc:	798a      	ldrb	r2, [r1, #6]
 80010de:	40ba      	lsls	r2, r7
 80010e0:	b292      	uxth	r2, r2
 80010e2:	4322      	orrs	r2, r4
 80010e4:	6042      	str	r2, [r0, #4]
 80010e6:	e7c2      	b.n	800106e <GPIO_Init+0xa>
    }
  }
}
 80010e8:	bcf0      	pop	{r4, r5, r6, r7}
 80010ea:	4770      	bx	lr
 80010ec:	4770      	bx	lr

080010ee <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80010f4:	2300      	movs	r3, #0
 80010f6:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80010f8:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80010fa:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80010fc:	71c3      	strb	r3, [r0, #7]
}
 80010fe:	4770      	bx	lr

08001100 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001100:	6903      	ldr	r3, [r0, #16]
 8001102:	4219      	tst	r1, r3
 8001104:	d101      	bne.n	800110a <GPIO_ReadInputDataBit+0xa>
  {
    bitstatus = (uint8_t)Bit_SET;
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001106:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001108:	4770      	bx	lr
    bitstatus = (uint8_t)Bit_SET;
 800110a:	2001      	movs	r0, #1
 800110c:	4770      	bx	lr

0800110e <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800110e:	8301      	strh	r1, [r0, #24]
}
 8001110:	4770      	bx	lr

08001112 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001112:	8341      	strh	r1, [r0, #26]
}
 8001114:	4770      	bx	lr

08001116 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001116:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001118:	f001 0307 	and.w	r3, r1, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001120:	08c9      	lsrs	r1, r1, #3
 8001122:	3108      	adds	r1, #8
 8001124:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8001128:	250f      	movs	r5, #15
 800112a:	fa05 f303 	lsl.w	r3, r5, r3
 800112e:	ea24 0303 	bic.w	r3, r4, r3
 8001132:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001136:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800113a:	431a      	orrs	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800113c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
 8001140:	bc30      	pop	{r4, r5}
 8001142:	4770      	bx	lr

08001144 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001144:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <RCC_GetClocksFreq+0xa8>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 800114e:	2b04      	cmp	r3, #4
 8001150:	d023      	beq.n	800119a <RCC_GetClocksFreq+0x56>
 8001152:	2b08      	cmp	r3, #8
 8001154:	d024      	beq.n	80011a0 <RCC_GetClocksFreq+0x5c>
 8001156:	b113      	cbz	r3, 800115e <RCC_GetClocksFreq+0x1a>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <RCC_GetClocksFreq+0xac>)
 800115a:	6003      	str	r3, [r0, #0]
      break;
 800115c:	e001      	b.n	8001162 <RCC_GetClocksFreq+0x1e>
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <RCC_GetClocksFreq+0xac>)
 8001160:	6003      	str	r3, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001162:	4c22      	ldr	r4, [pc, #136]	; (80011ec <RCC_GetClocksFreq+0xa8>)
 8001164:	68a3      	ldr	r3, [r4, #8]
  tmp = tmp >> 4;
 8001166:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800116a:	4922      	ldr	r1, [pc, #136]	; (80011f4 <RCC_GetClocksFreq+0xb0>)
 800116c:	5ccb      	ldrb	r3, [r1, r3]
 800116e:	b2da      	uxtb	r2, r3
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001170:	6803      	ldr	r3, [r0, #0]
 8001172:	40d3      	lsrs	r3, r2
 8001174:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001176:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 10;
 8001178:	f3c2 2282 	ubfx	r2, r2, #10, #3
  presc = APBAHBPrescTable[tmp];
 800117c:	5c8a      	ldrb	r2, [r1, r2]
 800117e:	b2d2      	uxtb	r2, r2
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001180:	fa23 f202 	lsr.w	r2, r3, r2
 8001184:	6082      	str	r2, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001186:	68a2      	ldr	r2, [r4, #8]
  tmp = tmp >> 13;
 8001188:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 800118c:	5c8a      	ldrb	r2, [r1, r2]
 800118e:	b2d2      	uxtb	r2, r2
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001190:	40d3      	lsrs	r3, r2
 8001192:	60c3      	str	r3, [r0, #12]
}
 8001194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001198:	4770      	bx	lr
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <RCC_GetClocksFreq+0xb4>)
 800119c:	6003      	str	r3, [r0, #0]
      break;
 800119e:	e7e0      	b.n	8001162 <RCC_GetClocksFreq+0x1e>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <RCC_GetClocksFreq+0xa8>)
 80011a2:	685a      	ldr	r2, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      if (pllsource != 0)
 80011aa:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80011ae:	d012      	beq.n	80011d6 <RCC_GetClocksFreq+0x92>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <RCC_GetClocksFreq+0xb4>)
 80011b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <RCC_GetClocksFreq+0xa8>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011be:	fb03 f302 	mul.w	r3, r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <RCC_GetClocksFreq+0xa8>)
 80011c4:	6852      	ldr	r2, [r2, #4]
 80011c6:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80011ca:	3201      	adds	r2, #1
 80011cc:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80011ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80011d2:	6003      	str	r3, [r0, #0]
      break;
 80011d4:	e7c5      	b.n	8001162 <RCC_GetClocksFreq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <RCC_GetClocksFreq+0xac>)
 80011d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <RCC_GetClocksFreq+0xa8>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011e4:	fb03 f302 	mul.w	r3, r3, r2
 80011e8:	e7eb      	b.n	80011c2 <RCC_GetClocksFreq+0x7e>
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	00f42400 	.word	0x00f42400
 80011f4:	20000000 	.word	0x20000000
 80011f8:	017d7840 	.word	0x017d7840

080011fc <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011fc:	b929      	cbnz	r1, 800120a <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <RCC_AHB1PeriphClockCmd+0x18>)
 8001200:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001202:	ea23 0000 	bic.w	r0, r3, r0
 8001206:	6310      	str	r0, [r2, #48]	; 0x30
  }
}
 8001208:	4770      	bx	lr
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800120a:	4a02      	ldr	r2, [pc, #8]	; (8001214 <RCC_AHB1PeriphClockCmd+0x18>)
 800120c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800120e:	4318      	orrs	r0, r3
 8001210:	6310      	str	r0, [r2, #48]	; 0x30
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001218:	b929      	cbnz	r1, 8001226 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <RCC_APB1PeriphClockCmd+0x18>)
 800121c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800121e:	ea23 0000 	bic.w	r0, r3, r0
 8001222:	6410      	str	r0, [r2, #64]	; 0x40
  }
}
 8001224:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 8001226:	4a02      	ldr	r2, [pc, #8]	; (8001230 <RCC_APB1PeriphClockCmd+0x18>)
 8001228:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800122a:	4318      	orrs	r0, r3
 800122c:	6410      	str	r0, [r2, #64]	; 0x40
 800122e:	4770      	bx	lr
 8001230:	40023800 	.word	0x40023800

08001234 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001234:	b929      	cbnz	r1, 8001242 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <RCC_APB2PeriphClockCmd+0x18>)
 8001238:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800123a:	ea23 0000 	bic.w	r0, r3, r0
 800123e:	6450      	str	r0, [r2, #68]	; 0x44
  }
}
 8001240:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8001242:	4a02      	ldr	r2, [pc, #8]	; (800124c <RCC_APB2PeriphClockCmd+0x18>)
 8001244:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001246:	4318      	orrs	r0, r3
 8001248:	6450      	str	r0, [r2, #68]	; 0x44
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800

08001250 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001250:	b929      	cbnz	r1, 800125e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <RCC_APB1PeriphResetCmd+0x18>)
 8001254:	6a13      	ldr	r3, [r2, #32]
 8001256:	ea23 0000 	bic.w	r0, r3, r0
 800125a:	6210      	str	r0, [r2, #32]
  }
}
 800125c:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 800125e:	4a02      	ldr	r2, [pc, #8]	; (8001268 <RCC_APB1PeriphResetCmd+0x18>)
 8001260:	6a13      	ldr	r3, [r2, #32]
 8001262:	4318      	orrs	r0, r3
 8001264:	6210      	str	r0, [r2, #32]
 8001266:	4770      	bx	lr
 8001268:	40023800 	.word	0x40023800

0800126c <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800126c:	b929      	cbnz	r1, 800127a <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <RCC_APB2PeriphResetCmd+0x18>)
 8001270:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001272:	ea23 0000 	bic.w	r0, r3, r0
 8001276:	6250      	str	r0, [r2, #36]	; 0x24
  }
}
 8001278:	4770      	bx	lr
    RCC->APB2RSTR |= RCC_APB2Periph;
 800127a:	4a02      	ldr	r2, [pc, #8]	; (8001284 <RCC_APB2PeriphResetCmd+0x18>)
 800127c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800127e:	4318      	orrs	r0, r3
 8001280:	6250      	str	r0, [r2, #36]	; 0x24
 8001282:	4770      	bx	lr
 8001284:	40023800 	.word	0x40023800

08001288 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001288:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <SPI_I2S_DeInit+0xac>)
 800128c:	4298      	cmp	r0, r3
 800128e:	d00f      	beq.n	80012b0 <SPI_I2S_DeInit+0x28>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <SPI_I2S_DeInit+0xb0>)
 8001292:	4298      	cmp	r0, r3
 8001294:	d017      	beq.n	80012c6 <SPI_I2S_DeInit+0x3e>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <SPI_I2S_DeInit+0xb4>)
 8001298:	4298      	cmp	r0, r3
 800129a:	d01f      	beq.n	80012dc <SPI_I2S_DeInit+0x54>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <SPI_I2S_DeInit+0xb8>)
 800129e:	4298      	cmp	r0, r3
 80012a0:	d027      	beq.n	80012f2 <SPI_I2S_DeInit+0x6a>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SPI_I2S_DeInit+0xbc>)
 80012a4:	4298      	cmp	r0, r3
 80012a6:	d02f      	beq.n	8001308 <SPI_I2S_DeInit+0x80>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <SPI_I2S_DeInit+0xc0>)
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d037      	beq.n	800131e <SPI_I2S_DeInit+0x96>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80012ae:	bd08      	pop	{r3, pc}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80012b0:	2101      	movs	r1, #1
 80012b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012b6:	f7ff ffd9 	bl	800126c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80012ba:	2100      	movs	r1, #0
 80012bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012c0:	f7ff ffd4 	bl	800126c <RCC_APB2PeriphResetCmd>
 80012c4:	e7f3      	b.n	80012ae <SPI_I2S_DeInit+0x26>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80012c6:	2101      	movs	r1, #1
 80012c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012cc:	f7ff ffc0 	bl	8001250 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80012d0:	2100      	movs	r1, #0
 80012d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012d6:	f7ff ffbb 	bl	8001250 <RCC_APB1PeriphResetCmd>
 80012da:	e7e8      	b.n	80012ae <SPI_I2S_DeInit+0x26>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80012dc:	2101      	movs	r1, #1
 80012de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012e2:	f7ff ffb5 	bl	8001250 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80012e6:	2100      	movs	r1, #0
 80012e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012ec:	f7ff ffb0 	bl	8001250 <RCC_APB1PeriphResetCmd>
 80012f0:	e7dd      	b.n	80012ae <SPI_I2S_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80012f2:	2101      	movs	r1, #1
 80012f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012f8:	f7ff ffb8 	bl	800126c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80012fc:	2100      	movs	r1, #0
 80012fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001302:	f7ff ffb3 	bl	800126c <RCC_APB2PeriphResetCmd>
 8001306:	e7d2      	b.n	80012ae <SPI_I2S_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001308:	2101      	movs	r1, #1
 800130a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800130e:	f7ff ffad 	bl	800126c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001312:	2100      	movs	r1, #0
 8001314:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001318:	f7ff ffa8 	bl	800126c <RCC_APB2PeriphResetCmd>
 800131c:	e7c7      	b.n	80012ae <SPI_I2S_DeInit+0x26>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800131e:	2101      	movs	r1, #1
 8001320:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001324:	f7ff ffa2 	bl	800126c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001328:	2100      	movs	r1, #0
 800132a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800132e:	f7ff ff9d 	bl	800126c <RCC_APB2PeriphResetCmd>
}
 8001332:	e7bc      	b.n	80012ae <SPI_I2S_DeInit+0x26>
 8001334:	40013000 	.word	0x40013000
 8001338:	40003800 	.word	0x40003800
 800133c:	40003c00 	.word	0x40003c00
 8001340:	40013400 	.word	0x40013400
 8001344:	40015000 	.word	0x40015000
 8001348:	40015400 	.word	0x40015400

0800134c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001350:	8803      	ldrh	r3, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001352:	f403 5241 	and.w	r2, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001356:	f8b1 e000 	ldrh.w	lr, [r1]
 800135a:	f8b1 8002 	ldrh.w	r8, [r1, #2]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800135e:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8001362:	88cf      	ldrh	r7, [r1, #6]
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001364:	890e      	ldrh	r6, [r1, #8]
 8001366:	894d      	ldrh	r5, [r1, #10]
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001368:	898c      	ldrh	r4, [r1, #12]
 800136a:	89cb      	ldrh	r3, [r1, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800136c:	ea4e 0e08 	orr.w	lr, lr, r8
 8001370:	ea4c 0c0e 	orr.w	ip, ip, lr
 8001374:	ea47 070c 	orr.w	r7, r7, ip
 8001378:	433e      	orrs	r6, r7
 800137a:	4335      	orrs	r5, r6
 800137c:	432c      	orrs	r4, r5
 800137e:	4323      	orrs	r3, r4
 8001380:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001382:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001384:	8b83      	ldrh	r3, [r0, #28]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800138c:	b29b      	uxth	r3, r3
 800138e:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001390:	8a0b      	ldrh	r3, [r1, #16]
 8001392:	8203      	strh	r3, [r0, #16]
}
 8001394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001398 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001398:	2300      	movs	r3, #0
 800139a:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800139c:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800139e:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80013a0:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80013a2:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80013a4:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80013a6:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80013a8:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80013aa:	2307      	movs	r3, #7
 80013ac:	8203      	strh	r3, [r0, #16]
}
 80013ae:	4770      	bx	lr

080013b0 <SPI_Cmd>:
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013b0:	b931      	cbnz	r1, 80013c0 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80013b2:	8803      	ldrh	r3, [r0, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	8003      	strh	r3, [r0, #0]
  }
}
 80013be:	4770      	bx	lr
    SPIx->CR1 |= SPI_CR1_SPE;
 80013c0:	8803      	ldrh	r3, [r0, #0]
 80013c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c6:	8003      	strh	r3, [r0, #0]
 80013c8:	4770      	bx	lr

080013ca <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80013ca:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80013ce:	4299      	cmp	r1, r3
 80013d0:	d004      	beq.n	80013dc <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80013d2:	8803      	ldrh	r3, [r0, #0]
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	8003      	strh	r3, [r0, #0]
 80013da:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80013dc:	8803      	ldrh	r3, [r0, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	8003      	strh	r3, [r0, #0]
  }
}
 80013e8:	4770      	bx	lr

080013ea <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80013ea:	8980      	ldrh	r0, [r0, #12]
}
 80013ec:	4770      	bx	lr

080013ee <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80013ee:	8181      	strh	r1, [r0, #12]
}
 80013f0:	4770      	bx	lr

080013f2 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80013f2:	8903      	ldrh	r3, [r0, #8]
 80013f4:	4219      	tst	r1, r3
 80013f6:	d101      	bne.n	80013fc <SPI_I2S_GetFlagStatus+0xa>
    bitstatus = SET;
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80013f8:	2000      	movs	r0, #0
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80013fa:	4770      	bx	lr
    bitstatus = SET;
 80013fc:	2001      	movs	r0, #1
 80013fe:	4770      	bx	lr

08001400 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001400:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001402:	f001 0303 	and.w	r3, r1, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	240f      	movs	r4, #15
 800140a:	fa04 f503 	lsl.w	r5, r4, r3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800140e:	0889      	lsrs	r1, r1, #2
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <SYSCFG_EXTILineConfig+0x30>)
 8001412:	3102      	adds	r1, #2
 8001414:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8001418:	ea24 0405 	bic.w	r4, r4, r5
 800141c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001420:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8001424:	4098      	lsls	r0, r3
 8001426:	4320      	orrs	r0, r4
 8001428:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
}
 800142c:	bc30      	pop	{r4, r5}
 800142e:	4770      	bx	lr
 8001430:	40013800 	.word	0x40013800

08001434 <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001434:	8803      	ldrh	r3, [r0, #0]
 8001436:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <TIM_TimeBaseInit+0x74>)
 800143a:	4290      	cmp	r0, r2
 800143c:	d012      	beq.n	8001464 <TIM_TimeBaseInit+0x30>
 800143e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001442:	4290      	cmp	r0, r2
 8001444:	d00e      	beq.n	8001464 <TIM_TimeBaseInit+0x30>
 8001446:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800144a:	d00b      	beq.n	8001464 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800144c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8001450:	4290      	cmp	r0, r2
 8001452:	d007      	beq.n	8001464 <TIM_TimeBaseInit+0x30>
 8001454:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001458:	4290      	cmp	r0, r2
 800145a:	d003      	beq.n	8001464 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800145c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001460:	4290      	cmp	r0, r2
 8001462:	d103      	bne.n	800146c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001468:	884a      	ldrh	r2, [r1, #2]
 800146a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <TIM_TimeBaseInit+0x78>)
 800146e:	4290      	cmp	r0, r2
 8001470:	d008      	beq.n	8001484 <TIM_TimeBaseInit+0x50>
 8001472:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001476:	4290      	cmp	r0, r2
 8001478:	d004      	beq.n	8001484 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800147a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800147e:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001480:	890a      	ldrh	r2, [r1, #8]
 8001482:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001484:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001486:	684b      	ldr	r3, [r1, #4]
 8001488:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800148a:	880b      	ldrh	r3, [r1, #0]
 800148c:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <TIM_TimeBaseInit+0x74>)
 8001490:	4298      	cmp	r0, r3
 8001492:	d003      	beq.n	800149c <TIM_TimeBaseInit+0x68>
 8001494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001498:	4298      	cmp	r0, r3
 800149a:	d101      	bne.n	80014a0 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800149c:	7a8b      	ldrb	r3, [r1, #10]
 800149e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80014a0:	2301      	movs	r3, #1
 80014a2:	8283      	strh	r3, [r0, #20]
}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40010000 	.word	0x40010000
 80014ac:	40001000 	.word	0x40001000

080014b0 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b4:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80014b6:	2300      	movs	r3, #0
 80014b8:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80014ba:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80014bc:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80014be:	7283      	strb	r3, [r0, #10]
}
 80014c0:	4770      	bx	lr

080014c2 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80014c2:	6241      	str	r1, [r0, #36]	; 0x24
}
 80014c4:	4770      	bx	lr

080014c6 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014c6:	b931      	cbnz	r1, 80014d6 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80014c8:	8803      	ldrh	r3, [r0, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	8003      	strh	r3, [r0, #0]
  }
}
 80014d4:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_ARPE;
 80014d6:	8803      	ldrh	r3, [r0, #0]
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	8003      	strh	r3, [r0, #0]
 80014de:	4770      	bx	lr

080014e0 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014e0:	b931      	cbnz	r1, 80014f0 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80014e2:	8803      	ldrh	r3, [r0, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	8003      	strh	r3, [r0, #0]
  }
}
 80014ee:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 80014f0:	8803      	ldrh	r3, [r0, #0]
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	8003      	strh	r3, [r0, #0]
 80014f8:	4770      	bx	lr

080014fa <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80014fa:	6381      	str	r1, [r0, #56]	; 0x38
}
 80014fc:	4770      	bx	lr

080014fe <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80014fe:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8001500:	2301      	movs	r3, #1
 8001502:	408b      	lsls	r3, r1
 8001504:	b29b      	uxth	r3, r3

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8001506:	8c04      	ldrh	r4, [r0, #32]
 8001508:	ea24 0303 	bic.w	r3, r4, r3
 800150c:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800150e:	8c03      	ldrh	r3, [r0, #32]
 8001510:	fa02 f101 	lsl.w	r1, r2, r1
 8001514:	b289      	uxth	r1, r1
 8001516:	4319      	orrs	r1, r3
 8001518:	8401      	strh	r1, [r0, #32]
}
 800151a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800151e:	4770      	bx	lr

08001520 <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001520:	b922      	cbnz	r2, 800152c <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001522:	8983      	ldrh	r3, [r0, #12]
 8001524:	ea23 0101 	bic.w	r1, r3, r1
 8001528:	8181      	strh	r1, [r0, #12]
  }
}
 800152a:	4770      	bx	lr
    TIMx->DIER |= TIM_IT;
 800152c:	8983      	ldrh	r3, [r0, #12]
 800152e:	4319      	orrs	r1, r3
 8001530:	8181      	strh	r1, [r0, #12]
 8001532:	4770      	bx	lr

08001534 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001534:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8001536:	8983      	ldrh	r3, [r0, #12]
 8001538:	400b      	ands	r3, r1
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800153a:	4211      	tst	r1, r2
 800153c:	d002      	beq.n	8001544 <TIM_GetITStatus+0x10>
 800153e:	b91b      	cbnz	r3, 8001548 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8001540:	2000      	movs	r0, #0
 8001542:	4770      	bx	lr
 8001544:	2000      	movs	r0, #0
 8001546:	4770      	bx	lr
    bitstatus = SET;
 8001548:	2001      	movs	r0, #1
  }
  return bitstatus;
}
 800154a:	4770      	bx	lr

0800154c <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800154c:	43c9      	mvns	r1, r1
 800154e:	b289      	uxth	r1, r1
 8001550:	8201      	strh	r1, [r0, #16]
}
 8001552:	4770      	bx	lr

08001554 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001554:	8883      	ldrh	r3, [r0, #4]
 8001556:	b29b      	uxth	r3, r3
 8001558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800155c:	b29b      	uxth	r3, r3
 800155e:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001560:	8883      	ldrh	r3, [r0, #4]
 8001562:	4319      	orrs	r1, r3
 8001564:	8081      	strh	r1, [r0, #4]
}
 8001566:	4770      	bx	lr

08001568 <CAT25512_SendByte>:

/*
Send one byte to eeprom via SPI
*/
void CAT25512_SendByte(unsigned char mData)
{
 8001568:	b510      	push	{r4, lr}
 800156a:	4604      	mov	r4, r0
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)); 
 800156c:	2102      	movs	r1, #2
 800156e:	4809      	ldr	r0, [pc, #36]	; (8001594 <CAT25512_SendByte+0x2c>)
 8001570:	f7ff ff3f 	bl	80013f2 <SPI_I2S_GetFlagStatus>
 8001574:	2800      	cmp	r0, #0
 8001576:	d0f9      	beq.n	800156c <CAT25512_SendByte+0x4>
	SPI_I2S_SendData(SPI3, mData);
 8001578:	4621      	mov	r1, r4
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <CAT25512_SendByte+0x2c>)
 800157c:	f7ff ff37 	bl	80013ee <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE));
 8001580:	2101      	movs	r1, #1
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <CAT25512_SendByte+0x2c>)
 8001584:	f7ff ff35 	bl	80013f2 <SPI_I2S_GetFlagStatus>
 8001588:	2800      	cmp	r0, #0
 800158a:	d0f9      	beq.n	8001580 <CAT25512_SendByte+0x18>
	SPI_I2S_ReceiveData(SPI3);
 800158c:	4801      	ldr	r0, [pc, #4]	; (8001594 <CAT25512_SendByte+0x2c>)
 800158e:	f7ff ff2c 	bl	80013ea <SPI_I2S_ReceiveData>
};
 8001592:	bd10      	pop	{r4, pc}
 8001594:	40003c00 	.word	0x40003c00

08001598 <CAT25512_RecieveData>:

/*
Receive one byte from eeprom via SPI
*/
unsigned short int CAT25512_RecieveData(void)
{
 8001598:	b508      	push	{r3, lr}
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE)){}; 
 800159a:	2102      	movs	r1, #2
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <CAT25512_RecieveData+0x2c>)
 800159e:	f7ff ff28 	bl	80013f2 <SPI_I2S_GetFlagStatus>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d0f9      	beq.n	800159a <CAT25512_RecieveData+0x2>
	SPI_I2S_SendData(SPI3, 0x00); 
 80015a6:	2100      	movs	r1, #0
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <CAT25512_RecieveData+0x2c>)
 80015aa:	f7ff ff20 	bl	80013ee <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE)){};
 80015ae:	2101      	movs	r1, #1
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <CAT25512_RecieveData+0x2c>)
 80015b2:	f7ff ff1e 	bl	80013f2 <SPI_I2S_GetFlagStatus>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d0f9      	beq.n	80015ae <CAT25512_RecieveData+0x16>
	return SPI_ReceiveData(SPI3);
 80015ba:	4802      	ldr	r0, [pc, #8]	; (80015c4 <CAT25512_RecieveData+0x2c>)
 80015bc:	f7ff ff15 	bl	80013ea <SPI_I2S_ReceiveData>
};
 80015c0:	bd08      	pop	{r3, pc}
 80015c2:	bf00      	nop
 80015c4:	40003c00 	.word	0x40003c00

080015c8 <CAT25512_init>:

/*
Initialization of CAT25512 eeprom
*/
void CAT25512_init(void)
{
 80015c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015cc:	b089      	sub	sp, #36	; 0x24
	/* SPI2 setting up*/	
	GPIO_InitTypeDef mGPIO_InitStructure;
	SPI_InitTypeDef mSPI;
		
	/*GPIO Init*/
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2004      	movs	r0, #4
 80015d2:	f7ff fe13 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	
	GPIO_StructInit(&mGPIO_InitStructure);
 80015d6:	a806      	add	r0, sp, #24
 80015d8:	f7ff fd89 	bl	80010ee <GPIO_StructInit>
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12;
 80015dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015e0:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 80015e2:	2702      	movs	r7, #2
 80015e4:	f88d 701c 	strb.w	r7, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 80015e8:	2500      	movs	r5, #0
 80015ea:	f88d 501e 	strb.w	r5, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 80015ee:	2401      	movs	r4, #1
 80015f0:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 80015f4:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOC, &mGPIO_InitStructure);
 80015f8:	4e32      	ldr	r6, [pc, #200]	; (80016c4 <CAT25512_init+0xfc>)
 80015fa:	a906      	add	r1, sp, #24
 80015fc:	4630      	mov	r0, r6
 80015fe:	f7ff fd31 	bl	8001064 <GPIO_Init>
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001602:	4621      	mov	r1, r4
 8001604:	2008      	movs	r0, #8
 8001606:	f7ff fdf9 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	GPIO_StructInit(&mGPIO_InitStructure);
 800160a:	a806      	add	r0, sp, #24
 800160c:	f7ff fd6f 	bl	80010ee <GPIO_StructInit>
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_2;
 8001610:	f04f 0904 	mov.w	r9, #4
 8001614:	f8cd 9018 	str.w	r9, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001618:	f88d 401c 	strb.w	r4, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 800161c:	f88d 501e 	strb.w	r5, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8001620:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_100MHz;
 8001624:	2303      	movs	r3, #3
 8001626:	f88d 301d 	strb.w	r3, [sp, #29]
	GPIO_Init(GPIOD, &mGPIO_InitStructure);
 800162a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80016c8 <CAT25512_init+0x100>
 800162e:	a906      	add	r1, sp, #24
 8001630:	4640      	mov	r0, r8
 8001632:	f7ff fd17 	bl	8001064 <GPIO_Init>
	
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SPI3);
 8001636:	2206      	movs	r2, #6
 8001638:	210a      	movs	r1, #10
 800163a:	4630      	mov	r0, r6
 800163c:	f7ff fd6b 	bl	8001116 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SPI3);
 8001640:	2206      	movs	r2, #6
 8001642:	210b      	movs	r1, #11
 8001644:	4630      	mov	r0, r6
 8001646:	f7ff fd66 	bl	8001116 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SPI3);	
 800164a:	2206      	movs	r2, #6
 800164c:	210c      	movs	r1, #12
 800164e:	4630      	mov	r0, r6
 8001650:	f7ff fd61 	bl	8001116 <GPIO_PinAFConfig>
		
	CAT25512_CS_CLEAR;
 8001654:	4649      	mov	r1, r9
 8001656:	4640      	mov	r0, r8
 8001658:	f7ff fd59 	bl	800110e <GPIO_SetBits>
	
	/*SPI init*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 800165c:	4621      	mov	r1, r4
 800165e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001662:	f7ff fdd9 	bl	8001218 <RCC_APB1PeriphClockCmd>
	SPI_I2S_DeInit(SPI3);
 8001666:	f5a6 36e6 	sub.w	r6, r6, #117760	; 0x1cc00
 800166a:	4630      	mov	r0, r6
 800166c:	f7ff fe0c 	bl	8001288 <SPI_I2S_DeInit>
	SPI_StructInit(&mSPI);
 8001670:	eb0d 0009 	add.w	r0, sp, r9
 8001674:	f7ff fe90 	bl	8001398 <SPI_StructInit>
	
	mSPI.SPI_Direction 					= SPI_Direction_2Lines_FullDuplex;
 8001678:	f8ad 5004 	strh.w	r5, [sp, #4]
	mSPI.SPI_BaudRatePrescaler 	= SPI_BaudRatePrescaler_8;
 800167c:	2310      	movs	r3, #16
 800167e:	f8ad 3010 	strh.w	r3, [sp, #16]
	mSPI.SPI_Mode 							= SPI_Mode_Master;
 8001682:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001686:	f8ad 3006 	strh.w	r3, [sp, #6]
	mSPI.SPI_DataSize 					= SPI_DataSize_8b;
 800168a:	f8ad 5008 	strh.w	r5, [sp, #8]
	mSPI.SPI_CPOL 							= SPI_CPOL_High;
 800168e:	f8ad 700a 	strh.w	r7, [sp, #10]
	mSPI.SPI_CPHA 							= SPI_CPHA_2Edge;
 8001692:	f8ad 400c 	strh.w	r4, [sp, #12]
	mSPI.SPI_FirstBit 					= SPI_FirstBit_MSB;	
 8001696:	f8ad 5012 	strh.w	r5, [sp, #18]
	mSPI.SPI_NSS 								= SPI_NSS_Soft;
 800169a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800169e:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	SPI_Init(SPI3, &mSPI);
 80016a2:	eb0d 0109 	add.w	r1, sp, r9
 80016a6:	4630      	mov	r0, r6
 80016a8:	f7ff fe50 	bl	800134c <SPI_Init>
	SPI_Cmd(SPI3, ENABLE);
 80016ac:	4621      	mov	r1, r4
 80016ae:	4630      	mov	r0, r6
 80016b0:	f7ff fe7e 	bl	80013b0 <SPI_Cmd>
	SPI_NSSInternalSoftwareConfig(SPI3, SPI_NSSInternalSoft_Set);
 80016b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b8:	4630      	mov	r0, r6
 80016ba:	f7ff fe86 	bl	80013ca <SPI_NSSInternalSoftwareConfig>
};
 80016be:	b009      	add	sp, #36	; 0x24
 80016c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020c00 	.word	0x40020c00

080016cc <CAT25512_ReadStatusRegister>:

/*Returns the contents of eeprom status register*/
unsigned char CAT25512_ReadStatusRegister()
{
 80016cc:	b538      	push	{r3, r4, r5, lr}
	unsigned char mData = 0;
	CAT25512_CS_SET;
 80016ce:	4c0b      	ldr	r4, [pc, #44]	; (80016fc <CAT25512_ReadStatusRegister+0x30>)
 80016d0:	2104      	movs	r1, #4
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff fd1d 	bl	8001112 <GPIO_ResetBits>
	CAT25512_SendByte( INTSRUCTION_RDSR );
 80016d8:	2005      	movs	r0, #5
 80016da:	f7ff ff45 	bl	8001568 <CAT25512_SendByte>
	delay_ns(2);
 80016de:	2002      	movs	r0, #2
 80016e0:	f004 fe86 	bl	80063f0 <delay_ns>
	mData = CAT25512_RecieveData();
 80016e4:	f7ff ff58 	bl	8001598 <CAT25512_RecieveData>
 80016e8:	b2c5      	uxtb	r5, r0
	delay_ns(200);
 80016ea:	20c8      	movs	r0, #200	; 0xc8
 80016ec:	f004 fe80 	bl	80063f0 <delay_ns>
	CAT25512_CS_CLEAR;
 80016f0:	2104      	movs	r1, #4
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fd0b 	bl	800110e <GPIO_SetBits>
	return mData;
};
 80016f8:	4628      	mov	r0, r5
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
 80016fc:	40020c00 	.word	0x40020c00

08001700 <CAT25512_WREN>:
	CAT25512_CS_CLEAR;
};

/*Write enable command*/
void CAT25512_WREN(void)
{
 8001700:	b510      	push	{r4, lr}
	CAT25512_CS_SET;
 8001702:	4c08      	ldr	r4, [pc, #32]	; (8001724 <CAT25512_WREN+0x24>)
 8001704:	2104      	movs	r1, #4
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff fd03 	bl	8001112 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_WREN);
 800170c:	2006      	movs	r0, #6
 800170e:	f7ff ff2b 	bl	8001568 <CAT25512_SendByte>
	delay_ns(200);
 8001712:	20c8      	movs	r0, #200	; 0xc8
 8001714:	f004 fe6c 	bl	80063f0 <delay_ns>
	CAT25512_CS_CLEAR;
 8001718:	2104      	movs	r1, #4
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fcf7 	bl	800110e <GPIO_SetBits>
};
 8001720:	bd10      	pop	{r4, pc}
 8001722:	bf00      	nop
 8001724:	40020c00 	.word	0x40020c00

08001728 <CAT25512_ReadByte>:
	CAT25512_CS_CLEAR;
};

/*Reads one byte of Data from CAT25512 memory*/
unsigned char CAT25512_ReadByte(unsigned short int Address)
{
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	4605      	mov	r5, r0
	unsigned char Data;
	CAT25512_CS_SET;
 800172c:	4c0c      	ldr	r4, [pc, #48]	; (8001760 <CAT25512_ReadByte+0x38>)
 800172e:	2104      	movs	r1, #4
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff fcee 	bl	8001112 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_READ);
 8001736:	2003      	movs	r0, #3
 8001738:	f7ff ff16 	bl	8001568 <CAT25512_SendByte>
	CAT25512_SendByte((Address&0xFF00)>>8);
 800173c:	0a28      	lsrs	r0, r5, #8
 800173e:	f7ff ff13 	bl	8001568 <CAT25512_SendByte>
	CAT25512_SendByte((Address&0x00FF));
 8001742:	b2e8      	uxtb	r0, r5
 8001744:	f7ff ff10 	bl	8001568 <CAT25512_SendByte>
	Data = CAT25512_RecieveData();
 8001748:	f7ff ff26 	bl	8001598 <CAT25512_RecieveData>
 800174c:	b2c5      	uxtb	r5, r0
	delay_ns(200);
 800174e:	20c8      	movs	r0, #200	; 0xc8
 8001750:	f004 fe4e 	bl	80063f0 <delay_ns>
	CAT25512_CS_CLEAR;
 8001754:	2104      	movs	r1, #4
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fcd9 	bl	800110e <GPIO_SetBits>
	return Data;
};
 800175c:	4628      	mov	r0, r5
 800175e:	bd38      	pop	{r3, r4, r5, pc}
 8001760:	40020c00 	.word	0x40020c00

08001764 <CAT25512_write_block>:

/*Writes the Length bytes of Data started from certain Address*/
void CAT25512_write_block(unsigned short int Address, unsigned char *Data, unsigned short int length)
{
 8001764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001768:	4607      	mov	r7, r0
 800176a:	460e      	mov	r6, r1
 800176c:	4615      	mov	r5, r2
	unsigned short int totalcnt=0;
	
	CAT25512_WREN();
 800176e:	f7ff ffc7 	bl	8001700 <CAT25512_WREN>
	
	CAT25512_CS_SET;
 8001772:	2104      	movs	r1, #4
 8001774:	482c      	ldr	r0, [pc, #176]	; (8001828 <CAT25512_write_block+0xc4>)
 8001776:	f7ff fccc 	bl	8001112 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_WRITE);
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fef4 	bl	8001568 <CAT25512_SendByte>
	CAT25512_SendByte((Address&0xFF00)>>8);
 8001780:	0a38      	lsrs	r0, r7, #8
 8001782:	f7ff fef1 	bl	8001568 <CAT25512_SendByte>
	CAT25512_SendByte((Address&0x00FF));
 8001786:	fa5f f887 	uxtb.w	r8, r7
 800178a:	4640      	mov	r0, r8
 800178c:	f7ff feec 	bl	8001568 <CAT25512_SendByte>
	unsigned short int totalcnt=0;
 8001790:	2400      	movs	r4, #0
	
	while(totalcnt<length) {
 8001792:	e022      	b.n	80017da <CAT25512_write_block+0x76>
			CAT25512_CS_CLEAR;
			
			//read status register
			delay_ms(1);
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
				delay_ms(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f004 f8e9 	bl	800596c <delay_ms>
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 800179a:	f7ff ff97 	bl	80016cc <CAT25512_ReadStatusRegister>
 800179e:	f010 0f01 	tst.w	r0, #1
 80017a2:	d1f7      	bne.n	8001794 <CAT25512_write_block+0x30>
			};
			
			delay_ms(1);	
 80017a4:	2001      	movs	r0, #1
 80017a6:	f004 f8e1 	bl	800596c <delay_ms>

			CAT25512_WREN();			
 80017aa:	f7ff ffa9 	bl	8001700 <CAT25512_WREN>
			
			CAT25512_CS_SET;
 80017ae:	2104      	movs	r1, #4
 80017b0:	481d      	ldr	r0, [pc, #116]	; (8001828 <CAT25512_write_block+0xc4>)
 80017b2:	f7ff fcae 	bl	8001112 <GPIO_ResetBits>
			CAT25512_SendByte(INTSRUCTION_WRITE);
 80017b6:	2002      	movs	r0, #2
 80017b8:	f7ff fed6 	bl	8001568 <CAT25512_SendByte>
			CAT25512_SendByte(((Address+totalcnt)&0xFF00)>>8);
 80017bc:	19e0      	adds	r0, r4, r7
 80017be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80017c2:	f7ff fed1 	bl	8001568 <CAT25512_SendByte>
			CAT25512_SendByte(((Address+totalcnt)&0x00FF));			
 80017c6:	fa58 f084 	uxtab	r0, r8, r4
 80017ca:	b2c0      	uxtb	r0, r0
 80017cc:	f7ff fecc 	bl	8001568 <CAT25512_SendByte>
		};
		
		CAT25512_SendByte(Data[totalcnt]);	
 80017d0:	5d30      	ldrb	r0, [r6, r4]
 80017d2:	f7ff fec9 	bl	8001568 <CAT25512_SendByte>
		
		totalcnt++;
 80017d6:	3401      	adds	r4, #1
 80017d8:	b2a4      	uxth	r4, r4
	while(totalcnt<length) {
 80017da:	42ac      	cmp	r4, r5
 80017dc:	d20f      	bcs.n	80017fe <CAT25512_write_block+0x9a>
		if ( (((/*Address+*/totalcnt)&0x007F) == 0) && (totalcnt != 0) ) {
 80017de:	f014 0f7f 	tst.w	r4, #127	; 0x7f
 80017e2:	d1f5      	bne.n	80017d0 <CAT25512_write_block+0x6c>
 80017e4:	2c00      	cmp	r4, #0
 80017e6:	d0f3      	beq.n	80017d0 <CAT25512_write_block+0x6c>
			delay_ns(200);
 80017e8:	20c8      	movs	r0, #200	; 0xc8
 80017ea:	f004 fe01 	bl	80063f0 <delay_ns>
			CAT25512_CS_CLEAR;
 80017ee:	2104      	movs	r1, #4
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <CAT25512_write_block+0xc4>)
 80017f2:	f7ff fc8c 	bl	800110e <GPIO_SetBits>
			delay_ms(1);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f004 f8b8 	bl	800596c <delay_ms>
			while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 80017fc:	e7cd      	b.n	800179a <CAT25512_write_block+0x36>
	};
	
	delay_ns(200);
 80017fe:	20c8      	movs	r0, #200	; 0xc8
 8001800:	f004 fdf6 	bl	80063f0 <delay_ns>
	CAT25512_CS_CLEAR;
 8001804:	2104      	movs	r1, #4
 8001806:	4808      	ldr	r0, [pc, #32]	; (8001828 <CAT25512_write_block+0xc4>)
 8001808:	f7ff fc81 	bl	800110e <GPIO_SetBits>
	
	delay_ms(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f004 f8ad 	bl	800596c <delay_ms>
	while ((CAT25512_ReadStatusRegister() & (SR_RDY) ) != 0) {
 8001812:	f7ff ff5b 	bl	80016cc <CAT25512_ReadStatusRegister>
 8001816:	f010 0f01 	tst.w	r0, #1
 800181a:	d003      	beq.n	8001824 <CAT25512_write_block+0xc0>
		delay_ms(1);
 800181c:	2001      	movs	r0, #1
 800181e:	f004 f8a5 	bl	800596c <delay_ms>
 8001822:	e7f6      	b.n	8001812 <CAT25512_write_block+0xae>
	};
};
 8001824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001828:	40020c00 	.word	0x40020c00

0800182c <CAT25512_read_block>:

/*Reads the Length bytes of Data started from certain Address*/
void CAT25512_read_block(unsigned short int Address, unsigned char *Data, unsigned short int length)
{
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	460e      	mov	r6, r1
 8001832:	4615      	mov	r5, r2
	unsigned short int cnt=0, totalcnt=0;
	
	CAT25512_CS_SET;
 8001834:	2104      	movs	r1, #4
 8001836:	480e      	ldr	r0, [pc, #56]	; (8001870 <CAT25512_read_block+0x44>)
 8001838:	f7ff fc6b 	bl	8001112 <GPIO_ResetBits>
	CAT25512_SendByte(INTSRUCTION_READ);
 800183c:	2003      	movs	r0, #3
 800183e:	f7ff fe93 	bl	8001568 <CAT25512_SendByte>
	CAT25512_SendByte((Address&0xFF00)>>8);
 8001842:	0a20      	lsrs	r0, r4, #8
 8001844:	f7ff fe90 	bl	8001568 <CAT25512_SendByte>
	CAT25512_SendByte((Address&0x00FF));
 8001848:	b2e0      	uxtb	r0, r4
 800184a:	f7ff fe8d 	bl	8001568 <CAT25512_SendByte>
	unsigned short int cnt=0, totalcnt=0;
 800184e:	2400      	movs	r4, #0
	while(totalcnt<length) {
 8001850:	e004      	b.n	800185c <CAT25512_read_block+0x30>
			CAT25512_SendByte(INTSRUCTION_READ);
			CAT25512_SendByte(((Address+totalcnt)&0xFF00)>>8);
			CAT25512_SendByte(((Address+totalcnt)&0x00FF));	
		};*/
		
		Data[totalcnt] = CAT25512_RecieveData();
 8001852:	f7ff fea1 	bl	8001598 <CAT25512_RecieveData>
 8001856:	5530      	strb	r0, [r6, r4]
		totalcnt++;
 8001858:	3401      	adds	r4, #1
 800185a:	b2a4      	uxth	r4, r4
	while(totalcnt<length) {
 800185c:	42ac      	cmp	r4, r5
 800185e:	d3f8      	bcc.n	8001852 <CAT25512_read_block+0x26>
		cnt++;
	}
	
	delay_ns(200);
 8001860:	20c8      	movs	r0, #200	; 0xc8
 8001862:	f004 fdc5 	bl	80063f0 <delay_ns>
	CAT25512_CS_CLEAR;
 8001866:	2104      	movs	r1, #4
 8001868:	4801      	ldr	r0, [pc, #4]	; (8001870 <CAT25512_read_block+0x44>)
 800186a:	f7ff fc50 	bl	800110e <GPIO_SetBits>
	
};
 800186e:	bd70      	pop	{r4, r5, r6, pc}
 8001870:	40020c00 	.word	0x40020c00

08001874 <init_HC165>:

#define _BV(x)  (1<<x);

///Setting up PORTs IO
void init_HC165(void)
{
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	b084      	sub	sp, #16
	
	/* init pins struct*/
	GPIO_InitTypeDef mGPIO_InitStructure;
	GPIO_InitTypeDef mGPIO_InitStructure2;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001878:	2101      	movs	r1, #1
 800187a:	2004      	movs	r0, #4
 800187c:	f7ff fcbe 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	
	memset(&mGPIO_InitStructure, 0, sizeof(mGPIO_InitStructure));
 8001880:	2600      	movs	r6, #0
 8001882:	f8ad 600e 	strh.w	r6, [sp, #14]
	mGPIO_InitStructure.GPIO_Pin 		= SW_CP|SW_PL|SW_CE;
 8001886:	230e      	movs	r3, #14
 8001888:	9302      	str	r3, [sp, #8]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 800188a:	2501      	movs	r5, #1
 800188c:	f88d 500c 	strb.w	r5, [sp, #12]
	mGPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_100MHz;
 8001890:	2303      	movs	r3, #3
 8001892:	f88d 300d 	strb.w	r3, [sp, #13]
	
	GPIO_Init(GPIOC, &mGPIO_InitStructure);
 8001896:	4c0c      	ldr	r4, [pc, #48]	; (80018c8 <init_HC165+0x54>)
 8001898:	a902      	add	r1, sp, #8
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff fbe2 	bl	8001064 <GPIO_Init>
	
	memset(&mGPIO_InitStructure2, 0, sizeof(mGPIO_InitStructure2));
 80018a0:	9601      	str	r6, [sp, #4]
	mGPIO_InitStructure2.GPIO_Pin 		= SW_DAT;
 80018a2:	9500      	str	r5, [sp, #0]
	mGPIO_InitStructure2.GPIO_Mode 		= GPIO_Mode_IN;

	GPIO_Init(GPIOC, &mGPIO_InitStructure2);
 80018a4:	4669      	mov	r1, sp
 80018a6:	4620      	mov	r0, r4
 80018a8:	f7ff fbdc 	bl	8001064 <GPIO_Init>
	
	SS_HIGH;
 80018ac:	2108      	movs	r1, #8
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fc2d 	bl	800110e <GPIO_SetBits>
	CE_LOW;
 80018b4:	2104      	movs	r1, #4
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fc2b 	bl	8001112 <GPIO_ResetBits>
	CLK_LOW;
 80018bc:	2102      	movs	r1, #2
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff fc27 	bl	8001112 <GPIO_ResetBits>
}
 80018c4:	b004      	add	sp, #16
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
 80018c8:	40020800 	.word	0x40020800

080018cc <HC165_LatchUp>:

//Close latch and load data to internal registers 165
void HC165_LatchUp(void)
{
 80018cc:	b510      	push	{r4, lr}
	CE_LOW;
 80018ce:	4c19      	ldr	r4, [pc, #100]	; (8001934 <HC165_LatchUp+0x68>)
 80018d0:	2104      	movs	r1, #4
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff fc1d 	bl	8001112 <GPIO_ResetBits>
	CLK_LOW;
 80018d8:	2102      	movs	r1, #2
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff fc19 	bl	8001112 <GPIO_ResetBits>
	SS_LOW;
 80018e0:	2108      	movs	r1, #8
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7ff fc15 	bl	8001112 <GPIO_ResetBits>
	//	delay_us(1);
	 DELAY_NOPS(); 
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	bf00      	nop
	SS_HIGH;
 8001908:	2108      	movs	r1, #8
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff fbff 	bl	800110e <GPIO_SetBits>
	DELAY_NOPS(); 
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	bf00      	nop
}
 8001930:	bd10      	pop	{r4, pc}
 8001932:	bf00      	nop
 8001934:	40020800 	.word	0x40020800

08001938 <HC165_GetByte>:


unsigned char HC165_GetByte(void)
{
 8001938:	b570      	push	{r4, r5, r6, lr}
	unsigned char data = 0x00, cnt = 0;	
	DELAY_NOPS(); 
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	bf00      	nop
	if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
 800195a:	2101      	movs	r1, #1
 800195c:	4835      	ldr	r0, [pc, #212]	; (8001a34 <HC165_GetByte+0xfc>)
 800195e:	f7ff fbcf 	bl	8001100 <GPIO_ReadInputDataBit>
 8001962:	2801      	cmp	r0, #1
 8001964:	d016      	beq.n	8001994 <HC165_GetByte+0x5c>
	unsigned char data = 0x00, cnt = 0;	
 8001966:	2500      	movs	r5, #0
		data = data | (0x01);
	};

	CLK_HIGH;	
 8001968:	2102      	movs	r1, #2
 800196a:	4832      	ldr	r0, [pc, #200]	; (8001a34 <HC165_GetByte+0xfc>)
 800196c:	f7ff fbcf 	bl	800110e <GPIO_SetBits>
	DELAY_NOPS();
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	bf00      	nop

	for(cnt=0; cnt<7;cnt++)
 8001990:	2400      	movs	r4, #0
 8001992:	e017      	b.n	80019c4 <HC165_GetByte+0x8c>
		data = data | (0x01);
 8001994:	2501      	movs	r5, #1
 8001996:	e7e7      	b.n	8001968 <HC165_GetByte+0x30>

		data = data << 1;		
		if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
			data = data | (0x01);
		};
		CLK_HIGH;		
 8001998:	2102      	movs	r1, #2
 800199a:	4826      	ldr	r0, [pc, #152]	; (8001a34 <HC165_GetByte+0xfc>)
 800199c:	f7ff fbb7 	bl	800110e <GPIO_SetBits>
		//	 delay_us(1);
		 DELAY_NOPS(); 
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
	for(cnt=0; cnt<7;cnt++)
 80019c0:	3401      	adds	r4, #1
 80019c2:	b2e4      	uxtb	r4, r4
 80019c4:	2c06      	cmp	r4, #6
 80019c6:	d81f      	bhi.n	8001a08 <HC165_GetByte+0xd0>
	  CLK_LOW;
 80019c8:	4e1a      	ldr	r6, [pc, #104]	; (8001a34 <HC165_GetByte+0xfc>)
 80019ca:	2102      	movs	r1, #2
 80019cc:	4630      	mov	r0, r6
 80019ce:	f7ff fba0 	bl	8001112 <GPIO_ResetBits>
	  DELAY_NOPS(); 
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
		data = data << 1;		
 80019f2:	006d      	lsls	r5, r5, #1
 80019f4:	b2ed      	uxtb	r5, r5
		if (  GPIO_ReadInputDataBit(GPIOC, SW_DAT) == 1 ) {
 80019f6:	2101      	movs	r1, #1
 80019f8:	4630      	mov	r0, r6
 80019fa:	f7ff fb81 	bl	8001100 <GPIO_ReadInputDataBit>
 80019fe:	2801      	cmp	r0, #1
 8001a00:	d1ca      	bne.n	8001998 <HC165_GetByte+0x60>
			data = data | (0x01);
 8001a02:	f045 0501 	orr.w	r5, r5, #1
 8001a06:	e7c7      	b.n	8001998 <HC165_GetByte+0x60>
	}

	CLK_LOW;
 8001a08:	2102      	movs	r1, #2
 8001a0a:	480a      	ldr	r0, [pc, #40]	; (8001a34 <HC165_GetByte+0xfc>)
 8001a0c:	f7ff fb81 	bl	8001112 <GPIO_ResetBits>
	DELAY_NOPS(); 
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
	return data;
}
 8001a30:	4628      	mov	r0, r5
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	40020800 	.word	0x40020800

08001a38 <HC165_GetDWord>:

unsigned long int HC165_GetDWord(void)
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
	unsigned char tmp[4] = {0,0,0,0};
	
	tmp[0] = HC165_GetByte();
 8001a3a:	f7ff ff7d 	bl	8001938 <HC165_GetByte>
 8001a3e:	4605      	mov	r5, r0
	tmp[1] = HC165_GetByte();
 8001a40:	f7ff ff7a 	bl	8001938 <HC165_GetByte>
 8001a44:	4606      	mov	r6, r0
	tmp[2] = HC165_GetByte();
 8001a46:	f7ff ff77 	bl	8001938 <HC165_GetByte>
 8001a4a:	4604      	mov	r4, r0
	tmp[3] = HC165_GetByte();
 8001a4c:	f7ff ff74 	bl	8001938 <HC165_GetByte>

	return (unsigned long int) ((((unsigned long int) (tmp[3]))<<24)|(((unsigned long int) (tmp[2]))<<16)|((unsigned long int) (tmp[1])<<8)|(unsigned long int) (tmp[0]));
 8001a50:	0424      	lsls	r4, r4, #16
 8001a52:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 8001a56:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
}
 8001a5a:	4328      	orrs	r0, r5
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}

08001a5e <HC165_GetDWord1>:

unsigned long int HC165_GetDWord1(void)
{
 8001a5e:	b538      	push	{r3, r4, r5, lr}
	unsigned char tmp[4] = {0,0,0,0};

	tmp[0] = HC165_GetByte();
 8001a60:	f7ff ff6a 	bl	8001938 <HC165_GetByte>
 8001a64:	4605      	mov	r5, r0
	tmp[1] = HC165_GetByte();
 8001a66:	f7ff ff67 	bl	8001938 <HC165_GetByte>
 8001a6a:	4604      	mov	r4, r0
	tmp[2] = HC165_GetByte();
 8001a6c:	f7ff ff64 	bl	8001938 <HC165_GetByte>

	return (unsigned long int) ((((unsigned long int) (tmp[3]))<<24)|(((unsigned long int) (tmp[2]))<<16)|((unsigned long int) (tmp[1])<<8)|(unsigned long int) (tmp[0]));
 8001a70:	0224      	lsls	r4, r4, #8
 8001a72:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
}
 8001a76:	4328      	orrs	r0, r5
 8001a78:	bd38      	pop	{r3, r4, r5, pc}
	...

08001a7c <GetButton>:

//Get buttons state
unsigned long long int GetButton(void)
{
 8001a7c:	b570      	push	{r4, r5, r6, lr}
	unsigned long int keys_state_1, keys_state_2;
	
	CE_LOW;
 8001a7e:	4c0c      	ldr	r4, [pc, #48]	; (8001ab0 <GetButton+0x34>)
 8001a80:	2104      	movs	r1, #4
 8001a82:	4620      	mov	r0, r4
 8001a84:	f7ff fb45 	bl	8001112 <GPIO_ResetBits>
	delay_us(10);
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f004 faaf 	bl	8005fec <delay_us>
	HC165_LatchUp();
 8001a8e:	f7ff ff1d 	bl	80018cc <HC165_LatchUp>
	keys_state_1 = HC165_GetDWord();
 8001a92:	f7ff ffd1 	bl	8001a38 <HC165_GetDWord>
 8001a96:	4605      	mov	r5, r0
	keys_state_2 = HC165_GetDWord1();
 8001a98:	f7ff ffe1 	bl	8001a5e <HC165_GetDWord1>
 8001a9c:	4606      	mov	r6, r0
	CE_HIGH;
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff fb34 	bl	800110e <GPIO_SetBits>

	return (unsigned long long int) ( ((unsigned long long int) (keys_state_1)) |  ( ((unsigned long long int) keys_state_2)<<32) );
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	ea43 0005 	orr.w	r0, r3, r5
 8001aac:	4631      	mov	r1, r6
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
 8001ab0:	40020800 	.word	0x40020800

08001ab4 <SendData>:
#include <stm32f4xx_gpio.h>

#include "MAX5135.h"

void SendData(unsigned char mData)
{
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	4604      	mov	r4, r0
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE)); 
 8001ab8:	2102      	movs	r1, #2
 8001aba:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <SendData+0x2c>)
 8001abc:	f7ff fc99 	bl	80013f2 <SPI_I2S_GetFlagStatus>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d0f9      	beq.n	8001ab8 <SendData+0x4>
	SPI_I2S_SendData(SPI2, mData);
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <SendData+0x2c>)
 8001ac8:	f7ff fc91 	bl	80013ee <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE));
 8001acc:	2101      	movs	r1, #1
 8001ace:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <SendData+0x2c>)
 8001ad0:	f7ff fc8f 	bl	80013f2 <SPI_I2S_GetFlagStatus>
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d0f9      	beq.n	8001acc <SendData+0x18>
	SPI_I2S_ReceiveData(SPI2);
 8001ad8:	4801      	ldr	r0, [pc, #4]	; (8001ae0 <SendData+0x2c>)
 8001ada:	f7ff fc86 	bl	80013ea <SPI_I2S_ReceiveData>
	;
};
 8001ade:	bd10      	pop	{r4, pc}
 8001ae0:	40003800 	.word	0x40003800

08001ae4 <MAX5135_SendPack>:

void MAX5135_SendPack(unsigned char _data1, unsigned char _data2)
{
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	4606      	mov	r6, r0
 8001ae8:	460d      	mov	r5, r1
	GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 8001aea:	4c09      	ldr	r4, [pc, #36]	; (8001b10 <MAX5135_SendPack+0x2c>)
 8001aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff fb0e 	bl	8001112 <GPIO_ResetBits>
	
	SendData(_data1);
 8001af6:	4630      	mov	r0, r6
 8001af8:	f7ff ffdc 	bl	8001ab4 <SendData>
	SendData(_data2);
 8001afc:	4628      	mov	r0, r5
 8001afe:	f7ff ffd9 	bl	8001ab4 <SendData>
	
	;	
	//delay_us(1);
	
	GPIO_SetBits(GPIOB, GPIO_Pin_12);
 8001b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7ff fb01 	bl	800110e <GPIO_SetBits>
}
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
 8001b0e:	bf00      	nop
 8001b10:	40020400 	.word	0x40020400

08001b14 <MAX5135init>:

void MAX5135init(void)
{
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b089      	sub	sp, #36	; 0x24
	/* SPI2 setting up*/
	
	GPIO_InitTypeDef mGPIO_InitStructure;
	SPI_InitTypeDef mSPI;
		
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001b18:	2101      	movs	r1, #1
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f7ff fb6e 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	
	//GPIO_PinAFConfig(GPIOB, GPIO_PinSource12, GPIO_AF_SPI2);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_SPI2);
 8001b20:	4d2f      	ldr	r5, [pc, #188]	; (8001be0 <MAX5135init+0xcc>)
 8001b22:	2205      	movs	r2, #5
 8001b24:	210d      	movs	r1, #13
 8001b26:	4628      	mov	r0, r5
 8001b28:	f7ff faf5 	bl	8001116 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_SPI2);
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	210f      	movs	r1, #15
 8001b30:	4628      	mov	r0, r5
 8001b32:	f7ff faf0 	bl	8001116 <GPIO_PinAFConfig>
	
	mGPIO_InitStructure.GPIO_Pin 		= /*GPIO_Pin_12|*/GPIO_Pin_13|GPIO_Pin_15;
 8001b36:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b3a:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8001b3c:	2702      	movs	r7, #2
 8001b3e:	f88d 701c 	strb.w	r7, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 8001b42:	2400      	movs	r4, #0
 8001b44:	f88d 401e 	strb.w	r4, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8001b48:	f88d 401f 	strb.w	r4, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8001b4c:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOB, &mGPIO_InitStructure);
 8001b50:	a906      	add	r1, sp, #24
 8001b52:	4628      	mov	r0, r5
 8001b54:	f7ff fa86 	bl	8001064 <GPIO_Init>
	
	mGPIO_InitStructure.GPIO_Pin 		= GPIO_Pin_12/*|GPIO_Pin_0*/;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	9306      	str	r3, [sp, #24]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001b5e:	2601      	movs	r6, #1
 8001b60:	f88d 601c 	strb.w	r6, [sp, #28]
	mGPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
 8001b64:	f88d 401e 	strb.w	r4, [sp, #30]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8001b68:	f88d 601f 	strb.w	r6, [sp, #31]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8001b6c:	f88d 701d 	strb.w	r7, [sp, #29]
	GPIO_Init(GPIOB, &mGPIO_InitStructure);
 8001b70:	a906      	add	r1, sp, #24
 8001b72:	4628      	mov	r0, r5
 8001b74:	f7ff fa76 	bl	8001064 <GPIO_Init>
	
	//GPIO_SetBits(GPIOB, GPIO_Pin_0);
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001b78:	4631      	mov	r1, r6
 8001b7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b7e:	f7ff fb4b 	bl	8001218 <RCC_APB1PeriphClockCmd>
	
	SPI_I2S_DeInit(SPI2);
 8001b82:	f5a5 35e6 	sub.w	r5, r5, #117760	; 0x1cc00
 8001b86:	4628      	mov	r0, r5
 8001b88:	f7ff fb7e 	bl	8001288 <SPI_I2S_DeInit>
	SPI_StructInit(&mSPI);
 8001b8c:	a801      	add	r0, sp, #4
 8001b8e:	f7ff fc03 	bl	8001398 <SPI_StructInit>
	
	mSPI.SPI_Direction = SPI_Direction_Tx;
 8001b92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b96:	f8ad 3004 	strh.w	r3, [sp, #4]
	mSPI.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001b9a:	f8ad 4010 	strh.w	r4, [sp, #16]
	mSPI.SPI_Mode = SPI_Mode_Master;
 8001b9e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ba2:	f8ad 3006 	strh.w	r3, [sp, #6]
	mSPI.SPI_DataSize = 8;
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	f8ad 3008 	strh.w	r3, [sp, #8]
	mSPI.SPI_CPOL = SPI_CPOL_Low;
 8001bac:	f8ad 400a 	strh.w	r4, [sp, #10]
	mSPI.SPI_CPHA = SPI_CPHA_1Edge;
 8001bb0:	f8ad 400c 	strh.w	r4, [sp, #12]
	mSPI.SPI_FirstBit = SPI_FirstBit_MSB;	
 8001bb4:	f8ad 4012 	strh.w	r4, [sp, #18]
	mSPI.SPI_NSS = SPI_NSS_Soft;
 8001bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bbc:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	SPI_Init(SPI2, &mSPI);
 8001bc0:	a901      	add	r1, sp, #4
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f7ff fbc2 	bl	800134c <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 8001bc8:	4631      	mov	r1, r6
 8001bca:	4628      	mov	r0, r5
 8001bcc:	f7ff fbf0 	bl	80013b0 <SPI_Cmd>
	SPI_NSSInternalSoftwareConfig(SPI2, SPI_NSSInternalSoft_Set);
 8001bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	f7ff fbf8 	bl	80013ca <SPI_NSSInternalSoftwareConfig>
	//delay_ms(10);
	////Clr linearity bit
	//MAX5135_SendPack(MAX5135_CMD_LINEARITY, MAX5135_DATA_NONE, MAX5135_DATA_NONE);
	
	//init END
}
 8001bda:	b009      	add	sp, #36	; 0x24
 8001bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020400 	.word	0x40020400

08001be4 <MAX5135_DAC_send>:


void MAX5135_DAC_send(unsigned char DAC_Ch, unsigned int DAC_val)
{
 8001be4:	b508      	push	{r3, lr}
	uint8_t msb = 0,lsb = 0;
	if(DAC_val > 1023) DAC_val = 1023;
 8001be6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001bea:	d301      	bcc.n	8001bf0 <MAX5135_DAC_send+0xc>
 8001bec:	f240 31ff 	movw	r1, #1023	; 0x3ff
	
	switch(DAC_Ch)
 8001bf0:	2803      	cmp	r0, #3
 8001bf2:	d825      	bhi.n	8001c40 <MAX5135_DAC_send+0x5c>
 8001bf4:	e8df f000 	tbb	[pc, r0]
 8001bf8:	1c140c02 	.word	0x1c140c02
	{
		case 0:
		{
			msb = 0x30 | ((DAC_val >> 6) & 0x0F);
 8001bfc:	f3c1 1083 	ubfx	r0, r1, #6, #4
 8001c00:	f040 0030 	orr.w	r0, r0, #48	; 0x30
			lsb = (DAC_val << 2) & 0xFC;
 8001c04:	b2c9      	uxtb	r1, r1
 8001c06:	0089      	lsls	r1, r1, #2
 8001c08:	b2c9      	uxtb	r1, r1
			msb = 0xF0 | ((DAC_val >> 6) & 0x0F);
			lsb = (DAC_val << 2) & 0xFC;
			break;
		}
	}
	MAX5135_SendPack(msb, lsb);
 8001c0a:	f7ff ff6b 	bl	8001ae4 <MAX5135_SendPack>
}
 8001c0e:	bd08      	pop	{r3, pc}
			msb = 0x70 | ((DAC_val >> 6) & 0x0F);
 8001c10:	f3c1 1083 	ubfx	r0, r1, #6, #4
 8001c14:	f040 0070 	orr.w	r0, r0, #112	; 0x70
			lsb = (DAC_val << 2) & 0xFC;
 8001c18:	b2c9      	uxtb	r1, r1
 8001c1a:	0089      	lsls	r1, r1, #2
 8001c1c:	b2c9      	uxtb	r1, r1
			break;
 8001c1e:	e7f4      	b.n	8001c0a <MAX5135_DAC_send+0x26>
			msb = 0xB0 | ((DAC_val >> 6) & 0x0F);
 8001c20:	f3c1 1083 	ubfx	r0, r1, #6, #4
 8001c24:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
			lsb = (DAC_val << 2) & 0xFC;
 8001c28:	b2c9      	uxtb	r1, r1
 8001c2a:	0089      	lsls	r1, r1, #2
 8001c2c:	b2c9      	uxtb	r1, r1
			break;
 8001c2e:	e7ec      	b.n	8001c0a <MAX5135_DAC_send+0x26>
			msb = 0xF0 | ((DAC_val >> 6) & 0x0F);
 8001c30:	f3c1 1087 	ubfx	r0, r1, #6, #8
 8001c34:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
			lsb = (DAC_val << 2) & 0xFC;
 8001c38:	b2c9      	uxtb	r1, r1
 8001c3a:	0089      	lsls	r1, r1, #2
 8001c3c:	b2c9      	uxtb	r1, r1
			break;
 8001c3e:	e7e4      	b.n	8001c0a <MAX5135_DAC_send+0x26>
	uint8_t msb = 0,lsb = 0;
 8001c40:	2100      	movs	r1, #0
 8001c42:	4608      	mov	r0, r1
 8001c44:	e7e1      	b.n	8001c0a <MAX5135_DAC_send+0x26>
	...

08001c48 <ADC_POTS_selector_init>:
};


//Init GPIOs for ADC channels multiplexers
void ADC_POTS_selector_init(void)
{
 8001c48:	b500      	push	{lr}
 8001c4a:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Setting up peripherial */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2004      	movs	r0, #4
 8001c50:	f7ff fad4 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= ADC_PS_SH_PIN|ADC_PS_ST_PIN|ADC_PS_DS_PIN;
 8001c5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c5e:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c60:	2302      	movs	r3, #2
 8001c62:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 8001c6c:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001c70:	4669      	mov	r1, sp
 8001c72:	4803      	ldr	r0, [pc, #12]	; (8001c80 <ADC_POTS_selector_init+0x38>)
 8001c74:	f7ff f9f6 	bl	8001064 <GPIO_Init>
}
 8001c78:	b003      	add	sp, #12
 8001c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c7e:	bf00      	nop
 8001c80:	40020800 	.word	0x40020800

08001c84 <ADC_POTS_selector_SendByte>:
void ADC_POTS_selector_SendByte(unsigned char data)
{
	unsigned char dat, cnt;
	
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	e02c      	b.n	8001ce2 <ADC_POTS_selector_SendByte+0x5e>
	{
		if ((dat & 0x80) > 0) {
			ADC_POTS_SELECTOR_DATA_HIGH;
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <ADC_POTS_selector_SendByte+0x7c>)
 8001c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c8e:	8311      	strh	r1, [r2, #24]
		}
		/* DELAY_NOPS(); // data setup to serial clock time, 100ns target */
		/* ADC_POTS_SELECTOR_SHIFT_LOW; */
		/* DELAY_NOPS();  // serial clock pulse should be 80ns */
		/* ADC_POTS_SELECTOR_SHIFT_HIGH; */
		ADC_POTS_SELECTOR_SHIFT_LOW;
 8001c90:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <ADC_POTS_selector_SendByte+0x7c>)
 8001c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c96:	8351      	strh	r1, [r2, #26]
		DELAY_NOPS();
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
		ADC_POTS_SELECTOR_SHIFT_HIGH;
 8001cb8:	8311      	strh	r1, [r2, #24]
		DELAY_NOPS(); 
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
		dat = dat << 1;
 8001cda:	0040      	lsls	r0, r0, #1
 8001cdc:	b2c0      	uxtb	r0, r0
	for(cnt=0; cnt<8; cnt++)
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b07      	cmp	r3, #7
 8001ce4:	d807      	bhi.n	8001cf6 <ADC_POTS_selector_SendByte+0x72>
		if ((dat & 0x80) > 0) {
 8001ce6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001cea:	d1cd      	bne.n	8001c88 <ADC_POTS_selector_SendByte+0x4>
			ADC_POTS_SELECTOR_DATA_LOW;
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <ADC_POTS_selector_SendByte+0x7c>)
 8001cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf2:	8351      	strh	r1, [r2, #26]
 8001cf4:	e7cc      	b.n	8001c90 <ADC_POTS_selector_SendByte+0xc>
	}
	
	ADC_POTS_SELECTOR_DATA_LOW;
 8001cf6:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <ADC_POTS_selector_SendByte+0x7c>)
 8001cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfc:	835a      	strh	r2, [r3, #26]
}
 8001cfe:	4770      	bx	lr
 8001d00:	40020800 	.word	0x40020800

08001d04 <ADC_POTS_selector_SendHalfByte>:
void ADC_POTS_selector_SendHalfByte(unsigned char data)
{
  	unsigned char dat, cnt;
	
	dat = data;
	for(cnt=0; cnt<4; cnt++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	e02c      	b.n	8001d62 <ADC_POTS_selector_SendHalfByte+0x5e>
	{
		if ((dat & 0x8) > 0) {
			ADC_POTS_SELECTOR_DATA_HIGH;
		} else {
			ADC_POTS_SELECTOR_DATA_LOW;
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <ADC_POTS_selector_SendHalfByte+0x7c>)
 8001d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d0e:	8351      	strh	r1, [r2, #26]
		}
		/* DELAY_CLOCK(); // data setup to serial clock time, 100ns target */
		/* ADC_POTS_SELECTOR_SHIFT_LOW; */
		/* DELAY_CLOCK();  // serial clock pulse should be 80ns */
		/* ADC_POTS_SELECTOR_SHIFT_HIGH; */
		ADC_POTS_SELECTOR_SHIFT_LOW;
 8001d10:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <ADC_POTS_selector_SendHalfByte+0x7c>)
 8001d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d16:	8351      	strh	r1, [r2, #26]
		DELAY_NOPS(); // clock pulse width 120ns or so; also gives long enough for data to settle
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
		ADC_POTS_SELECTOR_SHIFT_HIGH;
 8001d38:	8311      	strh	r1, [r2, #24]
		DELAY_NOPS(); 
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
		dat = dat << 1;
 8001d5a:	0040      	lsls	r0, r0, #1
 8001d5c:	b2c0      	uxtb	r0, r0
	for(cnt=0; cnt<4; cnt++)
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d807      	bhi.n	8001d76 <ADC_POTS_selector_SendHalfByte+0x72>
		if ((dat & 0x8) > 0) {
 8001d66:	f010 0f08 	tst.w	r0, #8
 8001d6a:	d0cd      	beq.n	8001d08 <ADC_POTS_selector_SendHalfByte+0x4>
			ADC_POTS_SELECTOR_DATA_HIGH;
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <ADC_POTS_selector_SendHalfByte+0x7c>)
 8001d6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d72:	8311      	strh	r1, [r2, #24]
 8001d74:	e7cc      	b.n	8001d10 <ADC_POTS_selector_SendHalfByte+0xc>
	}
	
		ADC_POTS_SELECTOR_DATA_LOW;
 8001d76:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <ADC_POTS_selector_SendHalfByte+0x7c>)
 8001d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d7c:	835a      	strh	r2, [r3, #26]

}
 8001d7e:	4770      	bx	lr
 8001d80:	40020800 	.word	0x40020800

08001d84 <ADC_POTS_selector_SendDWord>:

//Send 5 bytes to ADC channels multiplexers
void ADC_POTS_selector_SendDWord(unsigned long long int data)
{	
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	4604      	mov	r4, r0
  ADC_POTS_SELECTOR_STORAGE_LOW; 
 8001d88:	4d0b      	ldr	r5, [pc, #44]	; (8001db8 <ADC_POTS_selector_SendDWord+0x34>)
 8001d8a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8001d8e:	836e      	strh	r6, [r5, #26]
  ADC_POTS_selector_SendByte((unsigned char) ((data&0xFF00000000)>>32));
 8001d90:	b2c8      	uxtb	r0, r1
 8001d92:	f7ff ff77 	bl	8001c84 <ADC_POTS_selector_SendByte>
  ADC_POTS_selector_SendByte((unsigned char) ((data&0xFF000000)>>24));
 8001d96:	0e20      	lsrs	r0, r4, #24
 8001d98:	f7ff ff74 	bl	8001c84 <ADC_POTS_selector_SendByte>
  ADC_POTS_selector_SendByte((unsigned char) ( data&0x000000FF));
 8001d9c:	b2e0      	uxtb	r0, r4
 8001d9e:	f7ff ff71 	bl	8001c84 <ADC_POTS_selector_SendByte>
  ADC_POTS_selector_SendByte((unsigned char) ((data&0x0000FF00)>>8));
 8001da2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001da6:	f7ff ff6d 	bl	8001c84 <ADC_POTS_selector_SendByte>
  ADC_POTS_selector_SendByte((unsigned char) ((data&0x00FF0000)>>16));
 8001daa:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001dae:	f7ff ff69 	bl	8001c84 <ADC_POTS_selector_SendByte>
  
	
  //	ADC_POTS_SELECTOR_STORAGE_LOW;
  //	DELAY_CLOCK();  
  ADC_POTS_SELECTOR_STORAGE_HIGH; // sendbyte had enough delay at the end
 8001db2:	832e      	strh	r6, [r5, #24]
}
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
 8001db6:	bf00      	nop
 8001db8:	40020800 	.word	0x40020800

08001dbc <ADC_POTS_selector_Ch>:

//Select ADC channel
void ADC_POTS_selector_Ch(unsigned char Ch)
{
 8001dbc:	b508      	push	{r3, lr}
	ADC_POTS_selector_SendDWord((unsigned long long int) ChSelData[Ch]);
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <ADC_POTS_selector_Ch+0x14>)
 8001dc0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001dc4:	e9d0 0100 	ldrd	r0, r1, [r0]
 8001dc8:	f7ff ffdc 	bl	8001d84 <ADC_POTS_selector_SendDWord>
}
 8001dcc:	bd08      	pop	{r3, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000010 	.word	0x20000010

08001dd4 <ADC_inc>:

//Select next ADC channel and tell which it is 
unsigned char ADC_inc(unsigned char pot)
{
 8001dd4:	b570      	push	{r4, r5, r6, lr}
  ADC_POTS_SELECTOR_STORAGE_LOW;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <ADC_inc+0x80>)
 8001dd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ddc:	835a      	strh	r2, [r3, #26]
  /*   1. time sliders aka pots 24-39 */
  /*   2. (first half) external voltages aka pots 16-23 */
  /*   2. (unused half a shift register) */
  /*   3. voltage sliders  aka pots 0 - 15 */
  unsigned char _pot, channel;
  channel = pot & 0x7; // last three bits of the pot number tell which channel of the mux is live
 8001dde:	f000 0607 	and.w	r6, r0, #7
  if (pot >= 8 && pot < 16) {// we're on the final mux
 8001de2:	f1a0 0308 	sub.w	r3, r0, #8
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b07      	cmp	r3, #7
 8001dea:	d910      	bls.n	8001e0e <ADC_inc+0x3a>
 8001dec:	4604      	mov	r4, r0
    channel = (channel + 1) & 0x7;    // increment the channel and wrap
    ADC_POTS_selector_SendHalfByte(channel);
    _pot = 24+channel;  // time slider 1-8 are pots 24 - 31. 
  }
  else if (pot >=16 && pot < 24) { // we're on the external mux, need to shift twice to get to the voltage slider
 8001dee:	f1a0 0510 	sub.w	r5, r0, #16
 8001df2:	b2ed      	uxtb	r5, r5
 8001df4:	2d07      	cmp	r5, #7
 8001df6:	d913      	bls.n	8001e20 <ADC_inc+0x4c>
    ADC_POTS_selector_SendByte(0xFF);
    _pot = channel; // voltage sliders are pots 0-7
  }
  else {
    ADC_POTS_selector_SendHalfByte(0xF); // just shift to next mux
 8001df8:	200f      	movs	r0, #15
 8001dfa:	f7ff ff83 	bl	8001d04 <ADC_POTS_selector_SendHalfByte>
    if (pot >= 32 && pot < 40) // final time sliders, external voltages are next
 8001dfe:	f1a4 0320 	sub.w	r3, r4, #32
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b07      	cmp	r3, #7
 8001e06:	d90f      	bls.n	8001e28 <ADC_inc+0x54>
      {
	_pot = pot - 16; 
      }
    else {
      _pot = pot + 8; // otherwise shift just moves pot count along by 8
 8001e08:	3408      	adds	r4, #8
 8001e0a:	b2e5      	uxtb	r5, r4
 8001e0c:	e00c      	b.n	8001e28 <ADC_inc+0x54>
    channel = (channel + 1) & 0x7;    // increment the channel and wrap
 8001e0e:	1c74      	adds	r4, r6, #1
 8001e10:	f004 0407 	and.w	r4, r4, #7
    ADC_POTS_selector_SendHalfByte(channel);
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7ff ff75 	bl	8001d04 <ADC_POTS_selector_SendHalfByte>
    _pot = 24+channel;  // time slider 1-8 are pots 24 - 31. 
 8001e1a:	f104 0518 	add.w	r5, r4, #24
 8001e1e:	e003      	b.n	8001e28 <ADC_inc+0x54>
    ADC_POTS_selector_SendByte(0xFF);
 8001e20:	20ff      	movs	r0, #255	; 0xff
 8001e22:	f7ff ff2f 	bl	8001c84 <ADC_POTS_selector_SendByte>
    _pot = channel; // voltage sliders are pots 0-7
 8001e26:	4635      	mov	r5, r6
    }
  }
  /* // activate the shift register with the new data */
  /* ADC_POTS_SELECTOR_STORAGE_LOW; */
  /* DELAY_CLOCK(); // serial clock pulse should be 80ns */
  ADC_POTS_SELECTOR_STORAGE_HIGH;// think the sendbyte and sendhalfbyte have enough delay at the end
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <ADC_inc+0x80>)
 8001e2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e2e:	831a      	strh	r2, [r3, #24]
  DELAY_NOPS(); 
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
  // tell the main interrupt which pot we're on now
  return _pot; 
}
 8001e50:	4628      	mov	r0, r5
 8001e52:	bd70      	pop	{r4, r5, r6, pc}
 8001e54:	40020800 	.word	0x40020800

08001e58 <ADC_inc_expanded>:

unsigned char ADC_inc_expanded(unsigned char pot)
{
 8001e58:	b570      	push	{r4, r5, r6, lr}
  /*   2. (unused half a shift register) */
  /*   3. voltage sliders  aka pots 0 - 15 */
  /*   4. expander voltage sliders aka pots 40 - 55 */
  /*   5. expander time sliders aka pots 56 - 71 */
  unsigned char _pot, channel;
  channel = pot & 0x7; // last three bits of the pot number tell which channel of the mux is live
 8001e5a:	f000 0607 	and.w	r6, r0, #7
  if (pot >= 64 && pot < 72) {// we're on the final mux
 8001e5e:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b07      	cmp	r3, #7
 8001e66:	d90f      	bls.n	8001e88 <ADC_inc_expanded+0x30>
 8001e68:	4604      	mov	r4, r0
    channel = (channel + 1) & 0x7;    // increment the channel and wrap
    ADC_POTS_selector_SendHalfByte(channel);
    _pot = 24+channel;  // time slider 1-8 are pots 24 - 31. 
  }
  else if (pot >=16 && pot < 24) { // we're on the external mux, need to shift twice to get to the voltage slider
 8001e6a:	f1a0 0510 	sub.w	r5, r0, #16
 8001e6e:	b2ed      	uxtb	r5, r5
 8001e70:	2d07      	cmp	r5, #7
 8001e72:	d812      	bhi.n	8001e9a <ADC_inc_expanded+0x42>
    ADC_POTS_selector_SendByte(0xFF);
 8001e74:	20ff      	movs	r0, #255	; 0xff
 8001e76:	f7ff ff05 	bl	8001c84 <ADC_POTS_selector_SendByte>
    _pot = channel; // voltage sliders are pots 0-7
 8001e7a:	4635      	mov	r5, r6
      {
      _pot = pot + 8; // otherwise shift just moves pot count along by 8
      }
  }
  // activate the shift register with the new data
  ADC_POTS_SELECTOR_STORAGE_LOW;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <ADC_inc_expanded+0x84>)
 8001e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e82:	835a      	strh	r2, [r3, #26]
  DELAY_CLOCK();  // serial clock pulse should be 80ns
 8001e84:	230a      	movs	r3, #10
 8001e86:	e01d      	b.n	8001ec4 <ADC_inc_expanded+0x6c>
    channel = (channel + 1) & 0x7;    // increment the channel and wrap
 8001e88:	1c74      	adds	r4, r6, #1
 8001e8a:	f004 0407 	and.w	r4, r4, #7
    ADC_POTS_selector_SendHalfByte(channel);
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff ff38 	bl	8001d04 <ADC_POTS_selector_SendHalfByte>
    _pot = 24+channel;  // time slider 1-8 are pots 24 - 31. 
 8001e94:	f104 0518 	add.w	r5, r4, #24
 8001e98:	e7f0      	b.n	8001e7c <ADC_inc_expanded+0x24>
    ADC_POTS_selector_SendHalfByte(0xF); // just shift to next mux
 8001e9a:	200f      	movs	r0, #15
 8001e9c:	f7ff ff32 	bl	8001d04 <ADC_POTS_selector_SendHalfByte>
    if (pot >= 32 && pot < 40) // final time sliders, external voltages are next
 8001ea0:	f1a4 0320 	sub.w	r3, r4, #32
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	d9e8      	bls.n	8001e7c <ADC_inc_expanded+0x24>
    else if (pot >=8 && pot < 16) { // from mux 3 to mux 4
 8001eaa:	f1a4 0308 	sub.w	r3, r4, #8
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b07      	cmp	r3, #7
 8001eb2:	d802      	bhi.n	8001eba <ADC_inc_expanded+0x62>
      _pot = pot + 32; 
 8001eb4:	3420      	adds	r4, #32
 8001eb6:	b2e5      	uxtb	r5, r4
 8001eb8:	e7e0      	b.n	8001e7c <ADC_inc_expanded+0x24>
      _pot = pot + 8; // otherwise shift just moves pot count along by 8
 8001eba:	3408      	adds	r4, #8
 8001ebc:	b2e5      	uxtb	r5, r4
 8001ebe:	e7dd      	b.n	8001e7c <ADC_inc_expanded+0x24>
  DELAY_CLOCK();  // serial clock pulse should be 80ns
 8001ec0:	bf00      	nop
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1fb      	bne.n	8001ec0 <ADC_inc_expanded+0x68>
  ADC_POTS_SELECTOR_STORAGE_HIGH;
 8001ec8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ecc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001ed0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ed4:	831a      	strh	r2, [r3, #24]
  // tell the main interrupt which pot we're on now
  return _pot; 
}
 8001ed6:	4628      	mov	r0, r5
 8001ed8:	bd70      	pop	{r4, r5, r6, pc}
 8001eda:	bf00      	nop
 8001edc:	40020800 	.word	0x40020800

08001ee0 <DipConfig_init>:
#define DipConfigPin3 GPIO_Pin_13
#define DipConfigPin4 GPIO_Pin_8

/*Init GPIOs for configuration dip switch*/
void DipConfig_init(void)
{
 8001ee0:	b500      	push	{lr}
 8001ee2:	b083      	sub	sp, #12
	GPIO_InitTypeDef mGPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	f7ff f988 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	
	//setup gpio speed


	mGPIO_InitStructure.GPIO_Pin 		= DipConfigPin1|DipConfigPin2|/*DipConfigPin3|*/DipConfigPin4;
 8001eec:	f44f 4309 	mov.w	r3, #35072	; 0x8900
 8001ef0:	9300      	str	r3, [sp, #0]
	mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IN;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f88d 3004 	strb.w	r3, [sp, #4]
	mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_UP;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f88d 2007 	strb.w	r2, [sp, #7]
	mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;
 8001efe:	f88d 3005 	strb.w	r3, [sp, #5]
	


	GPIO_Init(GPIOA, &mGPIO_InitStructure);
 8001f02:	4669      	mov	r1, sp
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <DipConfig_init+0x30>)
 8001f06:	f7ff f8ad 	bl	8001064 <GPIO_Init>
};
 8001f0a:	b003      	add	sp, #12
 8001f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f10:	40020000 	.word	0x40020000

08001f14 <GetDipConfig>:

/*Returns the state of dip switch*/
uDipConfig GetDipConfig(void)
{
 8001f14:	b538      	push	{r3, r4, r5, lr}
	uDipConfig lDipConfig;
	
	lDipConfig.b.V_OUT_1V2 		= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin1);
 8001f16:	4d0f      	ldr	r5, [pc, #60]	; (8001f54 <GetDipConfig+0x40>)
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	f7ff f8ef 	bl	8001100 <GPIO_ReadInputDataBit>
 8001f22:	43c0      	mvns	r0, r0
 8001f24:	f04f 0400 	mov.w	r4, #0
 8001f28:	f360 0400 	bfi	r4, r0, #0, #1
	//lDipConfig.b.SAVE_V_LEVEL = ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin3);
	lDipConfig.b.SAVE_V_LEVEL = 1;
 8001f2c:	f044 0404 	orr.w	r4, r4, #4
	lDipConfig.b.V_OUT_1V 		= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin2);
 8001f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f34:	4628      	mov	r0, r5
 8001f36:	f7ff f8e3 	bl	8001100 <GPIO_ReadInputDataBit>
 8001f3a:	43c0      	mvns	r0, r0
 8001f3c:	f360 0441 	bfi	r4, r0, #1, #1
	lDipConfig.b.EXPANDER_ON 	= ~GPIO_ReadInputDataBit(GPIOA, DipConfigPin4);
 8001f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f44:	4628      	mov	r0, r5
 8001f46:	f7ff f8db 	bl	8001100 <GPIO_ReadInputDataBit>
 8001f4a:	43c0      	mvns	r0, r0
 8001f4c:	f360 04c3 	bfi	r4, r0, #3, #1
	
	return lDipConfig;
}
 8001f50:	4620      	mov	r0, r4
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	40020000 	.word	0x40020000

08001f58 <Init_Expander_GPIO>:
	/* mGPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IN; */
	/* mGPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_DOWN; */
	/* mGPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz; */
	
	/* GPIO_Init(EXPANDER_GPIO, &mGPIO_InitStructure); */
}
 8001f58:	4770      	bx	lr

08001f5a <Is_Expander_Present>:

/*Returns 1 if expander is connected, otherwise returns 0*/
uint8_t Is_Expander_Present(void)
{
 8001f5a:	b508      	push	{r3, lr}
	uDipConfig DipConfig;
	
	DipConfig = GetDipConfig();
 8001f5c:	f7ff ffda 	bl	8001f14 <GetDipConfig>
	if(DipConfig.b.EXPANDER_ON) return 1;
 8001f60:	f010 0f08 	tst.w	r0, #8
 8001f64:	d101      	bne.n	8001f6a <Is_Expander_Present+0x10>
	else return 0;
 8001f66:	2000      	movs	r0, #0
}
 8001f68:	bd08      	pop	{r3, pc}
	if(DipConfig.b.EXPANDER_ON) return 1;
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	e7fc      	b.n	8001f68 <Is_Expander_Present+0xe>
	...

08001f70 <LEDS_modes_init>:

#define LEDS_MODES_DATA_HIGH		GPIO_SetBits(GPIOC, GPIO_Pin_5)
#define LEDS_MODES_DATA_LOW			GPIO_ResetBits(GPIOC, GPIO_Pin_5)

void LEDS_modes_init(void)
{
 8001f70:	b500      	push	{lr}
 8001f72:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Setting up peripherial */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001f74:	2101      	movs	r1, #1
 8001f76:	2004      	movs	r0, #4
 8001f78:	f7ff f940 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6;
 8001f82:	2370      	movs	r3, #112	; 0x70
 8001f84:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f86:	2302      	movs	r3, #2
 8001f88:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT; 
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 8001f92:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001f96:	4669      	mov	r1, sp
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <LEDS_modes_init+0x34>)
 8001f9a:	f7ff f863 	bl	8001064 <GPIO_Init>
}
 8001f9e:	b003      	add	sp, #12
 8001fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fa4:	40020800 	.word	0x40020800

08001fa8 <LEDS_modes_SendByte>:

void LEDS_modes_SendByte(unsigned char data)
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	4605      	mov	r5, r0
	unsigned char dat, cnt;
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 8001fac:	2400      	movs	r4, #0
 8001fae:	e030      	b.n	8002012 <LEDS_modes_SendByte+0x6a>
	{
		if ((dat & 0x80) > 0) {
			LEDS_MODES_DATA_HIGH;
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	481f      	ldr	r0, [pc, #124]	; (8002030 <LEDS_modes_SendByte+0x88>)
 8001fb4:	f7ff f8ab 	bl	800110e <GPIO_SetBits>
		} else {
			LEDS_MODES_DATA_LOW;
		}
		
		LEDS_MODES_SHIFT_LOW;		
 8001fb8:	4e1d      	ldr	r6, [pc, #116]	; (8002030 <LEDS_modes_SendByte+0x88>)
 8001fba:	2110      	movs	r1, #16
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f7ff f8a8 	bl	8001112 <GPIO_ResetBits>
		DELAY_NOPS();
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
		LEDS_MODES_SHIFT_HIGH;
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	f7ff f892 	bl	800110e <GPIO_SetBits>
		DELAY_NOPS(); 
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	bf00      	nop
		dat = dat << 1;
 800200a:	006d      	lsls	r5, r5, #1
 800200c:	b2ed      	uxtb	r5, r5
	for(cnt=0; cnt<8; cnt++)
 800200e:	3401      	adds	r4, #1
 8002010:	b2e4      	uxtb	r4, r4
 8002012:	2c07      	cmp	r4, #7
 8002014:	d807      	bhi.n	8002026 <LEDS_modes_SendByte+0x7e>
		if ((dat & 0x80) > 0) {
 8002016:	f015 0f80 	tst.w	r5, #128	; 0x80
 800201a:	d1c9      	bne.n	8001fb0 <LEDS_modes_SendByte+0x8>
			LEDS_MODES_DATA_LOW;
 800201c:	2120      	movs	r1, #32
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <LEDS_modes_SendByte+0x88>)
 8002020:	f7ff f877 	bl	8001112 <GPIO_ResetBits>
 8002024:	e7c8      	b.n	8001fb8 <LEDS_modes_SendByte+0x10>
	}
	LEDS_MODES_DATA_LOW;
 8002026:	2120      	movs	r1, #32
 8002028:	4801      	ldr	r0, [pc, #4]	; (8002030 <LEDS_modes_SendByte+0x88>)
 800202a:	f7ff f872 	bl	8001112 <GPIO_ResetBits>
	
}
 800202e:	bd70      	pop	{r4, r5, r6, pc}
 8002030:	40020800 	.word	0x40020800

08002034 <LEDS_modes_SendStruct>:
	LEDS_MODES_STORAGE_HIGH;
}


void LEDS_modes_SendStruct(uLeds *_Leds)
{
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	4604      	mov	r4, r0
	LEDS_MODES_STORAGE_LOW;
 8002038:	4d0a      	ldr	r5, [pc, #40]	; (8002064 <LEDS_modes_SendStruct+0x30>)
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	4628      	mov	r0, r5
 800203e:	f7ff f868 	bl	8001112 <GPIO_ResetBits>
	LEDS_modes_SendByte(_Leds->value[0]);
 8002042:	7820      	ldrb	r0, [r4, #0]
 8002044:	f7ff ffb0 	bl	8001fa8 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[1]);
 8002048:	7860      	ldrb	r0, [r4, #1]
 800204a:	f7ff ffad 	bl	8001fa8 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[2]);
 800204e:	78a0      	ldrb	r0, [r4, #2]
 8002050:	f7ff ffaa 	bl	8001fa8 <LEDS_modes_SendByte>
	LEDS_modes_SendByte(_Leds->value[3]);
 8002054:	78e0      	ldrb	r0, [r4, #3]
 8002056:	f7ff ffa7 	bl	8001fa8 <LEDS_modes_SendByte>

	LEDS_MODES_STORAGE_HIGH;
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	4628      	mov	r0, r5
 800205e:	f7ff f856 	bl	800110e <GPIO_SetBits>
}
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	40020800 	.word	0x40020800

08002068 <LED_STEP_init>:
#define LED_STEP_DATA_HIGH			GPIO_SetBits(GPIOC, GPIO_Pin_8)
#define LED_STEP_DATA_LOW				GPIO_ResetBits(GPIOC, GPIO_Pin_8)

/*Init GPIO for LEDs control via HC595 shift registers*/
void LED_STEP_init(void)
{
 8002068:	b500      	push	{lr}
 800206a:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800206c:	2101      	movs	r1, #1
 800206e:	2004      	movs	r0, #4
 8002070:	f7ff f8c4 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_InitStructure, 0, sizeof(GPIO_InitStructure));
 8002074:	2300      	movs	r3, #0
 8002076:	f8ad 3006 	strh.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_7|GPIO_Pin_8|GPIO_Pin_9;
 800207a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800207e:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; //100mhz default
 8002080:	2303      	movs	r3, #3
 8002082:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;	 
 8002086:	2301      	movs	r3, #1
 8002088:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd	= GPIO_PuPd_UP;
 800208c:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002090:	4669      	mov	r1, sp
 8002092:	4803      	ldr	r0, [pc, #12]	; (80020a0 <LED_STEP_init+0x38>)
 8002094:	f7fe ffe6 	bl	8001064 <GPIO_Init>
}
 8002098:	b003      	add	sp, #12
 800209a:	f85d fb04 	ldr.w	pc, [sp], #4
 800209e:	bf00      	nop
 80020a0:	40020800 	.word	0x40020800

080020a4 <LED_STEP_SendByte>:

/*Shift one byte to HC595 registers which control LEDs*/
void LED_STEP_SendByte(unsigned char data)
{
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4605      	mov	r5, r0
	unsigned char dat, cnt;
	dat = data;
	for(cnt=0; cnt<8; cnt++)
 80020a8:	2400      	movs	r4, #0
 80020aa:	e031      	b.n	8002110 <LED_STEP_SendByte+0x6c>
	{
		if ((dat & 0x80) > 0) {
			LED_STEP_DATA_HIGH;
 80020ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b0:	4820      	ldr	r0, [pc, #128]	; (8002134 <LED_STEP_SendByte+0x90>)
 80020b2:	f7ff f82c 	bl	800110e <GPIO_SetBits>
		} else {
			LED_STEP_DATA_LOW;
		}

		LED_STEP_SHIFT_LOW;
 80020b6:	4e1f      	ldr	r6, [pc, #124]	; (8002134 <LED_STEP_SendByte+0x90>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	4630      	mov	r0, r6
 80020bc:	f7ff f829 	bl	8001112 <GPIO_ResetBits>
		DELAY_NOPS(); 
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
		LED_STEP_SHIFT_HIGH;
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	4630      	mov	r0, r6
 80020e4:	f7ff f813 	bl	800110e <GPIO_SetBits>
		DELAY_NOPS(); 
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	bf00      	nop
		dat = dat << 1;
 8002108:	006d      	lsls	r5, r5, #1
 800210a:	b2ed      	uxtb	r5, r5
	for(cnt=0; cnt<8; cnt++)
 800210c:	3401      	adds	r4, #1
 800210e:	b2e4      	uxtb	r4, r4
 8002110:	2c07      	cmp	r4, #7
 8002112:	d808      	bhi.n	8002126 <LED_STEP_SendByte+0x82>
		if ((dat & 0x80) > 0) {
 8002114:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002118:	d1c8      	bne.n	80020ac <LED_STEP_SendByte+0x8>
			LED_STEP_DATA_LOW;
 800211a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <LED_STEP_SendByte+0x90>)
 8002120:	f7fe fff7 	bl	8001112 <GPIO_ResetBits>
 8002124:	e7c7      	b.n	80020b6 <LED_STEP_SendByte+0x12>
	}
	LED_STEP_DATA_LOW;
 8002126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800212a:	4802      	ldr	r0, [pc, #8]	; (8002134 <LED_STEP_SendByte+0x90>)
 800212c:	f7fe fff1 	bl	8001112 <GPIO_ResetBits>
}
 8002130:	bd70      	pop	{r4, r5, r6, pc}
 8002132:	bf00      	nop
 8002134:	40020800 	.word	0x40020800

08002138 <LED_STEP_SendWord>:

/*Shift two bytes to HC595 registers which control LEDs*/
void LED_STEP_SendWord(unsigned long int data)
{
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	4605      	mov	r5, r0
	LED_STEP_STORAGE_LOW;
 800213c:	4c09      	ldr	r4, [pc, #36]	; (8002164 <LED_STEP_SendWord+0x2c>)
 800213e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002142:	4620      	mov	r0, r4
 8002144:	f7fe ffe5 	bl	8001112 <GPIO_ResetBits>
	LED_STEP_SendByte((unsigned char) ((data&0xFF00)>>8) );
 8002148:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800214c:	f7ff ffaa 	bl	80020a4 <LED_STEP_SendByte>
	LED_STEP_SendByte((unsigned char) (data&0x00FF) );
 8002150:	b2e8      	uxtb	r0, r5
 8002152:	f7ff ffa7 	bl	80020a4 <LED_STEP_SendByte>

	LED_STEP_STORAGE_HIGH;
 8002156:	f44f 7100 	mov.w	r1, #512	; 0x200
 800215a:	4620      	mov	r0, r4
 800215c:	f7fe ffd7 	bl	800110e <GPIO_SetBits>
}
 8002160:	bd38      	pop	{r3, r4, r5, pc}
 8002162:	bf00      	nop
 8002164:	40020800 	.word	0x40020800

08002168 <LED_STEP_LightStep>:

/*Turn on the LED which indicates the step number StepNum*/
void LED_STEP_LightStep(unsigned int StepNum)
{
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned long dat = 0xFFFFFFFF;
	unsigned char cnt, tmp1, tmp2;
	
	dat &= ~(1<<0);
	for(cnt=0;cnt<StepNum;cnt++)
 800216a:	2300      	movs	r3, #0
	dat &= ~(1<<0);
 800216c:	f06f 0401 	mvn.w	r4, #1
	for(cnt=0;cnt<StepNum;cnt++)
 8002170:	e004      	b.n	800217c <LED_STEP_LightStep+0x14>
	{		
		dat = dat<<1;
 8002172:	0064      	lsls	r4, r4, #1
		dat |= (1<<0);		
 8002174:	f044 0401 	orr.w	r4, r4, #1
	for(cnt=0;cnt<StepNum;cnt++)
 8002178:	3301      	adds	r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4283      	cmp	r3, r0
 800217e:	d3f8      	bcc.n	8002172 <LED_STEP_LightStep+0xa>
	};
		
	if(!Is_Expander_Present())
 8002180:	f7ff feeb 	bl	8001f5a <Is_Expander_Present>
 8002184:	b1d8      	cbz	r0, 80021be <LED_STEP_LightStep+0x56>
		LED_STEP_SendWord(dat & 0xFFFF);
	}
	else
	{
		//if expander is presented we should control 32 LEDs instead of 16
		tmp1 = dat >> 24;
 8002186:	0e26      	lsrs	r6, r4, #24
		tmp2 = dat >> 16;
 8002188:	f3c4 4707 	ubfx	r7, r4, #16, #8
		LED_STEP_STORAGE_LOW;
 800218c:	4d0e      	ldr	r5, [pc, #56]	; (80021c8 <LED_STEP_LightStep+0x60>)
 800218e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002192:	4628      	mov	r0, r5
 8002194:	f7fe ffbd 	bl	8001112 <GPIO_ResetBits>
		LED_STEP_SendByte((unsigned char) (tmp2) );
 8002198:	4638      	mov	r0, r7
 800219a:	f7ff ff83 	bl	80020a4 <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (tmp1) );
 800219e:	4630      	mov	r0, r6
 80021a0:	f7ff ff80 	bl	80020a4 <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (dat >> 8) );
 80021a4:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80021a8:	f7ff ff7c 	bl	80020a4 <LED_STEP_SendByte>
		LED_STEP_SendByte((unsigned char) (dat) );
 80021ac:	b2e0      	uxtb	r0, r4
 80021ae:	f7ff ff79 	bl	80020a4 <LED_STEP_SendByte>
		
		LED_STEP_STORAGE_HIGH;
 80021b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021b6:	4628      	mov	r0, r5
 80021b8:	f7fe ffa9 	bl	800110e <GPIO_SetBits>
		
	}
};
 80021bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LED_STEP_SendWord(dat & 0xFFFF);
 80021be:	b2a0      	uxth	r0, r4
 80021c0:	f7ff ffba 	bl	8002138 <LED_STEP_SendWord>
 80021c4:	e7fa      	b.n	80021bc <LED_STEP_LightStep+0x54>
 80021c6:	bf00      	nop
 80021c8:	40020800 	.word	0x40020800

080021cc <systickInit>:
#define KEY_TIMER 5 // scan switches every 5ms


#define JUMP_THRESHOLD 150 // threshold for jumping straight to a new ADC reading rather than slewing

void systickInit(uint16_t frequency) {
 80021cc:	b510      	push	{r4, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	4604      	mov	r4, r0
  RCC_ClocksTypeDef RCC_Clocks;
  RCC_GetClocksFreq(&RCC_Clocks);
 80021d2:	4668      	mov	r0, sp
 80021d4:	f7fe ffb6 	bl	8001144 <RCC_GetClocksFreq>
  (void) SysTick_Config(RCC_Clocks.HCLK_Frequency / frequency);
 80021d8:	9801      	ldr	r0, [sp, #4]
 80021da:	fbb0 f0f4 	udiv	r0, r0, r4
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80021de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80021e2:	d20c      	bcs.n	80021fe <systickInit+0x32>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80021e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80021e8:	3801      	subs	r0, #1
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <systickInit+0x38>)
 80021ec:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80021ee:	4a06      	ldr	r2, [pc, #24]	; (8002208 <systickInit+0x3c>)
 80021f0:	21f0      	movs	r1, #240	; 0xf0
 80021f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	2207      	movs	r2, #7
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	b004      	add	sp, #16
 8002200:	bd10      	pop	{r4, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <SysTick_Handler>:
 
void SysTick_Handler (void)
 {
   millis++; 
 800220c:	4a02      	ldr	r2, [pc, #8]	; (8002218 <SysTick_Handler+0xc>)
 800220e:	6813      	ldr	r3, [r2, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	6013      	str	r3, [r2, #0]
 }
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000c2c 	.word	0x20000c2c

0800221c <mADC_init>:
/*
	Setting up acts Timer 2 as source for ADC start conversion
	with 40 ksamples per second.
*/
void mADC_init(void)
{
 800221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002220:	b090      	sub	sp, #64	; 0x40
	ADC_InitTypeDef ADC_InitType;
	TIM_TimeBaseInitTypeDef TimeBaseInit;
	NVIC_InitTypeDef nvicStructure;
	
	//Timer init
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); 
 8002222:	2101      	movs	r1, #1
 8002224:	4608      	mov	r0, r1
 8002226:	f7fe fff7 	bl	8001218 <RCC_APB1PeriphClockCmd>
		
	TIM_TimeBaseStructInit(&TimeBaseInit);
 800222a:	a805      	add	r0, sp, #20
 800222c:	f7ff f940 	bl	80014b0 <TIM_TimeBaseStructInit>
	TimeBaseInit.TIM_Prescaler 			= 1; // prescaler at 1 means scanning ADCs at 10kHz. Set to 0 for 20kHz.
 8002230:	2401      	movs	r4, #1
 8002232:	f8ad 4014 	strh.w	r4, [sp, #20]
	TimeBaseInit.TIM_CounterMode 		= TIM_CounterMode_Up;
 8002236:	2500      	movs	r5, #0
 8002238:	f8ad 5016 	strh.w	r5, [sp, #22]
  TimeBaseInit.TIM_Period 				= 4200-1;
 800223c:	f241 0367 	movw	r3, #4199	; 0x1067
 8002240:	9306      	str	r3, [sp, #24]
	TimeBaseInit.TIM_ClockDivision 	= TIM_CKD_DIV1;	
 8002242:	f8ad 501c 	strh.w	r5, [sp, #28]
  TIM_TimeBaseInit(TIM2, &TimeBaseInit); 
 8002246:	a905      	add	r1, sp, #20
 8002248:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800224c:	f7ff f8f2 	bl	8001434 <TIM_TimeBaseInit>

	TIM_SelectOutputTrigger(TIM2, TIM_TRGOSource_OC2Ref);
 8002250:	2150      	movs	r1, #80	; 0x50
 8002252:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002256:	f7ff f97d 	bl	8001554 <TIM_SelectOutputTrigger>
	TIM_CCxCmd(TIM2, TIM_Channel_2, TIM_CCx_Enable);
 800225a:	4622      	mov	r2, r4
 800225c:	2104      	movs	r1, #4
 800225e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002262:	f7ff f94c 	bl	80014fe <TIM_CCxCmd>
	TIM_SetCompare2(TIM2, 1);	
 8002266:	4621      	mov	r1, r4
 8002268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800226c:	f7ff f945 	bl	80014fa <TIM_SetCompare2>
	TIM2->CCMR1 |= TIM_CCMR1_OC2M;
 8002270:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002274:	8b03      	ldrh	r3, [r0, #24]
 8002276:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800227a:	8303      	strh	r3, [r0, #24]
  TIM_Cmd(TIM2, ENABLE); 
 800227c:	4621      	mov	r1, r4
 800227e:	f7ff f92f 	bl	80014e0 <TIM_Cmd>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002282:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8002384 <mADC_init+0x168>
 8002286:	2310      	movs	r3, #16
 8002288:	f888 3312 	strb.w	r3, [r8, #786]	; 0x312
	
	//ADC Init
	NVIC_SetPriority (ADC_IRQn, 1);  
	
	//ADC GPIO Init
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800228c:	4621      	mov	r1, r4
 800228e:	4620      	mov	r0, r4
 8002290:	f7fe ffb4 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Init_user, 0, sizeof(GPIO_Init_user));
 8002294:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_Init_user.GPIO_Pin 	= GPIO_Pin_0|GPIO_Pin_1;
 8002296:	2303      	movs	r3, #3
 8002298:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_Init_user.GPIO_Mode 	= GPIO_Mode_AN; //Analog mode
 800229a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	GPIO_Init(GPIOA, & GPIO_Init_user);	
 800229e:	a90e      	add	r1, sp, #56	; 0x38
 80022a0:	4834      	ldr	r0, [pc, #208]	; (8002374 <mADC_init+0x158>)
 80022a2:	f7fe fedf 	bl	8001064 <GPIO_Init>
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80022a6:	4621      	mov	r1, r4
 80022a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022ac:	f7fe ffc2 	bl	8001234 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 80022b0:	4621      	mov	r1, r4
 80022b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022b6:	f7fe ffbd 	bl	8001234 <RCC_APB2PeriphClockCmd>
	// lines added 25/3/2020 GAM to try to slow down the ADC clock
	// I think it was running at 42MHz before which is too fast.
	// 21MHz is in range and still fast enough, 
	  ADC_CommonInitTypeDef ADC_CommonInitStructure;

	  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 80022ba:	9500      	str	r5, [sp, #0]
	  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div6;
 80022bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c0:	9301      	str	r3, [sp, #4]
	  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80022c2:	9502      	str	r5, [sp, #8]
	  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80022c4:	9503      	str	r5, [sp, #12]
	  ADC_CommonInit(&ADC_CommonInitStructure);
 80022c6:	4668      	mov	r0, sp
 80022c8:	f7fe fd90 	bl	8000dec <ADC_CommonInit>
	  // end GAM code
	  
	ADC_StructInit(&ADC_InitType);
 80022cc:	a808      	add	r0, sp, #32
 80022ce:	f7fe fd83 	bl	8000dd8 <ADC_StructInit>
	ADC_InitType.ADC_ContinuousConvMode 	= DISABLE;
 80022d2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
	ADC_InitType.ADC_DataAlign 						= ADC_DataAlign_Right;
 80022d6:	950c      	str	r5, [sp, #48]	; 0x30
	ADC_InitType.ADC_ExternalTrigConv 		= ADC_ExternalTrigConv_T2_TRGO;
 80022d8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80022dc:	930b      	str	r3, [sp, #44]	; 0x2c
	ADC_InitType.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 80022de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022e2:	930a      	str	r3, [sp, #40]	; 0x28
	ADC_InitType.ADC_NbrOfConversion 			= 1;
 80022e4:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	ADC_InitType.ADC_Resolution 					= ADC_Resolution_12b;
 80022e8:	9508      	str	r5, [sp, #32]
	ADC_InitType.ADC_ScanConvMode 				= DISABLE;
 80022ea:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24

	ADC_Init(ADC1, &ADC_InitType);
 80022ee:	4f22      	ldr	r7, [pc, #136]	; (8002378 <mADC_init+0x15c>)
 80022f0:	a908      	add	r1, sp, #32
 80022f2:	4638      	mov	r0, r7
 80022f4:	f7fe fd48 	bl	8000d88 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitType);	
 80022f8:	4e20      	ldr	r6, [pc, #128]	; (800237c <mADC_init+0x160>)
 80022fa:	a908      	add	r1, sp, #32
 80022fc:	4630      	mov	r0, r6
 80022fe:	f7fe fd43 	bl	8000d88 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0 ,1, ADC_SampleTime_480Cycles);
 8002302:	2307      	movs	r3, #7
 8002304:	4622      	mov	r2, r4
 8002306:	4629      	mov	r1, r5
 8002308:	4638      	mov	r0, r7
 800230a:	f7fe fd90 	bl	8000e2e <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1 ,1, ADC_SampleTime_480Cycles);
 800230e:	2307      	movs	r3, #7
 8002310:	4622      	mov	r2, r4
 8002312:	4621      	mov	r1, r4
 8002314:	4630      	mov	r0, r6
 8002316:	f7fe fd8a 	bl	8000e2e <ADC_RegularChannelConfig>
	
	//ADC interrupts init
	nvicStructure.NVIC_IRQChannel = ADC_IRQn;
 800231a:	2312      	movs	r3, #18
 800231c:	f88d 3010 	strb.w	r3, [sp, #16]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8002320:	f88d 4011 	strb.w	r4, [sp, #17]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8002324:	f88d 5012 	strb.w	r5, [sp, #18]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8002328:	f88d 4013 	strb.w	r4, [sp, #19]
	NVIC_Init(&nvicStructure);
 800232c:	a804      	add	r0, sp, #16
 800232e:	f7fe fcf9 	bl	8000d24 <NVIC_Init>
	
	ADC_POT_sel_cnt = 0;
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <mADC_init+0x164>)
 8002334:	701d      	strb	r5, [r3, #0]
	ADC_POTS_selector_Ch(0);
 8002336:	4628      	mov	r0, r5
 8002338:	f7ff fd40 	bl	8001dbc <ADC_POTS_selector_Ch>
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800233c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002340:	f8c8 3000 	str.w	r3, [r8]
	
	NVIC_EnableIRQ(ADC_IRQn);
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8002344:	4622      	mov	r2, r4
 8002346:	f240 2105 	movw	r1, #517	; 0x205
 800234a:	4638      	mov	r0, r7
 800234c:	f7fe fdb7 	bl	8000ebe <ADC_ITConfig>
	ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
 8002350:	4622      	mov	r2, r4
 8002352:	f240 2105 	movw	r1, #517	; 0x205
 8002356:	4630      	mov	r0, r6
 8002358:	f7fe fdb1 	bl	8000ebe <ADC_ITConfig>
	ADC_Cmd(ADC1, ENABLE);	
 800235c:	4621      	mov	r1, r4
 800235e:	4638      	mov	r0, r7
 8002360:	f7fe fd5a 	bl	8000e18 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);	
 8002364:	4621      	mov	r1, r4
 8002366:	4630      	mov	r0, r6
 8002368:	f7fe fd56 	bl	8000e18 <ADC_Cmd>
};
 800236c:	b010      	add	sp, #64	; 0x40
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002372:	bf00      	nop
 8002374:	40020000 	.word	0x40020000
 8002378:	40012000 	.word	0x40012000
 800237c:	40012100 	.word	0x40012100
 8002380:	2000029c 	.word	0x2000029c
 8002384:	e000e100 	.word	0xe000e100

08002388 <ADCPause>:
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8002388:	4b02      	ldr	r3, [pc, #8]	; (8002394 <ADCPause+0xc>)
 800238a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800238e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


void ADCPause(void)
{
	NVIC_DisableIRQ(ADC_IRQn);
};
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100

08002398 <mInterruptInit>:
	NVIC_EnableIRQ(ADC_IRQn);
};

//External interrupts init for start and stop switches
void mInterruptInit(void)
{
 8002398:	b530      	push	{r4, r5, lr}
 800239a:	b087      	sub	sp, #28
	GPIO_InitTypeDef mGPIO;
	EXTI_InitTypeDef mInt;
	NVIC_InitTypeDef NVIC_InitStructure;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800239c:	2101      	movs	r1, #1
 800239e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023a2:	f7fe ff47 	bl	8001234 <RCC_APB2PeriphClockCmd>
	
	mGPIO.GPIO_Mode = GPIO_Mode_IN;
 80023a6:	2400      	movs	r4, #0
 80023a8:	f88d 4014 	strb.w	r4, [sp, #20]
	mGPIO.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8;
 80023ac:	f240 15e3 	movw	r5, #483	; 0x1e3
 80023b0:	9504      	str	r5, [sp, #16]
	mGPIO.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80023b2:	f88d 4017 	strb.w	r4, [sp, #23]
	mGPIO.GPIO_Speed = GPIO_Speed_100MHz;	
 80023b6:	2303      	movs	r3, #3
 80023b8:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_Init(GPIOB, &mGPIO);
 80023bc:	a904      	add	r1, sp, #16
 80023be:	4831      	ldr	r0, [pc, #196]	; (8002484 <mInterruptInit+0xec>)
 80023c0:	f7fe fe50 	bl	8001064 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource0);
 80023c4:	4621      	mov	r1, r4
 80023c6:	2001      	movs	r0, #1
 80023c8:	f7ff f81a 	bl	8001400 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource1);
 80023cc:	2101      	movs	r1, #1
 80023ce:	4608      	mov	r0, r1
 80023d0:	f7ff f816 	bl	8001400 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource5);
 80023d4:	2105      	movs	r1, #5
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7ff f812 	bl	8001400 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource6);
 80023dc:	2106      	movs	r1, #6
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff f80e 	bl	8001400 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource7);
 80023e4:	2107      	movs	r1, #7
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7ff f80a 	bl	8001400 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, GPIO_PinSource8);
 80023ec:	2108      	movs	r1, #8
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7ff f806 	bl	8001400 <SYSCFG_EXTILineConfig>

	
	//START-STOP LINE INIT Interrupt
	EXTI_DeInit();
 80023f4:	f7fe fdda 	bl	8000fac <EXTI_DeInit>
	mInt.EXTI_Line = EXTI_Line0|EXTI_Line1|EXTI_Line5|EXTI_Line6|EXTI_Line7|EXTI_Line8;
 80023f8:	9502      	str	r5, [sp, #8]
	mInt.EXTI_Mode = EXTI_Mode_Interrupt;
 80023fa:	f88d 400c 	strb.w	r4, [sp, #12]
	mInt.EXTI_Trigger = EXTI_Trigger_Rising;
 80023fe:	2308      	movs	r3, #8
 8002400:	f88d 300d 	strb.w	r3, [sp, #13]
	mInt.EXTI_LineCmd = ENABLE;	
 8002404:	2501      	movs	r5, #1
 8002406:	f88d 500e 	strb.w	r5, [sp, #14]
	EXTI_Init(&mInt);
 800240a:	eb0d 0003 	add.w	r0, sp, r3
 800240e:	f7fe fddb 	bl	8000fc8 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn; 						
 8002412:	2306      	movs	r3, #6
 8002414:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00;
 8002418:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00;
 800241c:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 8002420:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002424:	a801      	add	r0, sp, #4
 8002426:	f7fe fc7d 	bl	8000d24 <NVIC_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn; 						
 800242a:	2307      	movs	r3, #7
 800242c:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00; 
 8002430:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00; 
 8002434:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 8002438:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 800243c:	a801      	add	r0, sp, #4
 800243e:	f7fe fc71 	bl	8000d24 <NVIC_Init>
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; 						
 8002442:	2317      	movs	r3, #23
 8002444:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 0x00; 
 8002448:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority 				= 0x00; 
 800244c:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 8002450:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002454:	a801      	add	r0, sp, #4
 8002456:	f7fe fc65 	bl	8000d24 <NVIC_Init>
	
	EXTI_ClearITPendingBit(EXTI_Line0);	
 800245a:	4628      	mov	r0, r5
 800245c:	f7fe fdfc 	bl	8001058 <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line1);	
 8002460:	2002      	movs	r0, #2
 8002462:	f7fe fdf9 	bl	8001058 <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line5);	
 8002466:	2020      	movs	r0, #32
 8002468:	f7fe fdf6 	bl	8001058 <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line6);	
 800246c:	2040      	movs	r0, #64	; 0x40
 800246e:	f7fe fdf3 	bl	8001058 <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line7);	
 8002472:	2080      	movs	r0, #128	; 0x80
 8002474:	f7fe fdf0 	bl	8001058 <EXTI_ClearITPendingBit>
	EXTI_ClearITPendingBit(EXTI_Line8);
 8002478:	f44f 7080 	mov.w	r0, #256	; 0x100
 800247c:	f7fe fdec 	bl	8001058 <EXTI_ClearITPendingBit>
};
 8002480:	b007      	add	sp, #28
 8002482:	bd30      	pop	{r4, r5, pc}
 8002484:	40020400 	.word	0x40020400

08002488 <EXTI0_IRQHandler>:


//STOP KEY-BANANA Interrupt handler
//1 SECTION
void EXTI0_IRQHandler()
{
 8002488:	b508      	push	{r3, lr}
	if ((GPIOB->IDR & GPIO_IDR_IDR_0) &&
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <EXTI0_IRQHandler+0x58>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f013 0f01 	tst.w	r3, #1
 8002492:	d020      	beq.n	80024d6 <EXTI0_IRQHandler+0x4e>
		(gSequencerMode_1 != SEQUENCER_MODE_WAIT && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z)
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <EXTI0_IRQHandler+0x5c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
	if ((GPIOB->IDR & GPIO_IDR_IDR_0) &&
 800249a:	2b01      	cmp	r3, #1
 800249c:	d01b      	beq.n	80024d6 <EXTI0_IRQHandler+0x4e>
		(gSequencerMode_1 != SEQUENCER_MODE_WAIT && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z)
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <EXTI0_IRQHandler+0x5c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d016      	beq.n	80024d6 <EXTI0_IRQHandler+0x4e>
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <EXTI0_IRQHandler+0x5c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d011      	beq.n	80024d6 <EXTI0_IRQHandler+0x4e>
	) {
		printf("Stop Pulse\n");
 80024b2:	480d      	ldr	r0, [pc, #52]	; (80024e8 <EXTI0_IRQHandler+0x60>)
 80024b4:	f004 f8a0 	bl	80065f8 <puts>
		gPrevSequencerMode_1 = SEQUENCER_MODE_RUN;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <EXTI0_IRQHandler+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
		gSequencerMode_1 = SEQUENCER_MODE_STOP;	
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <EXTI0_IRQHandler+0x5c>)
 80024c0:	2202      	movs	r2, #2
 80024c2:	701a      	strb	r2, [r3, #0]
		
		DisplayUpdateFlags.b.MainDisplay 	= 1;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <EXTI0_IRQHandler+0x68>)
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	f042 0202 	orr.w	r2, r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]
	};
	
	EXTI_ClearITPendingBit(EXTI_Line0);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7fe fdbe 	bl	8001058 <EXTI_ClearITPendingBit>
};
 80024dc:	bd08      	pop	{r3, pc}
 80024de:	bf00      	nop
 80024e0:	40020400 	.word	0x40020400
 80024e4:	200002c1 	.word	0x200002c1
 80024e8:	080066e0 	.word	0x080066e0
 80024ec:	200002bd 	.word	0x200002bd
 80024f0:	200002f0 	.word	0x200002f0

080024f4 <InitStart_1_SignalTimer>:

/*
	Init timer for start pulse (section 1) duration measurement 
*/
void InitStart_1_SignalTimer()
{
 80024f4:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80024f6:	2101      	movs	r1, #1
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7fe fe8d 	bl	8001218 <RCC_APB1PeriphClockCmd>
	
	TIM3->PSC = STEP_TIMER_PRESCALER;
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <InitStart_1_SignalTimer+0x30>)
 8002500:	f642 1204 	movw	r2, #10500	; 0x2904
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->ARR = START_TIMER_SUSTAIN;
 8002506:	2201      	movs	r2, #1
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0;
 800250a:	2100      	movs	r1, #0
 800250c:	6259      	str	r1, [r3, #36]	; 0x24
	TIM3->DIER = TIM_DIER_UIE;
 800250e:	819a      	strh	r2, [r3, #12]
	TIM3->CR1 |= TIM_CR1_CEN;
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	801a      	strh	r2, [r3, #0]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <InitStart_1_SignalTimer+0x34>)
 800251a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800251e:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(TIM3_IRQn);	
};
 8002520:	bd08      	pop	{r3, pc}
 8002522:	bf00      	nop
 8002524:	40000400 	.word	0x40000400
 8002528:	e000e100 	.word	0xe000e100

0800252c <InitStart_2_SignalTimer>:

/*
	Init timer for start pulse (section 2) duration measurement 
*/
void InitStart_2_SignalTimer()
{
 800252c:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 800252e:	2101      	movs	r1, #1
 8002530:	2020      	movs	r0, #32
 8002532:	f7fe fe71 	bl	8001218 <RCC_APB1PeriphClockCmd>
	
	TIM7->PSC = STEP_TIMER_PRESCALER;
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <InitStart_2_SignalTimer+0x30>)
 8002538:	f642 1204 	movw	r2, #10500	; 0x2904
 800253c:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM7->ARR = START_TIMER_SUSTAIN;
 800253e:	2201      	movs	r2, #1
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM7->CNT = 0;
 8002542:	2100      	movs	r1, #0
 8002544:	6259      	str	r1, [r3, #36]	; 0x24
	TIM7->DIER = TIM_DIER_UIE;
 8002546:	819a      	strh	r2, [r3, #12]
	TIM7->CR1 |= TIM_CR1_CEN;
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	801a      	strh	r2, [r3, #0]
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <InitStart_2_SignalTimer+0x34>)
 8002552:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002556:	605a      	str	r2, [r3, #4]
	
	NVIC_EnableIRQ(TIM7_IRQn);	
};
 8002558:	bd08      	pop	{r3, pc}
 800255a:	bf00      	nop
 800255c:	40001400 	.word	0x40001400
 8002560:	e000e100 	.word	0xe000e100

08002564 <InitClear_Timer>:

void InitClear_Timer()
{
 8002564:	b508      	push	{r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002566:	2101      	movs	r1, #1
 8002568:	2010      	movs	r0, #16
 800256a:	f7fe fe55 	bl	8001218 <RCC_APB1PeriphClockCmd>
	
	TIM6->PSC = 21000;
 800256e:	480a      	ldr	r0, [pc, #40]	; (8002598 <InitClear_Timer+0x34>)
 8002570:	f245 2308 	movw	r3, #21000	; 0x5208
 8002574:	8503      	strh	r3, [r0, #40]	; 0x28
	TIM6->ARR = 200;
 8002576:	23c8      	movs	r3, #200	; 0xc8
 8002578:	62c3      	str	r3, [r0, #44]	; 0x2c
	TIM6->CNT = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	6243      	str	r3, [r0, #36]	; 0x24
	TIM6->DIER = TIM_DIER_UIE;
 800257e:	2101      	movs	r1, #1
 8002580:	8181      	strh	r1, [r0, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 8002582:	8803      	ldrh	r3, [r0, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	8003      	strh	r3, [r0, #0]
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <InitClear_Timer+0x38>)
 800258a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800258e:	605a      	str	r2, [r3, #4]
	
	NVIC_EnableIRQ(TIM6_DAC_IRQn);	
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8002590:	460a      	mov	r2, r1
 8002592:	f7fe ffc5 	bl	8001520 <TIM_ITConfig>
};
 8002596:	bd08      	pop	{r3, pc}
 8002598:	40001000 	.word	0x40001000
 800259c:	e000e100 	.word	0xe000e100

080025a0 <EXTI1_IRQHandler>:

//STOP KEY-BANANA Interrupt handler
//2 SECTION
void EXTI1_IRQHandler()
{
 80025a0:	b508      	push	{r3, lr}
	//if we are not in wait condition then stop the sequenser
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_1)  && 
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <EXTI1_IRQHandler+0x50>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f013 0f02 	tst.w	r3, #2
 80025aa:	d11d      	bne.n	80025e8 <EXTI1_IRQHandler+0x48>
		(gSequencerMode_2 != SEQUENCER_MODE_WAIT && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <EXTI1_IRQHandler+0x54>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
	if ( !(GPIOB->IDR & GPIO_IDR_IDR_1)  && 
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d018      	beq.n	80025e8 <EXTI1_IRQHandler+0x48>
		(gSequencerMode_2 != SEQUENCER_MODE_WAIT && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <EXTI1_IRQHandler+0x54>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d013      	beq.n	80025e8 <EXTI1_IRQHandler+0x48>
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <EXTI1_IRQHandler+0x54>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d00e      	beq.n	80025e8 <EXTI1_IRQHandler+0x48>
	) {
		gPrevSequencerMode_2 = SEQUENCER_MODE_RUN;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <EXTI1_IRQHandler+0x58>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
		gSequencerMode_2 = SEQUENCER_MODE_STOP;	
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <EXTI1_IRQHandler+0x54>)
 80025d2:	2202      	movs	r2, #2
 80025d4:	701a      	strb	r2, [r3, #0]
		
		//Update both
		DisplayUpdateFlags.b.MainDisplay = 1;
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <EXTI1_IRQHandler+0x5c>)
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	f042 0202 	orr.w	r2, r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]
	};
	
	EXTI_ClearITPendingBit(EXTI_Line1);
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7fe fd35 	bl	8001058 <EXTI_ClearITPendingBit>
};
 80025ee:	bd08      	pop	{r3, pc}
 80025f0:	40020400 	.word	0x40020400
 80025f4:	200002c2 	.word	0x200002c2
 80025f8:	200002be 	.word	0x200002be
 80025fc:	200002f0 	.word	0x200002f0

08002600 <SaveSequence>:

/*
	Save current sequence to memory
*/
unsigned char SaveSequence(unsigned char SequenceCell)
{	
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	4604      	mov	r4, r0
	ADCPause();
 8002604:	f7ff fec0 	bl	8002388 <ADCPause>
	if(!Is_Expander_Present())
 8002608:	f7ff fca7 	bl	8001f5a <Is_Expander_Present>
 800260c:	b1b0      	cbz	r0, 800263c <SaveSequence+0x3c>
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
	}
	else
	{
		CAT25512_write_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 800260e:	3420      	adds	r4, #32
 8002610:	0264      	lsls	r4, r4, #9
 8002612:	b2a4      	uxth	r4, r4
 8002614:	4d17      	ldr	r5, [pc, #92]	; (8002674 <SaveSequence+0x74>)
 8002616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261a:	4629      	mov	r1, r5
 800261c:	4620      	mov	r0, r4
 800261e:	f7ff f8a1 	bl	8001764 <CAT25512_write_block>
		CAT25512_write_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));		
 8002622:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8002626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262a:	18a9      	adds	r1, r5, r2
 800262c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8002630:	f7ff f898 	bl	8001764 <CAT25512_write_block>
	}
	mADC_init();
 8002634:	f7ff fdf2 	bl	800221c <mADC_init>
	return 0;
};
 8002638:	2000      	movs	r0, #0
 800263a:	bd70      	pop	{r4, r5, r6, pc}
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 800263c:	4e0e      	ldr	r6, [pc, #56]	; (8002678 <SaveSequence+0x78>)
 800263e:	7830      	ldrb	r0, [r6, #0]
 8002640:	b2a4      	uxth	r4, r4
 8002642:	4d0c      	ldr	r5, [pc, #48]	; (8002674 <SaveSequence+0x74>)
 8002644:	fb00 f004 	mul.w	r0, r0, r4
 8002648:	0240      	lsls	r0, r0, #9
 800264a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264e:	4629      	mov	r1, r5
 8002650:	f400 407e 	and.w	r0, r0, #65024	; 0xfe00
 8002654:	f7ff f886 	bl	8001764 <CAT25512_write_block>
		CAT25512_write_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 8002658:	7830      	ldrb	r0, [r6, #0]
 800265a:	fb00 f004 	mul.w	r0, r0, r4
 800265e:	0240      	lsls	r0, r0, #9
 8002660:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002668:	18a9      	adds	r1, r5, r2
 800266a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800266e:	f7ff f879 	bl	8001764 <CAT25512_write_block>
 8002672:	e7df      	b.n	8002634 <SaveSequence+0x34>
 8002674:	20000958 	.word	0x20000958
 8002678:	20000270 	.word	0x20000270

0800267c <LoadSequence>:

//Load a sequence from cell number SequenceCell
void LoadSequence(unsigned char SequenceCell)
{
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	4604      	mov	r4, r0
	unsigned char cnt;

	ADCPause();
 8002680:	f7ff fe82 	bl	8002388 <ADCPause>
	if(!Is_Expander_Present())
 8002684:	f7ff fc69 	bl	8001f5a <Is_Expander_Present>
 8002688:	bb38      	cbnz	r0, 80026da <LoadSequence+0x5e>
	{
		CAT25512_read_block(bank*SequenceCell*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 800268a:	4e39      	ldr	r6, [pc, #228]	; (8002770 <LoadSequence+0xf4>)
 800268c:	7830      	ldrb	r0, [r6, #0]
 800268e:	b2a4      	uxth	r4, r4
 8002690:	4d38      	ldr	r5, [pc, #224]	; (8002774 <LoadSequence+0xf8>)
 8002692:	fb00 f004 	mul.w	r0, r0, r4
 8002696:	0240      	lsls	r0, r0, #9
 8002698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269c:	4629      	mov	r1, r5
 800269e:	f400 407e 	and.w	r0, r0, #65024	; 0xfe00
 80026a2:	f7ff f8c3 	bl	800182c <CAT25512_read_block>
		CAT25512_read_block(bank*SequenceCell*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 80026a6:	7830      	ldrb	r0, [r6, #0]
 80026a8:	fb00 f004 	mul.w	r0, r0, r4
 80026ac:	0240      	lsls	r0, r0, #9
 80026ae:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80026b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b6:	18a9      	adds	r1, r5, r2
 80026b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80026bc:	f7ff f8b6 	bl	800182c <CAT25512_read_block>
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
	}
	
	//Block sliders scanning while voltages from slider and preset aren't equal
	if (gDipConfig.b.SAVE_V_LEVEL == 1) {
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <LoadSequence+0xfc>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f013 0f04 	tst.w	r3, #4
 80026c8:	d14f      	bne.n	800276a <LoadSequence+0xee>
			Steps[1][cnt+16].b.WaitVoltageSlider = 1;
			Steps[1][cnt+16].b.WaitTimeSlider = 1;				
		};		
	};
	
	gSequencerMode_1 = SEQUENCER_MODE_STOP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	4a2b      	ldr	r2, [pc, #172]	; (800277c <LoadSequence+0x100>)
 80026ce:	7013      	strb	r3, [r2, #0]
	gSequencerMode_2 = SEQUENCER_MODE_STOP;
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <LoadSequence+0x104>)
 80026d2:	7013      	strb	r3, [r2, #0]
	
	mADC_init();
 80026d4:	f7ff fda2 	bl	800221c <mADC_init>
};
 80026d8:	bd70      	pop	{r4, r5, r6, pc}
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps), (unsigned char *) Steps[0], sizeof(Steps[0]));
 80026da:	3420      	adds	r4, #32
 80026dc:	0264      	lsls	r4, r4, #9
 80026de:	b2a4      	uxth	r4, r4
 80026e0:	4d24      	ldr	r5, [pc, #144]	; (8002774 <LoadSequence+0xf8>)
 80026e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e6:	4629      	mov	r1, r5
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff f89f 	bl	800182c <CAT25512_read_block>
		CAT25512_read_block((SequenceCell+32)*sizeof(Steps)+sizeof(Steps[0]), (unsigned char *) Steps[1], sizeof(Steps[1]));
 80026ee:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80026f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f6:	18a9      	adds	r1, r5, r2
 80026f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80026fc:	f7ff f896 	bl	800182c <CAT25512_read_block>
 8002700:	e7de      	b.n	80026c0 <LoadSequence+0x44>
			Steps[0][cnt].b.WaitVoltageSlider = 1;
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <LoadSequence+0xf8>)
 8002704:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8002708:	6848      	ldr	r0, [r1, #4]
 800270a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800270e:	6048      	str	r0, [r1, #4]
			Steps[0][cnt].b.WaitTimeSlider = 1;
 8002710:	6848      	ldr	r0, [r1, #4]
 8002712:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8002716:	6048      	str	r0, [r1, #4]
			Steps[1][cnt].b.WaitVoltageSlider = 1;
 8002718:	f102 0120 	add.w	r1, r2, #32
 800271c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002720:	6848      	ldr	r0, [r1, #4]
 8002722:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8002726:	6048      	str	r0, [r1, #4]
			Steps[1][cnt].b.WaitTimeSlider = 1;	
 8002728:	6848      	ldr	r0, [r1, #4]
 800272a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800272e:	6048      	str	r0, [r1, #4]
			Steps[0][cnt+16].b.WaitVoltageSlider = 1;
 8002730:	f102 0110 	add.w	r1, r2, #16
 8002734:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002738:	6848      	ldr	r0, [r1, #4]
 800273a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800273e:	6048      	str	r0, [r1, #4]
			Steps[0][cnt+16].b.WaitTimeSlider = 1;
 8002740:	6848      	ldr	r0, [r1, #4]
 8002742:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8002746:	6048      	str	r0, [r1, #4]
			Steps[1][cnt+16].b.WaitVoltageSlider = 1;
 8002748:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800274c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002756:	6059      	str	r1, [r3, #4]
			Steps[1][cnt+16].b.WaitTimeSlider = 1;				
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800275e:	6059      	str	r1, [r3, #4]
		for(cnt=0; cnt<16; cnt++)
 8002760:	3201      	adds	r2, #1
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	2a0f      	cmp	r2, #15
 8002766:	d9cc      	bls.n	8002702 <LoadSequence+0x86>
 8002768:	e7af      	b.n	80026ca <LoadSequence+0x4e>
 800276a:	2200      	movs	r2, #0
 800276c:	e7fa      	b.n	8002764 <LoadSequence+0xe8>
 800276e:	bf00      	nop
 8002770:	20000270 	.word	0x20000270
 8002774:	20000958 	.word	0x20000958
 8002778:	200002e8 	.word	0x200002e8
 800277c:	200002c1 	.word	0x200002c1
 8002780:	200002c2 	.word	0x200002c2

08002784 <GetStepWidth>:
*/
	#define EXT_VOLTAGE_STEP_SELECT	1500
	#define EXT_VOLTAGE_STEP_OFFSET	1000

unsigned long int GetStepWidth(unsigned char _Section, unsigned char _StepNum)
{
 8002784:	b082      	sub	sp, #8
	unsigned long int ret_val = 0;
	unsigned long int time_level = 0;
	unsigned char ext_ban_num = 0;

	if (Steps[_Section][_StepNum].b.TimeSource) {
 8002786:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800278a:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <GetStepWidth+0x160>)
 800278c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002796:	d04e      	beq.n	8002836 <GetStepWidth+0xb2>
		
		//Step time is set externally
	  ext_ban_num = (Steps[_Section][_StepNum].b.TLevel + EXT_VOLTAGE_STEP_OFFSET)/EXT_VOLTAGE_STEP_SELECT;
 8002798:	4613      	mov	r3, r2
 800279a:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <GetStepWidth+0x160>)
 800279c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80027a0:	f3c2 320b 	ubfx	r2, r2, #12, #12
 80027a4:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80027a8:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <GetStepWidth+0x164>)
 80027aa:	fb83 3202 	smull	r3, r2, r3, r2
 80027ae:	0952      	lsrs	r2, r2, #5
		if(ext_ban_num > 3) ext_ban_num = 3;
 80027b0:	2a03      	cmp	r2, #3
 80027b2:	d900      	bls.n	80027b6 <GetStepWidth+0x32>
 80027b4:	2203      	movs	r2, #3
		
		time_level = AddData[ext_ban_num]*(4095.0f/((float)CalConstants[ext_ban_num]));
 80027b6:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <GetStepWidth+0x168>)
 80027b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <GetStepWidth+0x16c>)
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	ee07 3a10 	vmov	s14, r3
 80027cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80027d0:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80028f4 <GetStepWidth+0x170>
 80027d4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80027d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	} else {
		//Step time is set on panel
		time_level = (Steps[_Section][_StepNum].b.TLevel + 1);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_p03 == 1) {
 80027e4:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 80027e8:	4a3e      	ldr	r2, [pc, #248]	; (80028e4 <GetStepWidth+0x160>)
 80027ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027f4:	d12a      	bne.n	800284c <GetStepWidth+0xc8>
	unsigned long int ret_val = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	9301      	str	r3, [sp, #4]
		ret_val = (unsigned long int) ((((float) time_level * 112)/4095) +8);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_p3 == 1) {
 80027fa:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 80027fe:	4a39      	ldr	r2, [pc, #228]	; (80028e4 <GetStepWidth+0x160>)
 8002800:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f013 0f80 	tst.w	r3, #128	; 0x80
 800280a:	d132      	bne.n	8002872 <GetStepWidth+0xee>
		ret_val = (unsigned long int) ((((float) time_level * 1120)/4095) +80);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_3 == 1) {
 800280c:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002810:	4a34      	ldr	r2, [pc, #208]	; (80028e4 <GetStepWidth+0x160>)
 8002812:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f413 7f80 	tst.w	r3, #256	; 0x100
 800281c:	d13c      	bne.n	8002898 <GetStepWidth+0x114>
		ret_val = (unsigned long int) ((((float) time_level * 11200)/4095) +800);
	};
	
	if (Steps[_Section][_StepNum].b.TimeRange_30 == 1) {
 800281e:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 8002822:	4830      	ldr	r0, [pc, #192]	; (80028e4 <GetStepWidth+0x160>)
 8002824:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002828:	684b      	ldr	r3, [r1, #4]
 800282a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800282e:	d146      	bne.n	80028be <GetStepWidth+0x13a>
		ret_val = (unsigned long int) ((((float) time_level * 112000)/4095) +8000);
	};
	
	return ret_val;
};
 8002830:	9801      	ldr	r0, [sp, #4]
 8002832:	b002      	add	sp, #8
 8002834:	4770      	bx	lr
		time_level = (Steps[_Section][_StepNum].b.TLevel + 1);
 8002836:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <GetStepWidth+0x160>)
 800283c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002840:	f3c3 330b 	ubfx	r3, r3, #12, #12
 8002844:	3301      	adds	r3, #1
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	e7cb      	b.n	80027e4 <GetStepWidth+0x60>
		ret_val = (unsigned long int) ((((float) time_level * 112)/4095) +8);
 800284c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002850:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80028f8 <GetStepWidth+0x174>
 8002854:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002858:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80028f4 <GetStepWidth+0x170>
 800285c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002860:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002864:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002868:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800286c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8002870:	e7c3      	b.n	80027fa <GetStepWidth+0x76>
		ret_val = (unsigned long int) ((((float) time_level * 1120)/4095) +80);
 8002872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002876:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80028fc <GetStepWidth+0x178>
 800287a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800287e:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80028f4 <GetStepWidth+0x170>
 8002882:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002886:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002900 <GetStepWidth+0x17c>
 800288a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800288e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002892:	ed8d 7a01 	vstr	s14, [sp, #4]
 8002896:	e7b9      	b.n	800280c <GetStepWidth+0x88>
		ret_val = (unsigned long int) ((((float) time_level * 11200)/4095) +800);
 8002898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800289c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002904 <GetStepWidth+0x180>
 80028a0:	ee66 6a87 	vmul.f32	s13, s13, s14
 80028a4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80028f4 <GetStepWidth+0x170>
 80028a8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80028ac:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002908 <GetStepWidth+0x184>
 80028b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80028b4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80028b8:	ed8d 7a01 	vstr	s14, [sp, #4]
 80028bc:	e7af      	b.n	800281e <GetStepWidth+0x9a>
		ret_val = (unsigned long int) ((((float) time_level * 112000)/4095) +8000);
 80028be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800290c <GetStepWidth+0x188>
 80028c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ca:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80028f4 <GetStepWidth+0x170>
 80028ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028d2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002910 <GetStepWidth+0x18c>
 80028d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028de:	edcd 7a01 	vstr	s15, [sp, #4]
	return ret_val;
 80028e2:	e7a5      	b.n	8002830 <GetStepWidth+0xac>
 80028e4:	20000958 	.word	0x20000958
 80028e8:	057619f1 	.word	0x057619f1
 80028ec:	20000838 	.word	0x20000838
 80028f0:	20000250 	.word	0x20000250
 80028f4:	457ff000 	.word	0x457ff000
 80028f8:	42e00000 	.word	0x42e00000
 80028fc:	448c0000 	.word	0x448c0000
 8002900:	42a00000 	.word	0x42a00000
 8002904:	462f0000 	.word	0x462f0000
 8002908:	44480000 	.word	0x44480000
 800290c:	47dac000 	.word	0x47dac000
 8002910:	45fa0000 	.word	0x45fa0000

08002914 <GetStepVoltage>:
	#define MAX_DAC_VALUE			0xFFF
	#define FULL_RANGE_STEPS	60
	#define QUANTIZE_DIVIDER	MAX_DAC_VALUE/FULL_RANGE_STEPS 
	
unsigned int GetStepVoltage(unsigned char _Section, unsigned char _StepNum)
{
 8002914:	b430      	push	{r4, r5}
	unsigned int ret_val = 0;
	unsigned int voltage_level = 0;
	unsigned char ext_ban_num = 0;

	if (Steps[_Section][_StepNum].b.VoltageSource) {
 8002916:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 800291a:	4ba1      	ldr	r3, [pc, #644]	; (8002ba0 <GetStepVoltage+0x28c>)
 800291c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002920:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002924:	d052      	beq.n	80029cc <GetStepVoltage+0xb8>
		//Step voltage is set externally
	  ext_ban_num = (Steps[_Section][_StepNum].b.VLevel + EXT_VOLTAGE_STEP_OFFSET)/EXT_VOLTAGE_STEP_SELECT;
 8002926:	4613      	mov	r3, r2
 8002928:	4a9d      	ldr	r2, [pc, #628]	; (8002ba0 <GetStepVoltage+0x28c>)
 800292a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800292e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002932:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8002936:	4b9b      	ldr	r3, [pc, #620]	; (8002ba4 <GetStepVoltage+0x290>)
 8002938:	fb83 3202 	smull	r3, r2, r3, r2
 800293c:	0952      	lsrs	r2, r2, #5
		if(ext_ban_num > 3) ext_ban_num = 3;
 800293e:	2a03      	cmp	r2, #3
 8002940:	d900      	bls.n	8002944 <GetStepVoltage+0x30>
 8002942:	2203      	movs	r2, #3
		
		voltage_level = AddData[ext_ban_num]*(4095.0f/((float)CalConstants[ext_ban_num]));
 8002944:	4b98      	ldr	r3, [pc, #608]	; (8002ba8 <GetStepVoltage+0x294>)
 8002946:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800294a:	b29b      	uxth	r3, r3
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	4b96      	ldr	r3, [pc, #600]	; (8002bac <GetStepVoltage+0x298>)
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	ee07 3a10 	vmov	s14, r3
 800295a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800295e:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8002bb0 <GetStepVoltage+0x29c>
 8002962:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800296e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	} else {
		//Step voltage is set on panel
		voltage_level = Steps[_Section][_StepNum].b.VLevel;
	};
	
	if(voltage_level > 4095) voltage_level = 4095;
 8002972:	ee17 3a90 	vmov	r3, s15
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297a:	d301      	bcc.n	8002980 <GetStepVoltage+0x6c>
 800297c:	eddf 7a8d 	vldr	s15, [pc, #564]	; 8002bb4 <GetStepVoltage+0x2a0>

	if (Steps[_Section][_StepNum].b.FullRange) {		
 8002980:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002984:	4a86      	ldr	r2, [pc, #536]	; (8002ba0 <GetStepVoltage+0x28c>)
 8002986:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800298a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800298e:	d027      	beq.n	80029e0 <GetStepVoltage+0xcc>
		ret_val = voltage_level;
		// if quantization mode is on
		if (Steps[_Section][_StepNum].b.Quantize) {
 8002990:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 8002994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002998:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800299c:	f000 80fc 	beq.w	8002b98 <GetStepVoltage+0x284>
		//Calculate the quantized voltage
			ret_val =  (ret_val / (12*divider)) ;
 80029a0:	4b85      	ldr	r3, [pc, #532]	; (8002bb8 <GetStepVoltage+0x2a4>)
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80029aa:	ee67 6a26 	vmul.f32	s13, s14, s13
 80029ae:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80029b2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80029b6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
			ret_val = ret_val * (12*divider);
 80029ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80029be:	ee27 7a26 	vmul.f32	s14, s14, s13
 80029c2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80029c6:	ee17 3a10 	vmov	r3, s14
 80029ca:	e00a      	b.n	80029e2 <GetStepVoltage+0xce>
		voltage_level = Steps[_Section][_StepNum].b.VLevel;
 80029cc:	eb01 1340 	add.w	r3, r1, r0, lsl #5
 80029d0:	4a73      	ldr	r2, [pc, #460]	; (8002ba0 <GetStepVoltage+0x28c>)
 80029d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	e7c8      	b.n	8002972 <GetStepVoltage+0x5e>
	unsigned int ret_val = 0;
 80029e0:	2300      	movs	r3, #0
		};
	};
	
	if (Steps[_Section][_StepNum].b.Voltage0) {	
 80029e2:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 80029e6:	4c6e      	ldr	r4, [pc, #440]	; (8002ba0 <GetStepVoltage+0x28c>)
 80029e8:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80029ec:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80029f0:	d01f      	beq.n	8002a32 <GetStepVoltage+0x11e>
		ret_val = (voltage_level/divider);
 80029f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f6:	4b70      	ldr	r3, [pc, #448]	; (8002bb8 <GetStepVoltage+0x2a4>)
 80029f8:	ed93 6a00 	vldr	s12, [r3]
 80029fc:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8002a00:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8002a04:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 8002a08:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002a0c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002a10:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002a14:	d00d      	beq.n	8002a32 <GetStepVoltage+0x11e>

			ret_val =  (ret_val / (offset/12)) ;
 8002a16:	4d69      	ldr	r5, [pc, #420]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002a18:	682a      	ldr	r2, [r5, #0]
 8002a1a:	4c69      	ldr	r4, [pc, #420]	; (8002bc0 <GetStepVoltage+0x2ac>)
 8002a1c:	fba4 c202 	umull	ip, r2, r4, r2
 8002a20:	08d2      	lsrs	r2, r2, #3
 8002a22:	fbb3 f3f2 	udiv	r3, r3, r2
			ret_val = ret_val * (offset/12);
 8002a26:	682a      	ldr	r2, [r5, #0]
 8002a28:	fba4 4202 	umull	r4, r2, r4, r2
 8002a2c:	08d2      	lsrs	r2, r2, #3
 8002a2e:	fb03 f302 	mul.w	r3, r3, r2
		};
	};
	
	if (Steps[_Section][_StepNum].b.Voltage2) {		
 8002a32:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002a36:	4c5a      	ldr	r4, [pc, #360]	; (8002ba0 <GetStepVoltage+0x28c>)
 8002a38:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002a3c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002a40:	d022      	beq.n	8002a88 <GetStepVoltage+0x174>
		ret_val = (voltage_level/divider);
 8002a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a46:	4b5c      	ldr	r3, [pc, #368]	; (8002bb8 <GetStepVoltage+0x2a4>)
 8002a48:	ed93 6a00 	vldr	s12, [r3]
 8002a4c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002a50:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002a54:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 8002a58:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002a5c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002a60:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002a64:	d00d      	beq.n	8002a82 <GetStepVoltage+0x16e>
			ret_val =  (ret_val / (offset/12)) ;
 8002a66:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002a68:	6814      	ldr	r4, [r2, #0]
 8002a6a:	4d55      	ldr	r5, [pc, #340]	; (8002bc0 <GetStepVoltage+0x2ac>)
 8002a6c:	fba5 c404 	umull	ip, r4, r5, r4
 8002a70:	08e4      	lsrs	r4, r4, #3
 8002a72:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fba5 4202 	umull	r4, r2, r5, r2
 8002a7c:	08d2      	lsrs	r2, r2, #3
 8002a7e:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset;
 8002a82:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	4413      	add	r3, r2
	};
	
	if (Steps[_Section][_StepNum].b.Voltage4) {		
 8002a88:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002a8c:	4c44      	ldr	r4, [pc, #272]	; (8002ba0 <GetStepVoltage+0x28c>)
 8002a8e:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002a92:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 8002a96:	d023      	beq.n	8002ae0 <GetStepVoltage+0x1cc>
		ret_val = (voltage_level/divider);
 8002a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9c:	4b46      	ldr	r3, [pc, #280]	; (8002bb8 <GetStepVoltage+0x2a4>)
 8002a9e:	ed93 6a00 	vldr	s12, [r3]
 8002aa2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002aa6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002aaa:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 8002aae:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002ab2:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002ab6:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002aba:	d00d      	beq.n	8002ad8 <GetStepVoltage+0x1c4>
			ret_val =  (ret_val / (offset/12)) ;
 8002abc:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002abe:	6814      	ldr	r4, [r2, #0]
 8002ac0:	4d3f      	ldr	r5, [pc, #252]	; (8002bc0 <GetStepVoltage+0x2ac>)
 8002ac2:	fba5 c404 	umull	ip, r4, r5, r4
 8002ac6:	08e4      	lsrs	r4, r4, #3
 8002ac8:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	fba5 4202 	umull	r4, r2, r5, r2
 8002ad2:	08d2      	lsrs	r2, r2, #3
 8002ad4:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset*2;
 8002ad8:	4a38      	ldr	r2, [pc, #224]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	};
	
	if (Steps[_Section][_StepNum].b.Voltage6) {		
 8002ae0:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002ae4:	4c2e      	ldr	r4, [pc, #184]	; (8002ba0 <GetStepVoltage+0x28c>)
 8002ae6:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	da24      	bge.n	8002b38 <GetStepVoltage+0x224>
		ret_val = (voltage_level/divider);
 8002aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <GetStepVoltage+0x2a4>)
 8002af4:	ed93 6a00 	vldr	s12, [r3]
 8002af8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002afc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002b00:	ee17 3a10 	vmov	r3, s14
		if (Steps[_Section][_StepNum].b.Quantize) {
 8002b04:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002b08:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8002b0c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002b10:	d00d      	beq.n	8002b2e <GetStepVoltage+0x21a>
			ret_val =  (ret_val / (offset/12)) ;
 8002b12:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002b14:	6814      	ldr	r4, [r2, #0]
 8002b16:	4d2a      	ldr	r5, [pc, #168]	; (8002bc0 <GetStepVoltage+0x2ac>)
 8002b18:	fba5 c404 	umull	ip, r4, r5, r4
 8002b1c:	08e4      	lsrs	r4, r4, #3
 8002b1e:	fbb3 f3f4 	udiv	r3, r3, r4
			ret_val = ret_val * (offset/12);
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	fba5 4202 	umull	r4, r2, r5, r2
 8002b28:	08d2      	lsrs	r2, r2, #3
 8002b2a:	fb03 f302 	mul.w	r3, r3, r2
		};
		ret_val +=offset*3;
 8002b2e:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002b36:	4413      	add	r3, r2
	};
	
	if (Steps[_Section][_StepNum].b.Voltage8) {		
 8002b38:	eb01 1240 	add.w	r2, r1, r0, lsl #5
 8002b3c:	4c18      	ldr	r4, [pc, #96]	; (8002ba0 <GetStepVoltage+0x28c>)
 8002b3e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002b42:	6852      	ldr	r2, [r2, #4]
 8002b44:	f012 0f01 	tst.w	r2, #1
 8002b48:	d023      	beq.n	8002b92 <GetStepVoltage+0x27e>
		ret_val = (voltage_level/divider);
 8002b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <GetStepVoltage+0x2a4>)
 8002b50:	edd3 6a00 	vldr	s13, [r3]
 8002b54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b58:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002b5c:	ee17 3a90 	vmov	r3, s15
		if (Steps[_Section][_StepNum].b.Quantize) {
 8002b60:	eb01 1140 	add.w	r1, r1, r0, lsl #5
 8002b64:	f854 2031 	ldr.w	r2, [r4, r1, lsl #3]
 8002b68:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002b6c:	d00d      	beq.n	8002b8a <GetStepVoltage+0x276>
			ret_val =  (ret_val / (offset/12)) ;
 8002b6e:	4813      	ldr	r0, [pc, #76]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002b70:	6802      	ldr	r2, [r0, #0]
 8002b72:	4913      	ldr	r1, [pc, #76]	; (8002bc0 <GetStepVoltage+0x2ac>)
 8002b74:	fba1 4202 	umull	r4, r2, r1, r2
 8002b78:	08d2      	lsrs	r2, r2, #3
 8002b7a:	fbb3 f3f2 	udiv	r3, r3, r2
			ret_val = ret_val * (offset/12);
 8002b7e:	6800      	ldr	r0, [r0, #0]
 8002b80:	fba1 2000 	umull	r2, r0, r1, r0
 8002b84:	08c0      	lsrs	r0, r0, #3
 8002b86:	fb03 f300 	mul.w	r3, r3, r0
		};
		ret_val +=offset*4;
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <GetStepVoltage+0x2a8>)
 8002b8c:	6810      	ldr	r0, [r2, #0]
 8002b8e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	};

	return ret_val;
};
 8002b92:	4618      	mov	r0, r3
 8002b94:	bc30      	pop	{r4, r5}
 8002b96:	4770      	bx	lr
		ret_val = voltage_level;
 8002b98:	ee17 3a90 	vmov	r3, s15
 8002b9c:	e721      	b.n	80029e2 <GetStepVoltage+0xce>
 8002b9e:	bf00      	nop
 8002ba0:	20000958 	.word	0x20000958
 8002ba4:	057619f1 	.word	0x057619f1
 8002ba8:	20000838 	.word	0x20000838
 8002bac:	20000250 	.word	0x20000250
 8002bb0:	457ff000 	.word	0x457ff000
 8002bb4:	00000fff 	.word	0x00000fff
 8002bb8:	200008cc 	.word	0x200008cc
 8002bbc:	20000954 	.word	0x20000954
 8002bc0:	aaaaaaab 	.word	0xaaaaaaab

08002bc4 <GetNextStep>:
/*
	Calculate the number of next step
	_StepNum - current step number in section _Section
*/
unsigned char GetNextStep(unsigned char _Section, unsigned char _StepNum)
{
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	460c      	mov	r4, r1
	unsigned char ret_val = 0;
	unsigned char isLastStage = 0;
	unsigned char tmp=0;
	unsigned char max_step;

	if(Is_Expander_Present()) max_step = 31;
 8002bca:	f7ff f9c6 	bl	8001f5a <Is_Expander_Present>
 8002bce:	b918      	cbnz	r0, 8002bd8 <GetNextStep+0x14>
	else 
	{
		max_step = 15;
		if(_StepNum > 15) return 0;
 8002bd0:	2c0f      	cmp	r4, #15
 8002bd2:	d842      	bhi.n	8002c5a <GetNextStep+0x96>
		max_step = 15;
 8002bd4:	210f      	movs	r1, #15
 8002bd6:	e000      	b.n	8002bda <GetNextStep+0x16>
	if(Is_Expander_Present()) max_step = 31;
 8002bd8:	211f      	movs	r1, #31
	}
	
	isLastStage = Steps[_Section][_StepNum].b.CycleLast;
 8002bda:	462e      	mov	r6, r5
 8002bdc:	4627      	mov	r7, r4
 8002bde:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <GetNextStep+0xa0>)
 8002be4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002be8:	6868      	ldr	r0, [r5, #4]
 8002bea:	f3c0 1040 	ubfx	r0, r0, #5, #1
	
	if (isLastStage != 0) {      
 8002bee:	bb78      	cbnz	r0, 8002c50 <GetNextStep+0x8c>
	isLastStage = Steps[_Section][_StepNum].b.CycleLast;
 8002bf0:	4602      	mov	r2, r0
			  isLastStage = 0;
			};
		};
    } 

    if (isLastStage == 0) {		
 8002bf2:	bb9a      	cbnz	r2, 8002c5c <GetNextStep+0x98>
		if ( _StepNum >= max_step ) {
 8002bf4:	42a1      	cmp	r1, r4
 8002bf6:	d932      	bls.n	8002c5e <GetNextStep+0x9a>
			ret_val = 0;
		} else {
			ret_val = _StepNum+1;
 8002bf8:	3401      	adds	r4, #1
 8002bfa:	b2e0      	uxtb	r0, r4
 8002bfc:	e02e      	b.n	8002c5c <GetNextStep+0x98>
			  if (Steps[_Section][max_step-(tmp-_StepNum)].b.CycleFirst) {
 8002bfe:	1bda      	subs	r2, r3, r7
 8002c00:	1a8a      	subs	r2, r1, r2
 8002c02:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8002c06:	4d17      	ldr	r5, [pc, #92]	; (8002c64 <GetNextStep+0xa0>)
 8002c08:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002c0c:	6852      	ldr	r2, [r2, #4]
 8002c0e:	f012 0f10 	tst.w	r2, #16
 8002c12:	d115      	bne.n	8002c40 <GetNextStep+0x7c>
			if (tmp == max_step) {
 8002c14:	428b      	cmp	r3, r1
 8002c16:	d019      	beq.n	8002c4c <GetNextStep+0x88>
		for(tmp = 0; tmp <= max_step; tmp++)
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	428b      	cmp	r3, r1
 8002c1e:	d819      	bhi.n	8002c54 <GetNextStep+0x90>
			if (tmp<=_StepNum) {
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d8ec      	bhi.n	8002bfe <GetNextStep+0x3a>
			  if (Steps[_Section][_StepNum-tmp].b.CycleFirst) {
 8002c24:	1afa      	subs	r2, r7, r3
 8002c26:	eb02 1546 	add.w	r5, r2, r6, lsl #5
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <GetNextStep+0xa0>)
 8002c2c:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8002c30:	6852      	ldr	r2, [r2, #4]
 8002c32:	f012 0f10 	tst.w	r2, #16
 8002c36:	d0ed      	beq.n	8002c14 <GetNextStep+0x50>
			    ret_val = _StepNum-tmp;
 8002c38:	1ae3      	subs	r3, r4, r3
			    break;
 8002c3a:	4602      	mov	r2, r0
			    ret_val = _StepNum-tmp;
 8002c3c:	b2d8      	uxtb	r0, r3
			    break;
 8002c3e:	e7d8      	b.n	8002bf2 <GetNextStep+0x2e>
			    ret_val = max_step-(tmp-_StepNum);
 8002c40:	1ae3      	subs	r3, r4, r3
 8002c42:	fa51 f383 	uxtab	r3, r1, r3
			    break;
 8002c46:	4602      	mov	r2, r0
			    ret_val = max_step-(tmp-_StepNum);
 8002c48:	b2d8      	uxtb	r0, r3
			    break;
 8002c4a:	e7d2      	b.n	8002bf2 <GetNextStep+0x2e>
			  isLastStage = 0;
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	e7e3      	b.n	8002c18 <GetNextStep+0x54>
		for(tmp = 0; tmp <= max_step; tmp++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	e7e3      	b.n	8002c1c <GetNextStep+0x58>
 8002c54:	4602      	mov	r2, r0
	unsigned char ret_val = 0;
 8002c56:	2000      	movs	r0, #0
 8002c58:	e7cb      	b.n	8002bf2 <GetNextStep+0x2e>
		if(_StepNum > 15) return 0;
 8002c5a:	2000      	movs	r0, #0
	/* ENDOF: Ã�â€¢Ã‘ï¿½Ã�Â»Ã�Â¸ Ã‘Ë†Ã�Â°Ã�Â³ Ã�Â·Ã�Â°Ã�ÂºÃ�Â¾Ã�Â½Ã‘â€¡Ã�Â¸Ã�Â»Ã‘ï¿½Ã‘ï¿½ - Ã�Â¿Ã�ÂµÃ‘â‚¬Ã�ÂµÃ‘â€¦Ã�Â¾Ã�Â´Ã�Â¸Ã�Â¼ Ã�Â½Ã�Â° Ã‘ï¿½Ã�Â»Ã�ÂµÃ�Â´Ã‘Æ’Ã‘Å½Ã‘â€°Ã�Â¸Ã�Â¹ */

    //printf("GetNextStepReturnValue: %i \n", ret_val);

    return ret_val;
};
 8002c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ret_val = 0;
 8002c5e:	4610      	mov	r0, r2
 8002c60:	e7fc      	b.n	8002c5c <GetNextStep+0x98>
 8002c62:	bf00      	nop
 8002c64:	20000958 	.word	0x20000958

08002c68 <EXTI9_5_IRQHandler>:
{
 8002c68:	b510      	push	{r4, lr}
	if ((EXTI->PR & (1<<8))) {
 8002c6a:	4ba6      	ldr	r3, [pc, #664]	; (8002f04 <EXTI9_5_IRQHandler+0x29c>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c72:	f000 8081 	beq.w	8002d78 <EXTI9_5_IRQHandler+0x110>
		if ((GPIOB->IDR & GPIO_IDR_IDR_0) && (EXTI->PR & (1<<8))){
 8002c76:	4ba4      	ldr	r3, [pc, #656]	; (8002f08 <EXTI9_5_IRQHandler+0x2a0>)
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f013 0f01 	tst.w	r3, #1
 8002c7e:	d004      	beq.n	8002c8a <EXTI9_5_IRQHandler+0x22>
 8002c80:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <EXTI9_5_IRQHandler+0x29c>)
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c88:	d13c      	bne.n	8002d04 <EXTI9_5_IRQHandler+0x9c>
		else if((gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z) && (gSequencerMode_1 != SEQUENCER_MODE_WAIT) && (gSequencerMode_1 != SEQUENCER_MODE_RUN))
 8002c8a:	4ba0      	ldr	r3, [pc, #640]	; (8002f0c <EXTI9_5_IRQHandler+0x2a4>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d061      	beq.n	8002d58 <EXTI9_5_IRQHandler+0xf0>
 8002c94:	4b9d      	ldr	r3, [pc, #628]	; (8002f0c <EXTI9_5_IRQHandler+0x2a4>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d05c      	beq.n	8002d58 <EXTI9_5_IRQHandler+0xf0>
 8002c9e:	4b9b      	ldr	r3, [pc, #620]	; (8002f0c <EXTI9_5_IRQHandler+0x2a4>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d057      	beq.n	8002d58 <EXTI9_5_IRQHandler+0xf0>
 8002ca8:	4b98      	ldr	r3, [pc, #608]	; (8002f0c <EXTI9_5_IRQHandler+0x2a4>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d053      	beq.n	8002d58 <EXTI9_5_IRQHandler+0xf0>
			gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	4b96      	ldr	r3, [pc, #600]	; (8002f0c <EXTI9_5_IRQHandler+0x2a4>)
 8002cb4:	7018      	strb	r0, [r3, #0]
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8002cb6:	4c96      	ldr	r4, [pc, #600]	; (8002f10 <EXTI9_5_IRQHandler+0x2a8>)
 8002cb8:	7821      	ldrb	r1, [r4, #0]
 8002cba:	f7ff ff83 	bl	8002bc4 <GetNextStep>
 8002cbe:	7020      	strb	r0, [r4, #0]
			PULSE_LED_I_ALL_ON;
 8002cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cc4:	4890      	ldr	r0, [pc, #576]	; (8002f08 <EXTI9_5_IRQHandler+0x2a0>)
 8002cc6:	f7fe fa24 	bl	8001112 <GPIO_ResetBits>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002cca:	7822      	ldrb	r2, [r4, #0]
 8002ccc:	4b91      	ldr	r3, [pc, #580]	; (8002f14 <EXTI9_5_IRQHandler+0x2ac>)
 8002cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002cd8:	f040 8107 	bne.w	8002eea <EXTI9_5_IRQHandler+0x282>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002cdc:	4b8c      	ldr	r3, [pc, #560]	; (8002f10 <EXTI9_5_IRQHandler+0x2a8>)
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	4b8c      	ldr	r3, [pc, #560]	; (8002f14 <EXTI9_5_IRQHandler+0x2ac>)
 8002ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002cec:	f040 8103 	bne.w	8002ef6 <EXTI9_5_IRQHandler+0x28e>
						TIM_Cmd(TIM14, ENABLE);
 8002cf0:	4c89      	ldr	r4, [pc, #548]	; (8002f18 <EXTI9_5_IRQHandler+0x2b0>)
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7fe fbf3 	bl	80014e0 <TIM_Cmd>
						TIM_SetCounter(TIM14, 0x00);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7fe fbe0 	bl	80014c2 <TIM_SetCounter>
 8002d02:	e029      	b.n	8002d58 <EXTI9_5_IRQHandler+0xf0>
						gSequencerMode_1 = SEQUENCER_MODE_ADVANCE;
 8002d04:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <EXTI9_5_IRQHandler+0x2a4>)
 8002d06:	2206      	movs	r2, #6
 8002d08:	701a      	strb	r2, [r3, #0]
						gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8002d0a:	4c81      	ldr	r4, [pc, #516]	; (8002f10 <EXTI9_5_IRQHandler+0x2a8>)
 8002d0c:	7821      	ldrb	r1, [r4, #0]
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7ff ff58 	bl	8002bc4 <GetNextStep>
 8002d14:	7020      	strb	r0, [r4, #0]
						PULSE_LED_I_ALL_ON;
 8002d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d1a:	487b      	ldr	r0, [pc, #492]	; (8002f08 <EXTI9_5_IRQHandler+0x2a0>)
 8002d1c:	f7fe f9f9 	bl	8001112 <GPIO_ResetBits>
									if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002d20:	7822      	ldrb	r2, [r4, #0]
 8002d22:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <EXTI9_5_IRQHandler+0x2ac>)
 8002d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002d2e:	f040 80d0 	bne.w	8002ed2 <EXTI9_5_IRQHandler+0x26a>
									if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002d32:	4b77      	ldr	r3, [pc, #476]	; (8002f10 <EXTI9_5_IRQHandler+0x2a8>)
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	4b77      	ldr	r3, [pc, #476]	; (8002f14 <EXTI9_5_IRQHandler+0x2ac>)
 8002d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002d42:	f040 80cc 	bne.w	8002ede <EXTI9_5_IRQHandler+0x276>
									TIM_Cmd(TIM14, ENABLE);
 8002d46:	4c74      	ldr	r4, [pc, #464]	; (8002f18 <EXTI9_5_IRQHandler+0x2b0>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7fe fbc8 	bl	80014e0 <TIM_Cmd>
									TIM_SetCounter(TIM14, 0x00);
 8002d50:	2100      	movs	r1, #0
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7fe fbb5 	bl	80014c2 <TIM_SetCounter>
		if(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z)
 8002d58:	4b6c      	ldr	r3, [pc, #432]	; (8002f0c <EXTI9_5_IRQHandler+0x2a4>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	f000 80ea 	beq.w	8002f38 <EXTI9_5_IRQHandler+0x2d0>
			if (gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)
 8002d64:	4b69      	ldr	r3, [pc, #420]	; (8002f0c <EXTI9_5_IRQHandler+0x2a4>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	f000 811a 	beq.w	8002fa4 <EXTI9_5_IRQHandler+0x33c>
		EXTI_ClearITPendingBit(EXTI_Line8);
 8002d70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d74:	f7fe f970 	bl	8001058 <EXTI_ClearITPendingBit>
	 if (EXTI->PR & (1<<6)) {
 8002d78:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <EXTI9_5_IRQHandler+0x29c>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d80:	d028      	beq.n	8002dd4 <EXTI9_5_IRQHandler+0x16c>
		 if((gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z) && (gSequencerMode_2 != SEQUENCER_MODE_WAIT) && (gSequencerMode_2 != SEQUENCER_MODE_RUN))
 8002d82:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <EXTI9_5_IRQHandler+0x2b4>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d00e      	beq.n	8002daa <EXTI9_5_IRQHandler+0x142>
 8002d8c:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <EXTI9_5_IRQHandler+0x2b4>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d009      	beq.n	8002daa <EXTI9_5_IRQHandler+0x142>
 8002d96:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <EXTI9_5_IRQHandler+0x2b4>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d004      	beq.n	8002daa <EXTI9_5_IRQHandler+0x142>
 8002da0:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <EXTI9_5_IRQHandler+0x2b4>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f040 8100 	bne.w	8002faa <EXTI9_5_IRQHandler+0x342>
		if(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z)
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <EXTI9_5_IRQHandler+0x2b4>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	f000 812d 	beq.w	8003010 <EXTI9_5_IRQHandler+0x3a8>
		if(gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z)
 8002db6:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <EXTI9_5_IRQHandler+0x2b4>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	f000 815c 	beq.w	800307a <EXTI9_5_IRQHandler+0x412>
		if(gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z)
 8002dc2:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <EXTI9_5_IRQHandler+0x2b4>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	f000 8159 	beq.w	8003080 <EXTI9_5_IRQHandler+0x418>
		EXTI_ClearITPendingBit(EXTI_Line6);
 8002dce:	2040      	movs	r0, #64	; 0x40
 8002dd0:	f7fe f942 	bl	8001058 <EXTI_ClearITPendingBit>
	 	if (EXTI->PR & (1<<5)) {
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <EXTI9_5_IRQHandler+0x29c>)
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f013 0f20 	tst.w	r3, #32
 8002ddc:	d036      	beq.n	8002e4c <EXTI9_5_IRQHandler+0x1e4>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 8002dde:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <EXTI9_5_IRQHandler+0x2b8>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <EXTI9_5_IRQHandler+0x2a8>)
 8002de8:	7013      	strb	r3, [r2, #0]
			if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8002dea:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <EXTI9_5_IRQHandler+0x2bc>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b943      	cbnz	r3, 8002e02 <EXTI9_5_IRQHandler+0x19a>
				DisplayUpdateFlags.b.MainDisplay = 1;
 8002df0:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <EXTI9_5_IRQHandler+0x2c0>)
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	f042 0202 	orr.w	r2, r2, #2
 8002e00:	701a      	strb	r2, [r3, #0]
				PULSE_LED_I_ALL_ON;
 8002e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e06:	4840      	ldr	r0, [pc, #256]	; (8002f08 <EXTI9_5_IRQHandler+0x2a0>)
 8002e08:	f7fe f983 	bl	8001112 <GPIO_ResetBits>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002e0c:	4b40      	ldr	r3, [pc, #256]	; (8002f10 <EXTI9_5_IRQHandler+0x2a8>)
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	4b40      	ldr	r3, [pc, #256]	; (8002f14 <EXTI9_5_IRQHandler+0x2ac>)
 8002e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e1c:	f040 8133 	bne.w	8003086 <EXTI9_5_IRQHandler+0x41e>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <EXTI9_5_IRQHandler+0x2a8>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <EXTI9_5_IRQHandler+0x2ac>)
 8002e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002e30:	f040 812f 	bne.w	8003092 <EXTI9_5_IRQHandler+0x42a>
				TIM_Cmd(TIM14, ENABLE);
 8002e34:	4c38      	ldr	r4, [pc, #224]	; (8002f18 <EXTI9_5_IRQHandler+0x2b0>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7fe fb51 	bl	80014e0 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7fe fb3e 	bl	80014c2 <TIM_SetCounter>
		EXTI_ClearITPendingBit(EXTI_Line5);
 8002e46:	2020      	movs	r0, #32
 8002e48:	f7fe f906 	bl	8001058 <EXTI_ClearITPendingBit>
	 	if (EXTI->PR & (1<<7)) {
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <EXTI9_5_IRQHandler+0x29c>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e54:	d033      	beq.n	8002ebe <EXTI9_5_IRQHandler+0x256>
		gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 8002e56:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <EXTI9_5_IRQHandler+0x2b8>)
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <EXTI9_5_IRQHandler+0x2c4>)
 8002e60:	7013      	strb	r3, [r2, #0]
		if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8002e62:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <EXTI9_5_IRQHandler+0x2bc>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f000 8118 	beq.w	800309e <EXTI9_5_IRQHandler+0x436>
				PULSE_LED_II_ALL_ON;
 8002e6e:	2104      	movs	r1, #4
 8002e70:	482f      	ldr	r0, [pc, #188]	; (8002f30 <EXTI9_5_IRQHandler+0x2c8>)
 8002e72:	f7fe f94e 	bl	8001112 <GPIO_ResetBits>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <EXTI9_5_IRQHandler+0x2c4>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	f103 0220 	add.w	r2, r3, #32
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <EXTI9_5_IRQHandler+0x2ac>)
 8002e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e8a:	f040 8112 	bne.w	80030b2 <EXTI9_5_IRQHandler+0x44a>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <EXTI9_5_IRQHandler+0x2c4>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f103 0220 	add.w	r2, r3, #32
 8002e96:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <EXTI9_5_IRQHandler+0x2ac>)
 8002e98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002ea2:	f040 810b 	bne.w	80030bc <EXTI9_5_IRQHandler+0x454>
				TIM_Cmd(TIM8, ENABLE);
 8002ea6:	4c23      	ldr	r4, [pc, #140]	; (8002f34 <EXTI9_5_IRQHandler+0x2cc>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f7fe fb18 	bl	80014e0 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f7fe fb05 	bl	80014c2 <TIM_SetCounter>
		EXTI_ClearITPendingBit(EXTI_Line7);
 8002eb8:	2080      	movs	r0, #128	; 0x80
 8002eba:	f7fe f8cd 	bl	8001058 <EXTI_ClearITPendingBit>
	DisplayUpdateFlags.b.MainDisplay = 1;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <EXTI9_5_IRQHandler+0x2c0>)
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.StepsDisplay = 1;	 
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	f042 0202 	orr.w	r2, r2, #2
 8002ece:	701a      	strb	r2, [r3, #0]
};
 8002ed0:	bd10      	pop	{r4, pc}
										PULSE_LED_I_1_ON;
 8002ed2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ed6:	480c      	ldr	r0, [pc, #48]	; (8002f08 <EXTI9_5_IRQHandler+0x2a0>)
 8002ed8:	f7fe f91b 	bl	8001112 <GPIO_ResetBits>
 8002edc:	e729      	b.n	8002d32 <EXTI9_5_IRQHandler+0xca>
										PULSE_LED_I_2_ON;
 8002ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ee2:	4809      	ldr	r0, [pc, #36]	; (8002f08 <EXTI9_5_IRQHandler+0x2a0>)
 8002ee4:	f7fe f915 	bl	8001112 <GPIO_ResetBits>
 8002ee8:	e72d      	b.n	8002d46 <EXTI9_5_IRQHandler+0xde>
							PULSE_LED_I_1_ON;
 8002eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002eee:	4806      	ldr	r0, [pc, #24]	; (8002f08 <EXTI9_5_IRQHandler+0x2a0>)
 8002ef0:	f7fe f90f 	bl	8001112 <GPIO_ResetBits>
 8002ef4:	e6f2      	b.n	8002cdc <EXTI9_5_IRQHandler+0x74>
							PULSE_LED_I_2_ON;
 8002ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002efa:	4803      	ldr	r0, [pc, #12]	; (8002f08 <EXTI9_5_IRQHandler+0x2a0>)
 8002efc:	f7fe f909 	bl	8001112 <GPIO_ResetBits>
 8002f00:	e6f6      	b.n	8002cf0 <EXTI9_5_IRQHandler+0x88>
 8002f02:	bf00      	nop
 8002f04:	40013c00 	.word	0x40013c00
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	200002c1 	.word	0x200002c1
 8002f10:	200002bf 	.word	0x200002bf
 8002f14:	20000958 	.word	0x20000958
 8002f18:	40002000 	.word	0x40002000
 8002f1c:	200002c2 	.word	0x200002c2
 8002f20:	20000274 	.word	0x20000274
 8002f24:	200002b0 	.word	0x200002b0
 8002f28:	200002f0 	.word	0x200002f0
 8002f2c:	200002c0 	.word	0x200002c0
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40010400 	.word	0x40010400
			InitStart_1_SignalTimer();
 8002f38:	f7ff fadc 	bl	80024f4 <InitStart_1_SignalTimer>
			gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <EXTI9_5_IRQHandler+0x460>)
 8002f40:	7018      	strb	r0, [r3, #0]
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8002f42:	4c62      	ldr	r4, [pc, #392]	; (80030cc <EXTI9_5_IRQHandler+0x464>)
 8002f44:	7821      	ldrb	r1, [r4, #0]
 8002f46:	f7ff fe3d 	bl	8002bc4 <GetNextStep>
 8002f4a:	7020      	strb	r0, [r4, #0]
			PULSE_LED_I_ALL_ON;
 8002f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f50:	485f      	ldr	r0, [pc, #380]	; (80030d0 <EXTI9_5_IRQHandler+0x468>)
 8002f52:	f7fe f8de 	bl	8001112 <GPIO_ResetBits>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8002f56:	7822      	ldrb	r2, [r4, #0]
 8002f58:	4b5e      	ldr	r3, [pc, #376]	; (80030d4 <EXTI9_5_IRQHandler+0x46c>)
 8002f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002f64:	d112      	bne.n	8002f8c <EXTI9_5_IRQHandler+0x324>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8002f66:	4b59      	ldr	r3, [pc, #356]	; (80030cc <EXTI9_5_IRQHandler+0x464>)
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	4b5a      	ldr	r3, [pc, #360]	; (80030d4 <EXTI9_5_IRQHandler+0x46c>)
 8002f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002f76:	d10f      	bne.n	8002f98 <EXTI9_5_IRQHandler+0x330>
			TIM_Cmd(TIM14, ENABLE);
 8002f78:	4c57      	ldr	r4, [pc, #348]	; (80030d8 <EXTI9_5_IRQHandler+0x470>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7fe faaf 	bl	80014e0 <TIM_Cmd>
			TIM_SetCounter(TIM14, 0x00);
 8002f82:	2100      	movs	r1, #0
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7fe fa9c 	bl	80014c2 <TIM_SetCounter>
 8002f8a:	e6eb      	b.n	8002d64 <EXTI9_5_IRQHandler+0xfc>
				PULSE_LED_I_1_ON;
 8002f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f90:	484f      	ldr	r0, [pc, #316]	; (80030d0 <EXTI9_5_IRQHandler+0x468>)
 8002f92:	f7fe f8be 	bl	8001112 <GPIO_ResetBits>
 8002f96:	e7e6      	b.n	8002f66 <EXTI9_5_IRQHandler+0x2fe>
				PULSE_LED_I_2_ON;
 8002f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f9c:	484c      	ldr	r0, [pc, #304]	; (80030d0 <EXTI9_5_IRQHandler+0x468>)
 8002f9e:	f7fe f8b8 	bl	8001112 <GPIO_ResetBits>
 8002fa2:	e7e9      	b.n	8002f78 <EXTI9_5_IRQHandler+0x310>
				InitStart_1_SignalTimer();
 8002fa4:	f7ff faa6 	bl	80024f4 <InitStart_1_SignalTimer>
 8002fa8:	e6e2      	b.n	8002d70 <EXTI9_5_IRQHandler+0x108>
			gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <EXTI9_5_IRQHandler+0x474>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8002fb0:	4c4b      	ldr	r4, [pc, #300]	; (80030e0 <EXTI9_5_IRQHandler+0x478>)
 8002fb2:	7821      	ldrb	r1, [r4, #0]
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7ff fe05 	bl	8002bc4 <GetNextStep>
 8002fba:	7020      	strb	r0, [r4, #0]
			PULSE_LED_II_ALL_ON;
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4849      	ldr	r0, [pc, #292]	; (80030e4 <EXTI9_5_IRQHandler+0x47c>)
 8002fc0:	f7fe f8a7 	bl	8001112 <GPIO_ResetBits>
									if (Steps[0][gSequenceStepNumber_2].b.OutputPulse1) {
 8002fc4:	7822      	ldrb	r2, [r4, #0]
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <EXTI9_5_IRQHandler+0x46c>)
 8002fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002fd2:	d112      	bne.n	8002ffa <EXTI9_5_IRQHandler+0x392>
									if (Steps[0][gSequenceStepNumber_2].b.OutputPulse2) {
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <EXTI9_5_IRQHandler+0x478>)
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <EXTI9_5_IRQHandler+0x46c>)
 8002fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002fe4:	d10e      	bne.n	8003004 <EXTI9_5_IRQHandler+0x39c>
									TIM_Cmd(TIM8, ENABLE);
 8002fe6:	4c40      	ldr	r4, [pc, #256]	; (80030e8 <EXTI9_5_IRQHandler+0x480>)
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4620      	mov	r0, r4
 8002fec:	f7fe fa78 	bl	80014e0 <TIM_Cmd>
									TIM_SetCounter(TIM8, 0x00);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7fe fa65 	bl	80014c2 <TIM_SetCounter>
 8002ff8:	e6d7      	b.n	8002daa <EXTI9_5_IRQHandler+0x142>
										PULSE_LED_II_1_ON;
 8002ffa:	2108      	movs	r1, #8
 8002ffc:	4839      	ldr	r0, [pc, #228]	; (80030e4 <EXTI9_5_IRQHandler+0x47c>)
 8002ffe:	f7fe f888 	bl	8001112 <GPIO_ResetBits>
 8003002:	e7e7      	b.n	8002fd4 <EXTI9_5_IRQHandler+0x36c>
										PULSE_LED_II_2_ON;
 8003004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003008:	4836      	ldr	r0, [pc, #216]	; (80030e4 <EXTI9_5_IRQHandler+0x47c>)
 800300a:	f7fe f882 	bl	8001112 <GPIO_ResetBits>
 800300e:	e7ea      	b.n	8002fe6 <EXTI9_5_IRQHandler+0x37e>
			InitStart_2_SignalTimer();
 8003010:	f7ff fa8c 	bl	800252c <InitStart_2_SignalTimer>
						gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <EXTI9_5_IRQHandler+0x474>)
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
						gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 800301a:	4c31      	ldr	r4, [pc, #196]	; (80030e0 <EXTI9_5_IRQHandler+0x478>)
 800301c:	7821      	ldrb	r1, [r4, #0]
 800301e:	2001      	movs	r0, #1
 8003020:	f7ff fdd0 	bl	8002bc4 <GetNextStep>
 8003024:	7020      	strb	r0, [r4, #0]
						PULSE_LED_II_ALL_ON;
 8003026:	2104      	movs	r1, #4
 8003028:	482e      	ldr	r0, [pc, #184]	; (80030e4 <EXTI9_5_IRQHandler+0x47c>)
 800302a:	f7fe f872 	bl	8001112 <GPIO_ResetBits>
						if (Steps[0][gSequenceStepNumber_2].b.OutputPulse1) {
 800302e:	7822      	ldrb	r2, [r4, #0]
 8003030:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <EXTI9_5_IRQHandler+0x46c>)
 8003032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800303c:	d112      	bne.n	8003064 <EXTI9_5_IRQHandler+0x3fc>
						if (Steps[0][gSequenceStepNumber_2].b.OutputPulse2) {
 800303e:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <EXTI9_5_IRQHandler+0x478>)
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <EXTI9_5_IRQHandler+0x46c>)
 8003044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800304e:	d10e      	bne.n	800306e <EXTI9_5_IRQHandler+0x406>
						TIM_Cmd(TIM8, ENABLE);
 8003050:	4c25      	ldr	r4, [pc, #148]	; (80030e8 <EXTI9_5_IRQHandler+0x480>)
 8003052:	2101      	movs	r1, #1
 8003054:	4620      	mov	r0, r4
 8003056:	f7fe fa43 	bl	80014e0 <TIM_Cmd>
						TIM_SetCounter(TIM8, 0x00);
 800305a:	2100      	movs	r1, #0
 800305c:	4620      	mov	r0, r4
 800305e:	f7fe fa30 	bl	80014c2 <TIM_SetCounter>
 8003062:	e6a8      	b.n	8002db6 <EXTI9_5_IRQHandler+0x14e>
							PULSE_LED_II_1_ON;
 8003064:	2108      	movs	r1, #8
 8003066:	481f      	ldr	r0, [pc, #124]	; (80030e4 <EXTI9_5_IRQHandler+0x47c>)
 8003068:	f7fe f853 	bl	8001112 <GPIO_ResetBits>
 800306c:	e7e7      	b.n	800303e <EXTI9_5_IRQHandler+0x3d6>
							PULSE_LED_II_2_ON;
 800306e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003072:	481c      	ldr	r0, [pc, #112]	; (80030e4 <EXTI9_5_IRQHandler+0x47c>)
 8003074:	f7fe f84d 	bl	8001112 <GPIO_ResetBits>
 8003078:	e7ea      	b.n	8003050 <EXTI9_5_IRQHandler+0x3e8>
							InitStart_2_SignalTimer();
 800307a:	f7ff fa57 	bl	800252c <InitStart_2_SignalTimer>
 800307e:	e6a0      	b.n	8002dc2 <EXTI9_5_IRQHandler+0x15a>
							InitStart_1_SignalTimer();
 8003080:	f7ff fa38 	bl	80024f4 <InitStart_1_SignalTimer>
 8003084:	e6a3      	b.n	8002dce <EXTI9_5_IRQHandler+0x166>
					PULSE_LED_I_1_ON;
 8003086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800308a:	4811      	ldr	r0, [pc, #68]	; (80030d0 <EXTI9_5_IRQHandler+0x468>)
 800308c:	f7fe f841 	bl	8001112 <GPIO_ResetBits>
 8003090:	e6c6      	b.n	8002e20 <EXTI9_5_IRQHandler+0x1b8>
					PULSE_LED_I_2_ON;
 8003092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003096:	480e      	ldr	r0, [pc, #56]	; (80030d0 <EXTI9_5_IRQHandler+0x468>)
 8003098:	f7fe f83b 	bl	8001112 <GPIO_ResetBits>
 800309c:	e6ca      	b.n	8002e34 <EXTI9_5_IRQHandler+0x1cc>
		DisplayUpdateFlags.b.MainDisplay = 1;
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <EXTI9_5_IRQHandler+0x484>)
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	f042 0202 	orr.w	r2, r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e6dd      	b.n	8002e6e <EXTI9_5_IRQHandler+0x206>
					PULSE_LED_II_1_ON;
 80030b2:	2108      	movs	r1, #8
 80030b4:	480b      	ldr	r0, [pc, #44]	; (80030e4 <EXTI9_5_IRQHandler+0x47c>)
 80030b6:	f7fe f82c 	bl	8001112 <GPIO_ResetBits>
 80030ba:	e6e8      	b.n	8002e8e <EXTI9_5_IRQHandler+0x226>
					PULSE_LED_II_2_ON;
 80030bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030c0:	4808      	ldr	r0, [pc, #32]	; (80030e4 <EXTI9_5_IRQHandler+0x47c>)
 80030c2:	f7fe f826 	bl	8001112 <GPIO_ResetBits>
 80030c6:	e6ee      	b.n	8002ea6 <EXTI9_5_IRQHandler+0x23e>
 80030c8:	200002c1 	.word	0x200002c1
 80030cc:	200002bf 	.word	0x200002bf
 80030d0:	40020400 	.word	0x40020400
 80030d4:	20000958 	.word	0x20000958
 80030d8:	40002000 	.word	0x40002000
 80030dc:	200002c2 	.word	0x200002c2
 80030e0:	200002c0 	.word	0x200002c0
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40010400 	.word	0x40010400
 80030ec:	200002f0 	.word	0x200002f0

080030f0 <TIM4_IRQHandler>:

/*
	Timer interrupt handler for 1 section steps
*/
void TIM4_IRQHandler()
{
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float deltaVoltage;
	unsigned long CurStep;
	
	
	/* Clear interrupt flag */
	TIM4->SR = (uint16_t) ~TIM_IT_Update;
 80030f2:	4e77      	ldr	r6, [pc, #476]	; (80032d0 <TIM4_IRQHandler+0x1e0>)
 80030f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80030f8:	8233      	strh	r3, [r6, #16]

	/* Calculate next step duration */		
	StepWidth_1 = GetStepWidth(0, gSequenceStepNumber_1);
 80030fa:	4d76      	ldr	r5, [pc, #472]	; (80032d4 <TIM4_IRQHandler+0x1e4>)
 80030fc:	7829      	ldrb	r1, [r5, #0]
 80030fe:	2000      	movs	r0, #0
 8003100:	f7ff fb40 	bl	8002784 <GetStepWidth>
 8003104:	4604      	mov	r4, r0
					
					
		/* Calculate prescaler/multiplier*/

		TIM4->PSC = (uint16_t) ((((((float) AddData[ADC_TIMEMULTIPLY_Ch_1])*3.5f)/CalConstants[ADC_TIMEMULTIPLY_Ch_1])+0.5f)*STEP_TIMER_PRESCALER);
 8003106:	4b74      	ldr	r3, [pc, #464]	; (80032d8 <TIM4_IRQHandler+0x1e8>)
 8003108:	891b      	ldrh	r3, [r3, #8]
 800310a:	b29b      	uxth	r3, r3
 800310c:	ee07 3a10 	vmov	s14, r3
 8003110:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003114:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8003118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800311c:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <TIM4_IRQHandler+0x1ec>)
 800311e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003122:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800312a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800312e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003132:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80032e0 <TIM4_IRQHandler+0x1f0>
 8003136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800313a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313e:	ee17 3a90 	vmov	r3, s15
 8003142:	b29b      	uxth	r3, r3
 8003144:	8533      	strh	r3, [r6, #40]	; 0x28


		if (Steps[0][gSequenceStepNumber_1].b.Sloped) {
 8003146:	782b      	ldrb	r3, [r5, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	4a66      	ldr	r2, [pc, #408]	; (80032e4 <TIM4_IRQHandler+0x1f4>)
 800314c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003150:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003154:	d05c      	beq.n	8003210 <TIM4_IRQHandler+0x120>
			//Calculate the voltage in slope mode
			CurStep = GetStepVoltage(0, gSequenceStepNumber_1);
 8003156:	7829      	ldrb	r1, [r5, #0]
 8003158:	2000      	movs	r0, #0
 800315a:	f7ff fbdb 	bl	8002914 <GetStepVoltage>
 800315e:	4605      	mov	r5, r0
			if(gSequencerMode_1 == SEQUENCER_MODE_RUN || gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)
 8003160:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <TIM4_IRQHandler+0x1f8>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b123      	cbz	r3, 8003170 <TIM4_IRQHandler+0x80>
 8003166:	4b60      	ldr	r3, [pc, #384]	; (80032e8 <TIM4_IRQHandler+0x1f8>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b06      	cmp	r3, #6
 800316e:	d145      	bne.n	80031fc <TIM4_IRQHandler+0x10c>
			{
				if (PreviousStep>CurStep) {
 8003170:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <TIM4_IRQHandler+0x1fc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	42ab      	cmp	r3, r5
 8003176:	d822      	bhi.n	80031be <TIM4_IRQHandler+0xce>
					deltaVoltage =  (float) (PreviousStep-CurStep) / StepWidth_1;
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep - (unsigned int) (deltaVoltage*gStepWidth_1) );
				};
				if (CurStep>PreviousStep) {
 8003178:	4b5c      	ldr	r3, [pc, #368]	; (80032ec <TIM4_IRQHandler+0x1fc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	42ab      	cmp	r3, r5
 800317e:	d250      	bcs.n	8003222 <TIM4_IRQHandler+0x132>
					deltaVoltage =  (float) (CurStep-PreviousStep) / StepWidth_1;
 8003180:	4b5a      	ldr	r3, [pc, #360]	; (80032ec <TIM4_IRQHandler+0x1fc>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	1aad      	subs	r5, r5, r2
 8003186:	ee07 5a90 	vmov	s15, r5
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	ee07 4a10 	vmov	s14, r4
 8003192:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003196:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep + (unsigned int) (deltaVoltage*gStepWidth_1) );
 800319a:	4a55      	ldr	r2, [pc, #340]	; (80032f0 <TIM4_IRQHandler+0x200>)
 800319c:	edd2 7a00 	vldr	s15, [r2]
 80031a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ac:	ee17 1a90 	vmov	r1, s15
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4419      	add	r1, r3
 80031b4:	b289      	uxth	r1, r1
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7fd fed8 	bl	8000f6c <DAC_SetChannel1Data>
 80031bc:	e031      	b.n	8003222 <TIM4_IRQHandler+0x132>
					deltaVoltage =  (float) (PreviousStep-CurStep) / StepWidth_1;
 80031be:	4a4b      	ldr	r2, [pc, #300]	; (80032ec <TIM4_IRQHandler+0x1fc>)
 80031c0:	6813      	ldr	r3, [r2, #0]
 80031c2:	1b5b      	subs	r3, r3, r5
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031cc:	ee07 4a90 	vmov	s15, r4
 80031d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
					DAC_SetChannel1Data(DAC_Align_12b_R, PreviousStep - (unsigned int) (deltaVoltage*gStepWidth_1) );
 80031d8:	6811      	ldr	r1, [r2, #0]
 80031da:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <TIM4_IRQHandler+0x200>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ec:	ee17 3a90 	vmov	r3, s15
 80031f0:	1ac9      	subs	r1, r1, r3
 80031f2:	b289      	uxth	r1, r1
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd feb9 	bl	8000f6c <DAC_SetChannel1Data>
 80031fa:	e7bd      	b.n	8003178 <TIM4_IRQHandler+0x88>
				};
			}			
			else 
			{
				DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 80031fc:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <TIM4_IRQHandler+0x1e4>)
 80031fe:	7819      	ldrb	r1, [r3, #0]
 8003200:	2000      	movs	r0, #0
 8003202:	f7ff fb87 	bl	8002914 <GetStepVoltage>
 8003206:	b281      	uxth	r1, r0
 8003208:	2000      	movs	r0, #0
 800320a:	f7fd feaf 	bl	8000f6c <DAC_SetChannel1Data>
 800320e:	e008      	b.n	8003222 <TIM4_IRQHandler+0x132>
			}
		} else {
			//Calculate the voltage in not slope mode
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 8003210:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <TIM4_IRQHandler+0x1e4>)
 8003212:	7819      	ldrb	r1, [r3, #0]
 8003214:	2000      	movs	r0, #0
 8003216:	f7ff fb7d 	bl	8002914 <GetStepVoltage>
 800321a:	b281      	uxth	r1, r0
 800321c:	2000      	movs	r0, #0
 800321e:	f7fd fea5 	bl	8000f6c <DAC_SetChannel1Data>
		};
		
			/*additional channels - ref and time*/
			MAX5135_DAC_send(EXT_DAC_CH_0, Steps[0][gSequenceStepNumber_1].b.TLevel >> 2);
 8003222:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <TIM4_IRQHandler+0x1e4>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <TIM4_IRQHandler+0x1f4>)
 800322a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800322e:	f3c1 3189 	ubfx	r1, r1, #14, #10
 8003232:	2000      	movs	r0, #0
 8003234:	f7fe fcd6 	bl	8001be4 <MAX5135_DAC_send>
			MAX5135_DAC_send(EXT_DAC_CH_1, 1023 - (unsigned int) (((double) 1023/ (double) StepWidth_1)*((double) gStepWidth_1)) );
 8003238:	4620      	mov	r0, r4
 800323a:	f7fd f90f 	bl	800045c <__aeabi_ui2d>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	a121      	add	r1, pc, #132	; (adr r1, 80032c8 <TIM4_IRQHandler+0x1d8>)
 8003244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003248:	f7fd faac 	bl	80007a4 <__aeabi_ddiv>
 800324c:	4606      	mov	r6, r0
 800324e:	460f      	mov	r7, r1
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <TIM4_IRQHandler+0x200>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	f7fd f902 	bl	800045c <__aeabi_ui2d>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4630      	mov	r0, r6
 800325e:	4639      	mov	r1, r7
 8003260:	f7fd f976 	bl	8000550 <__aeabi_dmul>
 8003264:	f7fd fb86 	bl	8000974 <__aeabi_d2uiz>
 8003268:	f5c0 717f 	rsb	r1, r0, #1020	; 0x3fc
 800326c:	3103      	adds	r1, #3
 800326e:	2001      	movs	r0, #1
 8003270:	f7fe fcb8 	bl	8001be4 <MAX5135_DAC_send>
		
		
		/* Increment step counter */ 
		if ((gSequencerMode_1 == SEQUENCER_MODE_RUN)|| ((gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)))
 8003274:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <TIM4_IRQHandler+0x1f8>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b123      	cbz	r3, 8003284 <TIM4_IRQHandler+0x194>
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <TIM4_IRQHandler+0x1f8>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b06      	cmp	r3, #6
 8003282:	d103      	bne.n	800328c <TIM4_IRQHandler+0x19c>
		{
			gStepWidth_1++;
 8003284:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <TIM4_IRQHandler+0x200>)
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	6013      	str	r3, [r2, #0]
		};

		if ((gStepWidth_1 < StepWidth_1)) {
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <TIM4_IRQHandler+0x200>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	42a3      	cmp	r3, r4
 8003292:	d233      	bcs.n	80032fc <TIM4_IRQHandler+0x20c>
						TIM_Cmd(TIM14, ENABLE);
						TIM_SetCounter(TIM14, 0x00);
					};
		};
	
	if (gSequencerMode_1 == SEQUENCER_MODE_WAIT) {
 8003294:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <TIM4_IRQHandler+0x1f8>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	f000 8146 	beq.w	800352c <TIM4_IRQHandler+0x43c>
			TIM_Cmd(TIM14, ENABLE);
			TIM_SetCounter(TIM14, 0x00);
		}
	};	

	if (gSequencerMode_1 == SEQUENCER_MODE_WAIT_STROBE) {
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <TIM4_IRQHandler+0x1f8>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	f000 8196 	beq.w	80035d8 <TIM4_IRQHandler+0x4e8>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); //(float) AddData[6]/(float) (CalConstants[6]/15.0)
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
		gSequencerMode_1 = gPrevSequencerMode_1;
	}
		
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <TIM4_IRQHandler+0x204>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b943      	cbnz	r3, 80032c4 <TIM4_IRQHandler+0x1d4>
		DisplayUpdateFlags.b.MainDisplay = 1;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <TIM4_IRQHandler+0x208>)
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	f042 0202 	orr.w	r2, r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]
	};		
	
		return;
};
 80032c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c6:	bf00      	nop
 80032c8:	00000000 	.word	0x00000000
 80032cc:	408ff800 	.word	0x408ff800
 80032d0:	40000800 	.word	0x40000800
 80032d4:	200002bf 	.word	0x200002bf
 80032d8:	20000838 	.word	0x20000838
 80032dc:	20000250 	.word	0x20000250
 80032e0:	46241000 	.word	0x46241000
 80032e4:	20000958 	.word	0x20000958
 80032e8:	200002c1 	.word	0x200002c1
 80032ec:	200002a0 	.word	0x200002a0
 80032f0:	200002c4 	.word	0x200002c4
 80032f4:	200002b0 	.word	0x200002b0
 80032f8:	200002f0 	.word	0x200002f0
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
 80032fc:	4bad      	ldr	r3, [pc, #692]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 80032fe:	7819      	ldrb	r1, [r3, #0]
 8003300:	2000      	movs	r0, #0
 8003302:	f7ff fb07 	bl	8002914 <GetStepVoltage>
 8003306:	4bac      	ldr	r3, [pc, #688]	; (80035b8 <TIM4_IRQHandler+0x4c8>)
 8003308:	6018      	str	r0, [r3, #0]
			if ( (gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)   ) { 
 800330a:	4bac      	ldr	r3, [pc, #688]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b06      	cmp	r3, #6
 8003312:	d074      	beq.n	80033fe <TIM4_IRQHandler+0x30e>
			if (Steps[0][gSequenceStepNumber_1].b.OpModeSTOP) {
 8003314:	4ba7      	ldr	r3, [pc, #668]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	4ba9      	ldr	r3, [pc, #676]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 800331a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f013 0f02 	tst.w	r3, #2
 8003324:	d006      	beq.n	8003334 <TIM4_IRQHandler+0x244>
				gPrevSequencerMode_1 = gSequencerMode_1;
 8003326:	4aa5      	ldr	r2, [pc, #660]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 8003328:	7813      	ldrb	r3, [r2, #0]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	49a5      	ldr	r1, [pc, #660]	; (80035c4 <TIM4_IRQHandler+0x4d4>)
 800332e:	700b      	strb	r3, [r1, #0]
				gSequencerMode_1 = SEQUENCER_MODE_STOP;				
 8003330:	2302      	movs	r3, #2
 8003332:	7013      	strb	r3, [r2, #0]
			if ((Steps[0][gSequenceStepNumber_1].b.OpModeENABLE))  {
 8003334:	4b9f      	ldr	r3, [pc, #636]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	4ba1      	ldr	r3, [pc, #644]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 800333a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f013 0f08 	tst.w	r3, #8
 8003344:	d15f      	bne.n	8003406 <TIM4_IRQHandler+0x316>
			if ( (Steps[0][gSequenceStepNumber_1].b.OpModeSUSTAIN)) {
 8003346:	4b9b      	ldr	r3, [pc, #620]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	4b9d      	ldr	r3, [pc, #628]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 800334c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f013 0f04 	tst.w	r3, #4
 8003356:	d16a      	bne.n	800342e <TIM4_IRQHandler+0x33e>
			if ( (!(Steps[0][gSequenceStepNumber_1].b.OpModeSTOP)) &&
 8003358:	4b96      	ldr	r3, [pc, #600]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	4b98      	ldr	r3, [pc, #608]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 800335e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f013 0f02 	tst.w	r3, #2
 8003368:	d10e      	bne.n	8003388 <TIM4_IRQHandler+0x298>
					(!(Steps[0][gSequenceStepNumber_1].b.OpModeENABLE)) &&
 800336a:	4b92      	ldr	r3, [pc, #584]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 8003370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003374:	685b      	ldr	r3, [r3, #4]
			if ( (!(Steps[0][gSequenceStepNumber_1].b.OpModeSTOP)) &&
 8003376:	f013 0f08 	tst.w	r3, #8
 800337a:	d105      	bne.n	8003388 <TIM4_IRQHandler+0x298>
					(!(Steps[0][gSequenceStepNumber_1].b.OpModeSUSTAIN)) ) {
 800337c:	4b8d      	ldr	r3, [pc, #564]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 8003382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003386:	685b      	ldr	r3, [r3, #4]
			gStepWidth_1 = 0;
 8003388:	4b8f      	ldr	r3, [pc, #572]	; (80035c8 <TIM4_IRQHandler+0x4d8>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
			if (gSequencerMode_1 == SEQUENCER_MODE_RUN) {
 800338e:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d05a      	beq.n	800344c <TIM4_IRQHandler+0x35c>
		if (gSequencerMode_1 == SEQUENCER_MODE_STOP) {
 8003396:	4b89      	ldr	r3, [pc, #548]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	f000 8087 	beq.w	80034b0 <TIM4_IRQHandler+0x3c0>
		if (gSequencerMode_1 == SEQUENCER_MODE_ADVANCE) {
 80033a2:	4b86      	ldr	r3, [pc, #536]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	f47f af73 	bne.w	8003294 <TIM4_IRQHandler+0x1a4>
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 80033ae:	4c81      	ldr	r4, [pc, #516]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 80033b0:	7821      	ldrb	r1, [r4, #0]
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7ff fc06 	bl	8002bc4 <GetNextStep>
 80033b8:	7020      	strb	r0, [r4, #0]
						PULSE_LED_I_ALL_ON;
 80033ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033be:	4883      	ldr	r0, [pc, #524]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 80033c0:	f7fd fea7 	bl	8001112 <GPIO_ResetBits>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 80033c4:	7822      	ldrb	r2, [r4, #0]
 80033c6:	4b7e      	ldr	r3, [pc, #504]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 80033c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80033d2:	f040 809f 	bne.w	8003514 <TIM4_IRQHandler+0x424>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 80033d6:	4b77      	ldr	r3, [pc, #476]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 80033dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80033e6:	f040 809b 	bne.w	8003520 <TIM4_IRQHandler+0x430>
						TIM_Cmd(TIM14, ENABLE);
 80033ea:	4c79      	ldr	r4, [pc, #484]	; (80035d0 <TIM4_IRQHandler+0x4e0>)
 80033ec:	2101      	movs	r1, #1
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7fe f876 	bl	80014e0 <TIM_Cmd>
						TIM_SetCounter(TIM14, 0x00);
 80033f4:	2100      	movs	r1, #0
 80033f6:	4620      	mov	r0, r4
 80033f8:	f7fe f863 	bl	80014c2 <TIM_SetCounter>
 80033fc:	e74a      	b.n	8003294 <TIM4_IRQHandler+0x1a4>
				gSequencerMode_1 =  SEQUENCER_MODE_STOP;
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e786      	b.n	8003314 <TIM4_IRQHandler+0x224>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0)) 
 8003406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800340a:	4870      	ldr	r0, [pc, #448]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 800340c:	f7fd fe78 	bl	8001100 <GPIO_ReadInputDataBit>
 8003410:	2800      	cmp	r0, #0
 8003412:	d198      	bne.n	8003346 <TIM4_IRQHandler+0x256>
				if(gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z)
 8003414:	4b69      	ldr	r3, [pc, #420]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b04      	cmp	r3, #4
 800341c:	d093      	beq.n	8003346 <TIM4_IRQHandler+0x256>
					gPrevSequencerMode_1 = gSequencerMode_1;
 800341e:	4a67      	ldr	r2, [pc, #412]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 8003420:	7813      	ldrb	r3, [r2, #0]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4967      	ldr	r1, [pc, #412]	; (80035c4 <TIM4_IRQHandler+0x4d4>)
 8003426:	700b      	strb	r3, [r1, #0]
					gSequencerMode_1 = SEQUENCER_MODE_WAIT_HI_Z;
 8003428:	2304      	movs	r3, #4
 800342a:	7013      	strb	r3, [r2, #0]
 800342c:	e78b      	b.n	8003346 <TIM4_IRQHandler+0x256>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
 800342e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003432:	4866      	ldr	r0, [pc, #408]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 8003434:	f7fd fe64 	bl	8001100 <GPIO_ReadInputDataBit>
 8003438:	2801      	cmp	r0, #1
 800343a:	d18d      	bne.n	8003358 <TIM4_IRQHandler+0x268>
					gPrevSequencerMode_1 = gSequencerMode_1;
 800343c:	4a5f      	ldr	r2, [pc, #380]	; (80035bc <TIM4_IRQHandler+0x4cc>)
 800343e:	7813      	ldrb	r3, [r2, #0]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4960      	ldr	r1, [pc, #384]	; (80035c4 <TIM4_IRQHandler+0x4d4>)
 8003444:	700b      	strb	r3, [r1, #0]
					gSequencerMode_1 = SEQUENCER_MODE_STAY_HI_Z;
 8003446:	2305      	movs	r3, #5
 8003448:	7013      	strb	r3, [r2, #0]
 800344a:	e785      	b.n	8003358 <TIM4_IRQHandler+0x268>
				gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 800344c:	4c59      	ldr	r4, [pc, #356]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 800344e:	7821      	ldrb	r1, [r4, #0]
 8003450:	4610      	mov	r0, r2
 8003452:	f7ff fbb7 	bl	8002bc4 <GetNextStep>
 8003456:	7020      	strb	r0, [r4, #0]
				PULSE_LED_I_ALL_ON;
 8003458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800345c:	485b      	ldr	r0, [pc, #364]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 800345e:	f7fd fe58 	bl	8001112 <GPIO_ResetBits>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8003462:	7822      	ldrb	r2, [r4, #0]
 8003464:	4b56      	ldr	r3, [pc, #344]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 8003466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003470:	d112      	bne.n	8003498 <TIM4_IRQHandler+0x3a8>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8003472:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 8003478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003482:	d10f      	bne.n	80034a4 <TIM4_IRQHandler+0x3b4>
				TIM_Cmd(TIM14, ENABLE);
 8003484:	4c52      	ldr	r4, [pc, #328]	; (80035d0 <TIM4_IRQHandler+0x4e0>)
 8003486:	2101      	movs	r1, #1
 8003488:	4620      	mov	r0, r4
 800348a:	f7fe f829 	bl	80014e0 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 800348e:	2100      	movs	r1, #0
 8003490:	4620      	mov	r0, r4
 8003492:	f7fe f816 	bl	80014c2 <TIM_SetCounter>
 8003496:	e77e      	b.n	8003396 <TIM4_IRQHandler+0x2a6>
					PULSE_LED_I_1_ON;
 8003498:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800349c:	484b      	ldr	r0, [pc, #300]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 800349e:	f7fd fe38 	bl	8001112 <GPIO_ResetBits>
 80034a2:	e7e6      	b.n	8003472 <TIM4_IRQHandler+0x382>
					PULSE_LED_I_2_ON;
 80034a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034a8:	4848      	ldr	r0, [pc, #288]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 80034aa:	f7fd fe32 	bl	8001112 <GPIO_ResetBits>
 80034ae:	e7e9      	b.n	8003484 <TIM4_IRQHandler+0x394>
			if(gPrevSequencerMode_1 == SEQUENCER_MODE_RUN)
 80034b0:	4b44      	ldr	r3, [pc, #272]	; (80035c4 <TIM4_IRQHandler+0x4d4>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f43f af74 	beq.w	80033a2 <TIM4_IRQHandler+0x2b2>
						PULSE_LED_I_ALL_ON;
 80034ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034be:	4843      	ldr	r0, [pc, #268]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 80034c0:	f7fd fe27 	bl	8001112 <GPIO_ResetBits>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 80034c4:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 80034ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80034d4:	d112      	bne.n	80034fc <TIM4_IRQHandler+0x40c>
						if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 80034d6:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 80034dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80034e6:	d10f      	bne.n	8003508 <TIM4_IRQHandler+0x418>
						TIM_Cmd(TIM14, ENABLE);
 80034e8:	4c39      	ldr	r4, [pc, #228]	; (80035d0 <TIM4_IRQHandler+0x4e0>)
 80034ea:	2101      	movs	r1, #1
 80034ec:	4620      	mov	r0, r4
 80034ee:	f7fd fff7 	bl	80014e0 <TIM_Cmd>
						TIM_SetCounter(TIM14, 0x00);
 80034f2:	2100      	movs	r1, #0
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7fd ffe4 	bl	80014c2 <TIM_SetCounter>
 80034fa:	e752      	b.n	80033a2 <TIM4_IRQHandler+0x2b2>
							PULSE_LED_I_1_ON;
 80034fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003500:	4832      	ldr	r0, [pc, #200]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 8003502:	f7fd fe06 	bl	8001112 <GPIO_ResetBits>
 8003506:	e7e6      	b.n	80034d6 <TIM4_IRQHandler+0x3e6>
							PULSE_LED_I_2_ON;
 8003508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800350c:	482f      	ldr	r0, [pc, #188]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 800350e:	f7fd fe00 	bl	8001112 <GPIO_ResetBits>
 8003512:	e7e9      	b.n	80034e8 <TIM4_IRQHandler+0x3f8>
							PULSE_LED_I_1_ON;
 8003514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003518:	482c      	ldr	r0, [pc, #176]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 800351a:	f7fd fdfa 	bl	8001112 <GPIO_ResetBits>
 800351e:	e75a      	b.n	80033d6 <TIM4_IRQHandler+0x2e6>
							PULSE_LED_I_2_ON;
 8003520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003524:	4829      	ldr	r0, [pc, #164]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 8003526:	f7fd fdf4 	bl	8001112 <GPIO_ResetBits>
 800352a:	e75e      	b.n	80033ea <TIM4_IRQHandler+0x2fa>
		if(gSequenceStepNumber_1 != (unsigned int) (pots_step[0]-1))
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <TIM4_IRQHandler+0x4e4>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	3b01      	subs	r3, #1
 8003538:	429a      	cmp	r2, r3
 800353a:	f43f aeb1 	beq.w	80032a0 <TIM4_IRQHandler+0x1b0>
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); 
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <TIM4_IRQHandler+0x4e4>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	3b01      	subs	r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4c1b      	ldr	r4, [pc, #108]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 8003548:	7023      	strb	r3, [r4, #0]
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 800354a:	7821      	ldrb	r1, [r4, #0]
 800354c:	2000      	movs	r0, #0
 800354e:	f7ff f9e1 	bl	8002914 <GetStepVoltage>
 8003552:	b281      	uxth	r1, r0
 8003554:	2000      	movs	r0, #0
 8003556:	f7fd fd09 	bl	8000f6c <DAC_SetChannel1Data>
			PULSE_LED_I_ALL_ON;
 800355a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800355e:	481b      	ldr	r0, [pc, #108]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 8003560:	f7fd fdd7 	bl	8001112 <GPIO_ResetBits>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8003564:	7822      	ldrb	r2, [r4, #0]
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 8003568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003572:	d112      	bne.n	800359a <TIM4_IRQHandler+0x4aa>
			if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <TIM4_IRQHandler+0x4c4>)
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <TIM4_IRQHandler+0x4d0>)
 800357a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003584:	d10f      	bne.n	80035a6 <TIM4_IRQHandler+0x4b6>
			TIM_Cmd(TIM14, ENABLE);
 8003586:	4c12      	ldr	r4, [pc, #72]	; (80035d0 <TIM4_IRQHandler+0x4e0>)
 8003588:	2101      	movs	r1, #1
 800358a:	4620      	mov	r0, r4
 800358c:	f7fd ffa8 	bl	80014e0 <TIM_Cmd>
			TIM_SetCounter(TIM14, 0x00);
 8003590:	2100      	movs	r1, #0
 8003592:	4620      	mov	r0, r4
 8003594:	f7fd ff95 	bl	80014c2 <TIM_SetCounter>
 8003598:	e682      	b.n	80032a0 <TIM4_IRQHandler+0x1b0>
				PULSE_LED_I_1_ON;
 800359a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800359e:	480b      	ldr	r0, [pc, #44]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 80035a0:	f7fd fdb7 	bl	8001112 <GPIO_ResetBits>
 80035a4:	e7e6      	b.n	8003574 <TIM4_IRQHandler+0x484>
				PULSE_LED_I_2_ON;
 80035a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035aa:	4808      	ldr	r0, [pc, #32]	; (80035cc <TIM4_IRQHandler+0x4dc>)
 80035ac:	f7fd fdb1 	bl	8001112 <GPIO_ResetBits>
 80035b0:	e7e9      	b.n	8003586 <TIM4_IRQHandler+0x496>
 80035b2:	bf00      	nop
 80035b4:	200002bf 	.word	0x200002bf
 80035b8:	200002a0 	.word	0x200002a0
 80035bc:	200002c1 	.word	0x200002c1
 80035c0:	20000958 	.word	0x20000958
 80035c4:	200002bd 	.word	0x200002bd
 80035c8:	200002c4 	.word	0x200002c4
 80035cc:	40020400 	.word	0x40020400
 80035d0:	40002000 	.word	0x40002000
 80035d4:	20000274 	.word	0x20000274
			gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1); //(float) AddData[6]/(float) (CalConstants[6]/15.0)
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <TIM4_IRQHandler+0x510>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	3b01      	subs	r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <TIM4_IRQHandler+0x514>)
 80035e2:	7013      	strb	r3, [r2, #0]
			DAC_SetChannel1Data(DAC_Align_12b_R, GetStepVoltage(0, gSequenceStepNumber_1));
 80035e4:	7811      	ldrb	r1, [r2, #0]
 80035e6:	2000      	movs	r0, #0
 80035e8:	f7ff f994 	bl	8002914 <GetStepVoltage>
 80035ec:	b281      	uxth	r1, r0
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fd fcbc 	bl	8000f6c <DAC_SetChannel1Data>
		gSequencerMode_1 = gPrevSequencerMode_1;
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <TIM4_IRQHandler+0x518>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4a04      	ldr	r2, [pc, #16]	; (800360c <TIM4_IRQHandler+0x51c>)
 80035fc:	7013      	strb	r3, [r2, #0]
 80035fe:	e655      	b.n	80032ac <TIM4_IRQHandler+0x1bc>
 8003600:	20000274 	.word	0x20000274
 8003604:	200002bf 	.word	0x200002bf
 8003608:	200002bd 	.word	0x200002bd
 800360c:	200002c1 	.word	0x200002c1

08003610 <TIM5_IRQHandler>:

/*
 Timer interrupt handler for 1 section steps
*/
void TIM5_IRQHandler()
{
 8003610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned long int StepWidth_2=0;	
	float deltaVoltage;
	unsigned long CurStep;

	/* Clear interrupt flag */
	TIM5->SR = (uint16_t) ~TIM_IT_Update;
 8003614:	4e76      	ldr	r6, [pc, #472]	; (80037f0 <TIM5_IRQHandler+0x1e0>)
 8003616:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800361a:	8233      	strh	r3, [r6, #16]
	
	/* Calculate next step duration */	
	
		/* Calculate next step duration */
		StepWidth_2 = GetStepWidth(1, gSequenceStepNumber_2);
 800361c:	4d75      	ldr	r5, [pc, #468]	; (80037f4 <TIM5_IRQHandler+0x1e4>)
 800361e:	7829      	ldrb	r1, [r5, #0]
 8003620:	2001      	movs	r0, #1
 8003622:	f7ff f8af 	bl	8002784 <GetStepWidth>
 8003626:	4604      	mov	r4, r0

		/* Calculate prescaler/multiplier*/
		TIM5->PSC = (uint16_t) (((((AddData[ADC_TIMEMULTIPLY_Ch_2])*3.5)/CalConstants[ADC_TIMEMULTIPLY_Ch_2])+0.5)*STEP_TIMER_PRESCALER);
 8003628:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <TIM5_IRQHandler+0x1e8>)
 800362a:	8958      	ldrh	r0, [r3, #10]
 800362c:	f7fc ff26 	bl	800047c <__aeabi_i2d>
 8003630:	2200      	movs	r2, #0
 8003632:	4b72      	ldr	r3, [pc, #456]	; (80037fc <TIM5_IRQHandler+0x1ec>)
 8003634:	f7fc ff8c 	bl	8000550 <__aeabi_dmul>
 8003638:	4680      	mov	r8, r0
 800363a:	4689      	mov	r9, r1
 800363c:	4b70      	ldr	r3, [pc, #448]	; (8003800 <TIM5_IRQHandler+0x1f0>)
 800363e:	6958      	ldr	r0, [r3, #20]
 8003640:	f7fc ff0c 	bl	800045c <__aeabi_ui2d>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4640      	mov	r0, r8
 800364a:	4649      	mov	r1, r9
 800364c:	f7fd f8aa 	bl	80007a4 <__aeabi_ddiv>
 8003650:	2200      	movs	r2, #0
 8003652:	4b6c      	ldr	r3, [pc, #432]	; (8003804 <TIM5_IRQHandler+0x1f4>)
 8003654:	f7fc fdc6 	bl	80001e4 <__adddf3>
 8003658:	a361      	add	r3, pc, #388	; (adr r3, 80037e0 <TIM5_IRQHandler+0x1d0>)
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f7fc ff77 	bl	8000550 <__aeabi_dmul>
 8003662:	f7fd f987 	bl	8000974 <__aeabi_d2uiz>
 8003666:	b280      	uxth	r0, r0
 8003668:	8530      	strh	r0, [r6, #40]	; 0x28
		
		if (Steps[1][gSequenceStepNumber_2].b.Sloped) {
 800366a:	782b      	ldrb	r3, [r5, #0]
 800366c:	3320      	adds	r3, #32
 800366e:	4a66      	ldr	r2, [pc, #408]	; (8003808 <TIM5_IRQHandler+0x1f8>)
 8003670:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003674:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003678:	d05c      	beq.n	8003734 <TIM5_IRQHandler+0x124>
			//Calculate the voltage in slope mode
			CurStep = GetStepVoltage(1, gSequenceStepNumber_2);
 800367a:	7829      	ldrb	r1, [r5, #0]
 800367c:	2001      	movs	r0, #1
 800367e:	f7ff f949 	bl	8002914 <GetStepVoltage>
 8003682:	4605      	mov	r5, r0
			if(gSequencerMode_2 == SEQUENCER_MODE_RUN || gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)
 8003684:	4b61      	ldr	r3, [pc, #388]	; (800380c <TIM5_IRQHandler+0x1fc>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b123      	cbz	r3, 8003694 <TIM5_IRQHandler+0x84>
 800368a:	4b60      	ldr	r3, [pc, #384]	; (800380c <TIM5_IRQHandler+0x1fc>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b06      	cmp	r3, #6
 8003692:	d145      	bne.n	8003720 <TIM5_IRQHandler+0x110>
			{
				if (PreviousStep_2>CurStep) {
 8003694:	4b5e      	ldr	r3, [pc, #376]	; (8003810 <TIM5_IRQHandler+0x200>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	42ab      	cmp	r3, r5
 800369a:	d822      	bhi.n	80036e2 <TIM5_IRQHandler+0xd2>
					deltaVoltage =  (float) (PreviousStep_2-CurStep) / StepWidth_2;
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 - (unsigned int) (deltaVoltage*gStepWidth_2) );
				};
				if (CurStep>PreviousStep_2) {
 800369c:	4b5c      	ldr	r3, [pc, #368]	; (8003810 <TIM5_IRQHandler+0x200>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	42ab      	cmp	r3, r5
 80036a2:	d250      	bcs.n	8003746 <TIM5_IRQHandler+0x136>
					deltaVoltage =  (float) (CurStep-PreviousStep_2) / StepWidth_2;
 80036a4:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <TIM5_IRQHandler+0x200>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	1aad      	subs	r5, r5, r2
 80036aa:	ee07 5a90 	vmov	s15, r5
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	ee07 4a10 	vmov	s14, r4
 80036b6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80036ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 + (unsigned int) (deltaVoltage*gStepWidth_2) );
 80036be:	4a55      	ldr	r2, [pc, #340]	; (8003814 <TIM5_IRQHandler+0x204>)
 80036c0:	edd2 7a00 	vldr	s15, [r2]
 80036c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d0:	ee17 1a90 	vmov	r1, s15
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4419      	add	r1, r3
 80036d8:	b289      	uxth	r1, r1
 80036da:	2000      	movs	r0, #0
 80036dc:	f7fd fc56 	bl	8000f8c <DAC_SetChannel2Data>
 80036e0:	e031      	b.n	8003746 <TIM5_IRQHandler+0x136>
					deltaVoltage =  (float) (PreviousStep_2-CurStep) / StepWidth_2;
 80036e2:	4a4b      	ldr	r2, [pc, #300]	; (8003810 <TIM5_IRQHandler+0x200>)
 80036e4:	6813      	ldr	r3, [r2, #0]
 80036e6:	1b5b      	subs	r3, r3, r5
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036f0:	ee07 4a90 	vmov	s15, r4
 80036f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
					DAC_SetChannel2Data(DAC_Align_12b_R, PreviousStep_2 - (unsigned int) (deltaVoltage*gStepWidth_2) );
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	4b45      	ldr	r3, [pc, #276]	; (8003814 <TIM5_IRQHandler+0x204>)
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003708:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800370c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003710:	ee17 3a90 	vmov	r3, s15
 8003714:	1ac9      	subs	r1, r1, r3
 8003716:	b289      	uxth	r1, r1
 8003718:	2000      	movs	r0, #0
 800371a:	f7fd fc37 	bl	8000f8c <DAC_SetChannel2Data>
 800371e:	e7bd      	b.n	800369c <TIM5_IRQHandler+0x8c>
				};	
			}
			else
			{
				DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003720:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <TIM5_IRQHandler+0x1e4>)
 8003722:	7819      	ldrb	r1, [r3, #0]
 8003724:	2001      	movs	r0, #1
 8003726:	f7ff f8f5 	bl	8002914 <GetStepVoltage>
 800372a:	b281      	uxth	r1, r0
 800372c:	2000      	movs	r0, #0
 800372e:	f7fd fc2d 	bl	8000f8c <DAC_SetChannel2Data>
 8003732:	e008      	b.n	8003746 <TIM5_IRQHandler+0x136>
			}
			
		} else {
			//Calculate the voltage in not slope mode
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003734:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <TIM5_IRQHandler+0x1e4>)
 8003736:	7819      	ldrb	r1, [r3, #0]
 8003738:	2001      	movs	r0, #1
 800373a:	f7ff f8eb 	bl	8002914 <GetStepVoltage>
 800373e:	b281      	uxth	r1, r0
 8003740:	2000      	movs	r0, #0
 8003742:	f7fd fc23 	bl	8000f8c <DAC_SetChannel2Data>
		};

			MAX5135_DAC_send(EXT_DAC_CH_2, Steps[1][gSequenceStepNumber_2].b.TLevel >> 2);
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <TIM5_IRQHandler+0x1e4>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	3320      	adds	r3, #32
 800374c:	4a2e      	ldr	r2, [pc, #184]	; (8003808 <TIM5_IRQHandler+0x1f8>)
 800374e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8003752:	f3c1 3189 	ubfx	r1, r1, #14, #10
 8003756:	2002      	movs	r0, #2
 8003758:	f7fe fa44 	bl	8001be4 <MAX5135_DAC_send>
			MAX5135_DAC_send(EXT_DAC_CH_3, 0x3FF - (unsigned int) (((double) 0x3FF/ (double) StepWidth_2)*((double) gStepWidth_2)) );
 800375c:	4620      	mov	r0, r4
 800375e:	f7fc fe7d 	bl	800045c <__aeabi_ui2d>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	a120      	add	r1, pc, #128	; (adr r1, 80037e8 <TIM5_IRQHandler+0x1d8>)
 8003768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800376c:	f7fd f81a 	bl	80007a4 <__aeabi_ddiv>
 8003770:	4606      	mov	r6, r0
 8003772:	460f      	mov	r7, r1
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <TIM5_IRQHandler+0x204>)
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	f7fc fe70 	bl	800045c <__aeabi_ui2d>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4630      	mov	r0, r6
 8003782:	4639      	mov	r1, r7
 8003784:	f7fc fee4 	bl	8000550 <__aeabi_dmul>
 8003788:	f7fd f8f4 	bl	8000974 <__aeabi_d2uiz>
 800378c:	f5c0 717f 	rsb	r1, r0, #1020	; 0x3fc
 8003790:	3103      	adds	r1, #3
 8003792:	2003      	movs	r0, #3
 8003794:	f7fe fa26 	bl	8001be4 <MAX5135_DAC_send>

	/* Increment step counter */
		if ((gSequencerMode_2 == SEQUENCER_MODE_RUN ) || ((gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)))
 8003798:	4b1c      	ldr	r3, [pc, #112]	; (800380c <TIM5_IRQHandler+0x1fc>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	b123      	cbz	r3, 80037a8 <TIM5_IRQHandler+0x198>
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <TIM5_IRQHandler+0x1fc>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b06      	cmp	r3, #6
 80037a6:	d103      	bne.n	80037b0 <TIM5_IRQHandler+0x1a0>
		{
			gStepWidth_2++;
 80037a8:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <TIM5_IRQHandler+0x204>)
 80037aa:	6813      	ldr	r3, [r2, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	6013      	str	r3, [r2, #0]
		};

		if ((gStepWidth_2 < StepWidth_2)) {
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <TIM5_IRQHandler+0x204>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	42a3      	cmp	r3, r4
 80037b6:	d231      	bcs.n	800381c <TIM5_IRQHandler+0x20c>
							TIM_SetCounter(TIM8, 0x00);
			};
		};
		}

	if (gSequencerMode_2 == SEQUENCER_MODE_WAIT) {
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <TIM5_IRQHandler+0x1fc>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	f000 811f 	beq.w	8003a02 <TIM5_IRQHandler+0x3f2>
			TIM_Cmd(TIM8, ENABLE);
			TIM_SetCounter(TIM8, 0x00);
		}
	};	
	
		if (gSequencerMode_2 == SEQUENCER_MODE_WAIT_STROBE) {
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <TIM5_IRQHandler+0x1fc>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	f000 815e 	beq.w	8003a8c <TIM5_IRQHandler+0x47c>

		gSequencerMode_2 = gPrevSequencerMode_2;
	}
	
	
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <TIM5_IRQHandler+0x208>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	f000 816c 	beq.w	8003ab4 <TIM5_IRQHandler+0x4a4>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};	
		return;
};
 80037dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037e0:	00000000 	.word	0x00000000
 80037e4:	40c48200 	.word	0x40c48200
 80037e8:	00000000 	.word	0x00000000
 80037ec:	408ff800 	.word	0x408ff800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	200002c0 	.word	0x200002c0
 80037f8:	20000838 	.word	0x20000838
 80037fc:	400c0000 	.word	0x400c0000
 8003800:	20000250 	.word	0x20000250
 8003804:	3fe00000 	.word	0x3fe00000
 8003808:	20000958 	.word	0x20000958
 800380c:	200002c2 	.word	0x200002c2
 8003810:	200002a4 	.word	0x200002a4
 8003814:	200002c8 	.word	0x200002c8
 8003818:	200002b0 	.word	0x200002b0
			PreviousStep_2 = GetStepVoltage(1, gSequenceStepNumber_2);	
 800381c:	4baa      	ldr	r3, [pc, #680]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 800381e:	7819      	ldrb	r1, [r3, #0]
 8003820:	2001      	movs	r0, #1
 8003822:	f7ff f877 	bl	8002914 <GetStepVoltage>
 8003826:	4ba9      	ldr	r3, [pc, #676]	; (8003acc <TIM5_IRQHandler+0x4bc>)
 8003828:	6018      	str	r0, [r3, #0]
			if((gSequencerMode_2 == SEQUENCER_MODE_ADVANCE)) { 
 800382a:	4ba9      	ldr	r3, [pc, #676]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b06      	cmp	r3, #6
 8003832:	d07b      	beq.n	800392c <TIM5_IRQHandler+0x31c>
			if (Steps[1][gSequenceStepNumber_2].b.OpModeSTOP) {
 8003834:	4ba4      	ldr	r3, [pc, #656]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	f103 0220 	add.w	r2, r3, #32
 800383c:	4ba5      	ldr	r3, [pc, #660]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 800383e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f013 0f02 	tst.w	r3, #2
 8003848:	d006      	beq.n	8003858 <TIM5_IRQHandler+0x248>
				gPrevSequencerMode_2 = gSequencerMode_2;
 800384a:	4aa1      	ldr	r2, [pc, #644]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 800384c:	7813      	ldrb	r3, [r2, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	49a1      	ldr	r1, [pc, #644]	; (8003ad8 <TIM5_IRQHandler+0x4c8>)
 8003852:	700b      	strb	r3, [r1, #0]
				gSequencerMode_2 = SEQUENCER_MODE_STOP;				
 8003854:	2302      	movs	r3, #2
 8003856:	7013      	strb	r3, [r2, #0]
			if ( (Steps[1][gSequenceStepNumber_2].b.OpModeENABLE))  {
 8003858:	4b9b      	ldr	r3, [pc, #620]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	f103 0220 	add.w	r2, r3, #32
 8003860:	4b9c      	ldr	r3, [pc, #624]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 8003862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f013 0f08 	tst.w	r3, #8
 800386c:	d162      	bne.n	8003934 <TIM5_IRQHandler+0x324>
			if ( (Steps[1][gSequenceStepNumber_2].b.OpModeSUSTAIN)) {
 800386e:	4b96      	ldr	r3, [pc, #600]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	f103 0220 	add.w	r2, r3, #32
 8003876:	4b97      	ldr	r3, [pc, #604]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 8003878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f013 0f04 	tst.w	r3, #4
 8003882:	d16a      	bne.n	800395a <TIM5_IRQHandler+0x34a>
			if ( (!(Steps[1][gSequenceStepNumber_2].b.OpModeSTOP)) &&
 8003884:	4b90      	ldr	r3, [pc, #576]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f103 0220 	add.w	r2, r3, #32
 800388c:	4b91      	ldr	r3, [pc, #580]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 800388e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f013 0f02 	tst.w	r3, #2
 8003898:	d112      	bne.n	80038c0 <TIM5_IRQHandler+0x2b0>
					(!(Steps[1][gSequenceStepNumber_2].b.OpModeENABLE)) &&
 800389a:	4b8b      	ldr	r3, [pc, #556]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f103 0220 	add.w	r2, r3, #32
 80038a2:	4b8c      	ldr	r3, [pc, #560]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 80038a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038a8:	685b      	ldr	r3, [r3, #4]
			if ( (!(Steps[1][gSequenceStepNumber_2].b.OpModeSTOP)) &&
 80038aa:	f013 0f08 	tst.w	r3, #8
 80038ae:	d107      	bne.n	80038c0 <TIM5_IRQHandler+0x2b0>
					(!(Steps[1][gSequenceStepNumber_2].b.OpModeSUSTAIN)) ) {
 80038b0:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f103 0220 	add.w	r2, r3, #32
 80038b8:	4b86      	ldr	r3, [pc, #536]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 80038ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038be:	685b      	ldr	r3, [r3, #4]
			gStepWidth_2 = 0;
 80038c0:	4b86      	ldr	r3, [pc, #536]	; (8003adc <TIM5_IRQHandler+0x4cc>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
			if (gSequencerMode_2 == SEQUENCER_MODE_RUN) {
 80038c6:	4b82      	ldr	r3, [pc, #520]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d05a      	beq.n	8003984 <TIM5_IRQHandler+0x374>
			if (gSequencerMode_2 == SEQUENCER_MODE_STOP) {
 80038ce:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	f47f af6f 	bne.w	80037b8 <TIM5_IRQHandler+0x1a8>
				if(gPrevSequencerMode_2 == SEQUENCER_MODE_RUN)
 80038da:	4b7f      	ldr	r3, [pc, #508]	; (8003ad8 <TIM5_IRQHandler+0x4c8>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f43f af6a 	beq.w	80037b8 <TIM5_IRQHandler+0x1a8>
							PULSE_LED_II_ALL_ON;
 80038e4:	2104      	movs	r1, #4
 80038e6:	487e      	ldr	r0, [pc, #504]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 80038e8:	f7fd fc13 	bl	8001112 <GPIO_ResetBits>
							if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 80038ec:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	f103 0220 	add.w	r2, r3, #32
 80038f4:	4b77      	ldr	r3, [pc, #476]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 80038f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003900:	d174      	bne.n	80039ec <TIM5_IRQHandler+0x3dc>
							if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8003902:	4b71      	ldr	r3, [pc, #452]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f103 0220 	add.w	r2, r3, #32
 800390a:	4b72      	ldr	r3, [pc, #456]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 800390c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003916:	d16e      	bne.n	80039f6 <TIM5_IRQHandler+0x3e6>
							TIM_Cmd(TIM8, ENABLE);
 8003918:	4c72      	ldr	r4, [pc, #456]	; (8003ae4 <TIM5_IRQHandler+0x4d4>)
 800391a:	2101      	movs	r1, #1
 800391c:	4620      	mov	r0, r4
 800391e:	f7fd fddf 	bl	80014e0 <TIM_Cmd>
							TIM_SetCounter(TIM8, 0x00);
 8003922:	2100      	movs	r1, #0
 8003924:	4620      	mov	r0, r4
 8003926:	f7fd fdcc 	bl	80014c2 <TIM_SetCounter>
 800392a:	e745      	b.n	80037b8 <TIM5_IRQHandler+0x1a8>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 800392c:	4b68      	ldr	r3, [pc, #416]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 800392e:	2202      	movs	r2, #2
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e77f      	b.n	8003834 <TIM5_IRQHandler+0x224>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0)) 
 8003934:	2140      	movs	r1, #64	; 0x40
 8003936:	486c      	ldr	r0, [pc, #432]	; (8003ae8 <TIM5_IRQHandler+0x4d8>)
 8003938:	f7fd fbe2 	bl	8001100 <GPIO_ReadInputDataBit>
 800393c:	2800      	cmp	r0, #0
 800393e:	d196      	bne.n	800386e <TIM5_IRQHandler+0x25e>
					if(gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z)
 8003940:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b04      	cmp	r3, #4
 8003948:	d091      	beq.n	800386e <TIM5_IRQHandler+0x25e>
						gPrevSequencerMode_2 = gSequencerMode_2;
 800394a:	4a61      	ldr	r2, [pc, #388]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 800394c:	7813      	ldrb	r3, [r2, #0]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	4961      	ldr	r1, [pc, #388]	; (8003ad8 <TIM5_IRQHandler+0x4c8>)
 8003952:	700b      	strb	r3, [r1, #0]
						gSequencerMode_2 = SEQUENCER_MODE_WAIT_HI_Z;
 8003954:	2304      	movs	r3, #4
 8003956:	7013      	strb	r3, [r2, #0]
 8003958:	e789      	b.n	800386e <TIM5_IRQHandler+0x25e>
				if( (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1)) 
 800395a:	2140      	movs	r1, #64	; 0x40
 800395c:	4862      	ldr	r0, [pc, #392]	; (8003ae8 <TIM5_IRQHandler+0x4d8>)
 800395e:	f7fd fbcf 	bl	8001100 <GPIO_ReadInputDataBit>
 8003962:	2801      	cmp	r0, #1
 8003964:	d18e      	bne.n	8003884 <TIM5_IRQHandler+0x274>
					if(gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z)
 8003966:	4b5a      	ldr	r3, [pc, #360]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b05      	cmp	r3, #5
 800396e:	d089      	beq.n	8003884 <TIM5_IRQHandler+0x274>
						gPrevSequencerMode_2 = gSequencerMode_2;
 8003970:	4a57      	ldr	r2, [pc, #348]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 8003972:	7813      	ldrb	r3, [r2, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4958      	ldr	r1, [pc, #352]	; (8003ad8 <TIM5_IRQHandler+0x4c8>)
 8003978:	700b      	strb	r3, [r1, #0]
						gSequencerMode_2 = SEQUENCER_MODE_STAY_HI_Z;
 800397a:	2305      	movs	r3, #5
 800397c:	7013      	strb	r3, [r2, #0]
						InitStart_2_SignalTimer();
 800397e:	f7fe fdd5 	bl	800252c <InitStart_2_SignalTimer>
 8003982:	e77f      	b.n	8003884 <TIM5_IRQHandler+0x274>
					gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8003984:	4c50      	ldr	r4, [pc, #320]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003986:	7821      	ldrb	r1, [r4, #0]
 8003988:	2001      	movs	r0, #1
 800398a:	f7ff f91b 	bl	8002bc4 <GetNextStep>
 800398e:	7020      	strb	r0, [r4, #0]
				PULSE_LED_II_ALL_ON;
 8003990:	2104      	movs	r1, #4
 8003992:	4853      	ldr	r0, [pc, #332]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 8003994:	f7fd fbbd 	bl	8001112 <GPIO_ResetBits>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8003998:	7823      	ldrb	r3, [r4, #0]
 800399a:	f103 0220 	add.w	r2, r3, #32
 800399e:	4b4d      	ldr	r3, [pc, #308]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 80039a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80039aa:	d114      	bne.n	80039d6 <TIM5_IRQHandler+0x3c6>
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 80039ac:	4b46      	ldr	r3, [pc, #280]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	f103 0220 	add.w	r2, r3, #32
 80039b4:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 80039b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80039c0:	d10e      	bne.n	80039e0 <TIM5_IRQHandler+0x3d0>
				TIM_Cmd(TIM8, ENABLE);
 80039c2:	4c48      	ldr	r4, [pc, #288]	; (8003ae4 <TIM5_IRQHandler+0x4d4>)
 80039c4:	2101      	movs	r1, #1
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7fd fd8a 	bl	80014e0 <TIM_Cmd>
				TIM_SetCounter(TIM8, 0x00);
 80039cc:	2100      	movs	r1, #0
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7fd fd77 	bl	80014c2 <TIM_SetCounter>
 80039d4:	e77b      	b.n	80038ce <TIM5_IRQHandler+0x2be>
					PULSE_LED_II_1_ON;
 80039d6:	2108      	movs	r1, #8
 80039d8:	4841      	ldr	r0, [pc, #260]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 80039da:	f7fd fb9a 	bl	8001112 <GPIO_ResetBits>
 80039de:	e7e5      	b.n	80039ac <TIM5_IRQHandler+0x39c>
					PULSE_LED_II_2_ON;
 80039e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039e4:	483e      	ldr	r0, [pc, #248]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 80039e6:	f7fd fb94 	bl	8001112 <GPIO_ResetBits>
 80039ea:	e7ea      	b.n	80039c2 <TIM5_IRQHandler+0x3b2>
								PULSE_LED_II_1_ON;
 80039ec:	2108      	movs	r1, #8
 80039ee:	483c      	ldr	r0, [pc, #240]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 80039f0:	f7fd fb8f 	bl	8001112 <GPIO_ResetBits>
 80039f4:	e785      	b.n	8003902 <TIM5_IRQHandler+0x2f2>
								PULSE_LED_II_2_ON;
 80039f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039fa:	4839      	ldr	r0, [pc, #228]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 80039fc:	f7fd fb89 	bl	8001112 <GPIO_ResetBits>
 8003a00:	e78a      	b.n	8003918 <TIM5_IRQHandler+0x308>
		if(gSequenceStepNumber_2 != (unsigned int)(pots_step[1]-1))
 8003a02:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	4b38      	ldr	r3, [pc, #224]	; (8003aec <TIM5_IRQHandler+0x4dc>)
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	f43f aed8 	beq.w	80037c4 <TIM5_IRQHandler+0x1b4>
			gSequenceStepNumber_2 = (unsigned int)(pots_step[1]-1);
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <TIM5_IRQHandler+0x4dc>)
 8003a16:	785b      	ldrb	r3, [r3, #1]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4c2a      	ldr	r4, [pc, #168]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003a1e:	7023      	strb	r3, [r4, #0]
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003a20:	7821      	ldrb	r1, [r4, #0]
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7fe ff76 	bl	8002914 <GetStepVoltage>
 8003a28:	b281      	uxth	r1, r0
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fd faae 	bl	8000f8c <DAC_SetChannel2Data>
			PULSE_LED_II_ALL_ON;
 8003a30:	2104      	movs	r1, #4
 8003a32:	482b      	ldr	r0, [pc, #172]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 8003a34:	f7fd fb6d 	bl	8001112 <GPIO_ResetBits>
			if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8003a38:	7823      	ldrb	r3, [r4, #0]
 8003a3a:	f103 0220 	add.w	r2, r3, #32
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 8003a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003a4a:	d114      	bne.n	8003a76 <TIM5_IRQHandler+0x466>
			if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	f103 0220 	add.w	r2, r3, #32
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <TIM5_IRQHandler+0x4c4>)
 8003a56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003a60:	d10e      	bne.n	8003a80 <TIM5_IRQHandler+0x470>
			TIM_Cmd(TIM8, ENABLE);
 8003a62:	4c20      	ldr	r4, [pc, #128]	; (8003ae4 <TIM5_IRQHandler+0x4d4>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	4620      	mov	r0, r4
 8003a68:	f7fd fd3a 	bl	80014e0 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7fd fd27 	bl	80014c2 <TIM_SetCounter>
 8003a74:	e6a6      	b.n	80037c4 <TIM5_IRQHandler+0x1b4>
				PULSE_LED_II_1_ON;
 8003a76:	2108      	movs	r1, #8
 8003a78:	4819      	ldr	r0, [pc, #100]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 8003a7a:	f7fd fb4a 	bl	8001112 <GPIO_ResetBits>
 8003a7e:	e7e5      	b.n	8003a4c <TIM5_IRQHandler+0x43c>
				PULSE_LED_II_2_ON;
 8003a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a84:	4816      	ldr	r0, [pc, #88]	; (8003ae0 <TIM5_IRQHandler+0x4d0>)
 8003a86:	f7fd fb44 	bl	8001112 <GPIO_ResetBits>
 8003a8a:	e7ea      	b.n	8003a62 <TIM5_IRQHandler+0x452>
			gSequenceStepNumber_2 = (unsigned int)(pots_step[1]-1);
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <TIM5_IRQHandler+0x4dc>)
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <TIM5_IRQHandler+0x4b8>)
 8003a96:	7013      	strb	r3, [r2, #0]
			DAC_SetChannel2Data(DAC_Align_12b_R, GetStepVoltage(1, gSequenceStepNumber_2));
 8003a98:	7811      	ldrb	r1, [r2, #0]
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f7fe ff3a 	bl	8002914 <GetStepVoltage>
 8003aa0:	b281      	uxth	r1, r0
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7fd fa72 	bl	8000f8c <DAC_SetChannel2Data>
		gSequencerMode_2 = gPrevSequencerMode_2;
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <TIM5_IRQHandler+0x4c8>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <TIM5_IRQHandler+0x4c0>)
 8003ab0:	7013      	strb	r3, [r2, #0]
 8003ab2:	e68d      	b.n	80037d0 <TIM5_IRQHandler+0x1c0>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <TIM5_IRQHandler+0x4e0>)
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8003abe:	781a      	ldrb	r2, [r3, #0]
 8003ac0:	f042 0202 	orr.w	r2, r2, #2
 8003ac4:	701a      	strb	r2, [r3, #0]
		return;
 8003ac6:	e689      	b.n	80037dc <TIM5_IRQHandler+0x1cc>
 8003ac8:	200002c0 	.word	0x200002c0
 8003acc:	200002a4 	.word	0x200002a4
 8003ad0:	200002c2 	.word	0x200002c2
 8003ad4:	20000958 	.word	0x20000958
 8003ad8:	200002be 	.word	0x200002be
 8003adc:	200002c8 	.word	0x200002c8
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40010400 	.word	0x40010400
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	20000274 	.word	0x20000274
 8003af0:	200002f0 	.word	0x200002f0

08003af4 <mTimersInit>:

/*
	Init 2 timers to control steps
*/
void mTimersInit(void)
{
 8003af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af8:	b084      	sub	sp, #16
	TIM_TimeBaseInitTypeDef myTimer;
	NVIC_InitTypeDef nvicStructure;
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003afa:	2101      	movs	r1, #1
 8003afc:	2004      	movs	r0, #4
 8003afe:	f7fd fb8b 	bl	8001218 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseStructInit(&myTimer);
 8003b02:	a801      	add	r0, sp, #4
 8003b04:	f7fd fcd4 	bl	80014b0 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = STEP_TIMER_PRESCALER;
 8003b08:	f642 1304 	movw	r3, #10500	; 0x2904
 8003b0c:	f8ad 3004 	strh.w	r3, [sp, #4]
	myTimer.TIM_Period = 1;
 8003b10:	2401      	movs	r4, #1
 8003b12:	9402      	str	r4, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 8003b14:	2500      	movs	r5, #0
 8003b16:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 8003b1a:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM4, &myTimer);	
 8003b1e:	4f4d      	ldr	r7, [pc, #308]	; (8003c54 <mTimersInit+0x160>)
 8003b20:	a901      	add	r1, sp, #4
 8003b22:	4638      	mov	r0, r7
 8003b24:	f7fd fc86 	bl	8001434 <TIM_TimeBaseInit>
	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f7fd fccb 	bl	80014c6 <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM4, ENABLE);
 8003b30:	4621      	mov	r1, r4
 8003b32:	4638      	mov	r0, r7
 8003b34:	f7fd fcd4 	bl	80014e0 <TIM_Cmd>
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8003b38:	4621      	mov	r1, r4
 8003b3a:	2008      	movs	r0, #8
 8003b3c:	f7fd fb6c 	bl	8001218 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInit(TIM5, &myTimer);
 8003b40:	4e45      	ldr	r6, [pc, #276]	; (8003c58 <mTimersInit+0x164>)
 8003b42:	a901      	add	r1, sp, #4
 8003b44:	4630      	mov	r0, r6
 8003b46:	f7fd fc75 	bl	8001434 <TIM_TimeBaseInit>
	TIM_ARRPreloadConfig(TIM5, ENABLE);
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f7fd fcba 	bl	80014c6 <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM5, ENABLE);
 8003b52:	4621      	mov	r1, r4
 8003b54:	4630      	mov	r0, r6
 8003b56:	f7fd fcc3 	bl	80014e0 <TIM_Cmd>
	
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4638      	mov	r0, r7
 8003b60:	f7fd fcde 	bl	8001520 <TIM_ITConfig>
	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 8003b64:	4622      	mov	r2, r4
 8003b66:	4621      	mov	r1, r4
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f7fd fcd9 	bl	8001520 <TIM_ITConfig>
	
	
	
	nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8003b6e:	231e      	movs	r3, #30
 8003b70:	f88d 3000 	strb.w	r3, [sp]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003b74:	f88d 5001 	strb.w	r5, [sp, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003b78:	f88d 5002 	strb.w	r5, [sp, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003b7c:	f88d 4003 	strb.w	r4, [sp, #3]
	NVIC_Init(&nvicStructure);
 8003b80:	4668      	mov	r0, sp
 8003b82:	f7fd f8cf 	bl	8000d24 <NVIC_Init>
	
	nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8003b86:	2332      	movs	r3, #50	; 0x32
 8003b88:	f88d 3000 	strb.w	r3, [sp]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003b8c:	f88d 5001 	strb.w	r5, [sp, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8003b90:	f88d 5002 	strb.w	r5, [sp, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003b94:	f88d 4003 	strb.w	r4, [sp, #3]
	NVIC_Init(&nvicStructure);
 8003b98:	4668      	mov	r0, sp
 8003b9a:	f7fd f8c3 	bl	8000d24 <NVIC_Init>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003b9e:	4e2f      	ldr	r6, [pc, #188]	; (8003c5c <mTimersInit+0x168>)
 8003ba0:	f886 531e 	strb.w	r5, [r6, #798]	; 0x31e
 8003ba4:	f886 5332 	strb.w	r5, [r6, #818]	; 0x332
	
	NVIC_SetPriority (TIM4_IRQn, 0);
	NVIC_SetPriority (TIM5_IRQn, 0);
	
	SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup_0;
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <mTimersInit+0x16c>)
 8003baa:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <mTimersInit+0x170>)
 8003bac:	60da      	str	r2, [r3, #12]
	
	gStepWidth_1 = 8;
 8003bae:	2308      	movs	r3, #8
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	; (8003c68 <mTimersInit+0x174>)
 8003bb2:	6013      	str	r3, [r2, #0]
	gStepWidth_2 = 8;
 8003bb4:	4a2d      	ldr	r2, [pc, #180]	; (8003c6c <mTimersInit+0x178>)
 8003bb6:	6013      	str	r3, [r2, #0]
	gFullStepWidth_1 = 8;
 8003bb8:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <mTimersInit+0x17c>)
 8003bba:	6013      	str	r3, [r2, #0]
	gFullStepWidth_2 = 8;
 8003bbc:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <mTimersInit+0x180>)
 8003bbe:	6013      	str	r3, [r2, #0]
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bc6:	f7fd fb27 	bl	8001218 <RCC_APB1PeriphClockCmd>
	
	TIM_TimeBaseStructInit(&myTimer);
 8003bca:	a801      	add	r0, sp, #4
 8003bcc:	f7fd fc70 	bl	80014b0 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = 210;
 8003bd0:	f04f 08d2 	mov.w	r8, #210	; 0xd2
 8003bd4:	f8ad 8004 	strh.w	r8, [sp, #4]
	myTimer.TIM_Period = 320;
 8003bd8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003bdc:	9302      	str	r3, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 8003bde:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 8003be2:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM14, &myTimer);	
 8003be6:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
 8003bea:	a901      	add	r1, sp, #4
 8003bec:	4638      	mov	r0, r7
 8003bee:	f7fd fc21 	bl	8001434 <TIM_TimeBaseInit>
	
	TIM_Cmd(TIM14, DISABLE);
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	f7fd fc73 	bl	80014e0 <TIM_Cmd>
	TIM_ITConfig(TIM14, TIM_IT_Update, ENABLE);
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4638      	mov	r0, r7
 8003c00:	f7fd fc8e 	bl	8001520 <TIM_ITConfig>
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8003c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c08:	6073      	str	r3, [r6, #4]
	NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f7fd fb11 	bl	8001234 <RCC_APB2PeriphClockCmd>
	
	TIM_TimeBaseStructInit(&myTimer);
 8003c12:	a801      	add	r0, sp, #4
 8003c14:	f7fd fc4c 	bl	80014b0 <TIM_TimeBaseStructInit>
	myTimer.TIM_Prescaler = 210;
 8003c18:	f8ad 8004 	strh.w	r8, [sp, #4]
	myTimer.TIM_Period = 640;// Seq2 pulse duration
 8003c1c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003c20:	9302      	str	r3, [sp, #8]
	myTimer.TIM_ClockDivision = TIM_CKD_DIV1;
 8003c22:	f8ad 500c 	strh.w	r5, [sp, #12]
	myTimer.TIM_CounterMode = TIM_CounterMode_Up;
 8003c26:	f8ad 5006 	strh.w	r5, [sp, #6]
	
	TIM_TimeBaseInit(TIM8, &myTimer);	
 8003c2a:	f507 4764 	add.w	r7, r7, #58368	; 0xe400
 8003c2e:	a901      	add	r1, sp, #4
 8003c30:	4638      	mov	r0, r7
 8003c32:	f7fd fbff 	bl	8001434 <TIM_TimeBaseInit>
	
	TIM_Cmd(TIM8, DISABLE);
 8003c36:	4629      	mov	r1, r5
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f7fd fc51 	bl	80014e0 <TIM_Cmd>
	TIM_ITConfig(TIM8, TIM_IT_Update, ENABLE);
 8003c3e:	4622      	mov	r2, r4
 8003c40:	4621      	mov	r1, r4
 8003c42:	4638      	mov	r0, r7
 8003c44:	f7fd fc6c 	bl	8001520 <TIM_ITConfig>
 8003c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4c:	6073      	str	r3, [r6, #4]
	NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
	
};
 8003c4e:	b004      	add	sp, #16
 8003c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00
 8003c64:	05fa0700 	.word	0x05fa0700
 8003c68:	200002c4 	.word	0x200002c4
 8003c6c:	200002c8 	.word	0x200002c8
 8003c70:	200002b4 	.word	0x200002b4
 8003c74:	200002b8 	.word	0x200002b8

08003c78 <TIM8_UP_TIM13_IRQHandler>:

//Turn off pulses
//Section 1
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003c78:	b538      	push	{r3, r4, r5, lr}
	if(TIM_GetITStatus(TIM8, TIM_IT_Update) != RESET)
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	480e      	ldr	r0, [pc, #56]	; (8003cb8 <TIM8_UP_TIM13_IRQHandler+0x40>)
 8003c7e:	f7fd fc59 	bl	8001534 <TIM_GetITStatus>
 8003c82:	b900      	cbnz	r0, 8003c86 <TIM8_UP_TIM13_IRQHandler+0xe>
		PULSE_LED_II_ALL_OFF;
		PULSE_LED_II_1_OFF;
		PULSE_LED_II_2_OFF;
		TIM_ClearITPendingBit(TIM8, TIM_IT_Update);
	}		
}
 8003c84:	bd38      	pop	{r3, r4, r5, pc}
		TIM_Cmd(TIM8, DISABLE);
 8003c86:	4d0c      	ldr	r5, [pc, #48]	; (8003cb8 <TIM8_UP_TIM13_IRQHandler+0x40>)
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f7fd fc28 	bl	80014e0 <TIM_Cmd>
		PULSE_LED_II_ALL_OFF;
 8003c90:	4c0a      	ldr	r4, [pc, #40]	; (8003cbc <TIM8_UP_TIM13_IRQHandler+0x44>)
 8003c92:	2104      	movs	r1, #4
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7fd fa3a 	bl	800110e <GPIO_SetBits>
		PULSE_LED_II_1_OFF;
 8003c9a:	2108      	movs	r1, #8
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7fd fa36 	bl	800110e <GPIO_SetBits>
		PULSE_LED_II_2_OFF;
 8003ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7fd fa31 	bl	800110e <GPIO_SetBits>
		TIM_ClearITPendingBit(TIM8, TIM_IT_Update);
 8003cac:	2101      	movs	r1, #1
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f7fd fc4c 	bl	800154c <TIM_ClearITPendingBit>
}
 8003cb4:	e7e6      	b.n	8003c84 <TIM8_UP_TIM13_IRQHandler+0xc>
 8003cb6:	bf00      	nop
 8003cb8:	40010400 	.word	0x40010400
 8003cbc:	40020000 	.word	0x40020000

08003cc0 <TIM8_TRG_COM_TIM14_IRQHandler>:

//Section 2
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003cc0:	b538      	push	{r3, r4, r5, lr}
	if(TIM_GetITStatus(TIM14, TIM_IT_Update) != RESET)
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	480f      	ldr	r0, [pc, #60]	; (8003d04 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8003cc6:	f7fd fc35 	bl	8001534 <TIM_GetITStatus>
 8003cca:	b900      	cbnz	r0, 8003cce <TIM8_TRG_COM_TIM14_IRQHandler+0xe>
		PULSE_LED_I_ALL_OFF;
		PULSE_LED_I_1_OFF;
		PULSE_LED_I_2_OFF;
		TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
	}		
}
 8003ccc:	bd38      	pop	{r3, r4, r5, pc}
		TIM_Cmd(TIM14, DISABLE);
 8003cce:	4d0d      	ldr	r5, [pc, #52]	; (8003d04 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f7fd fc04 	bl	80014e0 <TIM_Cmd>
		PULSE_LED_I_ALL_OFF;
 8003cd8:	4c0b      	ldr	r4, [pc, #44]	; (8003d08 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>)
 8003cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f7fd fa15 	bl	800110e <GPIO_SetBits>
		PULSE_LED_I_1_OFF;
 8003ce4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f7fd fa10 	bl	800110e <GPIO_SetBits>
		PULSE_LED_I_2_OFF;
 8003cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7fd fa0b 	bl	800110e <GPIO_SetBits>
		TIM_ClearITPendingBit(TIM14, TIM_IT_Update);
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f7fd fc26 	bl	800154c <TIM_ClearITPendingBit>
}
 8003d00:	e7e4      	b.n	8003ccc <TIM8_TRG_COM_TIM14_IRQHandler+0xc>
 8003d02:	bf00      	nop
 8003d04:	40002000 	.word	0x40002000
 8003d08:	40020400 	.word	0x40020400

08003d0c <TIM3_IRQHandler>:

//Timer Interrupt handler for start switch scan
//Section 1
void TIM3_IRQHandler()
{
 8003d0c:	b510      	push	{r4, lr}
	TIM3->SR = (uint16_t) ~TIM_IT_Update;	
 8003d0e:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <TIM3_IRQHandler+0x104>)
 8003d10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d14:	821a      	strh	r2, [r3, #16]
	
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003d16:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <TIM3_IRQHandler+0x108>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d00f      	beq.n	8003d40 <TIM3_IRQHandler+0x34>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0) ) {
	}
	else if((gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003d20:	4b3c      	ldr	r3, [pc, #240]	; (8003e14 <TIM3_IRQHandler+0x108>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d012      	beq.n	8003d50 <TIM3_IRQHandler+0x44>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
		TIM3->CR1 &= ~TIM_CR1_CEN;
	}
	
	if((gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <TIM3_IRQHandler+0x108>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d024      	beq.n	8003d7e <TIM3_IRQHandler+0x72>
//PulseStatus;



	}
	else if((gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)
 8003d34:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <TIM3_IRQHandler+0x108>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d027      	beq.n	8003d8e <TIM3_IRQHandler+0x82>
					};

					TIM_Cmd(TIM14, ENABLE);
					TIM_SetCounter(TIM14, 0x00);
	}
};
 8003d3e:	bd10      	pop	{r4, pc}
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0) ) {
 8003d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d44:	4834      	ldr	r0, [pc, #208]	; (8003e18 <TIM3_IRQHandler+0x10c>)
 8003d46:	f7fd f9db 	bl	8001100 <GPIO_ReadInputDataBit>
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d0ed      	beq.n	8003d2a <TIM3_IRQHandler+0x1e>
 8003d4e:	e7e7      	b.n	8003d20 <TIM3_IRQHandler+0x14>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
 8003d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d54:	4830      	ldr	r0, [pc, #192]	; (8003e18 <TIM3_IRQHandler+0x10c>)
 8003d56:	f7fd f9d3 	bl	8001100 <GPIO_ReadInputDataBit>
 8003d5a:	2801      	cmp	r0, #1
 8003d5c:	d1e5      	bne.n	8003d2a <TIM3_IRQHandler+0x1e>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8003d5e:	2000      	movs	r0, #0
 8003d60:	4b2c      	ldr	r3, [pc, #176]	; (8003e14 <TIM3_IRQHandler+0x108>)
 8003d62:	7018      	strb	r0, [r3, #0]
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8003d64:	4c2d      	ldr	r4, [pc, #180]	; (8003e1c <TIM3_IRQHandler+0x110>)
 8003d66:	7821      	ldrb	r1, [r4, #0]
 8003d68:	f7fe ff2c 	bl	8002bc4 <GetNextStep>
 8003d6c:	7020      	strb	r0, [r4, #0]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8003d6e:	4a28      	ldr	r2, [pc, #160]	; (8003e10 <TIM3_IRQHandler+0x104>)
 8003d70:	8813      	ldrh	r3, [r2, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
 8003d7c:	e7d5      	b.n	8003d2a <TIM3_IRQHandler+0x1e>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 1))
 8003d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d82:	4825      	ldr	r0, [pc, #148]	; (8003e18 <TIM3_IRQHandler+0x10c>)
 8003d84:	f7fd f9bc 	bl	8001100 <GPIO_ReadInputDataBit>
 8003d88:	2801      	cmp	r0, #1
 8003d8a:	d1d3      	bne.n	8003d34 <TIM3_IRQHandler+0x28>
 8003d8c:	e7d7      	b.n	8003d3e <TIM3_IRQHandler+0x32>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_8) == 0))
 8003d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d92:	4821      	ldr	r0, [pc, #132]	; (8003e18 <TIM3_IRQHandler+0x10c>)
 8003d94:	f7fd f9b4 	bl	8001100 <GPIO_ReadInputDataBit>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d1d0      	bne.n	8003d3e <TIM3_IRQHandler+0x32>
		gSequencerMode_1 = SEQUENCER_MODE_RUN;
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <TIM3_IRQHandler+0x108>)
 8003d9e:	7018      	strb	r0, [r3, #0]
		gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8003da0:	4c1e      	ldr	r4, [pc, #120]	; (8003e1c <TIM3_IRQHandler+0x110>)
 8003da2:	7821      	ldrb	r1, [r4, #0]
 8003da4:	f7fe ff0e 	bl	8002bc4 <GetNextStep>
 8003da8:	7020      	strb	r0, [r4, #0]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8003daa:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <TIM3_IRQHandler+0x104>)
 8003dac:	8813      	ldrh	r3, [r2, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	8013      	strh	r3, [r2, #0]
		PULSE_LED_I_ALL_ON;
 8003db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dbc:	4816      	ldr	r0, [pc, #88]	; (8003e18 <TIM3_IRQHandler+0x10c>)
 8003dbe:	f7fd f9a8 	bl	8001112 <GPIO_ResetBits>
					if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8003dc2:	7822      	ldrb	r2, [r4, #0]
 8003dc4:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <TIM3_IRQHandler+0x114>)
 8003dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003dd0:	d112      	bne.n	8003df8 <TIM3_IRQHandler+0xec>
					if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <TIM3_IRQHandler+0x110>)
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <TIM3_IRQHandler+0x114>)
 8003dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003de2:	d10f      	bne.n	8003e04 <TIM3_IRQHandler+0xf8>
					TIM_Cmd(TIM14, ENABLE);
 8003de4:	4c0f      	ldr	r4, [pc, #60]	; (8003e24 <TIM3_IRQHandler+0x118>)
 8003de6:	2101      	movs	r1, #1
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7fd fb79 	bl	80014e0 <TIM_Cmd>
					TIM_SetCounter(TIM14, 0x00);
 8003dee:	2100      	movs	r1, #0
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7fd fb66 	bl	80014c2 <TIM_SetCounter>
};
 8003df6:	e7a2      	b.n	8003d3e <TIM3_IRQHandler+0x32>
						PULSE_LED_I_1_ON;
 8003df8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003dfc:	4806      	ldr	r0, [pc, #24]	; (8003e18 <TIM3_IRQHandler+0x10c>)
 8003dfe:	f7fd f988 	bl	8001112 <GPIO_ResetBits>
 8003e02:	e7e6      	b.n	8003dd2 <TIM3_IRQHandler+0xc6>
						PULSE_LED_I_2_ON;
 8003e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e08:	4803      	ldr	r0, [pc, #12]	; (8003e18 <TIM3_IRQHandler+0x10c>)
 8003e0a:	f7fd f982 	bl	8001112 <GPIO_ResetBits>
 8003e0e:	e7e9      	b.n	8003de4 <TIM3_IRQHandler+0xd8>
 8003e10:	40000400 	.word	0x40000400
 8003e14:	200002c1 	.word	0x200002c1
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	200002bf 	.word	0x200002bf
 8003e20:	20000958 	.word	0x20000958
 8003e24:	40002000 	.word	0x40002000

08003e28 <TIM7_IRQHandler>:

//Section 2
void TIM7_IRQHandler()
{
 8003e28:	b510      	push	{r4, lr}
	TIM7->SR = (uint16_t) ~TIM_IT_Update;	
 8003e2a:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <TIM7_IRQHandler+0x104>)
 8003e2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e30:	821a      	strh	r2, [r3, #16]
	
	if ( (gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <TIM7_IRQHandler+0x108>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d00f      	beq.n	8003e5c <TIM7_IRQHandler+0x34>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0) ) {
	}
	else if((gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) 
 8003e3c:	4b3c      	ldr	r3, [pc, #240]	; (8003f30 <TIM7_IRQHandler+0x108>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d011      	beq.n	8003e6a <TIM7_IRQHandler+0x42>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
		TIM7->CR1 &= ~TIM_CR1_CEN;
	}
	
	if((gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) 
 8003e46:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <TIM7_IRQHandler+0x108>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d022      	beq.n	8003e96 <TIM7_IRQHandler+0x6e>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
	{
	}
	else if((gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) 
 8003e50:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <TIM7_IRQHandler+0x108>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	d024      	beq.n	8003ea4 <TIM7_IRQHandler+0x7c>
						};

						TIM_Cmd(TIM8, ENABLE);
						TIM_SetCounter(TIM8, 0x00);
	}
};
 8003e5a:	bd10      	pop	{r4, pc}
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0) ) {
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	4835      	ldr	r0, [pc, #212]	; (8003f34 <TIM7_IRQHandler+0x10c>)
 8003e60:	f7fd f94e 	bl	8001100 <GPIO_ReadInputDataBit>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d0ee      	beq.n	8003e46 <TIM7_IRQHandler+0x1e>
 8003e68:	e7e8      	b.n	8003e3c <TIM7_IRQHandler+0x14>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
 8003e6a:	2140      	movs	r1, #64	; 0x40
 8003e6c:	4831      	ldr	r0, [pc, #196]	; (8003f34 <TIM7_IRQHandler+0x10c>)
 8003e6e:	f7fd f947 	bl	8001100 <GPIO_ReadInputDataBit>
 8003e72:	2801      	cmp	r0, #1
 8003e74:	d1e7      	bne.n	8003e46 <TIM7_IRQHandler+0x1e>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8003e76:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <TIM7_IRQHandler+0x108>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8003e7c:	4c2e      	ldr	r4, [pc, #184]	; (8003f38 <TIM7_IRQHandler+0x110>)
 8003e7e:	7821      	ldrb	r1, [r4, #0]
 8003e80:	f7fe fea0 	bl	8002bc4 <GetNextStep>
 8003e84:	7020      	strb	r0, [r4, #0]
		TIM7->CR1 &= ~TIM_CR1_CEN;
 8003e86:	4a29      	ldr	r2, [pc, #164]	; (8003f2c <TIM7_IRQHandler+0x104>)
 8003e88:	8813      	ldrh	r3, [r2, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	8013      	strh	r3, [r2, #0]
 8003e94:	e7d7      	b.n	8003e46 <TIM7_IRQHandler+0x1e>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1))
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	4826      	ldr	r0, [pc, #152]	; (8003f34 <TIM7_IRQHandler+0x10c>)
 8003e9a:	f7fd f931 	bl	8001100 <GPIO_ReadInputDataBit>
 8003e9e:	2801      	cmp	r0, #1
 8003ea0:	d1d6      	bne.n	8003e50 <TIM7_IRQHandler+0x28>
 8003ea2:	e7da      	b.n	8003e5a <TIM7_IRQHandler+0x32>
			&& (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0))
 8003ea4:	2140      	movs	r1, #64	; 0x40
 8003ea6:	4823      	ldr	r0, [pc, #140]	; (8003f34 <TIM7_IRQHandler+0x10c>)
 8003ea8:	f7fd f92a 	bl	8001100 <GPIO_ReadInputDataBit>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d1d4      	bne.n	8003e5a <TIM7_IRQHandler+0x32>
		gSequencerMode_2 = SEQUENCER_MODE_RUN;
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <TIM7_IRQHandler+0x108>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
		gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 8003eb6:	4c20      	ldr	r4, [pc, #128]	; (8003f38 <TIM7_IRQHandler+0x110>)
 8003eb8:	7821      	ldrb	r1, [r4, #0]
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7fe fe82 	bl	8002bc4 <GetNextStep>
 8003ec0:	7020      	strb	r0, [r4, #0]
		TIM7->CR1 &= ~TIM_CR1_CEN;
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <TIM7_IRQHandler+0x104>)
 8003ec4:	8813      	ldrh	r3, [r2, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]
		PULSE_LED_II_ALL_ON;
 8003ed0:	2104      	movs	r1, #4
 8003ed2:	481a      	ldr	r0, [pc, #104]	; (8003f3c <TIM7_IRQHandler+0x114>)
 8003ed4:	f7fd f91d 	bl	8001112 <GPIO_ResetBits>
						if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8003ed8:	7823      	ldrb	r3, [r4, #0]
 8003eda:	f103 0220 	add.w	r2, r3, #32
 8003ede:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <TIM7_IRQHandler+0x118>)
 8003ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003eea:	d114      	bne.n	8003f16 <TIM7_IRQHandler+0xee>
						if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8003eec:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <TIM7_IRQHandler+0x110>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	f103 0220 	add.w	r2, r3, #32
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <TIM7_IRQHandler+0x118>)
 8003ef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003f00:	d10e      	bne.n	8003f20 <TIM7_IRQHandler+0xf8>
						TIM_Cmd(TIM8, ENABLE);
 8003f02:	4c10      	ldr	r4, [pc, #64]	; (8003f44 <TIM7_IRQHandler+0x11c>)
 8003f04:	2101      	movs	r1, #1
 8003f06:	4620      	mov	r0, r4
 8003f08:	f7fd faea 	bl	80014e0 <TIM_Cmd>
						TIM_SetCounter(TIM8, 0x00);
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7fd fad7 	bl	80014c2 <TIM_SetCounter>
};
 8003f14:	e7a1      	b.n	8003e5a <TIM7_IRQHandler+0x32>
							PULSE_LED_II_1_ON;
 8003f16:	2108      	movs	r1, #8
 8003f18:	4808      	ldr	r0, [pc, #32]	; (8003f3c <TIM7_IRQHandler+0x114>)
 8003f1a:	f7fd f8fa 	bl	8001112 <GPIO_ResetBits>
 8003f1e:	e7e5      	b.n	8003eec <TIM7_IRQHandler+0xc4>
							PULSE_LED_II_2_ON;
 8003f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f24:	4805      	ldr	r0, [pc, #20]	; (8003f3c <TIM7_IRQHandler+0x114>)
 8003f26:	f7fd f8f4 	bl	8001112 <GPIO_ResetBits>
 8003f2a:	e7ea      	b.n	8003f02 <TIM7_IRQHandler+0xda>
 8003f2c:	40001400 	.word	0x40001400
 8003f30:	200002c2 	.word	0x200002c2
 8003f34:	40020400 	.word	0x40020400
 8003f38:	200002c0 	.word	0x200002c0
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	20000958 	.word	0x20000958
 8003f44:	40010400 	.word	0x40010400

08003f48 <PulsesInit>:

/*
Init GPIO for pulses generation
*/
void PulsesInit()
{
 8003f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4a:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_Pulses;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	2002      	movs	r0, #2
 8003f50:	f7fd f954 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Pulses, 0, sizeof(GPIO_Pulses));
 8003f54:	2700      	movs	r7, #0
 8003f56:	f8ad 7006 	strh.w	r7, [sp, #6]
	GPIO_Pulses.GPIO_Pin 		= PULSE_LED_I_ALL|PULSE_LED_I_1|PULSE_LED_I_2;
 8003f5a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003f5e:	9300      	str	r3, [sp, #0]
	GPIO_Pulses.GPIO_Mode 	= GPIO_Mode_OUT;
 8003f60:	2401      	movs	r4, #1
 8003f62:	f88d 4004 	strb.w	r4, [sp, #4]
	GPIO_Pulses.GPIO_OType	= GPIO_OType_PP;
	GPIO_Pulses.GPIO_PuPd		= GPIO_PuPd_NOPULL;
	GPIO_Pulses.GPIO_Speed	= GPIO_Speed_100MHz;
 8003f66:	2603      	movs	r6, #3
 8003f68:	f88d 6005 	strb.w	r6, [sp, #5]
	
	GPIO_Init(GPIOB, &GPIO_Pulses);
 8003f6c:	4d1a      	ldr	r5, [pc, #104]	; (8003fd8 <PulsesInit+0x90>)
 8003f6e:	4669      	mov	r1, sp
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7fd f877 	bl	8001064 <GPIO_Init>
	
	PULSE_LED_I_ALL_OFF;
 8003f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f7fd f8c7 	bl	800110e <GPIO_SetBits>
	PULSE_LED_I_1_OFF;
 8003f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f84:	4628      	mov	r0, r5
 8003f86:	f7fd f8c2 	bl	800110e <GPIO_SetBits>
	PULSE_LED_I_2_OFF;
 8003f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f7fd f8bd 	bl	800110e <GPIO_SetBits>
		
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003f94:	4621      	mov	r1, r4
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7fd f930 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	memset(&GPIO_Pulses, 0, sizeof(GPIO_Pulses));
 8003f9c:	f8ad 7006 	strh.w	r7, [sp, #6]
	GPIO_Pulses.GPIO_Pin 		= PULSE_LED_II_ALL|PULSE_LED_II_1|PULSE_LED_II_2;
 8003fa0:	f241 030c 	movw	r3, #4108	; 0x100c
 8003fa4:	9300      	str	r3, [sp, #0]
	GPIO_Pulses.GPIO_Mode 	= GPIO_Mode_OUT;
 8003fa6:	f88d 4004 	strb.w	r4, [sp, #4]
	GPIO_Pulses.GPIO_OType	= GPIO_OType_PP;
	GPIO_Pulses.GPIO_PuPd		= GPIO_PuPd_NOPULL;
	GPIO_Pulses.GPIO_Speed	= GPIO_Speed_100MHz;
 8003faa:	f88d 6005 	strb.w	r6, [sp, #5]
	
	GPIO_Init(GPIOA, &GPIO_Pulses);
 8003fae:	4c0b      	ldr	r4, [pc, #44]	; (8003fdc <PulsesInit+0x94>)
 8003fb0:	4669      	mov	r1, sp
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7fd f856 	bl	8001064 <GPIO_Init>
	
	PULSE_LED_II_ALL_OFF;
 8003fb8:	2104      	movs	r1, #4
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f7fd f8a7 	bl	800110e <GPIO_SetBits>
	PULSE_LED_II_1_OFF;
 8003fc0:	2108      	movs	r1, #8
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7fd f8a3 	bl	800110e <GPIO_SetBits>
	PULSE_LED_II_2_OFF;
 8003fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7fd f89e 	bl	800110e <GPIO_SetBits>
};
 8003fd2:	b003      	add	sp, #12
 8003fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020000 	.word	0x40020000

08003fe0 <DisplayLedsIOInit>:

/*
Init GPIOs for display leds
*/
void DisplayLedsIOInit(void)
{
 8003fe0:	b500      	push	{lr}
 8003fe2:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;
	
	//Ã�ËœÃ�Â½Ã�Â¸Ã‘â€ Ã�Â¸Ã�Â°Ã�Â»Ã�Â¸Ã�Â·Ã�Â°Ã‘ï¿½ Ã�Â¿Ã�ÂµÃ‘â‚¬Ã�Â¸Ã‘â€žÃ�ÂµÃ‘â‚¬Ã�Â¸Ã�Â¸ Ã�Â´Ã�Â»Ã‘ï¿½ Ã‘Æ’Ã�Â¿Ã‘â‚¬Ã�Â°Ã�Â²Ã�Â»Ã�ÂµÃ�Â½Ã�Â¸Ã‘ï¿½ Ã‘ï¿½Ã�Â²Ã�ÂµÃ‘â€šÃ�Â¾Ã�Â´Ã�Â¸Ã�Â¾Ã�Â´Ã�Â°Ã�Â¼Ã�Â¸ DISPLAY
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	f7fd f908 	bl	80011fc <RCC_AHB1PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin 	= DISPLAY_LED_I|DISPLAY_LED_II;
 8003fec:	23c0      	movs	r3, #192	; 0xc0
 8003fee:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004002:	4669      	mov	r1, sp
 8004004:	4802      	ldr	r0, [pc, #8]	; (8004010 <DisplayLedsIOInit+0x30>)
 8004006:	f7fd f82d 	bl	8001064 <GPIO_Init>
};
 800400a:	b003      	add	sp, #12
 800400c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004010:	40020000 	.word	0x40020000

08004014 <InternalDACInit>:

/*
 Init internal DAC
*/
void InternalDACInit(void)
{
 8004014:	b510      	push	{r4, lr}
 8004016:	b086      	sub	sp, #24
	DAC_InitTypeDef mDacInit;
	GPIO_InitTypeDef mGPIO_InitStructure;
	
	DAC_StructInit(&mDacInit);
 8004018:	a802      	add	r0, sp, #8
 800401a:	f7fc ff8d 	bl	8000f38 <DAC_StructInit>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800401e:	2101      	movs	r1, #1
 8004020:	4608      	mov	r0, r1
 8004022:	f7fd f8eb 	bl	80011fc <RCC_AHB1PeriphClockCmd>

	//GPIOs init
	
	mGPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_4|GPIO_Pin_5;
 8004026:	2330      	movs	r3, #48	; 0x30
 8004028:	9300      	str	r3, [sp, #0]
	mGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800402a:	2303      	movs	r3, #3
 800402c:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_Init(GPIOA, &mGPIO_InitStructure);
 8004030:	4669      	mov	r1, sp
 8004032:	4814      	ldr	r0, [pc, #80]	; (8004084 <InternalDACInit+0x70>)
 8004034:	f7fd f816 	bl	8001064 <GPIO_Init>
		
	/* DAC Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8004038:	2101      	movs	r1, #1
 800403a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800403e:	f7fd f8eb 	bl	8001218 <RCC_APB1PeriphClockCmd>
	
	//DAC init
	mDacInit.DAC_Trigger 				= DAC_Trigger_None;
 8004042:	2400      	movs	r4, #0
 8004044:	9402      	str	r4, [sp, #8]
	mDacInit.DAC_OutputBuffer 	= DAC_OutputBuffer_Disable;
 8004046:	2302      	movs	r3, #2
 8004048:	9305      	str	r3, [sp, #20]
	mDacInit.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800404a:	9403      	str	r4, [sp, #12]

	DAC_DeInit();
 800404c:	f7fc ff4f 	bl	8000eee <DAC_DeInit>
	
	DAC_Init(DAC_Channel_1, &mDacInit);
 8004050:	a902      	add	r1, sp, #8
 8004052:	4620      	mov	r0, r4
 8004054:	f7fc ff58 	bl	8000f08 <DAC_Init>
	DAC_Init(DAC_Channel_2, &mDacInit);
 8004058:	a902      	add	r1, sp, #8
 800405a:	2010      	movs	r0, #16
 800405c:	f7fc ff54 	bl	8000f08 <DAC_Init>
	
	DAC_Cmd(DAC_Channel_1, ENABLE);
 8004060:	2101      	movs	r1, #1
 8004062:	4620      	mov	r0, r4
 8004064:	f7fc ff6e 	bl	8000f44 <DAC_Cmd>
	DAC_Cmd(DAC_Channel_2, ENABLE);
 8004068:	2101      	movs	r1, #1
 800406a:	2010      	movs	r0, #16
 800406c:	f7fc ff6a 	bl	8000f44 <DAC_Cmd>
	
	DAC_SetChannel1Data(DAC_Align_12b_R, 0);
 8004070:	4621      	mov	r1, r4
 8004072:	4620      	mov	r0, r4
 8004074:	f7fc ff7a 	bl	8000f6c <DAC_SetChannel1Data>
	DAC_SetChannel2Data(DAC_Align_12b_R, 0);
 8004078:	4621      	mov	r1, r4
 800407a:	4620      	mov	r0, r4
 800407c:	f7fc ff86 	bl	8000f8c <DAC_SetChannel2Data>
};
 8004080:	b006      	add	sp, #24
 8004082:	bd10      	pop	{r4, pc}
 8004084:	40020000 	.word	0x40020000

08004088 <keyb_proc>:

/*
	Scan all switches
*/
unsigned char keyb_proc(uButtons * key)
{
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	b083      	sub	sp, #12
 800408c:	4604      	mov	r4, r0
	unsigned char StepNum = 0, Section = 0, max_step;
	uStep tmpStep;
	
	if(Is_Expander_Present()) max_step = 31;
 800408e:	f7fd ff64 	bl	8001f5a <Is_Expander_Present>
 8004092:	2800      	cmp	r0, #0
 8004094:	f000 82d5 	beq.w	8004642 <keyb_proc+0x5ba>
 8004098:	261f      	movs	r6, #31
	else max_step = 15;
			 
	/* Determine step num for different DisplayModes */
	if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 800409a:	4bc6      	ldr	r3, [pc, #792]	; (80043b4 <keyb_proc+0x32c>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 82d1 	bne.w	8004646 <keyb_proc+0x5be>
		StepNum = gSequenceStepNumber_1;
 80040a4:	4bc4      	ldr	r3, [pc, #784]	; (80043b8 <keyb_proc+0x330>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b2db      	uxtb	r3, r3
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 80040aa:	4ac2      	ldr	r2, [pc, #776]	; (80043b4 <keyb_proc+0x32c>)
 80040ac:	7812      	ldrb	r2, [r2, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	2a01      	cmp	r2, #1
 80040b2:	f000 82ca 	beq.w	800464a <keyb_proc+0x5c2>
 80040b6:	2200      	movs	r2, #0
		StepNum = gSequenceStepNumber_2;
		Section = 1;
	};
	if (gDisplayMode == DISPLAY_MODE_EDIT_1) {
 80040b8:	49be      	ldr	r1, [pc, #760]	; (80043b4 <keyb_proc+0x32c>)
 80040ba:	7809      	ldrb	r1, [r1, #0]
 80040bc:	b2c9      	uxtb	r1, r1
 80040be:	2902      	cmp	r1, #2
 80040c0:	f000 82c7 	beq.w	8004652 <keyb_proc+0x5ca>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_EDIT_2) {
 80040c4:	49bb      	ldr	r1, [pc, #748]	; (80043b4 <keyb_proc+0x32c>)
 80040c6:	7809      	ldrb	r1, [r1, #0]
 80040c8:	b2c9      	uxtb	r1, r1
 80040ca:	2903      	cmp	r1, #3
 80040cc:	f000 82c5 	beq.w	800465a <keyb_proc+0x5d2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	
	if (gDisplayMode == DISPLAY_MODE_SAVE_1) {
 80040d0:	49b8      	ldr	r1, [pc, #736]	; (80043b4 <keyb_proc+0x32c>)
 80040d2:	7809      	ldrb	r1, [r1, #0]
 80040d4:	b2c9      	uxtb	r1, r1
 80040d6:	2904      	cmp	r1, #4
 80040d8:	f000 82c3 	beq.w	8004662 <keyb_proc+0x5da>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_SAVE_2) {
 80040dc:	49b5      	ldr	r1, [pc, #724]	; (80043b4 <keyb_proc+0x32c>)
 80040de:	7809      	ldrb	r1, [r1, #0]
 80040e0:	b2c9      	uxtb	r1, r1
 80040e2:	2905      	cmp	r1, #5
 80040e4:	f000 82c1 	beq.w	800466a <keyb_proc+0x5e2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	if (gDisplayMode == DISPLAY_MODE_LOAD_1) {
 80040e8:	49b2      	ldr	r1, [pc, #712]	; (80043b4 <keyb_proc+0x32c>)
 80040ea:	7809      	ldrb	r1, [r1, #0]
 80040ec:	b2c9      	uxtb	r1, r1
 80040ee:	2906      	cmp	r1, #6
 80040f0:	f000 82bf 	beq.w	8004672 <keyb_proc+0x5ea>
		StepNum = gEditModeStepNum;
		Section = 0;
	};
	if (gDisplayMode == DISPLAY_MODE_LOAD_2) {
 80040f4:	49af      	ldr	r1, [pc, #700]	; (80043b4 <keyb_proc+0x32c>)
 80040f6:	7809      	ldrb	r1, [r1, #0]
 80040f8:	b2c9      	uxtb	r1, r1
 80040fa:	2907      	cmp	r1, #7
 80040fc:	f000 82bd 	beq.w	800467a <keyb_proc+0x5f2>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	
	tmpStep = Steps[Section][StepNum];	
 8004100:	4617      	mov	r7, r2
 8004102:	461d      	mov	r5, r3
 8004104:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8004108:	4aac      	ldr	r2, [pc, #688]	; (80043bc <keyb_proc+0x334>)
 800410a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800410e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004112:	ab02      	add	r3, sp, #8
 8004114:	e903 0003 	stmdb	r3, {r0, r1}
				
	
		/* Middle section */
		
		if ( !key->b.Voltage0 ) {
 8004118:	7862      	ldrb	r2, [r4, #1]
 800411a:	f012 0f10 	tst.w	r2, #16
 800411e:	d10f      	bne.n	8004140 <keyb_proc+0xb8>
			tmpStep.b.Voltage0 = 1;
 8004120:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
 8004124:	f043 0310 	orr.w	r3, r3, #16
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 8004128:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800412c:	f36f 0100 	bfc	r1, #0, #1
 8004130:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	f36f 0382 	bfc	r3, #2, #1
 800413c:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage2 ) {
 8004140:	f012 0f20 	tst.w	r2, #32
 8004144:	d111      	bne.n	800416a <keyb_proc+0xe2>
			tmpStep.b.Voltage0 = 0;
 8004146:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 1;
 800414a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
			tmpStep.b.Voltage4 = 0;
 800414e:	f043 0320 	orr.w	r3, r3, #32
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 8004152:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004156:	f36f 0100 	bfc	r1, #0, #1
 800415a:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 800415e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004162:	f36f 0382 	bfc	r3, #2, #1
 8004166:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage4 ) {
 800416a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800416e:	d111      	bne.n	8004194 <keyb_proc+0x10c>
			tmpStep.b.Voltage0 = 0;
 8004170:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 1;
 8004174:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
			tmpStep.b.Voltage6 = 0;
 8004178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			tmpStep.b.Voltage8 = 0;
 800417c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004180:	f36f 0100 	bfc	r1, #0, #1
 8004184:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 8004188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418c:	f36f 0382 	bfc	r3, #2, #1
 8004190:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage6 ) {
 8004194:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004198:	d10f      	bne.n	80041ba <keyb_proc+0x132>
			tmpStep.b.Voltage0 = 0;
 800419a:	f89d 3003 	ldrb.w	r3, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 1;
 800419e:	f003 038f 	and.w	r3, r3, #143	; 0x8f
			tmpStep.b.Voltage8 = 0;
 80041a2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80041a6:	f36f 0100 	bfc	r1, #0, #1
 80041aa:	f88d 1004 	strb.w	r1, [sp, #4]
			tmpStep.b.FullRange = 0;
 80041ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041b2:	f36f 0382 	bfc	r3, #2, #1
 80041b6:	f88d 3003 	strb.w	r3, [sp, #3]
		};
		
		if ( !key->b.Voltage8 ) {
 80041ba:	78a3      	ldrb	r3, [r4, #2]
 80041bc:	f013 0f01 	tst.w	r3, #1
 80041c0:	d10d      	bne.n	80041de <keyb_proc+0x156>
			tmpStep.b.Voltage0 = 0;
 80041c2:	f89d 1003 	ldrb.w	r1, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 1;
 80041c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80041ca:	f040 0001 	orr.w	r0, r0, #1
 80041ce:	f88d 0004 	strb.w	r0, [sp, #4]
			tmpStep.b.FullRange = 0;
 80041d2:	f001 010f 	and.w	r1, r1, #15
 80041d6:	f36f 0182 	bfc	r1, #2, #1
 80041da:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.FullRangeOn ) {
 80041de:	f012 0f01 	tst.w	r2, #1
 80041e2:	d10d      	bne.n	8004200 <keyb_proc+0x178>
			tmpStep.b.Voltage0 = 0;
 80041e4:	f89d 1003 	ldrb.w	r1, [sp, #3]
			tmpStep.b.Voltage2 = 0;
			tmpStep.b.Voltage4 = 0;
			tmpStep.b.Voltage6 = 0;
			tmpStep.b.Voltage8 = 0;
 80041e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80041ec:	f36f 0000 	bfc	r0, #0, #1
 80041f0:	f88d 0004 	strb.w	r0, [sp, #4]
			tmpStep.b.FullRange = 1;
 80041f4:	f001 010f 	and.w	r1, r1, #15
 80041f8:	f041 0104 	orr.w	r1, r1, #4
 80041fc:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.Pulse1On ) {
 8004200:	78e1      	ldrb	r1, [r4, #3]
 8004202:	f011 0f10 	tst.w	r1, #16
 8004206:	d105      	bne.n	8004214 <keyb_proc+0x18c>
			tmpStep.b.OutputPulse1 = 1;
 8004208:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800420c:	f040 0008 	orr.w	r0, r0, #8
 8004210:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse1Off ) {
 8004214:	f011 0f20 	tst.w	r1, #32
 8004218:	d105      	bne.n	8004226 <keyb_proc+0x19e>
			tmpStep.b.OutputPulse1 = 0;
 800421a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800421e:	f36f 00c3 	bfc	r0, #3, #1
 8004222:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse2On ) {
 8004226:	f011 0f40 	tst.w	r1, #64	; 0x40
 800422a:	d105      	bne.n	8004238 <keyb_proc+0x1b0>
			tmpStep.b.OutputPulse2 = 1;
 800422c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004230:	f040 0010 	orr.w	r0, r0, #16
 8004234:	f88d 0005 	strb.w	r0, [sp, #5]
		};
		
		if ( !key->b.Pulse2Off ) {
 8004238:	f011 0f80 	tst.w	r1, #128	; 0x80
 800423c:	d105      	bne.n	800424a <keyb_proc+0x1c2>
			tmpStep.b.OutputPulse2 = 0;
 800423e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004242:	f36f 1104 	bfc	r1, #4, #1
 8004246:	f88d 1005 	strb.w	r1, [sp, #5]
		};
		
		if ( !key->b.OutputQuantize ) {
 800424a:	7821      	ldrb	r1, [r4, #0]
 800424c:	f011 0f10 	tst.w	r1, #16
 8004250:	d105      	bne.n	800425e <keyb_proc+0x1d6>
			tmpStep.b.Quantize = 1;
 8004252:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004256:	f040 0001 	orr.w	r0, r0, #1
 800425a:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.OutputContinuous ) {
 800425e:	f011 0f20 	tst.w	r1, #32
 8004262:	d105      	bne.n	8004270 <keyb_proc+0x1e8>
			tmpStep.b.Quantize = 0;
 8004264:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004268:	f36f 0000 	bfc	r0, #0, #1
 800426c:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.IntegrationSloped ) {
 8004270:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004274:	d105      	bne.n	8004282 <keyb_proc+0x1fa>
			tmpStep.b.Sloped = 1;
 8004276:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800427a:	f040 0002 	orr.w	r0, r0, #2
 800427e:	f88d 0003 	strb.w	r0, [sp, #3]
		};
		
		if ( !key->b.IntegrationStepped ) {
 8004282:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004286:	d105      	bne.n	8004294 <keyb_proc+0x20c>
			tmpStep.b.Sloped = 0;
 8004288:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800428c:	f36f 0141 	bfc	r1, #1, #1
 8004290:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.SourceExternal ) {
 8004294:	f012 0f04 	tst.w	r2, #4
 8004298:	d105      	bne.n	80042a6 <keyb_proc+0x21e>
			tmpStep.b.VoltageSource = 1;
 800429a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800429e:	f041 0108 	orr.w	r1, r1, #8
 80042a2:	f88d 1003 	strb.w	r1, [sp, #3]
		};
		
		if ( !key->b.SourceInternal ) {
 80042a6:	f012 0f08 	tst.w	r2, #8
 80042aa:	d105      	bne.n	80042b8 <keyb_proc+0x230>
			tmpStep.b.VoltageSource = 0;
 80042ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80042b0:	f36f 02c3 	bfc	r2, #3, #1
 80042b4:	f88d 2003 	strb.w	r2, [sp, #3]
		};
		
		if ( !key->b.StopOn ) {
 80042b8:	f013 0f02 	tst.w	r3, #2
 80042bc:	d13d      	bne.n	800433a <keyb_proc+0x2b2>
			tmpStep.b.OpModeSTOP = 1;
 80042be:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeENABLE = 0;
 80042c2:	f042 0202 	orr.w	r2, r2, #2
			tmpStep.b.OpModeSUSTAIN = 0;
 80042c6:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80042ca:	f36f 0282 	bfc	r2, #2, #1
 80042ce:	f88d 2004 	strb.w	r2, [sp, #4]
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 80042d2:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <keyb_proc+0x32c>)
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	b122      	cbz	r2, 80042e2 <keyb_proc+0x25a>
 80042d8:	4a36      	ldr	r2, [pc, #216]	; (80043b4 <keyb_proc+0x32c>)
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	2a02      	cmp	r2, #2
 80042e0:	d105      	bne.n	80042ee <keyb_proc+0x266>
 80042e2:	4a37      	ldr	r2, [pc, #220]	; (80043c0 <keyb_proc+0x338>)
 80042e4:	7812      	ldrb	r2, [r2, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	2a05      	cmp	r2, #5
 80042ea:	f000 81ca 	beq.w	8004682 <keyb_proc+0x5fa>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 80042ee:	4a31      	ldr	r2, [pc, #196]	; (80043b4 <keyb_proc+0x32c>)
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	2a01      	cmp	r2, #1
 80042f6:	f000 81c8 	beq.w	800468a <keyb_proc+0x602>
 80042fa:	4a2e      	ldr	r2, [pc, #184]	; (80043b4 <keyb_proc+0x32c>)
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	2a03      	cmp	r2, #3
 8004302:	f000 81c2 	beq.w	800468a <keyb_proc+0x602>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004306:	4a2b      	ldr	r2, [pc, #172]	; (80043b4 <keyb_proc+0x32c>)
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	b122      	cbz	r2, 8004316 <keyb_proc+0x28e>
 800430c:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <keyb_proc+0x32c>)
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	2a02      	cmp	r2, #2
 8004314:	d105      	bne.n	8004322 <keyb_proc+0x29a>
 8004316:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <keyb_proc+0x338>)
 8004318:	7812      	ldrb	r2, [r2, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	2a04      	cmp	r2, #4
 800431e:	f000 81cd 	beq.w	80046bc <keyb_proc+0x634>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
				};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004322:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <keyb_proc+0x32c>)
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	2a01      	cmp	r2, #1
 800432a:	f000 81cb 	beq.w	80046c4 <keyb_proc+0x63c>
 800432e:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <keyb_proc+0x32c>)
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	2a03      	cmp	r2, #3
 8004336:	f000 81c5 	beq.w	80046c4 <keyb_proc+0x63c>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
				};
		};
		
		if ( !key->b.StopOff ) {
 800433a:	f013 0f04 	tst.w	r3, #4
 800433e:	d105      	bne.n	800434c <keyb_proc+0x2c4>
			tmpStep.b.OpModeSTOP = 0;
 8004340:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004344:	f36f 0241 	bfc	r2, #1, #1
 8004348:	f88d 2004 	strb.w	r2, [sp, #4]
			/* Determine step num for different DisplayModes */
		};
		
		if ( !key->b.SustainOn ) {
 800434c:	f013 0f08 	tst.w	r3, #8
 8004350:	d123      	bne.n	800439a <keyb_proc+0x312>
			tmpStep.b.OpModeSUSTAIN = 1;
 8004352:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeSTOP = 0;
 8004356:	f042 0204 	orr.w	r2, r2, #4
			tmpStep.b.OpModeENABLE = 0;
 800435a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800435e:	f36f 02c3 	bfc	r2, #3, #1
 8004362:	f88d 2004 	strb.w	r2, [sp, #4]
				if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <keyb_proc+0x32c>)
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	b122      	cbz	r2, 8004376 <keyb_proc+0x2ee>
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <keyb_proc+0x32c>)
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	2a02      	cmp	r2, #2
 8004374:	d105      	bne.n	8004382 <keyb_proc+0x2fa>
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <keyb_proc+0x338>)
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	2a04      	cmp	r2, #4
 800437e:	f000 81ab 	beq.w	80046d8 <keyb_proc+0x650>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004382:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <keyb_proc+0x32c>)
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	2a01      	cmp	r2, #1
 800438a:	f000 81ab 	beq.w	80046e4 <keyb_proc+0x65c>
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <keyb_proc+0x32c>)
 8004390:	7812      	ldrb	r2, [r2, #0]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	2a03      	cmp	r2, #3
 8004396:	f000 81a5 	beq.w	80046e4 <keyb_proc+0x65c>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.SustainOff ) {
 800439a:	f013 0f10 	tst.w	r3, #16
 800439e:	d128      	bne.n	80043f2 <keyb_proc+0x36a>
			tmpStep.b.OpModeSUSTAIN = 0;
 80043a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80043a4:	f36f 0282 	bfc	r2, #2, #1
 80043a8:	f88d 2004 	strb.w	r2, [sp, #4]
			if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 80043ac:	4a01      	ldr	r2, [pc, #4]	; (80043b4 <keyb_proc+0x32c>)
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	b16a      	cbz	r2, 80043ce <keyb_proc+0x346>
 80043b2:	e007      	b.n	80043c4 <keyb_proc+0x33c>
 80043b4:	200002b0 	.word	0x200002b0
 80043b8:	200002bf 	.word	0x200002bf
 80043bc:	20000958 	.word	0x20000958
 80043c0:	200002c1 	.word	0x200002c1
 80043c4:	4ab6      	ldr	r2, [pc, #728]	; (80046a0 <keyb_proc+0x618>)
 80043c6:	7812      	ldrb	r2, [r2, #0]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	2a02      	cmp	r2, #2
 80043cc:	d105      	bne.n	80043da <keyb_proc+0x352>
 80043ce:	4ab5      	ldr	r2, [pc, #724]	; (80046a4 <keyb_proc+0x61c>)
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	2a05      	cmp	r2, #5
 80043d6:	f000 8191 	beq.w	80046fc <keyb_proc+0x674>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 80043da:	4ab1      	ldr	r2, [pc, #708]	; (80046a0 <keyb_proc+0x618>)
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	2a01      	cmp	r2, #1
 80043e2:	f000 8191 	beq.w	8004708 <keyb_proc+0x680>
 80043e6:	4aae      	ldr	r2, [pc, #696]	; (80046a0 <keyb_proc+0x618>)
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	2a03      	cmp	r2, #3
 80043ee:	f000 818b 	beq.w	8004708 <keyb_proc+0x680>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.EnableOn ) {
 80043f2:	f013 0f20 	tst.w	r3, #32
 80043f6:	d123      	bne.n	8004440 <keyb_proc+0x3b8>
			tmpStep.b.OpModeENABLE = 1;
 80043f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.OpModeSTOP = 0;
 80043fc:	f042 0208 	orr.w	r2, r2, #8
			tmpStep.b.OpModeSUSTAIN = 0;
 8004400:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8004404:	f36f 0282 	bfc	r2, #2, #1
 8004408:	f88d 2004 	strb.w	r2, [sp, #4]
						if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 800440c:	4aa4      	ldr	r2, [pc, #656]	; (80046a0 <keyb_proc+0x618>)
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	b122      	cbz	r2, 800441c <keyb_proc+0x394>
 8004412:	4aa3      	ldr	r2, [pc, #652]	; (80046a0 <keyb_proc+0x618>)
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	2a02      	cmp	r2, #2
 800441a:	d105      	bne.n	8004428 <keyb_proc+0x3a0>
 800441c:	4aa1      	ldr	r2, [pc, #644]	; (80046a4 <keyb_proc+0x61c>)
 800441e:	7812      	ldrb	r2, [r2, #0]
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	2a05      	cmp	r2, #5
 8004424:	f000 817c 	beq.w	8004720 <keyb_proc+0x698>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8004428:	4a9d      	ldr	r2, [pc, #628]	; (80046a0 <keyb_proc+0x618>)
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	2a01      	cmp	r2, #1
 8004430:	f000 817c 	beq.w	800472c <keyb_proc+0x6a4>
 8004434:	4a9a      	ldr	r2, [pc, #616]	; (80046a0 <keyb_proc+0x618>)
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	2a03      	cmp	r2, #3
 800443c:	f000 8176 	beq.w	800472c <keyb_proc+0x6a4>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.EnableOff ) {
 8004440:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004444:	d11f      	bne.n	8004486 <keyb_proc+0x3fe>
			tmpStep.b.OpModeENABLE = 0;
 8004446:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800444a:	f36f 02c3 	bfc	r2, #3, #1
 800444e:	f88d 2004 	strb.w	r2, [sp, #4]
				if ((gDisplayMode == DISPLAY_MODE_VIEW_1 || gDisplayMode == DISPLAY_MODE_EDIT_1) && gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004452:	4a93      	ldr	r2, [pc, #588]	; (80046a0 <keyb_proc+0x618>)
 8004454:	7812      	ldrb	r2, [r2, #0]
 8004456:	b122      	cbz	r2, 8004462 <keyb_proc+0x3da>
 8004458:	4a91      	ldr	r2, [pc, #580]	; (80046a0 <keyb_proc+0x618>)
 800445a:	7812      	ldrb	r2, [r2, #0]
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	2a02      	cmp	r2, #2
 8004460:	d105      	bne.n	800446e <keyb_proc+0x3e6>
 8004462:	4a90      	ldr	r2, [pc, #576]	; (80046a4 <keyb_proc+0x61c>)
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	2a04      	cmp	r2, #4
 800446a:	f000 816b 	beq.w	8004744 <keyb_proc+0x6bc>
				gSequencerMode_1 = gPrevSequencerMode_1;
			};
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 800446e:	4a8c      	ldr	r2, [pc, #560]	; (80046a0 <keyb_proc+0x618>)
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	2a01      	cmp	r2, #1
 8004476:	f000 816b 	beq.w	8004750 <keyb_proc+0x6c8>
 800447a:	4a89      	ldr	r2, [pc, #548]	; (80046a0 <keyb_proc+0x618>)
 800447c:	7812      	ldrb	r2, [r2, #0]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	2a03      	cmp	r2, #3
 8004482:	f000 8165 	beq.w	8004750 <keyb_proc+0x6c8>
				gSequencerMode_2 = gPrevSequencerMode_2;
			};
		};
		
		if ( !key->b.FirstOn ) {
 8004486:	f013 0f80 	tst.w	r3, #128	; 0x80
 800448a:	d107      	bne.n	800449c <keyb_proc+0x414>
			tmpStep.b.CycleFirst = 1;
 800448c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			tmpStep.b.CycleLast = 0;
 8004490:	f043 0310 	orr.w	r3, r3, #16
 8004494:	f36f 1345 	bfc	r3, #5, #1
 8004498:	f88d 3004 	strb.w	r3, [sp, #4]
		};
		
		if ( !key->b.FirstOff ) {
 800449c:	79a3      	ldrb	r3, [r4, #6]
 800449e:	f013 0f01 	tst.w	r3, #1
 80044a2:	d105      	bne.n	80044b0 <keyb_proc+0x428>
			tmpStep.b.CycleFirst = 0;
 80044a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80044a8:	f36f 1204 	bfc	r2, #4, #1
 80044ac:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.LastOn ) {		
 80044b0:	f013 0f02 	tst.w	r3, #2
 80044b4:	d107      	bne.n	80044c6 <keyb_proc+0x43e>
			tmpStep.b.CycleLast = 1;
 80044b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.CycleFirst = 0;
 80044ba:	f042 0220 	orr.w	r2, r2, #32
 80044be:	f36f 1204 	bfc	r2, #4, #1
 80044c2:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.LastOff ) {
 80044c6:	f013 0f04 	tst.w	r3, #4
 80044ca:	d105      	bne.n	80044d8 <keyb_proc+0x450>
			tmpStep.b.CycleLast = 0;
 80044cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80044d0:	f36f 1245 	bfc	r2, #5, #1
 80044d4:	f88d 2004 	strb.w	r2, [sp, #4]
		};
		
		if ( !key->b.TimeSourceExternal ) {
 80044d8:	7922      	ldrb	r2, [r4, #4]
 80044da:	f012 0f01 	tst.w	r2, #1
 80044de:	d105      	bne.n	80044ec <keyb_proc+0x464>
			tmpStep.b.TimeSource = 1;
 80044e0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80044e4:	f041 0104 	orr.w	r1, r1, #4
 80044e8:	f88d 1005 	strb.w	r1, [sp, #5]
		};
		
		if ( !key->b.TimeSourceInternal ) {
 80044ec:	f012 0f02 	tst.w	r2, #2
 80044f0:	d105      	bne.n	80044fe <keyb_proc+0x476>
			tmpStep.b.TimeSource = 0;
 80044f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80044f6:	f36f 0282 	bfc	r2, #2, #1
 80044fa:	f88d 2005 	strb.w	r2, [sp, #5]
		};
		
		if (!key->b.TimeRange1) {
 80044fe:	f013 0f08 	tst.w	r3, #8
 8004502:	d10f      	bne.n	8004524 <keyb_proc+0x49c>
			tmpStep.b.TimeRange_p03 = 1;
 8004504:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 8004508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450c:	f36f 12c7 	bfc	r2, #7, #1
 8004510:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 8004514:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0;                        
 8004518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800451c:	f36f 0241 	bfc	r2, #1, #1
 8004520:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange2) {
 8004524:	f013 0f10 	tst.w	r3, #16
 8004528:	d10f      	bne.n	800454a <keyb_proc+0x4c2>
			tmpStep.b.TimeRange_p03 = 0;
 800452a:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  1;
 800452e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 8004532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004536:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 800453a:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0; 
 800453e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004542:	f36f 0241 	bfc	r2, #1, #1
 8004546:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange3) {
 800454a:	f013 0f20 	tst.w	r3, #32
 800454e:	d10f      	bne.n	8004570 <keyb_proc+0x4e8>
			tmpStep.b.TimeRange_p03 = 0;
 8004550:	f89d 2004 	ldrb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 8004554:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 8004558:	f36f 12c7 	bfc	r2, #7, #1
 800455c:	f88d 2004 	strb.w	r2, [sp, #4]
			tmpStep.b.TimeRange_3 =   1;
 8004560:	f89d 2005 	ldrb.w	r2, [sp, #5]
			tmpStep.b.TimeRange_30 =  0; 
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	f36f 0241 	bfc	r2, #1, #1
 800456c:	f88d 2005 	strb.w	r2, [sp, #5]
		};

		if (!key->b.TimeRange4) {
 8004570:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004574:	d10f      	bne.n	8004596 <keyb_proc+0x50e>
			tmpStep.b.TimeRange_p03 = 0;
 8004576:	f89d 3004 	ldrb.w	r3, [sp, #4]
			tmpStep.b.TimeRange_p3 =  0;
 800457a:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800457e:	f36f 13c7 	bfc	r3, #7, #1
 8004582:	f88d 3004 	strb.w	r3, [sp, #4]
			tmpStep.b.TimeRange_3 =   0;
 8004586:	f89d 3005 	ldrb.w	r3, [sp, #5]
			tmpStep.b.TimeRange_30 =  1; 
 800458a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800458e:	f043 0302 	orr.w	r3, r3, #2
 8004592:	f88d 3005 	strb.w	r3, [sp, #5]
		};
		
		if (!key->b.ClearUp)  {
 8004596:	7823      	ldrb	r3, [r4, #0]
 8004598:	f013 0f01 	tst.w	r3, #1
 800459c:	f000 80e4 	beq.w	8004768 <keyb_proc+0x6e0>
				DisplayUpdateFlags.b.StepsDisplay = 1;
				DisplayUpdateFlags.b.MainDisplay = 1;
			};			
		};
		
		if (!key->b.ClearDown)  {
 80045a0:	7823      	ldrb	r3, [r4, #0]
 80045a2:	f013 0f02 	tst.w	r3, #2
 80045a6:	f000 813d 	beq.w	8004824 <keyb_proc+0x79c>
		};
		

		
		//switch to edit mode
		if ( !key->b.StepLeft ) {
 80045aa:	7823      	ldrb	r3, [r4, #0]
 80045ac:	f013 0f04 	tst.w	r3, #4
 80045b0:	f040 8220 	bne.w	80049f4 <keyb_proc+0x96c>
			if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 80045b4:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <keyb_proc+0x618>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	b92b      	cbnz	r3, 80045c6 <keyb_proc+0x53e>
				gDisplayMode = DISPLAY_MODE_EDIT_1;
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <keyb_proc+0x618>)
 80045bc:	2202      	movs	r2, #2
 80045be:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 1;
 80045c0:	4b39      	ldr	r3, [pc, #228]	; (80046a8 <keyb_proc+0x620>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
			};
			if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <keyb_proc+0x618>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	f000 816e 	beq.w	80048ae <keyb_proc+0x826>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
				gEditModeStepNum = 1;
			};
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 80045d2:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <keyb_proc+0x618>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	f000 816f 	beq.w	80048bc <keyb_proc+0x834>
						(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 80045de:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <keyb_proc+0x618>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	f000 8169 	beq.w	80048bc <keyb_proc+0x834>
					DisplayUpdateFlags.b.StepsDisplay = 1;
				};
			};
			
			//if in save or load mode left buttons select memory cell for save/recall
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 80045ea:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <keyb_proc+0x618>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d00f      	beq.n	8004614 <keyb_proc+0x58c>
 80045f4:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <keyb_proc+0x618>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d00a      	beq.n	8004614 <keyb_proc+0x58c>
				 (gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <keyb_proc+0x618>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8004604:	2b06      	cmp	r3, #6
 8004606:	d005      	beq.n	8004614 <keyb_proc+0x58c>
				 (gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <keyb_proc+0x618>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b07      	cmp	r3, #7
 8004610:	f040 81f3 	bne.w	80049fa <keyb_proc+0x972>
				if (gEditModeStepNum > 0) {
 8004614:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <keyb_proc+0x620>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 81ab 	beq.w	8004974 <keyb_proc+0x8ec>
					if(counterL == 0) gEditModeStepNum--;
 800461e:	4a23      	ldr	r2, [pc, #140]	; (80046ac <keyb_proc+0x624>)
 8004620:	8812      	ldrh	r2, [r2, #0]
 8004622:	2a00      	cmp	r2, #0
 8004624:	f040 819c 	bne.w	8004960 <keyb_proc+0x8d8>
 8004628:	3b01      	subs	r3, #1
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <keyb_proc+0x620>)
 800462c:	7013      	strb	r3, [r2, #0]
					else if(counterL > 120) {
					  counterL = 100;
					  gEditModeStepNum--;
					}
					counterL++;
 800462e:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <keyb_proc+0x624>)
 8004630:	8813      	ldrh	r3, [r2, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004636:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <keyb_proc+0x628>)
 8004638:	7813      	ldrb	r3, [r2, #0]
 800463a:	f043 0302 	orr.w	r3, r3, #2
 800463e:	7013      	strb	r3, [r2, #0]
 8004640:	e1db      	b.n	80049fa <keyb_proc+0x972>
	else max_step = 15;
 8004642:	260f      	movs	r6, #15
 8004644:	e529      	b.n	800409a <keyb_proc+0x12>
	unsigned char StepNum = 0, Section = 0, max_step;
 8004646:	2300      	movs	r3, #0
 8004648:	e52f      	b.n	80040aa <keyb_proc+0x22>
		StepNum = gSequenceStepNumber_2;
 800464a:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <keyb_proc+0x62c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	e532      	b.n	80040b8 <keyb_proc+0x30>
		StepNum = gEditModeStepNum;
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <keyb_proc+0x620>)
 8004654:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 8004656:	2200      	movs	r2, #0
 8004658:	e534      	b.n	80040c4 <keyb_proc+0x3c>
		StepNum = gEditModeStepNum;
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <keyb_proc+0x620>)
 800465c:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 800465e:	2201      	movs	r2, #1
 8004660:	e536      	b.n	80040d0 <keyb_proc+0x48>
		StepNum = gEditModeStepNum;
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <keyb_proc+0x620>)
 8004664:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 8004666:	2200      	movs	r2, #0
 8004668:	e538      	b.n	80040dc <keyb_proc+0x54>
		StepNum = gEditModeStepNum;
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <keyb_proc+0x620>)
 800466c:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 800466e:	2201      	movs	r2, #1
 8004670:	e53a      	b.n	80040e8 <keyb_proc+0x60>
		StepNum = gEditModeStepNum;
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <keyb_proc+0x620>)
 8004674:	781b      	ldrb	r3, [r3, #0]
		Section = 0;
 8004676:	2200      	movs	r2, #0
 8004678:	e53c      	b.n	80040f4 <keyb_proc+0x6c>
		StepNum = gEditModeStepNum;
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <keyb_proc+0x620>)
 800467c:	781b      	ldrb	r3, [r3, #0]
		Section = 1;
 800467e:	2201      	movs	r2, #1
 8004680:	e53e      	b.n	8004100 <keyb_proc+0x78>
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8004682:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <keyb_proc+0x61c>)
 8004684:	2102      	movs	r1, #2
 8004686:	7011      	strb	r1, [r2, #0]
 8004688:	e631      	b.n	80042ee <keyb_proc+0x266>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 800468a:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <keyb_proc+0x630>)
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	2a05      	cmp	r2, #5
 8004692:	f47f ae38 	bne.w	8004306 <keyb_proc+0x27e>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <keyb_proc+0x630>)
 8004698:	2102      	movs	r1, #2
 800469a:	7011      	strb	r1, [r2, #0]
 800469c:	e633      	b.n	8004306 <keyb_proc+0x27e>
 800469e:	bf00      	nop
 80046a0:	200002b0 	.word	0x200002b0
 80046a4:	200002c1 	.word	0x200002c1
 80046a8:	200002b1 	.word	0x200002b1
 80046ac:	200002ac 	.word	0x200002ac
 80046b0:	200002f0 	.word	0x200002f0
 80046b4:	200002c0 	.word	0x200002c0
 80046b8:	200002c2 	.word	0x200002c2
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 80046bc:	4a9d      	ldr	r2, [pc, #628]	; (8004934 <keyb_proc+0x8ac>)
 80046be:	2102      	movs	r1, #2
 80046c0:	7011      	strb	r1, [r2, #0]
 80046c2:	e62e      	b.n	8004322 <keyb_proc+0x29a>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 80046c4:	4a9c      	ldr	r2, [pc, #624]	; (8004938 <keyb_proc+0x8b0>)
 80046c6:	7812      	ldrb	r2, [r2, #0]
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	2a04      	cmp	r2, #4
 80046cc:	f47f ae35 	bne.w	800433a <keyb_proc+0x2b2>
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 80046d0:	4a99      	ldr	r2, [pc, #612]	; (8004938 <keyb_proc+0x8b0>)
 80046d2:	2102      	movs	r1, #2
 80046d4:	7011      	strb	r1, [r2, #0]
 80046d6:	e630      	b.n	800433a <keyb_proc+0x2b2>
				gSequencerMode_1 = gPrevSequencerMode_1;
 80046d8:	4a98      	ldr	r2, [pc, #608]	; (800493c <keyb_proc+0x8b4>)
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	4995      	ldr	r1, [pc, #596]	; (8004934 <keyb_proc+0x8ac>)
 80046e0:	700a      	strb	r2, [r1, #0]
 80046e2:	e64e      	b.n	8004382 <keyb_proc+0x2fa>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 80046e4:	4a94      	ldr	r2, [pc, #592]	; (8004938 <keyb_proc+0x8b0>)
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	2a04      	cmp	r2, #4
 80046ec:	f47f ae55 	bne.w	800439a <keyb_proc+0x312>
				gSequencerMode_2 = gPrevSequencerMode_2;
 80046f0:	4a93      	ldr	r2, [pc, #588]	; (8004940 <keyb_proc+0x8b8>)
 80046f2:	7812      	ldrb	r2, [r2, #0]
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	4990      	ldr	r1, [pc, #576]	; (8004938 <keyb_proc+0x8b0>)
 80046f8:	700a      	strb	r2, [r1, #0]
 80046fa:	e64e      	b.n	800439a <keyb_proc+0x312>
				gSequencerMode_1 = gPrevSequencerMode_1;
 80046fc:	4a8f      	ldr	r2, [pc, #572]	; (800493c <keyb_proc+0x8b4>)
 80046fe:	7812      	ldrb	r2, [r2, #0]
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	498c      	ldr	r1, [pc, #560]	; (8004934 <keyb_proc+0x8ac>)
 8004704:	700a      	strb	r2, [r1, #0]
 8004706:	e668      	b.n	80043da <keyb_proc+0x352>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8004708:	4a8b      	ldr	r2, [pc, #556]	; (8004938 <keyb_proc+0x8b0>)
 800470a:	7812      	ldrb	r2, [r2, #0]
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	2a05      	cmp	r2, #5
 8004710:	f47f ae6f 	bne.w	80043f2 <keyb_proc+0x36a>
				gSequencerMode_2 = gPrevSequencerMode_2;
 8004714:	4a8a      	ldr	r2, [pc, #552]	; (8004940 <keyb_proc+0x8b8>)
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	4987      	ldr	r1, [pc, #540]	; (8004938 <keyb_proc+0x8b0>)
 800471c:	700a      	strb	r2, [r1, #0]
 800471e:	e668      	b.n	80043f2 <keyb_proc+0x36a>
				gSequencerMode_1 = gPrevSequencerMode_1;
 8004720:	4a86      	ldr	r2, [pc, #536]	; (800493c <keyb_proc+0x8b4>)
 8004722:	7812      	ldrb	r2, [r2, #0]
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	4983      	ldr	r1, [pc, #524]	; (8004934 <keyb_proc+0x8ac>)
 8004728:	700a      	strb	r2, [r1, #0]
 800472a:	e67d      	b.n	8004428 <keyb_proc+0x3a0>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 800472c:	4a82      	ldr	r2, [pc, #520]	; (8004938 <keyb_proc+0x8b0>)
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	2a05      	cmp	r2, #5
 8004734:	f47f ae84 	bne.w	8004440 <keyb_proc+0x3b8>
				gSequencerMode_2 = gPrevSequencerMode_2;
 8004738:	4a81      	ldr	r2, [pc, #516]	; (8004940 <keyb_proc+0x8b8>)
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	497e      	ldr	r1, [pc, #504]	; (8004938 <keyb_proc+0x8b0>)
 8004740:	700a      	strb	r2, [r1, #0]
 8004742:	e67d      	b.n	8004440 <keyb_proc+0x3b8>
				gSequencerMode_1 = gPrevSequencerMode_1;
 8004744:	4a7d      	ldr	r2, [pc, #500]	; (800493c <keyb_proc+0x8b4>)
 8004746:	7812      	ldrb	r2, [r2, #0]
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	497a      	ldr	r1, [pc, #488]	; (8004934 <keyb_proc+0x8ac>)
 800474c:	700a      	strb	r2, [r1, #0]
 800474e:	e68e      	b.n	800446e <keyb_proc+0x3e6>
			if ((gDisplayMode == DISPLAY_MODE_VIEW_2 || gDisplayMode == DISPLAY_MODE_EDIT_2) && gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z) {
 8004750:	4a79      	ldr	r2, [pc, #484]	; (8004938 <keyb_proc+0x8b0>)
 8004752:	7812      	ldrb	r2, [r2, #0]
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	2a04      	cmp	r2, #4
 8004758:	f47f ae95 	bne.w	8004486 <keyb_proc+0x3fe>
				gSequencerMode_2 = gPrevSequencerMode_2;
 800475c:	4a78      	ldr	r2, [pc, #480]	; (8004940 <keyb_proc+0x8b8>)
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	4975      	ldr	r1, [pc, #468]	; (8004938 <keyb_proc+0x8b0>)
 8004764:	700a      	strb	r2, [r1, #0]
 8004766:	e68e      	b.n	8004486 <keyb_proc+0x3fe>
			InitClear_Timer();
 8004768:	f7fd fefc 	bl	8002564 <InitClear_Timer>
			if (gDisplayMode == DISPLAY_MODE_LOAD_1) {
 800476c:	4b75      	ldr	r3, [pc, #468]	; (8004944 <keyb_proc+0x8bc>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b06      	cmp	r3, #6
 8004774:	d018      	beq.n	80047a8 <keyb_proc+0x720>
			else if (gDisplayMode == DISPLAY_MODE_LOAD_2) {
 8004776:	4b73      	ldr	r3, [pc, #460]	; (8004944 <keyb_proc+0x8bc>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b07      	cmp	r3, #7
 800477e:	d027      	beq.n	80047d0 <keyb_proc+0x748>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 8004780:	4b70      	ldr	r3, [pc, #448]	; (8004944 <keyb_proc+0x8bc>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d137      	bne.n	80047f8 <keyb_proc+0x770>
				gDisplayMode = DISPLAY_MODE_LOAD_1;
 8004788:	4b6e      	ldr	r3, [pc, #440]	; (8004944 <keyb_proc+0x8bc>)
 800478a:	2206      	movs	r2, #6
 800478c:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 800478e:	4b6e      	ldr	r3, [pc, #440]	; (8004948 <keyb_proc+0x8c0>)
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004794:	4b6d      	ldr	r3, [pc, #436]	; (800494c <keyb_proc+0x8c4>)
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	f042 0202 	orr.w	r2, r2, #2
 800479c:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e6fb      	b.n	80045a0 <keyb_proc+0x518>
				LoadSequence(gEditModeStepNum);
 80047a8:	4b67      	ldr	r3, [pc, #412]	; (8004948 <keyb_proc+0x8c0>)
 80047aa:	7818      	ldrb	r0, [r3, #0]
 80047ac:	f7fd ff66 	bl	800267c <LoadSequence>
				gKeysNotValid = 1;
 80047b0:	4b67      	ldr	r3, [pc, #412]	; (8004950 <keyb_proc+0x8c8>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 80047b6:	2100      	movs	r1, #0
 80047b8:	4b62      	ldr	r3, [pc, #392]	; (8004944 <keyb_proc+0x8bc>)
 80047ba:	7019      	strb	r1, [r3, #0]
				gPrevSequencerMode_1 = gSequencerMode_1;
 80047bc:	4a5d      	ldr	r2, [pc, #372]	; (8004934 <keyb_proc+0x8ac>)
 80047be:	7813      	ldrb	r3, [r2, #0]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	485e      	ldr	r0, [pc, #376]	; (800493c <keyb_proc+0x8b4>)
 80047c4:	7003      	strb	r3, [r0, #0]
				gSequenceStepNumber_1 = 0;
 80047c6:	4b63      	ldr	r3, [pc, #396]	; (8004954 <keyb_proc+0x8cc>)
 80047c8:	7019      	strb	r1, [r3, #0]
				gSequencerMode_1 = SEQUENCER_MODE_STOP;
 80047ca:	2302      	movs	r3, #2
 80047cc:	7013      	strb	r3, [r2, #0]
 80047ce:	e6e7      	b.n	80045a0 <keyb_proc+0x518>
				LoadSequence(gEditModeStepNum);
 80047d0:	4b5d      	ldr	r3, [pc, #372]	; (8004948 <keyb_proc+0x8c0>)
 80047d2:	7818      	ldrb	r0, [r3, #0]
 80047d4:	f7fd ff52 	bl	800267c <LoadSequence>
				gKeysNotValid = 1;
 80047d8:	2301      	movs	r3, #1
 80047da:	4a5d      	ldr	r2, [pc, #372]	; (8004950 <keyb_proc+0x8c8>)
 80047dc:	7013      	strb	r3, [r2, #0]
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 80047de:	4a59      	ldr	r2, [pc, #356]	; (8004944 <keyb_proc+0x8bc>)
 80047e0:	7013      	strb	r3, [r2, #0]
				gPrevSequencerMode_2 = gSequencerMode_2;
 80047e2:	4a55      	ldr	r2, [pc, #340]	; (8004938 <keyb_proc+0x8b0>)
 80047e4:	7813      	ldrb	r3, [r2, #0]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4955      	ldr	r1, [pc, #340]	; (8004940 <keyb_proc+0x8b8>)
 80047ea:	700b      	strb	r3, [r1, #0]
				gSequenceStepNumber_2 = 0;
 80047ec:	4b5a      	ldr	r3, [pc, #360]	; (8004958 <keyb_proc+0x8d0>)
 80047ee:	2100      	movs	r1, #0
 80047f0:	7019      	strb	r1, [r3, #0]
				gSequencerMode_2 = SEQUENCER_MODE_STOP;
 80047f2:	2302      	movs	r3, #2
 80047f4:	7013      	strb	r3, [r2, #0]
 80047f6:	e6d3      	b.n	80045a0 <keyb_proc+0x518>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 80047f8:	4b52      	ldr	r3, [pc, #328]	; (8004944 <keyb_proc+0x8bc>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	f47f aece 	bne.w	80045a0 <keyb_proc+0x518>
				gDisplayMode = DISPLAY_MODE_LOAD_2;
 8004804:	4b4f      	ldr	r3, [pc, #316]	; (8004944 <keyb_proc+0x8bc>)
 8004806:	2207      	movs	r2, #7
 8004808:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 800480a:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <keyb_proc+0x8c0>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004810:	4b4e      	ldr	r3, [pc, #312]	; (800494c <keyb_proc+0x8c4>)
 8004812:	781a      	ldrb	r2, [r3, #0]
 8004814:	f042 0202 	orr.w	r2, r2, #2
 8004818:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e6bd      	b.n	80045a0 <keyb_proc+0x518>
			InitClear_Timer();
 8004824:	f7fd fe9e 	bl	8002564 <InitClear_Timer>
			if (gDisplayMode == DISPLAY_MODE_SAVE_1) {
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <keyb_proc+0x8bc>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b04      	cmp	r3, #4
 8004830:	d017      	beq.n	8004862 <keyb_proc+0x7da>
			else if (gDisplayMode == DISPLAY_MODE_SAVE_2) {
 8004832:	4b44      	ldr	r3, [pc, #272]	; (8004944 <keyb_proc+0x8bc>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b05      	cmp	r3, #5
 800483a:	d01a      	beq.n	8004872 <keyb_proc+0x7ea>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 800483c:	4b41      	ldr	r3, [pc, #260]	; (8004944 <keyb_proc+0x8bc>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b9fb      	cbnz	r3, 8004882 <keyb_proc+0x7fa>
				gDisplayMode = DISPLAY_MODE_SAVE_1;
 8004842:	4b40      	ldr	r3, [pc, #256]	; (8004944 <keyb_proc+0x8bc>)
 8004844:	2204      	movs	r2, #4
 8004846:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 8004848:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <keyb_proc+0x8c0>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 800484e:	4b3f      	ldr	r3, [pc, #252]	; (800494c <keyb_proc+0x8c4>)
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	f042 0202 	orr.w	r2, r2, #2
 8004856:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e6a3      	b.n	80045aa <keyb_proc+0x522>
				SaveSequence(gEditModeStepNum);
 8004862:	4b39      	ldr	r3, [pc, #228]	; (8004948 <keyb_proc+0x8c0>)
 8004864:	7818      	ldrb	r0, [r3, #0]
 8004866:	f7fd fecb 	bl	8002600 <SaveSequence>
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 800486a:	4b36      	ldr	r3, [pc, #216]	; (8004944 <keyb_proc+0x8bc>)
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	e69b      	b.n	80045aa <keyb_proc+0x522>
				SaveSequence(gEditModeStepNum);
 8004872:	4b35      	ldr	r3, [pc, #212]	; (8004948 <keyb_proc+0x8c0>)
 8004874:	7818      	ldrb	r0, [r3, #0]
 8004876:	f7fd fec3 	bl	8002600 <SaveSequence>
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 800487a:	4b32      	ldr	r3, [pc, #200]	; (8004944 <keyb_proc+0x8bc>)
 800487c:	2201      	movs	r2, #1
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e693      	b.n	80045aa <keyb_proc+0x522>
			else if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 8004882:	4b30      	ldr	r3, [pc, #192]	; (8004944 <keyb_proc+0x8bc>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	f47f ae8e 	bne.w	80045aa <keyb_proc+0x522>
				gDisplayMode = DISPLAY_MODE_SAVE_2;
 800488e:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <keyb_proc+0x8bc>)
 8004890:	2205      	movs	r2, #5
 8004892:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 0;
 8004894:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <keyb_proc+0x8c0>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 800489a:	4b2c      	ldr	r3, [pc, #176]	; (800494c <keyb_proc+0x8c4>)
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	f042 0202 	orr.w	r2, r2, #2
 80048a2:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e67d      	b.n	80045aa <keyb_proc+0x522>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
 80048ae:	4b25      	ldr	r3, [pc, #148]	; (8004944 <keyb_proc+0x8bc>)
 80048b0:	2203      	movs	r2, #3
 80048b2:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = 1;
 80048b4:	4b24      	ldr	r3, [pc, #144]	; (8004948 <keyb_proc+0x8c0>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e68a      	b.n	80045d2 <keyb_proc+0x54a>
				if (gEditModeStepNum > 0) {
 80048bc:	4b22      	ldr	r3, [pc, #136]	; (8004948 <keyb_proc+0x8c0>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	b1e3      	cbz	r3, 80048fc <keyb_proc+0x874>
					if(counterL == 0) gEditModeStepNum--;
 80048c2:	4a26      	ldr	r2, [pc, #152]	; (800495c <keyb_proc+0x8d4>)
 80048c4:	8812      	ldrh	r2, [r2, #0]
 80048c6:	b982      	cbnz	r2, 80048ea <keyb_proc+0x862>
 80048c8:	3b01      	subs	r3, #1
 80048ca:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <keyb_proc+0x8c0>)
 80048cc:	7013      	strb	r3, [r2, #0]
					counterL++;
 80048ce:	4a23      	ldr	r2, [pc, #140]	; (800495c <keyb_proc+0x8d4>)
 80048d0:	8813      	ldrh	r3, [r2, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 80048d6:	4b1d      	ldr	r3, [pc, #116]	; (800494c <keyb_proc+0x8c4>)
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	f042 0202 	orr.w	r2, r2, #2
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	e67f      	b.n	80045ea <keyb_proc+0x562>
					else if(counterL > 120) {
 80048ea:	2a78      	cmp	r2, #120	; 0x78
 80048ec:	d9ef      	bls.n	80048ce <keyb_proc+0x846>
							counterL = 100;
 80048ee:	4a1b      	ldr	r2, [pc, #108]	; (800495c <keyb_proc+0x8d4>)
 80048f0:	2164      	movs	r1, #100	; 0x64
 80048f2:	8011      	strh	r1, [r2, #0]
							gEditModeStepNum--;
 80048f4:	3b01      	subs	r3, #1
 80048f6:	4a14      	ldr	r2, [pc, #80]	; (8004948 <keyb_proc+0x8c0>)
 80048f8:	7013      	strb	r3, [r2, #0]
 80048fa:	e7e8      	b.n	80048ce <keyb_proc+0x846>
					if(counterL == 0) gEditModeStepNum = max_step;
 80048fc:	4b17      	ldr	r3, [pc, #92]	; (800495c <keyb_proc+0x8d4>)
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b97b      	cbnz	r3, 8004922 <keyb_proc+0x89a>
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <keyb_proc+0x8c0>)
 8004904:	701e      	strb	r6, [r3, #0]
					counterL++;
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <keyb_proc+0x8d4>)
 8004908:	8813      	ldrh	r3, [r2, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <keyb_proc+0x8c4>)
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	701a      	strb	r2, [r3, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	f042 0202 	orr.w	r2, r2, #2
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e663      	b.n	80045ea <keyb_proc+0x562>
					else if(counterL > 120)	{
 8004922:	2b78      	cmp	r3, #120	; 0x78
 8004924:	d9ef      	bls.n	8004906 <keyb_proc+0x87e>
					  counterL = 100;
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <keyb_proc+0x8d4>)
 8004928:	2264      	movs	r2, #100	; 0x64
 800492a:	801a      	strh	r2, [r3, #0]
					  gEditModeStepNum = max_step;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <keyb_proc+0x8c0>)
 800492e:	701e      	strb	r6, [r3, #0]
 8004930:	e7e9      	b.n	8004906 <keyb_proc+0x87e>
 8004932:	bf00      	nop
 8004934:	200002c1 	.word	0x200002c1
 8004938:	200002c2 	.word	0x200002c2
 800493c:	200002bd 	.word	0x200002bd
 8004940:	200002be 	.word	0x200002be
 8004944:	200002b0 	.word	0x200002b0
 8004948:	200002b1 	.word	0x200002b1
 800494c:	200002f0 	.word	0x200002f0
 8004950:	200002bc 	.word	0x200002bc
 8004954:	200002bf 	.word	0x200002bf
 8004958:	200002c0 	.word	0x200002c0
 800495c:	200002ac 	.word	0x200002ac
					else if(counterL > 120) {
 8004960:	2a78      	cmp	r2, #120	; 0x78
 8004962:	f67f ae64 	bls.w	800462e <keyb_proc+0x5a6>
					  counterL = 100;
 8004966:	4a87      	ldr	r2, [pc, #540]	; (8004b84 <keyb_proc+0xafc>)
 8004968:	2164      	movs	r1, #100	; 0x64
 800496a:	8011      	strh	r1, [r2, #0]
					  gEditModeStepNum--;
 800496c:	3b01      	subs	r3, #1
 800496e:	4a86      	ldr	r2, [pc, #536]	; (8004b88 <keyb_proc+0xb00>)
 8004970:	7013      	strb	r3, [r2, #0]
 8004972:	e65c      	b.n	800462e <keyb_proc+0x5a6>
				} else {
					if(counterL == 0) 
 8004974:	4b83      	ldr	r3, [pc, #524]	; (8004b84 <keyb_proc+0xafc>)
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b15b      	cbz	r3, 8004992 <keyb_proc+0x90a>
						  bank = 1;
						}
					    }
					  else gEditModeStepNum = 31;
					}
					else if(counterL > 120) {
 800497a:	2b78      	cmp	r3, #120	; 0x78
 800497c:	d820      	bhi.n	80049c0 <keyb_proc+0x938>
						  bank = 1;
						}
					    }
					  else gEditModeStepNum = 31;
					}
					counterL++;
 800497e:	4a81      	ldr	r2, [pc, #516]	; (8004b84 <keyb_proc+0xafc>)
 8004980:	8813      	ldrh	r3, [r2, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	8013      	strh	r3, [r2, #0]
					
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004986:	4a81      	ldr	r2, [pc, #516]	; (8004b8c <keyb_proc+0xb04>)
 8004988:	7813      	ldrb	r3, [r2, #0]
 800498a:	f043 0302 	orr.w	r3, r3, #2
 800498e:	7013      	strb	r3, [r2, #0]
 8004990:	e033      	b.n	80049fa <keyb_proc+0x972>
					  if(!Is_Expander_Present())
 8004992:	f7fd fae2 	bl	8001f5a <Is_Expander_Present>
 8004996:	b978      	cbnz	r0, 80049b8 <keyb_proc+0x930>
					      gEditModeStepNum = 15;
 8004998:	4b7b      	ldr	r3, [pc, #492]	; (8004b88 <keyb_proc+0xb00>)
 800499a:	220f      	movs	r2, #15
 800499c:	701a      	strb	r2, [r3, #0]
					      if(bank == 1) 
 800499e:	4b7c      	ldr	r3, [pc, #496]	; (8004b90 <keyb_proc+0xb08>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d003      	beq.n	80049b0 <keyb_proc+0x928>
						  bank = 1;
 80049a8:	4b79      	ldr	r3, [pc, #484]	; (8004b90 <keyb_proc+0xb08>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e7e6      	b.n	800497e <keyb_proc+0x8f6>
						  bank = 2;
 80049b0:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <keyb_proc+0xb08>)
 80049b2:	2202      	movs	r2, #2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e7e2      	b.n	800497e <keyb_proc+0x8f6>
					  else gEditModeStepNum = 31;
 80049b8:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <keyb_proc+0xb00>)
 80049ba:	221f      	movs	r2, #31
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e7de      	b.n	800497e <keyb_proc+0x8f6>
					  counterL = 100;
 80049c0:	4b70      	ldr	r3, [pc, #448]	; (8004b84 <keyb_proc+0xafc>)
 80049c2:	2264      	movs	r2, #100	; 0x64
 80049c4:	801a      	strh	r2, [r3, #0]
					  if(!Is_Expander_Present())
 80049c6:	f7fd fac8 	bl	8001f5a <Is_Expander_Present>
 80049ca:	b978      	cbnz	r0, 80049ec <keyb_proc+0x964>
					      gEditModeStepNum = 15;
 80049cc:	4b6e      	ldr	r3, [pc, #440]	; (8004b88 <keyb_proc+0xb00>)
 80049ce:	220f      	movs	r2, #15
 80049d0:	701a      	strb	r2, [r3, #0]
					      if(bank == 1) 
 80049d2:	4b6f      	ldr	r3, [pc, #444]	; (8004b90 <keyb_proc+0xb08>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d003      	beq.n	80049e4 <keyb_proc+0x95c>
						  bank = 1;
 80049dc:	4b6c      	ldr	r3, [pc, #432]	; (8004b90 <keyb_proc+0xb08>)
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	e7cc      	b.n	800497e <keyb_proc+0x8f6>
						  bank = 2;
 80049e4:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <keyb_proc+0xb08>)
 80049e6:	2202      	movs	r2, #2
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e7c8      	b.n	800497e <keyb_proc+0x8f6>
					  else gEditModeStepNum = 31;
 80049ec:	4b66      	ldr	r3, [pc, #408]	; (8004b88 <keyb_proc+0xb00>)
 80049ee:	221f      	movs	r2, #31
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e7c4      	b.n	800497e <keyb_proc+0x8f6>
				};
			};
		}
		else 
		  {
		    counterL = 0;
 80049f4:	4b63      	ldr	r3, [pc, #396]	; (8004b84 <keyb_proc+0xafc>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	801a      	strh	r2, [r3, #0]
		  };
		
		if ( !key->b.StepRight ) {
 80049fa:	7823      	ldrb	r3, [r4, #0]
 80049fc:	f013 0f08 	tst.w	r3, #8
 8004a00:	f040 80cc 	bne.w	8004b9c <keyb_proc+0xb14>
		  if (gDisplayMode == DISPLAY_MODE_VIEW_1) {
 8004a04:	4b63      	ldr	r3, [pc, #396]	; (8004b94 <keyb_proc+0xb0c>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b923      	cbnz	r3, 8004a14 <keyb_proc+0x98c>
		    gDisplayMode = DISPLAY_MODE_EDIT_1;
 8004a0a:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <keyb_proc+0xb0c>)
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	701a      	strb	r2, [r3, #0]
		    gEditModeStepNum = max_step;
 8004a10:	4b5d      	ldr	r3, [pc, #372]	; (8004b88 <keyb_proc+0xb00>)
 8004a12:	701e      	strb	r6, [r3, #0]
		  };
			if (gDisplayMode == DISPLAY_MODE_VIEW_2) {
 8004a14:	4b5f      	ldr	r3, [pc, #380]	; (8004b94 <keyb_proc+0xb0c>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d04a      	beq.n	8004ab4 <keyb_proc+0xa2c>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
				gEditModeStepNum = max_step;
			};
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <keyb_proc+0xb0c>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d004      	beq.n	8004a32 <keyb_proc+0x9aa>
						(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 8004a28:	4b5a      	ldr	r3, [pc, #360]	; (8004b94 <keyb_proc+0xb0c>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_EDIT_1) ||
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d117      	bne.n	8004a62 <keyb_proc+0x9da>
				if (gEditModeStepNum < max_step) {
 8004a32:	4b55      	ldr	r3, [pc, #340]	; (8004b88 <keyb_proc+0xb00>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	42b3      	cmp	r3, r6
 8004a38:	d24b      	bcs.n	8004ad2 <keyb_proc+0xa4a>
					if(counterR == 0) gEditModeStepNum++;
 8004a3a:	4a57      	ldr	r2, [pc, #348]	; (8004b98 <keyb_proc+0xb10>)
 8004a3c:	8812      	ldrh	r2, [r2, #0]
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d13e      	bne.n	8004ac0 <keyb_proc+0xa38>
 8004a42:	3301      	adds	r3, #1
 8004a44:	4a50      	ldr	r2, [pc, #320]	; (8004b88 <keyb_proc+0xb00>)
 8004a46:	7013      	strb	r3, [r2, #0]
						{
							counterR = 100;
							gEditModeStepNum = 0;
						}
				}
				counterR++;
 8004a48:	4a53      	ldr	r2, [pc, #332]	; (8004b98 <keyb_proc+0xb10>)
 8004a4a:	8813      	ldrh	r3, [r2, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	8013      	strh	r3, [r2, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004a50:	4b4e      	ldr	r3, [pc, #312]	; (8004b8c <keyb_proc+0xb04>)
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	f042 0201 	orr.w	r2, r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	f042 0202 	orr.w	r2, r2, #2
 8004a60:	701a      	strb	r2, [r3, #0]
			}			
						
			//if in save or load mode right buttons select memory cell for save/recall
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8004a62:	4b4c      	ldr	r3, [pc, #304]	; (8004b94 <keyb_proc+0xb0c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d00f      	beq.n	8004a8c <keyb_proc+0xa04>
 8004a6c:	4b49      	ldr	r3, [pc, #292]	; (8004b94 <keyb_proc+0xb0c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d00a      	beq.n	8004a8c <keyb_proc+0xa04>
				(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2)) {
 8004a76:	4b47      	ldr	r3, [pc, #284]	; (8004b94 <keyb_proc+0xb0c>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	b2db      	uxtb	r3, r3
			if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8004a7c:	2b06      	cmp	r3, #6
 8004a7e:	d005      	beq.n	8004a8c <keyb_proc+0xa04>
				(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2)) {
 8004a80:	4b44      	ldr	r3, [pc, #272]	; (8004b94 <keyb_proc+0xb0c>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b07      	cmp	r3, #7
 8004a88:	f040 808b 	bne.w	8004ba2 <keyb_proc+0xb1a>
				if (gEditModeStepNum < max_step) {
 8004a8c:	4b3e      	ldr	r3, [pc, #248]	; (8004b88 <keyb_proc+0xb00>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	42b3      	cmp	r3, r6
 8004a92:	d237      	bcs.n	8004b04 <keyb_proc+0xa7c>
					if(counterR == 0) gEditModeStepNum++;
 8004a94:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <keyb_proc+0xb10>)
 8004a96:	8812      	ldrh	r2, [r2, #0]
 8004a98:	bb5a      	cbnz	r2, 8004af2 <keyb_proc+0xa6a>
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	4a3a      	ldr	r2, [pc, #232]	; (8004b88 <keyb_proc+0xb00>)
 8004a9e:	7013      	strb	r3, [r2, #0]
					else if(counterR > 120) { 
					  counterR = 100;
					  gEditModeStepNum++;
					}
					counterR++;
 8004aa0:	4a3d      	ldr	r2, [pc, #244]	; (8004b98 <keyb_proc+0xb10>)
 8004aa2:	8813      	ldrh	r3, [r2, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	8013      	strh	r3, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004aa8:	4a38      	ldr	r2, [pc, #224]	; (8004b8c <keyb_proc+0xb04>)
 8004aaa:	7813      	ldrb	r3, [r2, #0]
 8004aac:	f043 0302 	orr.w	r3, r3, #2
 8004ab0:	7013      	strb	r3, [r2, #0]
 8004ab2:	e076      	b.n	8004ba2 <keyb_proc+0xb1a>
				gDisplayMode = DISPLAY_MODE_EDIT_2;
 8004ab4:	4b37      	ldr	r3, [pc, #220]	; (8004b94 <keyb_proc+0xb0c>)
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	701a      	strb	r2, [r3, #0]
				gEditModeStepNum = max_step;
 8004aba:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <keyb_proc+0xb00>)
 8004abc:	701e      	strb	r6, [r3, #0]
 8004abe:	e7ae      	b.n	8004a1e <keyb_proc+0x996>
					else if (counterR > 120)//was 600
 8004ac0:	2a78      	cmp	r2, #120	; 0x78
 8004ac2:	d9c1      	bls.n	8004a48 <keyb_proc+0x9c0>
						  counterR = 100;//was 500
 8004ac4:	4a34      	ldr	r2, [pc, #208]	; (8004b98 <keyb_proc+0xb10>)
 8004ac6:	2164      	movs	r1, #100	; 0x64
 8004ac8:	8011      	strh	r1, [r2, #0]
						  gEditModeStepNum++;
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a2e      	ldr	r2, [pc, #184]	; (8004b88 <keyb_proc+0xb00>)
 8004ace:	7013      	strb	r3, [r2, #0]
 8004ad0:	e7ba      	b.n	8004a48 <keyb_proc+0x9c0>
					if(counterR == 0) gEditModeStepNum = 0;
 8004ad2:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <keyb_proc+0xb10>)
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b91b      	cbnz	r3, 8004ae0 <keyb_proc+0xa58>
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <keyb_proc+0xb00>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e7b3      	b.n	8004a48 <keyb_proc+0x9c0>
					else if(counterR > 120) 
 8004ae0:	2b78      	cmp	r3, #120	; 0x78
 8004ae2:	d9b1      	bls.n	8004a48 <keyb_proc+0x9c0>
							counterR = 100;
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <keyb_proc+0xb10>)
 8004ae6:	2264      	movs	r2, #100	; 0x64
 8004ae8:	801a      	strh	r2, [r3, #0]
							gEditModeStepNum = 0;
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <keyb_proc+0xb00>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	e7aa      	b.n	8004a48 <keyb_proc+0x9c0>
					else if(counterR > 120) { 
 8004af2:	2a78      	cmp	r2, #120	; 0x78
 8004af4:	d9d4      	bls.n	8004aa0 <keyb_proc+0xa18>
					  counterR = 100;
 8004af6:	4a28      	ldr	r2, [pc, #160]	; (8004b98 <keyb_proc+0xb10>)
 8004af8:	2164      	movs	r1, #100	; 0x64
 8004afa:	8011      	strh	r1, [r2, #0]
					  gEditModeStepNum++;
 8004afc:	3301      	adds	r3, #1
 8004afe:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <keyb_proc+0xb00>)
 8004b00:	7013      	strb	r3, [r2, #0]
 8004b02:	e7cd      	b.n	8004aa0 <keyb_proc+0xa18>
				} else {
				  if(counterR == 0) 
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <keyb_proc+0xb10>)
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b15b      	cbz	r3, 8004b22 <keyb_proc+0xa9a>
							else 
							{
								gEditModeStepNum = 0;
							}
					}
				  else if(counterR > 120) {
 8004b0a:	2b78      	cmp	r3, #120	; 0x78
 8004b0c:	d820      	bhi.n	8004b50 <keyb_proc+0xac8>
				    else 
				      {
					gEditModeStepNum = 0;
				      }
				  }
				  counterR++;
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <keyb_proc+0xb10>)
 8004b10:	8813      	ldrh	r3, [r2, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	8013      	strh	r3, [r2, #0]
				  
				  DisplayUpdateFlags.b.StepsDisplay = 1;
 8004b16:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <keyb_proc+0xb04>)
 8004b18:	7813      	ldrb	r3, [r2, #0]
 8004b1a:	f043 0302 	orr.w	r3, r3, #2
 8004b1e:	7013      	strb	r3, [r2, #0]
 8004b20:	e03f      	b.n	8004ba2 <keyb_proc+0xb1a>
							if(!Is_Expander_Present())
 8004b22:	f7fd fa1a 	bl	8001f5a <Is_Expander_Present>
 8004b26:	b978      	cbnz	r0, 8004b48 <keyb_proc+0xac0>
								gEditModeStepNum = 0;
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <keyb_proc+0xb00>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
								if(bank == 1) 
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <keyb_proc+0xb08>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d003      	beq.n	8004b40 <keyb_proc+0xab8>
									bank = 1;
 8004b38:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <keyb_proc+0xb08>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e7e6      	b.n	8004b0e <keyb_proc+0xa86>
									bank = 2;
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <keyb_proc+0xb08>)
 8004b42:	2202      	movs	r2, #2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e7e2      	b.n	8004b0e <keyb_proc+0xa86>
								gEditModeStepNum = 0;
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <keyb_proc+0xb00>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	e7de      	b.n	8004b0e <keyb_proc+0xa86>
				    counterR = 100;
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <keyb_proc+0xb10>)
 8004b52:	2264      	movs	r2, #100	; 0x64
 8004b54:	801a      	strh	r2, [r3, #0]
				    if(!Is_Expander_Present())
 8004b56:	f7fd fa00 	bl	8001f5a <Is_Expander_Present>
 8004b5a:	b978      	cbnz	r0, 8004b7c <keyb_proc+0xaf4>
					gEditModeStepNum = 0;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <keyb_proc+0xb00>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
					if(bank == 1) 
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <keyb_proc+0xb08>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d003      	beq.n	8004b74 <keyb_proc+0xaec>
					    bank = 1;
 8004b6c:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <keyb_proc+0xb08>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	e7cc      	b.n	8004b0e <keyb_proc+0xa86>
					    bank = 2;
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <keyb_proc+0xb08>)
 8004b76:	2202      	movs	r2, #2
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e7c8      	b.n	8004b0e <keyb_proc+0xa86>
					gEditModeStepNum = 0;
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <keyb_proc+0xb00>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e7c4      	b.n	8004b0e <keyb_proc+0xa86>
 8004b84:	200002ac 	.word	0x200002ac
 8004b88:	200002b1 	.word	0x200002b1
 8004b8c:	200002f0 	.word	0x200002f0
 8004b90:	20000270 	.word	0x20000270
 8004b94:	200002b0 	.word	0x200002b0
 8004b98:	200002ae 	.word	0x200002ae
				};
			};
		}
		else 
		{
		  counterR = 0;
 8004b9c:	4baa      	ldr	r3, [pc, #680]	; (8004e48 <keyb_proc+0xdc0>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	801a      	strh	r2, [r3, #0]
		};
	key_locked = 1;
 8004ba2:	4baa      	ldr	r3, [pc, #680]	; (8004e4c <keyb_proc+0xdc4>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
		
		//Sections 1/2
	if (gKeysNotValid == 0) {
 8004ba8:	4ba9      	ldr	r3, [pc, #676]	; (8004e50 <keyb_proc+0xdc8>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b9c3      	cbnz	r3, 8004be0 <keyb_proc+0xb58>
		
	if (!key->b.StageAddress1Display) {
 8004bae:	7963      	ldrb	r3, [r4, #5]
 8004bb0:	f013 0f04 	tst.w	r3, #4
 8004bb4:	d105      	bne.n	8004bc2 <keyb_proc+0xb3a>
			if (gDisplayMode != DISPLAY_MODE_VIEW_1) {			
 8004bb6:	4ba7      	ldr	r3, [pc, #668]	; (8004e54 <keyb_proc+0xdcc>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	b113      	cbz	r3, 8004bc2 <keyb_proc+0xb3a>
				gDisplayMode = DISPLAY_MODE_VIEW_1;
 8004bbc:	4ba5      	ldr	r3, [pc, #660]	; (8004e54 <keyb_proc+0xdcc>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
			};		
		};
		

		if (!key->b.StageAddress2Display) {
 8004bc2:	7923      	ldrb	r3, [r4, #4]
 8004bc4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bc8:	d10a      	bne.n	8004be0 <keyb_proc+0xb58>
			if (gDisplayMode != DISPLAY_MODE_VIEW_2) {			
 8004bca:	4ba2      	ldr	r3, [pc, #648]	; (8004e54 <keyb_proc+0xdcc>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d005      	beq.n	8004be0 <keyb_proc+0xb58>
				gDisplayMode = DISPLAY_MODE_VIEW_2;
 8004bd4:	4b9f      	ldr	r3, [pc, #636]	; (8004e54 <keyb_proc+0xdcc>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
				key_locked = 0;
 8004bda:	4b9c      	ldr	r3, [pc, #624]	; (8004e4c <keyb_proc+0xdc4>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
		};
	};
		
	

		if ( (!key->b.StageAddress1Reset)  ) {
 8004be0:	7963      	ldrb	r3, [r4, #5]
 8004be2:	f013 0f02 	tst.w	r3, #2
 8004be6:	d11f      	bne.n	8004c28 <keyb_proc+0xba0>
				if(gSequencerMode_1 != SEQUENCER_MODE_WAIT)
 8004be8:	4b9b      	ldr	r3, [pc, #620]	; (8004e58 <keyb_proc+0xdd0>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d01a      	beq.n	8004c28 <keyb_proc+0xba0>
				{
				gSequenceStepNumber_1 = 0;
 8004bf2:	4b9a      	ldr	r3, [pc, #616]	; (8004e5c <keyb_proc+0xdd4>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004bf8:	4b99      	ldr	r3, [pc, #612]	; (8004e60 <keyb_proc+0xdd8>)
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	f042 0202 	orr.w	r2, r2, #2
 8004c08:	701a      	strb	r2, [r3, #0]
				if (gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z || gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z) {
 8004c0a:	4b93      	ldr	r3, [pc, #588]	; (8004e58 <keyb_proc+0xdd0>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d004      	beq.n	8004c1e <keyb_proc+0xb96>
 8004c14:	4b90      	ldr	r3, [pc, #576]	; (8004e58 <keyb_proc+0xdd0>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d104      	bne.n	8004c28 <keyb_proc+0xba0>
				gSequencerMode_1 = gPrevSequencerMode_1;
 8004c1e:	4b91      	ldr	r3, [pc, #580]	; (8004e64 <keyb_proc+0xddc>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	4a8c      	ldr	r2, [pc, #560]	; (8004e58 <keyb_proc+0xdd0>)
 8004c26:	7013      	strb	r3, [r2, #0]
				}
			};
		};
					

		if ( (!key->b.StageAddress2Reset)  ) {
 8004c28:	7923      	ldrb	r3, [r4, #4]
 8004c2a:	f013 0f20 	tst.w	r3, #32
 8004c2e:	d11f      	bne.n	8004c70 <keyb_proc+0xbe8>
				if(gSequencerMode_2 != SEQUENCER_MODE_WAIT)
 8004c30:	4a8d      	ldr	r2, [pc, #564]	; (8004e68 <keyb_proc+0xde0>)
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	2a01      	cmp	r2, #1
 8004c38:	d01a      	beq.n	8004c70 <keyb_proc+0xbe8>
				{						
					gSequenceStepNumber_2 = 0;
 8004c3a:	4a8c      	ldr	r2, [pc, #560]	; (8004e6c <keyb_proc+0xde4>)
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	7011      	strb	r1, [r2, #0]
					DisplayUpdateFlags.b.MainDisplay = 1;
 8004c40:	4a87      	ldr	r2, [pc, #540]	; (8004e60 <keyb_proc+0xdd8>)
 8004c42:	7811      	ldrb	r1, [r2, #0]
 8004c44:	f041 0101 	orr.w	r1, r1, #1
 8004c48:	7011      	strb	r1, [r2, #0]
					DisplayUpdateFlags.b.StepsDisplay = 1;
 8004c4a:	7811      	ldrb	r1, [r2, #0]
 8004c4c:	f041 0102 	orr.w	r1, r1, #2
 8004c50:	7011      	strb	r1, [r2, #0]
					
					if (gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z || gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) {
 8004c52:	4a85      	ldr	r2, [pc, #532]	; (8004e68 <keyb_proc+0xde0>)
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	2a04      	cmp	r2, #4
 8004c5a:	d004      	beq.n	8004c66 <keyb_proc+0xbde>
 8004c5c:	4a82      	ldr	r2, [pc, #520]	; (8004e68 <keyb_proc+0xde0>)
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	2a05      	cmp	r2, #5
 8004c64:	d104      	bne.n	8004c70 <keyb_proc+0xbe8>
					gSequencerMode_2 = gPrevSequencerMode_2;
 8004c66:	4a82      	ldr	r2, [pc, #520]	; (8004e70 <keyb_proc+0xde8>)
 8004c68:	7812      	ldrb	r2, [r2, #0]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	497e      	ldr	r1, [pc, #504]	; (8004e68 <keyb_proc+0xde0>)
 8004c6e:	700a      	strb	r2, [r1, #0]
				}
		};
		}
				
		if( key->b.Empty5 && strobe_banana_flag1 == 0)
 8004c70:	f013 0f10 	tst.w	r3, #16
 8004c74:	d03a      	beq.n	8004cec <keyb_proc+0xc64>
 8004c76:	4b7f      	ldr	r3, [pc, #508]	; (8004e74 <keyb_proc+0xdec>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d136      	bne.n	8004cec <keyb_proc+0xc64>
		{
			strobe_banana_flag1 = 1;
 8004c7e:	4b7d      	ldr	r3, [pc, #500]	; (8004e74 <keyb_proc+0xdec>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
				gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 8004c84:	4b7c      	ldr	r3, [pc, #496]	; (8004e78 <keyb_proc+0xdf0>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	4a73      	ldr	r2, [pc, #460]	; (8004e5c <keyb_proc+0xdd4>)
 8004c8e:	7013      	strb	r3, [r2, #0]
			
			if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8004c90:	4b70      	ldr	r3, [pc, #448]	; (8004e54 <keyb_proc+0xdcc>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b943      	cbnz	r3, 8004ca8 <keyb_proc+0xc20>
				DisplayUpdateFlags.b.MainDisplay = 1;
 8004c96:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <keyb_proc+0xdd8>)
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
				DisplayUpdateFlags.b.StepsDisplay = 1;
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	f042 0202 	orr.w	r2, r2, #2
 8004ca6:	701a      	strb	r2, [r3, #0]
			};
			
				PULSE_LED_I_ALL_ON;
 8004ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cac:	4873      	ldr	r0, [pc, #460]	; (8004e7c <keyb_proc+0xdf4>)
 8004cae:	f7fc fa30 	bl	8001112 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004cb2:	4b6a      	ldr	r3, [pc, #424]	; (8004e5c <keyb_proc+0xdd4>)
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	4b72      	ldr	r3, [pc, #456]	; (8004e80 <keyb_proc+0xdf8>)
 8004cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004cc2:	f040 816e 	bne.w	8004fa2 <keyb_proc+0xf1a>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004cc6:	4b65      	ldr	r3, [pc, #404]	; (8004e5c <keyb_proc+0xdd4>)
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	4b6d      	ldr	r3, [pc, #436]	; (8004e80 <keyb_proc+0xdf8>)
 8004ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004cd6:	f040 816a 	bne.w	8004fae <keyb_proc+0xf26>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 8004cda:	4e6a      	ldr	r6, [pc, #424]	; (8004e84 <keyb_proc+0xdfc>)
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7fc fbfe 	bl	80014e0 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7fc fbeb 	bl	80014c2 <TIM_SetCounter>
		}
		
		if(!key->b.Empty5) 
 8004cec:	7923      	ldrb	r3, [r4, #4]
 8004cee:	f013 0f10 	tst.w	r3, #16
 8004cf2:	d102      	bne.n	8004cfa <keyb_proc+0xc72>
		{
			strobe_banana_flag1 = 0;
 8004cf4:	4b5f      	ldr	r3, [pc, #380]	; (8004e74 <keyb_proc+0xdec>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
		}
		if ( (!key->b.StageAddress1PulseSelect) ) {
 8004cfa:	7963      	ldrb	r3, [r4, #5]
 8004cfc:	f013 0f10 	tst.w	r3, #16
 8004d00:	d133      	bne.n	8004d6a <keyb_proc+0xce2>
				gSequenceStepNumber_1 = (unsigned int) (pots_step[0]-1);
 8004d02:	4b5d      	ldr	r3, [pc, #372]	; (8004e78 <keyb_proc+0xdf0>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4a54      	ldr	r2, [pc, #336]	; (8004e5c <keyb_proc+0xdd4>)
 8004d0c:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 8004d0e:	4b51      	ldr	r3, [pc, #324]	; (8004e54 <keyb_proc+0xdcc>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b943      	cbnz	r3, 8004d26 <keyb_proc+0xc9e>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8004d14:	4b52      	ldr	r3, [pc, #328]	; (8004e60 <keyb_proc+0xdd8>)
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	f042 0202 	orr.w	r2, r2, #2
 8004d24:	701a      	strb	r2, [r3, #0]
	};
			
				PULSE_LED_I_ALL_ON;
 8004d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d2a:	4854      	ldr	r0, [pc, #336]	; (8004e7c <keyb_proc+0xdf4>)
 8004d2c:	f7fc f9f1 	bl	8001112 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004d30:	4b4a      	ldr	r3, [pc, #296]	; (8004e5c <keyb_proc+0xdd4>)
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	4b52      	ldr	r3, [pc, #328]	; (8004e80 <keyb_proc+0xdf8>)
 8004d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d40:	f040 813b 	bne.w	8004fba <keyb_proc+0xf32>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004d44:	4b45      	ldr	r3, [pc, #276]	; (8004e5c <keyb_proc+0xdd4>)
 8004d46:	781a      	ldrb	r2, [r3, #0]
 8004d48:	4b4d      	ldr	r3, [pc, #308]	; (8004e80 <keyb_proc+0xdf8>)
 8004d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004d54:	f040 8137 	bne.w	8004fc6 <keyb_proc+0xf3e>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 8004d58:	4e4a      	ldr	r6, [pc, #296]	; (8004e84 <keyb_proc+0xdfc>)
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f7fc fbbf 	bl	80014e0 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8004d62:	2100      	movs	r1, #0
 8004d64:	4630      	mov	r0, r6
 8004d66:	f7fc fbac 	bl	80014c2 <TIM_SetCounter>
		};
		
						
		if( key->b.Empty2 && strobe_banana_flag2 == 0)
 8004d6a:	78e3      	ldrb	r3, [r4, #3]
 8004d6c:	f013 0f08 	tst.w	r3, #8
 8004d70:	d033      	beq.n	8004dda <keyb_proc+0xd52>
 8004d72:	4b45      	ldr	r3, [pc, #276]	; (8004e88 <keyb_proc+0xe00>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d12f      	bne.n	8004dda <keyb_proc+0xd52>
		{
			strobe_banana_flag2 = 1;
 8004d7a:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <keyb_proc+0xe00>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
				gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 8004d80:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <keyb_proc+0xdf0>)
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	4a38      	ldr	r2, [pc, #224]	; (8004e6c <keyb_proc+0xde4>)
 8004d8a:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8004d8c:	4b31      	ldr	r3, [pc, #196]	; (8004e54 <keyb_proc+0xdcc>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	f000 811d 	beq.w	8004fd2 <keyb_proc+0xf4a>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};
			
				PULSE_LED_II_ALL_ON;
 8004d98:	2104      	movs	r1, #4
 8004d9a:	483c      	ldr	r0, [pc, #240]	; (8004e8c <keyb_proc+0xe04>)
 8004d9c:	f7fc f9b9 	bl	8001112 <GPIO_ResetBits>
				
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004da0:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <keyb_proc+0xdd4>)
 8004da2:	781a      	ldrb	r2, [r3, #0]
 8004da4:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <keyb_proc+0xdf8>)
 8004da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004db0:	f040 8119 	bne.w	8004fe6 <keyb_proc+0xf5e>
					PULSE_LED_II_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004db4:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <keyb_proc+0xdd4>)
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <keyb_proc+0xdf8>)
 8004dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004dc4:	f040 8114 	bne.w	8004ff0 <keyb_proc+0xf68>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 8004dc8:	4e31      	ldr	r6, [pc, #196]	; (8004e90 <keyb_proc+0xe08>)
 8004dca:	2101      	movs	r1, #1
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7fc fb87 	bl	80014e0 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f7fc fb74 	bl	80014c2 <TIM_SetCounter>
		}
		
		if(!key->b.Empty2) 
 8004dda:	78e3      	ldrb	r3, [r4, #3]
 8004ddc:	f013 0f08 	tst.w	r3, #8
 8004de0:	d102      	bne.n	8004de8 <keyb_proc+0xd60>
		{
			strobe_banana_flag2 = 0;
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <keyb_proc+0xe00>)
 8004de4:	2100      	movs	r1, #0
 8004de6:	7011      	strb	r1, [r2, #0]
		}


		if ( (!key->b.StageAddress2PulseSelect)) {
 8004de8:	f013 0f02 	tst.w	r3, #2
 8004dec:	d158      	bne.n	8004ea0 <keyb_proc+0xe18>
				gSequenceStepNumber_2 = (unsigned int) (pots_step[1]-1);
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <keyb_proc+0xdf0>)
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <keyb_proc+0xde4>)
 8004df8:	7013      	strb	r3, [r2, #0]
					if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8004dfa:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <keyb_proc+0xdcc>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f000 80fb 	beq.w	8004ffc <keyb_proc+0xf74>
		DisplayUpdateFlags.b.MainDisplay = 1;
		DisplayUpdateFlags.b.StepsDisplay = 1;
	};
			
				PULSE_LED_II_ALL_ON;
 8004e06:	2104      	movs	r1, #4
 8004e08:	4820      	ldr	r0, [pc, #128]	; (8004e8c <keyb_proc+0xe04>)
 8004e0a:	f7fc f982 	bl	8001112 <GPIO_ResetBits>
				
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8004e0e:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <keyb_proc+0xde4>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	f103 0220 	add.w	r2, r3, #32
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <keyb_proc+0xdf8>)
 8004e18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004e22:	f040 80f5 	bne.w	8005010 <keyb_proc+0xf88>
					PULSE_LED_II_1_ON;
				};
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 8004e26:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <keyb_proc+0xde4>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f103 0220 	add.w	r2, r3, #32
 8004e2e:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <keyb_proc+0xdf8>)
 8004e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004e3a:	f040 80ee 	bne.w	800501a <keyb_proc+0xf92>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 8004e3e:	4e14      	ldr	r6, [pc, #80]	; (8004e90 <keyb_proc+0xe08>)
 8004e40:	2101      	movs	r1, #1
 8004e42:	4630      	mov	r0, r6
 8004e44:	e026      	b.n	8004e94 <keyb_proc+0xe0c>
 8004e46:	bf00      	nop
 8004e48:	200002ae 	.word	0x200002ae
 8004e4c:	200002cc 	.word	0x200002cc
 8004e50:	200002bc 	.word	0x200002bc
 8004e54:	200002b0 	.word	0x200002b0
 8004e58:	200002c1 	.word	0x200002c1
 8004e5c:	200002bf 	.word	0x200002bf
 8004e60:	200002f0 	.word	0x200002f0
 8004e64:	200002bd 	.word	0x200002bd
 8004e68:	200002c2 	.word	0x200002c2
 8004e6c:	200002c0 	.word	0x200002c0
 8004e70:	200002be 	.word	0x200002be
 8004e74:	200002d8 	.word	0x200002d8
 8004e78:	20000274 	.word	0x20000274
 8004e7c:	40020400 	.word	0x40020400
 8004e80:	20000958 	.word	0x20000958
 8004e84:	40002000 	.word	0x40002000
 8004e88:	200002d9 	.word	0x200002d9
 8004e8c:	40020000 	.word	0x40020000
 8004e90:	40010400 	.word	0x40010400
 8004e94:	f7fc fb24 	bl	80014e0 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7fc fb11 	bl	80014c2 <TIM_SetCounter>
		};		
	
				
	/* Stage address ADVANCE 1 KEY*/
	if (!key->b.StageAddress1ContiniousSelect) {
 8004ea0:	7963      	ldrb	r3, [r4, #5]
 8004ea2:	f013 0f20 	tst.w	r3, #32
 8004ea6:	f040 80be 	bne.w	8005026 <keyb_proc+0xf9e>
		if (gSequencerMode_1 != SEQUENCER_MODE_WAIT) {
 8004eaa:	4aae      	ldr	r2, [pc, #696]	; (8005164 <keyb_proc+0x10dc>)
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	2a01      	cmp	r2, #1
 8004eb2:	d00e      	beq.n	8004ed2 <keyb_proc+0xe4a>
			gPrevSequencerMode_1 = gSequencerMode_1;
 8004eb4:	49ab      	ldr	r1, [pc, #684]	; (8005164 <keyb_proc+0x10dc>)
 8004eb6:	780a      	ldrb	r2, [r1, #0]
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	48ab      	ldr	r0, [pc, #684]	; (8005168 <keyb_proc+0x10e0>)
 8004ebc:	7002      	strb	r2, [r0, #0]
			gSequencerMode_1 = SEQUENCER_MODE_WAIT;		
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004ec2:	49aa      	ldr	r1, [pc, #680]	; (800516c <keyb_proc+0x10e4>)
 8004ec4:	780a      	ldrb	r2, [r1, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	700a      	strb	r2, [r1, #0]
			key_locked = 0;
 8004ecc:	4aa8      	ldr	r2, [pc, #672]	; (8005170 <keyb_proc+0x10e8>)
 8004ece:	2100      	movs	r1, #0
 8004ed0:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;
			key_locked = 0;
		};
	};
	
	if (!key->b.StageAddress2ContiniousSelect) {	
 8004ed2:	78e2      	ldrb	r2, [r4, #3]
 8004ed4:	f012 0f04 	tst.w	r2, #4
 8004ed8:	f040 80bd 	bne.w	8005056 <keyb_proc+0xfce>
		if (gSequencerMode_2 != SEQUENCER_MODE_WAIT) {
 8004edc:	4aa5      	ldr	r2, [pc, #660]	; (8005174 <keyb_proc+0x10ec>)
 8004ede:	7812      	ldrb	r2, [r2, #0]
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	2a01      	cmp	r2, #1
 8004ee4:	d00e      	beq.n	8004f04 <keyb_proc+0xe7c>
			gPrevSequencerMode_2 = gSequencerMode_2;
 8004ee6:	49a3      	ldr	r1, [pc, #652]	; (8005174 <keyb_proc+0x10ec>)
 8004ee8:	780a      	ldrb	r2, [r1, #0]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	48a2      	ldr	r0, [pc, #648]	; (8005178 <keyb_proc+0x10f0>)
 8004eee:	7002      	strb	r2, [r0, #0]
			gSequencerMode_2 = SEQUENCER_MODE_WAIT;
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 8004ef4:	499d      	ldr	r1, [pc, #628]	; (800516c <keyb_proc+0x10e4>)
 8004ef6:	780a      	ldrb	r2, [r1, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	700a      	strb	r2, [r1, #0]
			key_locked = 0;
 8004efe:	4a9c      	ldr	r2, [pc, #624]	; (8005170 <keyb_proc+0x10e8>)
 8004f00:	2100      	movs	r1, #0
 8004f02:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;			
			key_locked = 0;
		};
	};
	
	if (!key->b.StageAddress1Advance) {
 8004f04:	f013 0f01 	tst.w	r3, #1
 8004f08:	f040 80d9 	bne.w	80050be <keyb_proc+0x1036>
		advanced_counter_1++;
 8004f0c:	4a9b      	ldr	r2, [pc, #620]	; (800517c <keyb_proc+0x10f4>)
 8004f0e:	7813      	ldrb	r3, [r2, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	7013      	strb	r3, [r2, #0]
		//		if(advanced_counter_1 == 10)
		{
		if(gSequencerMode_1 != SEQUENCER_MODE_WAIT)
 8004f16:	4b93      	ldr	r3, [pc, #588]	; (8005164 <keyb_proc+0x10dc>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	f000 80d1 	beq.w	80050c4 <keyb_proc+0x103c>
		{
		if(gSequencerMode_1 == SEQUENCER_MODE_RUN)
 8004f22:	4b90      	ldr	r3, [pc, #576]	; (8005164 <keyb_proc+0x10dc>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80ad 	beq.w	8005086 <keyb_proc+0xffe>
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
			gStepWidth_1 = 0;
		}
		else{
			if(gSequencerMode_1 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_1 != SEQUENCER_MODE_WAIT_HI_Z )(gPrevSequencerMode_1 = gSequencerMode_1);
 8004f2c:	4b8d      	ldr	r3, [pc, #564]	; (8005164 <keyb_proc+0x10dc>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b05      	cmp	r3, #5
 8004f34:	d009      	beq.n	8004f4a <keyb_proc+0xec2>
 8004f36:	4b8b      	ldr	r3, [pc, #556]	; (8005164 <keyb_proc+0x10dc>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d004      	beq.n	8004f4a <keyb_proc+0xec2>
 8004f40:	4b88      	ldr	r3, [pc, #544]	; (8005164 <keyb_proc+0x10dc>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4a88      	ldr	r2, [pc, #544]	; (8005168 <keyb_proc+0x10e0>)
 8004f48:	7013      	strb	r3, [r2, #0]
			
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8004f4a:	4e8d      	ldr	r6, [pc, #564]	; (8005180 <keyb_proc+0x10f8>)
 8004f4c:	7831      	ldrb	r1, [r6, #0]
 8004f4e:	2000      	movs	r0, #0
 8004f50:	f7fd fe38 	bl	8002bc4 <GetNextStep>
 8004f54:	7030      	strb	r0, [r6, #0]
		}
		gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8004f56:	4b83      	ldr	r3, [pc, #524]	; (8005164 <keyb_proc+0x10dc>)
 8004f58:	2202      	movs	r2, #2
 8004f5a:	701a      	strb	r2, [r3, #0]
						PULSE_LED_I_ALL_ON;
 8004f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f60:	4888      	ldr	r0, [pc, #544]	; (8005184 <keyb_proc+0x10fc>)
 8004f62:	f7fc f8d6 	bl	8001112 <GPIO_ResetBits>
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse1) {
 8004f66:	4b86      	ldr	r3, [pc, #536]	; (8005180 <keyb_proc+0x10f8>)
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	4b87      	ldr	r3, [pc, #540]	; (8005188 <keyb_proc+0x1100>)
 8004f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004f76:	f040 8096 	bne.w	80050a6 <keyb_proc+0x101e>
					PULSE_LED_I_1_ON;
				};
				if (Steps[0][gSequenceStepNumber_1].b.OutputPulse2) {
 8004f7a:	4b81      	ldr	r3, [pc, #516]	; (8005180 <keyb_proc+0x10f8>)
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	4b82      	ldr	r3, [pc, #520]	; (8005188 <keyb_proc+0x1100>)
 8004f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004f8a:	f040 8092 	bne.w	80050b2 <keyb_proc+0x102a>
					PULSE_LED_I_2_ON;
				};	
				
				TIM_Cmd(TIM14, ENABLE);
 8004f8e:	4e7f      	ldr	r6, [pc, #508]	; (800518c <keyb_proc+0x1104>)
 8004f90:	2101      	movs	r1, #1
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7fc faa4 	bl	80014e0 <TIM_Cmd>
				TIM_SetCounter(TIM14, 0x00);
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7fc fa91 	bl	80014c2 <TIM_SetCounter>
 8004fa0:	e090      	b.n	80050c4 <keyb_proc+0x103c>
					PULSE_LED_I_1_ON;
 8004fa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fa6:	4877      	ldr	r0, [pc, #476]	; (8005184 <keyb_proc+0x10fc>)
 8004fa8:	f7fc f8b3 	bl	8001112 <GPIO_ResetBits>
 8004fac:	e68b      	b.n	8004cc6 <keyb_proc+0xc3e>
					PULSE_LED_I_2_ON;
 8004fae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fb2:	4874      	ldr	r0, [pc, #464]	; (8005184 <keyb_proc+0x10fc>)
 8004fb4:	f7fc f8ad 	bl	8001112 <GPIO_ResetBits>
 8004fb8:	e68f      	b.n	8004cda <keyb_proc+0xc52>
					PULSE_LED_I_1_ON;
 8004fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fbe:	4871      	ldr	r0, [pc, #452]	; (8005184 <keyb_proc+0x10fc>)
 8004fc0:	f7fc f8a7 	bl	8001112 <GPIO_ResetBits>
 8004fc4:	e6be      	b.n	8004d44 <keyb_proc+0xcbc>
					PULSE_LED_I_2_ON;
 8004fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fca:	486e      	ldr	r0, [pc, #440]	; (8005184 <keyb_proc+0x10fc>)
 8004fcc:	f7fc f8a1 	bl	8001112 <GPIO_ResetBits>
 8004fd0:	e6c2      	b.n	8004d58 <keyb_proc+0xcd0>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8004fd2:	4b66      	ldr	r3, [pc, #408]	; (800516c <keyb_proc+0x10e4>)
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	f042 0202 	orr.w	r2, r2, #2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	e6d8      	b.n	8004d98 <keyb_proc+0xd10>
					PULSE_LED_II_1_ON;
 8004fe6:	2108      	movs	r1, #8
 8004fe8:	4869      	ldr	r0, [pc, #420]	; (8005190 <keyb_proc+0x1108>)
 8004fea:	f7fc f892 	bl	8001112 <GPIO_ResetBits>
 8004fee:	e6e1      	b.n	8004db4 <keyb_proc+0xd2c>
					PULSE_LED_II_2_ON;
 8004ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ff4:	4866      	ldr	r0, [pc, #408]	; (8005190 <keyb_proc+0x1108>)
 8004ff6:	f7fc f88c 	bl	8001112 <GPIO_ResetBits>
 8004ffa:	e6e5      	b.n	8004dc8 <keyb_proc+0xd40>
		DisplayUpdateFlags.b.MainDisplay = 1;
 8004ffc:	4b5b      	ldr	r3, [pc, #364]	; (800516c <keyb_proc+0x10e4>)
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	701a      	strb	r2, [r3, #0]
		DisplayUpdateFlags.b.StepsDisplay = 1;
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	f042 0202 	orr.w	r2, r2, #2
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	e6fa      	b.n	8004e06 <keyb_proc+0xd7e>
					PULSE_LED_II_1_ON;
 8005010:	2108      	movs	r1, #8
 8005012:	485f      	ldr	r0, [pc, #380]	; (8005190 <keyb_proc+0x1108>)
 8005014:	f7fc f87d 	bl	8001112 <GPIO_ResetBits>
 8005018:	e705      	b.n	8004e26 <keyb_proc+0xd9e>
					PULSE_LED_II_2_ON;
 800501a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800501e:	485c      	ldr	r0, [pc, #368]	; (8005190 <keyb_proc+0x1108>)
 8005020:	f7fc f877 	bl	8001112 <GPIO_ResetBits>
 8005024:	e70b      	b.n	8004e3e <keyb_proc+0xdb6>
		if (gSequencerMode_1 == SEQUENCER_MODE_WAIT) {
 8005026:	4a4f      	ldr	r2, [pc, #316]	; (8005164 <keyb_proc+0x10dc>)
 8005028:	7812      	ldrb	r2, [r2, #0]
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	2a01      	cmp	r2, #1
 800502e:	f47f af50 	bne.w	8004ed2 <keyb_proc+0xe4a>
			gSequencerMode_1 = gPrevSequencerMode_1;
 8005032:	4a4d      	ldr	r2, [pc, #308]	; (8005168 <keyb_proc+0x10e0>)
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	494a      	ldr	r1, [pc, #296]	; (8005164 <keyb_proc+0x10dc>)
 800503a:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 800503c:	4a4b      	ldr	r2, [pc, #300]	; (800516c <keyb_proc+0x10e4>)
 800503e:	7811      	ldrb	r1, [r2, #0]
 8005040:	f041 0101 	orr.w	r1, r1, #1
 8005044:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;
 8005046:	7811      	ldrb	r1, [r2, #0]
 8005048:	f041 0102 	orr.w	r1, r1, #2
 800504c:	7011      	strb	r1, [r2, #0]
			key_locked = 0;
 800504e:	4a48      	ldr	r2, [pc, #288]	; (8005170 <keyb_proc+0x10e8>)
 8005050:	2100      	movs	r1, #0
 8005052:	7011      	strb	r1, [r2, #0]
 8005054:	e73d      	b.n	8004ed2 <keyb_proc+0xe4a>
		if (gSequencerMode_2 == SEQUENCER_MODE_WAIT) {			
 8005056:	4a47      	ldr	r2, [pc, #284]	; (8005174 <keyb_proc+0x10ec>)
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	2a01      	cmp	r2, #1
 800505e:	f47f af51 	bne.w	8004f04 <keyb_proc+0xe7c>
			gSequencerMode_2 = gPrevSequencerMode_2;
 8005062:	4a45      	ldr	r2, [pc, #276]	; (8005178 <keyb_proc+0x10f0>)
 8005064:	7812      	ldrb	r2, [r2, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	4942      	ldr	r1, [pc, #264]	; (8005174 <keyb_proc+0x10ec>)
 800506a:	700a      	strb	r2, [r1, #0]
			DisplayUpdateFlags.b.MainDisplay = 1;
 800506c:	4a3f      	ldr	r2, [pc, #252]	; (800516c <keyb_proc+0x10e4>)
 800506e:	7811      	ldrb	r1, [r2, #0]
 8005070:	f041 0101 	orr.w	r1, r1, #1
 8005074:	7011      	strb	r1, [r2, #0]
			DisplayUpdateFlags.b.StepsDisplay = 1;			
 8005076:	7811      	ldrb	r1, [r2, #0]
 8005078:	f041 0102 	orr.w	r1, r1, #2
 800507c:	7011      	strb	r1, [r2, #0]
			key_locked = 0;
 800507e:	4a3c      	ldr	r2, [pc, #240]	; (8005170 <keyb_proc+0x10e8>)
 8005080:	2100      	movs	r1, #0
 8005082:	7011      	strb	r1, [r2, #0]
 8005084:	e73e      	b.n	8004f04 <keyb_proc+0xe7c>
			PreviousStep = GetStepVoltage(0, gSequenceStepNumber_1);
 8005086:	4e3e      	ldr	r6, [pc, #248]	; (8005180 <keyb_proc+0x10f8>)
 8005088:	7831      	ldrb	r1, [r6, #0]
 800508a:	2000      	movs	r0, #0
 800508c:	f7fd fc42 	bl	8002914 <GetStepVoltage>
 8005090:	4b40      	ldr	r3, [pc, #256]	; (8005194 <keyb_proc+0x110c>)
 8005092:	6018      	str	r0, [r3, #0]
			gSequenceStepNumber_1 = GetNextStep(0, gSequenceStepNumber_1);
 8005094:	7831      	ldrb	r1, [r6, #0]
 8005096:	2000      	movs	r0, #0
 8005098:	f7fd fd94 	bl	8002bc4 <GetNextStep>
 800509c:	7030      	strb	r0, [r6, #0]
			gStepWidth_1 = 0;
 800509e:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <keyb_proc+0x1110>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e757      	b.n	8004f56 <keyb_proc+0xece>
					PULSE_LED_I_1_ON;
 80050a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050aa:	4836      	ldr	r0, [pc, #216]	; (8005184 <keyb_proc+0x10fc>)
 80050ac:	f7fc f831 	bl	8001112 <GPIO_ResetBits>
 80050b0:	e763      	b.n	8004f7a <keyb_proc+0xef2>
					PULSE_LED_I_2_ON;
 80050b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050b6:	4833      	ldr	r0, [pc, #204]	; (8005184 <keyb_proc+0x10fc>)
 80050b8:	f7fc f82b 	bl	8001112 <GPIO_ResetBits>
 80050bc:	e767      	b.n	8004f8e <keyb_proc+0xf06>
		}	}
	} else advanced_counter_1 = 0;
 80050be:	4b2f      	ldr	r3, [pc, #188]	; (800517c <keyb_proc+0x10f4>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
	
		if (!key->b.StageAddress2Advance) {
 80050c4:	7963      	ldrb	r3, [r4, #5]
 80050c6:	f013 0f08 	tst.w	r3, #8
 80050ca:	f040 8088 	bne.w	80051de <keyb_proc+0x1156>
			
		advanced_counter_2++;
 80050ce:	4a33      	ldr	r2, [pc, #204]	; (800519c <keyb_proc+0x1114>)
 80050d0:	7813      	ldrb	r3, [r2, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	7013      	strb	r3, [r2, #0]
//		if(advanced_counter_2 == 10)
		{
		if(gSequencerMode_2 != SEQUENCER_MODE_WAIT)
 80050d8:	4b26      	ldr	r3, [pc, #152]	; (8005174 <keyb_proc+0x10ec>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	f000 8080 	beq.w	80051e4 <keyb_proc+0x115c>
				{
		if(gSequencerMode_2 == SEQUENCER_MODE_RUN)
 80050e4:	4b23      	ldr	r3, [pc, #140]	; (8005174 <keyb_proc+0x10ec>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d05d      	beq.n	80051a8 <keyb_proc+0x1120>
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
			gStepWidth_2 = 0;
		}
		else 
		{
			if(gSequencerMode_2 != SEQUENCER_MODE_STAY_HI_Z && gSequencerMode_2 != SEQUENCER_MODE_WAIT_HI_Z )(gPrevSequencerMode_2 = gSequencerMode_2);
 80050ec:	4b21      	ldr	r3, [pc, #132]	; (8005174 <keyb_proc+0x10ec>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d009      	beq.n	800510a <keyb_proc+0x1082>
 80050f6:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <keyb_proc+0x10ec>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d004      	beq.n	800510a <keyb_proc+0x1082>
 8005100:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <keyb_proc+0x10ec>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <keyb_proc+0x10f0>)
 8005108:	7013      	strb	r3, [r2, #0]
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 800510a:	4c25      	ldr	r4, [pc, #148]	; (80051a0 <keyb_proc+0x1118>)
 800510c:	7821      	ldrb	r1, [r4, #0]
 800510e:	2001      	movs	r0, #1
 8005110:	f7fd fd58 	bl	8002bc4 <GetNextStep>
 8005114:	7020      	strb	r0, [r4, #0]
		}
		gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <keyb_proc+0x10ec>)
 8005118:	2202      	movs	r2, #2
 800511a:	701a      	strb	r2, [r3, #0]
				PULSE_LED_II_ALL_ON;
 800511c:	2104      	movs	r1, #4
 800511e:	481c      	ldr	r0, [pc, #112]	; (8005190 <keyb_proc+0x1108>)
 8005120:	f7fb fff7 	bl	8001112 <GPIO_ResetBits>
				
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse1) {
 8005124:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <keyb_proc+0x1118>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	f103 0220 	add.w	r2, r3, #32
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <keyb_proc+0x1100>)
 800512e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005138:	d146      	bne.n	80051c8 <keyb_proc+0x1140>
					PULSE_LED_II_1_ON;
				};
				if (Steps[1][gSequenceStepNumber_2].b.OutputPulse2) {
 800513a:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <keyb_proc+0x1118>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	f103 0220 	add.w	r2, r3, #32
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <keyb_proc+0x1100>)
 8005144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800514e:	d140      	bne.n	80051d2 <keyb_proc+0x114a>
					PULSE_LED_II_2_ON;
				};	
				
				TIM_Cmd(TIM8, ENABLE);
 8005150:	4c14      	ldr	r4, [pc, #80]	; (80051a4 <keyb_proc+0x111c>)
 8005152:	2101      	movs	r1, #1
 8005154:	4620      	mov	r0, r4
 8005156:	f7fc f9c3 	bl	80014e0 <TIM_Cmd>
			TIM_SetCounter(TIM8, 0x00);
 800515a:	2100      	movs	r1, #0
 800515c:	4620      	mov	r0, r4
 800515e:	f7fc f9b0 	bl	80014c2 <TIM_SetCounter>
 8005162:	e03f      	b.n	80051e4 <keyb_proc+0x115c>
 8005164:	200002c1 	.word	0x200002c1
 8005168:	200002bd 	.word	0x200002bd
 800516c:	200002f0 	.word	0x200002f0
 8005170:	200002cc 	.word	0x200002cc
 8005174:	200002c2 	.word	0x200002c2
 8005178:	200002be 	.word	0x200002be
 800517c:	200002a8 	.word	0x200002a8
 8005180:	200002bf 	.word	0x200002bf
 8005184:	40020400 	.word	0x40020400
 8005188:	20000958 	.word	0x20000958
 800518c:	40002000 	.word	0x40002000
 8005190:	40020000 	.word	0x40020000
 8005194:	200002a0 	.word	0x200002a0
 8005198:	200002c4 	.word	0x200002c4
 800519c:	200002a9 	.word	0x200002a9
 80051a0:	200002c0 	.word	0x200002c0
 80051a4:	40010400 	.word	0x40010400
			PreviousStep_2 = GetStepVoltage(1, gSequenceStepNumber_2);
 80051a8:	4c1b      	ldr	r4, [pc, #108]	; (8005218 <keyb_proc+0x1190>)
 80051aa:	7821      	ldrb	r1, [r4, #0]
 80051ac:	2001      	movs	r0, #1
 80051ae:	f7fd fbb1 	bl	8002914 <GetStepVoltage>
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <keyb_proc+0x1194>)
 80051b4:	6018      	str	r0, [r3, #0]
			gSequenceStepNumber_2 = GetNextStep(1, gSequenceStepNumber_2);
 80051b6:	7821      	ldrb	r1, [r4, #0]
 80051b8:	2001      	movs	r0, #1
 80051ba:	f7fd fd03 	bl	8002bc4 <GetNextStep>
 80051be:	7020      	strb	r0, [r4, #0]
			gStepWidth_2 = 0;
 80051c0:	4b17      	ldr	r3, [pc, #92]	; (8005220 <keyb_proc+0x1198>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e7a6      	b.n	8005116 <keyb_proc+0x108e>
					PULSE_LED_II_1_ON;
 80051c8:	2108      	movs	r1, #8
 80051ca:	4816      	ldr	r0, [pc, #88]	; (8005224 <keyb_proc+0x119c>)
 80051cc:	f7fb ffa1 	bl	8001112 <GPIO_ResetBits>
 80051d0:	e7b3      	b.n	800513a <keyb_proc+0x10b2>
					PULSE_LED_II_2_ON;
 80051d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051d6:	4813      	ldr	r0, [pc, #76]	; (8005224 <keyb_proc+0x119c>)
 80051d8:	f7fb ff9b 	bl	8001112 <GPIO_ResetBits>
 80051dc:	e7b8      	b.n	8005150 <keyb_proc+0x10c8>
	
			}
	}
	}else advanced_counter_2 = 0;
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <keyb_proc+0x11a0>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
				
	if (gKeysNotValid == 0) {
 80051e4:	4b11      	ldr	r3, [pc, #68]	; (800522c <keyb_proc+0x11a4>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	b12b      	cbz	r3, 80051f6 <keyb_proc+0x116e>
		Steps[Section][StepNum] = tmpStep;				
		DisplayUpdateFlags.b.MainDisplay = 1;	
	} else {
		gKeysNotValid = 0;
 80051ea:	4b10      	ldr	r3, [pc, #64]	; (800522c <keyb_proc+0x11a4>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
	};
				
	return 1;
}
 80051f0:	2001      	movs	r0, #1
 80051f2:	b003      	add	sp, #12
 80051f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Steps[Section][StepNum] = tmpStep;				
 80051f6:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 80051fa:	4f0d      	ldr	r7, [pc, #52]	; (8005230 <keyb_proc+0x11a8>)
 80051fc:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8005200:	ab02      	add	r3, sp, #8
 8005202:	e913 0003 	ldmdb	r3, {r0, r1}
 8005206:	e885 0003 	stmia.w	r5, {r0, r1}
		DisplayUpdateFlags.b.MainDisplay = 1;	
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <keyb_proc+0x11ac>)
 800520c:	7813      	ldrb	r3, [r2, #0]
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	7013      	strb	r3, [r2, #0]
 8005214:	e7ec      	b.n	80051f0 <keyb_proc+0x1168>
 8005216:	bf00      	nop
 8005218:	200002c0 	.word	0x200002c0
 800521c:	200002a4 	.word	0x200002a4
 8005220:	200002c8 	.word	0x200002c8
 8005224:	40020000 	.word	0x40020000
 8005228:	200002a9 	.word	0x200002a9
 800522c:	200002bc 	.word	0x200002bc
 8005230:	20000958 	.word	0x20000958
 8005234:	200002f0 	.word	0x200002f0

08005238 <UpdateModeSection>:

/*
	Update leds function
*/
void UpdateModeSection(void)
{
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	b082      	sub	sp, #8
	unsigned char StepNum = 0, Section = 0;
	uLeds mLeds;
	uStep *mStep;
	
	mLeds.value[0] = 0xFF;
 800523c:	23ff      	movs	r3, #255	; 0xff
 800523e:	f88d 3004 	strb.w	r3, [sp, #4]
	mLeds.value[1] = 0xFF;
 8005242:	f88d 3005 	strb.w	r3, [sp, #5]
	mLeds.value[2] = 0xFF;
 8005246:	f88d 3006 	strb.w	r3, [sp, #6]
	mLeds.value[3] = 0xFF;
 800524a:	f88d 3007 	strb.w	r3, [sp, #7]

	if ((gSequencerMode_1 == SEQUENCER_MODE_RUN) ||
 800524e:	4bc0      	ldr	r3, [pc, #768]	; (8005550 <UpdateModeSection+0x318>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b123      	cbz	r3, 800525e <UpdateModeSection+0x26>
			(gSequencerMode_1 == SEQUENCER_MODE_ADVANCE)) {
 8005254:	4bbe      	ldr	r3, [pc, #760]	; (8005550 <UpdateModeSection+0x318>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_1 == SEQUENCER_MODE_RUN) ||
 800525a:	2b06      	cmp	r3, #6
 800525c:	d105      	bne.n	800526a <UpdateModeSection+0x32>
		mLeds.b.Seq1Run = 0;
 800525e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005262:	f36f 0382 	bfc	r3, #2, #1
 8005266:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT) ||
 800526a:	4bb9      	ldr	r3, [pc, #740]	; (8005550 <UpdateModeSection+0x318>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d009      	beq.n	8005288 <UpdateModeSection+0x50>
			(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 8005274:	4bb6      	ldr	r3, [pc, #728]	; (8005550 <UpdateModeSection+0x318>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	b2db      	uxtb	r3, r3
	if ( (gSequencerMode_1 == SEQUENCER_MODE_WAIT) ||
 800527a:	2b04      	cmp	r3, #4
 800527c:	d004      	beq.n	8005288 <UpdateModeSection+0x50>
			(gSequencerMode_1 == SEQUENCER_MODE_STAY_HI_Z)  ) {
 800527e:	4bb4      	ldr	r3, [pc, #720]	; (8005550 <UpdateModeSection+0x318>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b2db      	uxtb	r3, r3
			(gSequencerMode_1 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 8005284:	2b05      	cmp	r3, #5
 8005286:	d105      	bne.n	8005294 <UpdateModeSection+0x5c>
		mLeds.b.Seq1Wait = 0;
 8005288:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800528c:	f36f 0341 	bfc	r3, #1, #1
 8005290:	f88d 3004 	strb.w	r3, [sp, #4]
	};
			
	if (gSequencerMode_1 == SEQUENCER_MODE_STOP) {
 8005294:	4bae      	ldr	r3, [pc, #696]	; (8005550 <UpdateModeSection+0x318>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	f000 8187 	beq.w	80055ae <UpdateModeSection+0x376>
		mLeds.b.Seq1Stop = 0;
	};
	
	if ((gSequencerMode_2 == SEQUENCER_MODE_RUN) ||
 80052a0:	4bac      	ldr	r3, [pc, #688]	; (8005554 <UpdateModeSection+0x31c>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	b123      	cbz	r3, 80052b0 <UpdateModeSection+0x78>
			(gSequencerMode_2 == SEQUENCER_MODE_ADVANCE) ) {
 80052a6:	4bab      	ldr	r3, [pc, #684]	; (8005554 <UpdateModeSection+0x31c>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_2 == SEQUENCER_MODE_RUN) ||
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	d105      	bne.n	80052bc <UpdateModeSection+0x84>
		mLeds.b.Seq2Run = 0;
 80052b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052b4:	f36f 1345 	bfc	r3, #5, #1
 80052b8:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if ((gSequencerMode_2 == SEQUENCER_MODE_WAIT) ||
 80052bc:	4ba5      	ldr	r3, [pc, #660]	; (8005554 <UpdateModeSection+0x31c>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d009      	beq.n	80052da <UpdateModeSection+0xa2>
			(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 80052c6:	4ba3      	ldr	r3, [pc, #652]	; (8005554 <UpdateModeSection+0x31c>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	b2db      	uxtb	r3, r3
	if ((gSequencerMode_2 == SEQUENCER_MODE_WAIT) ||
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d004      	beq.n	80052da <UpdateModeSection+0xa2>
			(gSequencerMode_2 == SEQUENCER_MODE_STAY_HI_Z) ) {
 80052d0:	4ba0      	ldr	r3, [pc, #640]	; (8005554 <UpdateModeSection+0x31c>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
			(gSequencerMode_2 == SEQUENCER_MODE_WAIT_HI_Z ) ||
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d105      	bne.n	80052e6 <UpdateModeSection+0xae>
		mLeds.b.Seq2Wait = 0;
 80052da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052de:	f36f 1304 	bfc	r3, #4, #1
 80052e2:	f88d 3004 	strb.w	r3, [sp, #4]
	};
	if (gSequencerMode_2 == SEQUENCER_MODE_STOP) {
 80052e6:	4b9b      	ldr	r3, [pc, #620]	; (8005554 <UpdateModeSection+0x31c>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f000 8165 	beq.w	80055bc <UpdateModeSection+0x384>
		mLeds.b.Seq2Stop = 0;
	};
	
	
	/* Determine step num for different DisplayModes*/
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 80052f2:	4b99      	ldr	r3, [pc, #612]	; (8005558 <UpdateModeSection+0x320>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 8167 	bne.w	80055ca <UpdateModeSection+0x392>
		StepNum = gSequenceStepNumber_1;
 80052fc:	4b97      	ldr	r3, [pc, #604]	; (800555c <UpdateModeSection+0x324>)
 80052fe:	7819      	ldrb	r1, [r3, #0]
 8005300:	b2c9      	uxtb	r1, r1
		Section = 0;
	}
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8005302:	4b95      	ldr	r3, [pc, #596]	; (8005558 <UpdateModeSection+0x320>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	f000 8160 	beq.w	80055ce <UpdateModeSection+0x396>
 800530e:	2500      	movs	r5, #0
		StepNum = gSequenceStepNumber_2;
		Section = 1;
	};
	if ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) {
 8005310:	4b91      	ldr	r3, [pc, #580]	; (8005558 <UpdateModeSection+0x320>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	f000 815e 	beq.w	80055d8 <UpdateModeSection+0x3a0>
		StepNum = gEditModeStepNum;
		Section = 0;
	}
	if ( gDisplayMode == DISPLAY_MODE_EDIT_2 ) {
 800531c:	4b8e      	ldr	r3, [pc, #568]	; (8005558 <UpdateModeSection+0x320>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b03      	cmp	r3, #3
 8005324:	f000 815c 	beq.w	80055e0 <UpdateModeSection+0x3a8>
		StepNum = gEditModeStepNum;
		Section = 1;
	};
	
	mStep = (uStep*) &Steps[Section][StepNum];
 8005328:	462c      	mov	r4, r5
 800532a:	460b      	mov	r3, r1
	
	mLeds.b.VoltageFull  	= ~mStep->b.FullRange;
 800532c:	eb01 1245 	add.w	r2, r1, r5, lsl #5
 8005330:	488b      	ldr	r0, [pc, #556]	; (8005560 <UpdateModeSection+0x328>)
 8005332:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005336:	78d0      	ldrb	r0, [r2, #3]
 8005338:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800533c:	f080 0001 	eor.w	r0, r0, #1
 8005340:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8005344:	f360 0682 	bfi	r6, r0, #2, #1
 8005348:	f88d 6007 	strb.w	r6, [sp, #7]
  mLeds.b.Voltage0     	= ~mStep->b.Voltage0;
 800534c:	78d0      	ldrb	r0, [r2, #3]
 800534e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8005352:	f080 0001 	eor.w	r0, r0, #1
 8005356:	b2f6      	uxtb	r6, r6
 8005358:	f360 1604 	bfi	r6, r0, #4, #1
 800535c:	f88d 6007 	strb.w	r6, [sp, #7]
  mLeds.b.Voltage2     	= ~mStep->b.Voltage2;
 8005360:	78d0      	ldrb	r0, [r2, #3]
 8005362:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8005366:	f080 0001 	eor.w	r0, r0, #1
 800536a:	b2f6      	uxtb	r6, r6
 800536c:	f360 1645 	bfi	r6, r0, #5, #1
 8005370:	f88d 6007 	strb.w	r6, [sp, #7]
  mLeds.b.Voltage4     	= ~mStep->b.Voltage4;
 8005374:	78d0      	ldrb	r0, [r2, #3]
 8005376:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800537a:	f080 0001 	eor.w	r0, r0, #1
 800537e:	b2f6      	uxtb	r6, r6
 8005380:	f360 1686 	bfi	r6, r0, #6, #1
 8005384:	f88d 6007 	strb.w	r6, [sp, #7]
  mLeds.b.Voltage6     	= ~mStep->b.Voltage6;
 8005388:	78d0      	ldrb	r0, [r2, #3]
 800538a:	ea6f 10d0 	mvn.w	r0, r0, lsr #7
 800538e:	b2f6      	uxtb	r6, r6
 8005390:	f360 16c7 	bfi	r6, r0, #7, #1
 8005394:	f88d 6007 	strb.w	r6, [sp, #7]
  mLeds.b.Voltage8     	= ~mStep->b.Voltage8;
 8005398:	7912      	ldrb	r2, [r2, #4]
 800539a:	f002 0201 	and.w	r2, r2, #1
 800539e:	f082 0201 	eor.w	r2, r2, #1
 80053a2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80053a6:	f362 0000 	bfi	r0, r2, #0, #1
 80053aa:	f88d 0006 	strb.w	r0, [sp, #6]
  if (swapped_pulses) {
 80053ae:	4a6d      	ldr	r2, [pc, #436]	; (8005564 <UpdateModeSection+0x32c>)
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	f000 8118 	beq.w	80055e8 <UpdateModeSection+0x3b0>
  mLeds.b.Pulse1       	= ~mStep->b.OutputPulse2; //hack for Gate1 Gate2 leds
 80053b8:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80053bc:	4a68      	ldr	r2, [pc, #416]	; (8005560 <UpdateModeSection+0x328>)
 80053be:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80053c2:	794a      	ldrb	r2, [r1, #5]
 80053c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80053c8:	f082 0201 	eor.w	r2, r2, #1
 80053cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80053d0:	f362 1086 	bfi	r0, r2, #6, #1
 80053d4:	f88d 0004 	strb.w	r0, [sp, #4]
  mLeds.b.Pulse2       	= ~mStep->b.OutputPulse1;
 80053d8:	794a      	ldrb	r2, [r1, #5]
 80053da:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80053de:	f082 0201 	eor.w	r2, r2, #1
 80053e2:	b2c1      	uxtb	r1, r0
 80053e4:	f362 11c7 	bfi	r1, r2, #7, #1
 80053e8:	f88d 1004 	strb.w	r1, [sp, #4]
  }
  else {
  mLeds.b.Pulse1       	= ~mStep->b.OutputPulse1;
  mLeds.b.Pulse2       	= ~mStep->b.OutputPulse2;
  }
  mLeds.b.CycleFirst   	= ~mStep->b.CycleFirst;
 80053ec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80053f0:	4a5b      	ldr	r2, [pc, #364]	; (8005560 <UpdateModeSection+0x328>)
 80053f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80053f6:	791a      	ldrb	r2, [r3, #4]
 80053f8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80053fc:	f082 0201 	eor.w	r2, r2, #1
 8005400:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005404:	f362 1104 	bfi	r1, r2, #4, #1
 8005408:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.CycleLast    	= ~mStep->b.CycleLast;
 800540c:	791a      	ldrb	r2, [r3, #4]
 800540e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8005412:	f082 0201 	eor.w	r2, r2, #1
 8005416:	b2c9      	uxtb	r1, r1
 8005418:	f362 1145 	bfi	r1, r2, #5, #1
 800541c:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.VoltageSource = ~mStep->b.VoltageSource;
 8005420:	78da      	ldrb	r2, [r3, #3]
 8005422:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8005426:	f082 0201 	eor.w	r2, r2, #1
 800542a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800542e:	f362 01c3 	bfi	r1, r2, #3, #1
 8005432:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Integration   = ~mStep->b.Sloped;
 8005436:	78da      	ldrb	r2, [r3, #3]
 8005438:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800543c:	f082 0201 	eor.w	r2, r2, #1
 8005440:	b2c9      	uxtb	r1, r1
 8005442:	f362 0141 	bfi	r1, r2, #1, #1
 8005446:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.Quantization  = ~mStep->b.Quantize;
 800544a:	78da      	ldrb	r2, [r3, #3]
 800544c:	f002 0201 	and.w	r2, r2, #1
 8005450:	f082 0201 	eor.w	r2, r2, #1
 8005454:	b2c9      	uxtb	r1, r1
 8005456:	f362 0100 	bfi	r1, r2, #0, #1
 800545a:	f88d 1007 	strb.w	r1, [sp, #7]
  mLeds.b.TimeRange0   	= ~mStep->b.TimeRange_p03;
 800545e:	791a      	ldrb	r2, [r3, #4]
 8005460:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8005464:	f082 0201 	eor.w	r2, r2, #1
 8005468:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800546c:	f362 1186 	bfi	r1, r2, #6, #1
 8005470:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.TimeRange1   	= ~mStep->b.TimeRange_p3;
 8005474:	791a      	ldrb	r2, [r3, #4]
 8005476:	ea6f 12d2 	mvn.w	r2, r2, lsr #7
 800547a:	b2c9      	uxtb	r1, r1
 800547c:	f362 11c7 	bfi	r1, r2, #7, #1
 8005480:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.TimeRange2   	= ~mStep->b.TimeRange_3;
 8005484:	795a      	ldrb	r2, [r3, #5]
 8005486:	f002 0201 	and.w	r2, r2, #1
 800548a:	f082 0201 	eor.w	r2, r2, #1
 800548e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8005492:	f362 0100 	bfi	r1, r2, #0, #1
 8005496:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.TimeRange3   	= ~mStep->b.TimeRange_30;
 800549a:	795a      	ldrb	r2, [r3, #5]
 800549c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80054a0:	f082 0201 	eor.w	r2, r2, #1
 80054a4:	b2c9      	uxtb	r1, r1
 80054a6:	f362 0141 	bfi	r1, r2, #1, #1
 80054aa:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.TimeSource   	= ~mStep->b.TimeSource;
 80054ae:	795a      	ldrb	r2, [r3, #5]
 80054b0:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80054b4:	f082 0201 	eor.w	r2, r2, #1
 80054b8:	b2c9      	uxtb	r1, r1
 80054ba:	f362 0182 	bfi	r1, r2, #2, #1
 80054be:	f88d 1005 	strb.w	r1, [sp, #5]
  mLeds.b.OPStop       	= ~mStep->b.OpModeSTOP;
 80054c2:	791a      	ldrb	r2, [r3, #4]
 80054c4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80054c8:	f082 0201 	eor.w	r2, r2, #1
 80054cc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80054d0:	f362 0141 	bfi	r1, r2, #1, #1
 80054d4:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.OPSustain    	= ~mStep->b.OpModeSUSTAIN;
 80054d8:	791a      	ldrb	r2, [r3, #4]
 80054da:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80054de:	f082 0201 	eor.w	r2, r2, #1
 80054e2:	b2c9      	uxtb	r1, r1
 80054e4:	f362 0182 	bfi	r1, r2, #2, #1
 80054e8:	f88d 1006 	strb.w	r1, [sp, #6]
  mLeds.b.OPEnable     	= ~mStep->b.OpModeENABLE;
 80054ec:	791b      	ldrb	r3, [r3, #4]
 80054ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054f2:	f083 0301 	eor.w	r3, r3, #1
 80054f6:	b2ca      	uxtb	r2, r1
 80054f8:	f363 02c3 	bfi	r2, r3, #3, #1
 80054fc:	f88d 2006 	strb.w	r2, [sp, #6]
	
	if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8005500:	4b15      	ldr	r3, [pc, #84]	; (8005558 <UpdateModeSection+0x320>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b04      	cmp	r3, #4
 8005508:	d00f      	beq.n	800552a <UpdateModeSection+0x2f2>
 800550a:	4b13      	ldr	r3, [pc, #76]	; (8005558 <UpdateModeSection+0x320>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b05      	cmp	r3, #5
 8005512:	d00a      	beq.n	800552a <UpdateModeSection+0x2f2>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 8005514:	4b10      	ldr	r3, [pc, #64]	; (8005558 <UpdateModeSection+0x320>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 800551a:	2b06      	cmp	r3, #6
 800551c:	d005      	beq.n	800552a <UpdateModeSection+0x2f2>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) {
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <UpdateModeSection+0x320>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b07      	cmp	r3, #7
 8005526:	f040 809d 	bne.w	8005664 <UpdateModeSection+0x42c>
		mLeds.value[0] = 0xFF;
 800552a:	23ff      	movs	r3, #255	; 0xff
 800552c:	f88d 3004 	strb.w	r3, [sp, #4]
		mLeds.value[1] = 0xFF;
 8005530:	f88d 3005 	strb.w	r3, [sp, #5]
		mLeds.value[2] = 0xFF;
 8005534:	f88d 3006 	strb.w	r3, [sp, #6]
		mLeds.value[3] = 0xFF;
 8005538:	f88d 3007 	strb.w	r3, [sp, #7]
					
		if((gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2))
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <UpdateModeSection+0x320>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b04      	cmp	r3, #4
 8005544:	d06b      	beq.n	800561e <UpdateModeSection+0x3e6>
 8005546:	4b04      	ldr	r3, [pc, #16]	; (8005558 <UpdateModeSection+0x320>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e00c      	b.n	8005568 <UpdateModeSection+0x330>
 800554e:	bf00      	nop
 8005550:	200002c1 	.word	0x200002c1
 8005554:	200002c2 	.word	0x200002c2
 8005558:	200002b0 	.word	0x200002b0
 800555c:	200002bf 	.word	0x200002bf
 8005560:	20000958 	.word	0x20000958
 8005564:	200002da 	.word	0x200002da
 8005568:	2b05      	cmp	r3, #5
 800556a:	d058      	beq.n	800561e <UpdateModeSection+0x3e6>
			{
				 mLeds.b.Seq1Wait = 1;
			}
			else save_counter = 0;
		}
		else if((gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2))
 800556c:	4b66      	ldr	r3, [pc, #408]	; (8005708 <UpdateModeSection+0x4d0>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b06      	cmp	r3, #6
 8005574:	d004      	beq.n	8005580 <UpdateModeSection+0x348>
 8005576:	4b64      	ldr	r3, [pc, #400]	; (8005708 <UpdateModeSection+0x4d0>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b07      	cmp	r3, #7
 800557e:	d163      	bne.n	8005648 <UpdateModeSection+0x410>
		{
			mLeds.b.Seq1Wait = 1;
 8005580:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	f88d 3004 	strb.w	r3, [sp, #4]
			load_counter++;
 800558c:	4b5f      	ldr	r3, [pc, #380]	; (800570c <UpdateModeSection+0x4d4>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	3201      	adds	r2, #1
 8005592:	601a      	str	r2, [r3, #0]
			if(load_counter < 1500)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	f240 53db 	movw	r3, #1499	; 0x5db
 800559a:	429a      	cmp	r2, r3
 800559c:	f200 809c 	bhi.w	80056d8 <UpdateModeSection+0x4a0>
			{
				 mLeds.b.Seq2Wait = 0;
 80055a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055a4:	f36f 1304 	bfc	r3, #4, #1
 80055a8:	f88d 3004 	strb.w	r3, [sp, #4]
 80055ac:	e04c      	b.n	8005648 <UpdateModeSection+0x410>
		mLeds.b.Seq1Stop = 0;
 80055ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055b2:	f36f 0300 	bfc	r3, #0, #1
 80055b6:	f88d 3004 	strb.w	r3, [sp, #4]
 80055ba:	e671      	b.n	80052a0 <UpdateModeSection+0x68>
		mLeds.b.Seq2Stop = 0;
 80055bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055c0:	f36f 03c3 	bfc	r3, #3, #1
 80055c4:	f88d 3004 	strb.w	r3, [sp, #4]
 80055c8:	e693      	b.n	80052f2 <UpdateModeSection+0xba>
	unsigned char StepNum = 0, Section = 0;
 80055ca:	2100      	movs	r1, #0
 80055cc:	e699      	b.n	8005302 <UpdateModeSection+0xca>
		StepNum = gSequenceStepNumber_2;
 80055ce:	4b50      	ldr	r3, [pc, #320]	; (8005710 <UpdateModeSection+0x4d8>)
 80055d0:	7819      	ldrb	r1, [r3, #0]
 80055d2:	b2c9      	uxtb	r1, r1
		Section = 1;
 80055d4:	2501      	movs	r5, #1
 80055d6:	e69b      	b.n	8005310 <UpdateModeSection+0xd8>
		StepNum = gEditModeStepNum;
 80055d8:	4b4e      	ldr	r3, [pc, #312]	; (8005714 <UpdateModeSection+0x4dc>)
 80055da:	7819      	ldrb	r1, [r3, #0]
		Section = 0;
 80055dc:	2500      	movs	r5, #0
 80055de:	e69d      	b.n	800531c <UpdateModeSection+0xe4>
		StepNum = gEditModeStepNum;
 80055e0:	4b4c      	ldr	r3, [pc, #304]	; (8005714 <UpdateModeSection+0x4dc>)
 80055e2:	7819      	ldrb	r1, [r3, #0]
		Section = 1;
 80055e4:	2501      	movs	r5, #1
 80055e6:	e69f      	b.n	8005328 <UpdateModeSection+0xf0>
  mLeds.b.Pulse1       	= ~mStep->b.OutputPulse1;
 80055e8:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80055ec:	4a4a      	ldr	r2, [pc, #296]	; (8005718 <UpdateModeSection+0x4e0>)
 80055ee:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80055f2:	794a      	ldrb	r2, [r1, #5]
 80055f4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80055f8:	f082 0201 	eor.w	r2, r2, #1
 80055fc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005600:	f362 1086 	bfi	r0, r2, #6, #1
 8005604:	f88d 0004 	strb.w	r0, [sp, #4]
  mLeds.b.Pulse2       	= ~mStep->b.OutputPulse2;
 8005608:	794a      	ldrb	r2, [r1, #5]
 800560a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800560e:	f082 0201 	eor.w	r2, r2, #1
 8005612:	b2c1      	uxtb	r1, r0
 8005614:	f362 11c7 	bfi	r1, r2, #7, #1
 8005618:	f88d 1004 	strb.w	r1, [sp, #4]
 800561c:	e6e6      	b.n	80053ec <UpdateModeSection+0x1b4>
			mLeds.b.Seq2Wait = 1;
 800561e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005622:	f043 0310 	orr.w	r3, r3, #16
 8005626:	f88d 3004 	strb.w	r3, [sp, #4]
			save_counter++;
 800562a:	4b3c      	ldr	r3, [pc, #240]	; (800571c <UpdateModeSection+0x4e4>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	3201      	adds	r2, #1
 8005630:	601a      	str	r2, [r3, #0]
			if(save_counter < 1500)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	f240 53db 	movw	r3, #1499	; 0x5db
 8005638:	429a      	cmp	r2, r3
 800563a:	d83c      	bhi.n	80056b6 <UpdateModeSection+0x47e>
				 mLeds.b.Seq1Wait = 0;
 800563c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005640:	f36f 0341 	bfc	r3, #1, #1
 8005644:	f88d 3004 	strb.w	r3, [sp, #4]
			else load_counter = 0;
			
			
		}
			
		if(!Is_Expander_Present())
 8005648:	f7fc fc87 	bl	8001f5a <Is_Expander_Present>
 800564c:	b950      	cbnz	r0, 8005664 <UpdateModeSection+0x42c>
		{	
			if(bank == 1) mLeds.value[0] &= ~(1 << 6);
 800564e:	4b34      	ldr	r3, [pc, #208]	; (8005720 <UpdateModeSection+0x4e8>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d050      	beq.n	80056fa <UpdateModeSection+0x4c2>
			else mLeds.value[0] &= ~(1 << 7);
 8005658:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800565c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005660:	f88d 3004 	strb.w	r3, [sp, #4]
		}
	};
	
	//Send data to leds
	LEDS_modes_SendStruct(&mLeds);
 8005664:	a801      	add	r0, sp, #4
 8005666:	f7fc fce5 	bl	8002034 <LEDS_modes_SendStruct>
	
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_1) ||
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <UpdateModeSection+0x4d0>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	b123      	cbz	r3, 800567a <UpdateModeSection+0x442>
			(gDisplayMode == DISPLAY_MODE_EDIT_1) ) {
 8005670:	4b25      	ldr	r3, [pc, #148]	; (8005708 <UpdateModeSection+0x4d0>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_1) ||
 8005676:	2b02      	cmp	r3, #2
 8005678:	d108      	bne.n	800568c <UpdateModeSection+0x454>
		DISPLAY_LED_I_ON;
 800567a:	4c2a      	ldr	r4, [pc, #168]	; (8005724 <UpdateModeSection+0x4ec>)
 800567c:	2140      	movs	r1, #64	; 0x40
 800567e:	4620      	mov	r0, r4
 8005680:	f7fb fd45 	bl	800110e <GPIO_SetBits>
		DISPLAY_LED_II_OFF;
 8005684:	2180      	movs	r1, #128	; 0x80
 8005686:	4620      	mov	r0, r4
 8005688:	f7fb fd43 	bl	8001112 <GPIO_ResetBits>
	};
			
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_2) ||
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <UpdateModeSection+0x4d0>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b01      	cmp	r3, #1
 8005694:	d004      	beq.n	80056a0 <UpdateModeSection+0x468>
			(gDisplayMode == DISPLAY_MODE_EDIT_2) ) {
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <UpdateModeSection+0x4d0>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b2db      	uxtb	r3, r3
	if ( (gDisplayMode == DISPLAY_MODE_VIEW_2) ||
 800569c:	2b03      	cmp	r3, #3
 800569e:	d108      	bne.n	80056b2 <UpdateModeSection+0x47a>
		DISPLAY_LED_II_ON;
 80056a0:	4c20      	ldr	r4, [pc, #128]	; (8005724 <UpdateModeSection+0x4ec>)
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7fb fd32 	bl	800110e <GPIO_SetBits>
		DISPLAY_LED_I_OFF;
 80056aa:	2140      	movs	r1, #64	; 0x40
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7fb fd30 	bl	8001112 <GPIO_ResetBits>
	};
};
 80056b2:	b002      	add	sp, #8
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
			else if(save_counter < 3000)
 80056b6:	4b19      	ldr	r3, [pc, #100]	; (800571c <UpdateModeSection+0x4e4>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80056be:	429a      	cmp	r2, r3
 80056c0:	d806      	bhi.n	80056d0 <UpdateModeSection+0x498>
				 mLeds.b.Seq1Wait = 1;
 80056c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056c6:	f043 0302 	orr.w	r3, r3, #2
 80056ca:	f88d 3004 	strb.w	r3, [sp, #4]
 80056ce:	e7bb      	b.n	8005648 <UpdateModeSection+0x410>
			else save_counter = 0;
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <UpdateModeSection+0x4e4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e7b7      	b.n	8005648 <UpdateModeSection+0x410>
			else if(load_counter < 3000)
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <UpdateModeSection+0x4d4>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d806      	bhi.n	80056f2 <UpdateModeSection+0x4ba>
				 mLeds.b.Seq2Wait = 1;
 80056e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056e8:	f043 0310 	orr.w	r3, r3, #16
 80056ec:	f88d 3004 	strb.w	r3, [sp, #4]
 80056f0:	e7aa      	b.n	8005648 <UpdateModeSection+0x410>
			else load_counter = 0;
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <UpdateModeSection+0x4d4>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e7a6      	b.n	8005648 <UpdateModeSection+0x410>
			if(bank == 1) mLeds.value[0] &= ~(1 << 6);
 80056fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005702:	f88d 3004 	strb.w	r3, [sp, #4]
 8005706:	e7ad      	b.n	8005664 <UpdateModeSection+0x42c>
 8005708:	200002b0 	.word	0x200002b0
 800570c:	200002d0 	.word	0x200002d0
 8005710:	200002c0 	.word	0x200002c0
 8005714:	200002b1 	.word	0x200002b1
 8005718:	20000958 	.word	0x20000958
 800571c:	200002d4 	.word	0x200002d4
 8005720:	20000270 	.word	0x20000270
 8005724:	40020000 	.word	0x40020000

08005728 <UpdateStepSection>:

/*
	Steps section leds update function
*/
void UpdateStepSection(void)
{
 8005728:	b508      	push	{r3, lr}
	if ( gDisplayMode == DISPLAY_MODE_VIEW_1 ) {
 800572a:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <UpdateStepSection+0x6c>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b33b      	cbz	r3, 8005780 <UpdateStepSection+0x58>
		LED_STEP_LightStep(gSequenceStepNumber_1);
	};
	if ( gDisplayMode == DISPLAY_MODE_VIEW_2 ) {
 8005730:	4b18      	ldr	r3, [pc, #96]	; (8005794 <UpdateStepSection+0x6c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d027      	beq.n	800578a <UpdateStepSection+0x62>
		LED_STEP_LightStep(gSequenceStepNumber_2);
	};
	if ( ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) ||
 800573a:	4b16      	ldr	r3, [pc, #88]	; (8005794 <UpdateStepSection+0x6c>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d018      	beq.n	8005776 <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_EDIT_2 ) ||
 8005744:	4b13      	ldr	r3, [pc, #76]	; (8005794 <UpdateStepSection+0x6c>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b2db      	uxtb	r3, r3
	if ( ( gDisplayMode == DISPLAY_MODE_EDIT_1 ) ||
 800574a:	2b03      	cmp	r3, #3
 800574c:	d013      	beq.n	8005776 <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_SAVE_1 ) ||
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <UpdateStepSection+0x6c>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_EDIT_2 ) ||
 8005754:	2b04      	cmp	r3, #4
 8005756:	d00e      	beq.n	8005776 <UpdateStepSection+0x4e>
		( gDisplayMode == DISPLAY_MODE_SAVE_2 ) ||
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <UpdateStepSection+0x6c>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_SAVE_1 ) ||
 800575e:	2b05      	cmp	r3, #5
 8005760:	d009      	beq.n	8005776 <UpdateStepSection+0x4e>
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || 
 8005762:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <UpdateStepSection+0x6c>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b2db      	uxtb	r3, r3
		( gDisplayMode == DISPLAY_MODE_SAVE_2 ) ||
 8005768:	2b06      	cmp	r3, #6
 800576a:	d004      	beq.n	8005776 <UpdateStepSection+0x4e>
		(gDisplayMode == DISPLAY_MODE_LOAD_2)
 800576c:	4b09      	ldr	r3, [pc, #36]	; (8005794 <UpdateStepSection+0x6c>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	b2db      	uxtb	r3, r3
		(gDisplayMode == DISPLAY_MODE_LOAD_1) || 
 8005772:	2b07      	cmp	r3, #7
 8005774:	d103      	bne.n	800577e <UpdateStepSection+0x56>
		) {
		LED_STEP_LightStep(gEditModeStepNum);
 8005776:	4b08      	ldr	r3, [pc, #32]	; (8005798 <UpdateStepSection+0x70>)
 8005778:	7818      	ldrb	r0, [r3, #0]
 800577a:	f7fc fcf5 	bl	8002168 <LED_STEP_LightStep>
	};
};
 800577e:	bd08      	pop	{r3, pc}
		LED_STEP_LightStep(gSequenceStepNumber_1);
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <UpdateStepSection+0x74>)
 8005782:	7818      	ldrb	r0, [r3, #0]
 8005784:	f7fc fcf0 	bl	8002168 <LED_STEP_LightStep>
 8005788:	e7d2      	b.n	8005730 <UpdateStepSection+0x8>
		LED_STEP_LightStep(gSequenceStepNumber_2);
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <UpdateStepSection+0x78>)
 800578c:	7818      	ldrb	r0, [r3, #0]
 800578e:	f7fc fceb 	bl	8002168 <LED_STEP_LightStep>
 8005792:	e7d2      	b.n	800573a <UpdateStepSection+0x12>
 8005794:	200002b0 	.word	0x200002b0
 8005798:	200002b1 	.word	0x200002b1
 800579c:	200002bf 	.word	0x200002bf
 80057a0:	200002c0 	.word	0x200002c0

080057a4 <PermutePulses>:

void PermutePulses(void)
{
 80057a4:	b530      	push	{r4, r5, lr}
 80057a6:	b083      	sub	sp, #12
  unsigned int i=0; 
  uButtons myButtons;
  uLeds mLeds;
  mLeds.value[0]  	= 0xFF;
 80057a8:	23ff      	movs	r3, #255	; 0xff
 80057aa:	f88d 3004 	strb.w	r3, [sp, #4]
  mLeds.value[1]  	= 0xFF;
 80057ae:	f88d 3005 	strb.w	r3, [sp, #5]
  mLeds.value[2]  	= 0xFF;
 80057b2:	f88d 3006 	strb.w	r3, [sp, #6]
  mLeds.value[3]  	= 0xFF;
 80057b6:	f88d 3007 	strb.w	r3, [sp, #7]
  DISPLAY_LED_I_OFF;
 80057ba:	4c2a      	ldr	r4, [pc, #168]	; (8005864 <PermutePulses+0xc0>)
 80057bc:	2140      	movs	r1, #64	; 0x40
 80057be:	4620      	mov	r0, r4
 80057c0:	f7fb fca7 	bl	8001112 <GPIO_ResetBits>
  DISPLAY_LED_II_OFF;
 80057c4:	2180      	movs	r1, #128	; 0x80
 80057c6:	4620      	mov	r0, r4
 80057c8:	f7fb fca3 	bl	8001112 <GPIO_ResetBits>

  myButtons.value = GetButton();
 80057cc:	f7fc f956 	bl	8001a7c <GetButton>
 80057d0:	4604      	mov	r4, r0
  unsigned int i=0; 
 80057d2:	2500      	movs	r5, #0
  // Flash pulse 1 until one of the switches is activated
  while (myButtons.b.Pulse1On && myButtons.b.Pulse2On) {
 80057d4:	e00e      	b.n	80057f4 <PermutePulses+0x50>
    i++;
    if (i<1200) {
        mLeds.b.Pulse1 = 1;
    }
    else if (i<2400) {
 80057d6:	f5b5 6f16 	cmp.w	r5, #2400	; 0x960
 80057da:	d21b      	bcs.n	8005814 <PermutePulses+0x70>
              mLeds.b.Pulse1 = 0;
 80057dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80057e0:	f36f 1386 	bfc	r3, #6, #1
 80057e4:	f88d 3004 	strb.w	r3, [sp, #4]
    }
    else {
      i = 0; 
    }
    LEDS_modes_SendStruct(&mLeds);
 80057e8:	a801      	add	r0, sp, #4
 80057ea:	f7fc fc23 	bl	8002034 <LEDS_modes_SendStruct>
    myButtons.value = GetButton();
 80057ee:	f7fc f945 	bl	8001a7c <GetButton>
 80057f2:	4604      	mov	r4, r0
  while (myButtons.b.Pulse1On && myButtons.b.Pulse2On) {
 80057f4:	0e23      	lsrs	r3, r4, #24
 80057f6:	f003 0250 	and.w	r2, r3, #80	; 0x50
 80057fa:	2a50      	cmp	r2, #80	; 0x50
 80057fc:	d10c      	bne.n	8005818 <PermutePulses+0x74>
    i++;
 80057fe:	3501      	adds	r5, #1
    if (i<1200) {
 8005800:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8005804:	d2e7      	bcs.n	80057d6 <PermutePulses+0x32>
        mLeds.b.Pulse1 = 1;
 8005806:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800580a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580e:	f88d 3004 	strb.w	r3, [sp, #4]
 8005812:	e7e9      	b.n	80057e8 <PermutePulses+0x44>
      i = 0; 
 8005814:	2500      	movs	r5, #0
 8005816:	e7e7      	b.n	80057e8 <PermutePulses+0x44>
  }
  if (!myButtons.b.Pulse1On) // user is happy with pulse 1 
 8005818:	f013 0f10 	tst.w	r3, #16
 800581c:	d112      	bne.n	8005844 <PermutePulses+0xa0>
    {
      swapped_pulses =0; 
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <PermutePulses+0xc4>)
 8005820:	2200      	movs	r2, #0
 8005822:	701a      	strb	r2, [r3, #0]
    }
  else { // user is not happy with pulse 1 so swap
    swapped_pulses = 1;
  }
  // Write selection to memory, reset LEDs and return
  CAT25512_write_block(100*sizeof(Steps)+sizeof(CalConstants),&swapped_pulses,1);
 8005824:	2201      	movs	r2, #1
 8005826:	4910      	ldr	r1, [pc, #64]	; (8005868 <PermutePulses+0xc4>)
 8005828:	f64c 0020 	movw	r0, #51232	; 0xc820
 800582c:	f7fb ff9a 	bl	8001764 <CAT25512_write_block>
  mLeds.b.Pulse1=0;
 8005830:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005834:	f36f 1386 	bfc	r3, #6, #1
 8005838:	a802      	add	r0, sp, #8
 800583a:	f800 3d04 	strb.w	r3, [r0, #-4]!
  LEDS_modes_SendStruct(&mLeds);
 800583e:	f7fc fbf9 	bl	8002034 <LEDS_modes_SendStruct>
  while (!(myButtons.b.Pulse1On && myButtons.b.Pulse2On)) {
 8005842:	e006      	b.n	8005852 <PermutePulses+0xae>
    swapped_pulses = 1;
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <PermutePulses+0xc4>)
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e7eb      	b.n	8005824 <PermutePulses+0x80>
    myButtons.value = GetButton(); 
 800584c:	f7fc f916 	bl	8001a7c <GetButton>
 8005850:	4604      	mov	r4, r0
  while (!(myButtons.b.Pulse1On && myButtons.b.Pulse2On)) {
 8005852:	f3c4 6407 	ubfx	r4, r4, #24, #8
 8005856:	f004 0450 	and.w	r4, r4, #80	; 0x50
 800585a:	2c50      	cmp	r4, #80	; 0x50
 800585c:	d1f6      	bne.n	800584c <PermutePulses+0xa8>
  }
}
 800585e:	b003      	add	sp, #12
 8005860:	bd30      	pop	{r4, r5, pc}
 8005862:	bf00      	nop
 8005864:	40020000 	.word	0x40020000
 8005868:	200002da 	.word	0x200002da

0800586c <Calibration>:



void Calibration(void){
 800586c:	b530      	push	{r4, r5, lr}
 800586e:	b083      	sub	sp, #12
  //printf("%d \n ",__LINE__);
	unsigned int i=0;
	uButtons myButtons;
	uLeds mLeds;	
	myButtons.value = GetButton();
 8005870:	f7fc f904 	bl	8001a7c <GetButton>
 8005874:	460d      	mov	r5, r1
	
	mLeds.value[0]  	= 0xFF;
 8005876:	23ff      	movs	r3, #255	; 0xff
 8005878:	f88d 3004 	strb.w	r3, [sp, #4]
	mLeds.value[1]  	= 0xFF;
 800587c:	f88d 3005 	strb.w	r3, [sp, #5]
	mLeds.value[2]  	= 0xFF;
 8005880:	f88d 3006 	strb.w	r3, [sp, #6]
	mLeds.value[3]  	= 0xFF;
 8005884:	f88d 3007 	strb.w	r3, [sp, #7]
	DISPLAY_LED_II_OFF;
 8005888:	4c35      	ldr	r4, [pc, #212]	; (8005960 <Calibration+0xf4>)
 800588a:	2180      	movs	r1, #128	; 0x80
 800588c:	4620      	mov	r0, r4
 800588e:	f7fb fc40 	bl	8001112 <GPIO_ResetBits>
	DISPLAY_LED_I_OFF;
 8005892:	2140      	movs	r1, #64	; 0x40
 8005894:	4620      	mov	r0, r4
 8005896:	f7fb fc3c 	bl	8001112 <GPIO_ResetBits>
	unsigned int i=0;
 800589a:	2400      	movs	r4, #0
	
	while(myButtons.b.StageAddress2Advance)
 800589c:	e014      	b.n	80058c8 <Calibration+0x5c>
			mLeds.b.Seq1Stop = 0;
			mLeds.b.Seq2Run = 1;
			mLeds.b.Seq2Wait = 1;
			mLeds.b.Seq2Stop = 0;
		}
		else if(i < 4000)
 800589e:	f5b4 6f7a 	cmp.w	r4, #4000	; 0xfa0
 80058a2:	d225      	bcs.n	80058f0 <Calibration+0x84>
		{
			mLeds.b.Seq1Run = 0;
 80058a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Wait = 1;
 80058a8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			mLeds.b.Seq1Stop = 1;
			mLeds.b.Seq2Run = 0;
 80058ac:	f043 0303 	orr.w	r3, r3, #3
			mLeds.b.Seq2Wait = 1;
 80058b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
			mLeds.b.Seq2Stop = 1;
 80058b4:	f043 0318 	orr.w	r3, r3, #24
 80058b8:	f88d 3004 	strb.w	r3, [sp, #4]
			mLeds.b.Seq2Wait = 0;
			mLeds.b.Seq2Stop = 1;
		}
		else i = 0;
		
		LEDS_modes_SendStruct(&mLeds);
 80058bc:	a801      	add	r0, sp, #4
 80058be:	f7fc fbb9 	bl	8002034 <LEDS_modes_SendStruct>
		myButtons.value = GetButton();
 80058c2:	f7fc f8db 	bl	8001a7c <GetButton>
 80058c6:	460d      	mov	r5, r1
	while(myButtons.b.StageAddress2Advance)
 80058c8:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80058cc:	d025      	beq.n	800591a <Calibration+0xae>
		i++;
 80058ce:	3401      	adds	r4, #1
		if(i < 2000)
 80058d0:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80058d4:	d2e3      	bcs.n	800589e <Calibration+0x32>
			mLeds.b.Seq1Run = 1;
 80058d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Stop = 0;
 80058da:	f043 0306 	orr.w	r3, r3, #6
			mLeds.b.Seq2Run = 1;
 80058de:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
			mLeds.b.Seq2Stop = 0;
 80058e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80058e6:	f36f 03c3 	bfc	r3, #3, #1
 80058ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80058ee:	e7e5      	b.n	80058bc <Calibration+0x50>
		else if(i < 6000)
 80058f0:	f241 736f 	movw	r3, #5999	; 0x176f
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d80e      	bhi.n	8005916 <Calibration+0xaa>
			mLeds.b.Seq1Run = 1;
 80058f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
			mLeds.b.Seq1Wait = 0;
 80058fc:	f043 0304 	orr.w	r3, r3, #4
			mLeds.b.Seq1Stop = 1;
 8005900:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
			mLeds.b.Seq2Wait = 0;
 8005904:	f043 0321 	orr.w	r3, r3, #33	; 0x21
			mLeds.b.Seq2Stop = 1;
 8005908:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800590c:	f043 0308 	orr.w	r3, r3, #8
 8005910:	f88d 3004 	strb.w	r3, [sp, #4]
 8005914:	e7d2      	b.n	80058bc <Calibration+0x50>
		else i = 0;
 8005916:	2400      	movs	r4, #0
 8005918:	e7d0      	b.n	80058bc <Calibration+0x50>
	}
	//Measure external inputs
	//printf("Measure %d \n ",__LINE__);

	for(i = 0; i < 8 ; i++)
 800591a:	2300      	movs	r3, #0
 800591c:	e000      	b.n	8005920 <Calibration+0xb4>
 800591e:	3301      	adds	r3, #1
 8005920:	2b07      	cmp	r3, #7
 8005922:	d810      	bhi.n	8005946 <Calibration+0xda>
	{
		CalConstants[i] = AddData[i];
 8005924:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <Calibration+0xf8>)
 8005926:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800592a:	b292      	uxth	r2, r2
 800592c:	490e      	ldr	r1, [pc, #56]	; (8005968 <Calibration+0xfc>)
 800592e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(CalConstants[i] < 100) CalConstants[i] = 4095;
 8005932:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8005936:	2a63      	cmp	r2, #99	; 0x63
 8005938:	d8f1      	bhi.n	800591e <Calibration+0xb2>
 800593a:	460a      	mov	r2, r1
 800593c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8005940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005944:	e7eb      	b.n	800591e <Calibration+0xb2>
		//printf ("\n CalConstants[%d] %d \n", i,CalConstants[i]);

	};
	//
	ADCPause();
 8005946:	f7fc fd1f 	bl	8002388 <ADCPause>
	//printf("ADCPause %d \n ",__LINE__);
	//Store calibration constants
	CAT25512_write_block(100*sizeof(Steps), (unsigned char *) CalConstants, sizeof(CalConstants));
 800594a:	2220      	movs	r2, #32
 800594c:	4906      	ldr	r1, [pc, #24]	; (8005968 <Calibration+0xfc>)
 800594e:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8005952:	f7fb ff07 	bl	8001764 <CAT25512_write_block>
	mADC_init();
 8005956:	f7fc fc61 	bl	800221c <mADC_init>
		else i = 0;
		LEDS_modes_SendStruct(&mLeds);
		myButtons.value = GetButton();
	}

}
 800595a:	b003      	add	sp, #12
 800595c:	bd30      	pop	{r4, r5, pc}
 800595e:	bf00      	nop
 8005960:	40020000 	.word	0x40020000
 8005964:	20000838 	.word	0x20000838
 8005968:	20000250 	.word	0x20000250

0800596c <delay_ms>:




void delay_ms(unsigned int ms)
{
 800596c:	b510      	push	{r4, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 8005972:	a801      	add	r0, sp, #4
 8005974:	f7fb fbe6 	bl	8001144 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000)*ms;
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	4a08      	ldr	r2, [pc, #32]	; (800599c <delay_ms+0x30>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	0b5b      	lsrs	r3, r3, #13
 8005982:	fb04 f303 	mul.w	r3, r4, r3
 8005986:	9305      	str	r3, [sp, #20]
	for (; nCount!=0; nCount--);
 8005988:	e002      	b.n	8005990 <delay_ms+0x24>
 800598a:	9b05      	ldr	r3, [sp, #20]
 800598c:	3b01      	subs	r3, #1
 800598e:	9305      	str	r3, [sp, #20]
 8005990:	9b05      	ldr	r3, [sp, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f9      	bne.n	800598a <delay_ms+0x1e>
}
 8005996:	b006      	add	sp, #24
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	d1b71759 	.word	0xd1b71759

080059a0 <TIM6_DAC_IRQHandler>:
{
 80059a0:	b538      	push	{r3, r4, r5, lr}
	TIM6->SR = (uint16_t) ~TIM_IT_Update;	
 80059a2:	4b7b      	ldr	r3, [pc, #492]	; (8005b90 <TIM6_DAC_IRQHandler+0x1f0>)
 80059a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059a8:	821a      	strh	r2, [r3, #16]
	myButtons.value = GetButton();
 80059aa:	f7fc f867 	bl	8001a7c <GetButton>
	if(clear_counter1 < 30 && clear_counter2 < 30)
 80059ae:	4b79      	ldr	r3, [pc, #484]	; (8005b94 <TIM6_DAC_IRQHandler+0x1f4>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b1d      	cmp	r3, #29
 80059b4:	d82d      	bhi.n	8005a12 <TIM6_DAC_IRQHandler+0x72>
 80059b6:	4a78      	ldr	r2, [pc, #480]	; (8005b98 <TIM6_DAC_IRQHandler+0x1f8>)
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	2a1d      	cmp	r2, #29
 80059bc:	d829      	bhi.n	8005a12 <TIM6_DAC_IRQHandler+0x72>
 80059be:	b2c0      	uxtb	r0, r0
		if(!myButtons.b.ClearUp || !myButtons.b.ClearDown) 
 80059c0:	f000 0103 	and.w	r1, r0, #3
 80059c4:	2903      	cmp	r1, #3
 80059c6:	d014      	beq.n	80059f2 <TIM6_DAC_IRQHandler+0x52>
			if(!myButtons.b.ClearUp) clear_counter1++;
 80059c8:	f010 0f01 	tst.w	r0, #1
 80059cc:	d109      	bne.n	80059e2 <TIM6_DAC_IRQHandler+0x42>
 80059ce:	3301      	adds	r3, #1
 80059d0:	4970      	ldr	r1, [pc, #448]	; (8005b94 <TIM6_DAC_IRQHandler+0x1f4>)
 80059d2:	700b      	strb	r3, [r1, #0]
			if(!myButtons.b.ClearDown) clear_counter2++;
 80059d4:	f010 0f02 	tst.w	r0, #2
 80059d8:	d107      	bne.n	80059ea <TIM6_DAC_IRQHandler+0x4a>
 80059da:	3201      	adds	r2, #1
 80059dc:	4b6e      	ldr	r3, [pc, #440]	; (8005b98 <TIM6_DAC_IRQHandler+0x1f8>)
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e01d      	b.n	8005a1e <TIM6_DAC_IRQHandler+0x7e>
			else clear_counter1 = 0;
 80059e2:	4b6c      	ldr	r3, [pc, #432]	; (8005b94 <TIM6_DAC_IRQHandler+0x1f4>)
 80059e4:	2100      	movs	r1, #0
 80059e6:	7019      	strb	r1, [r3, #0]
 80059e8:	e7f4      	b.n	80059d4 <TIM6_DAC_IRQHandler+0x34>
			else clear_counter2 = 0;
 80059ea:	4b6b      	ldr	r3, [pc, #428]	; (8005b98 <TIM6_DAC_IRQHandler+0x1f8>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e015      	b.n	8005a1e <TIM6_DAC_IRQHandler+0x7e>
			clear_counter1 = 0;
 80059f2:	2100      	movs	r1, #0
 80059f4:	4b67      	ldr	r3, [pc, #412]	; (8005b94 <TIM6_DAC_IRQHandler+0x1f4>)
 80059f6:	7019      	strb	r1, [r3, #0]
			clear_counter2 = 0;
 80059f8:	4b67      	ldr	r3, [pc, #412]	; (8005b98 <TIM6_DAC_IRQHandler+0x1f8>)
 80059fa:	7019      	strb	r1, [r3, #0]
			TIM_SetCounter(TIM6, 0x00);
 80059fc:	4c64      	ldr	r4, [pc, #400]	; (8005b90 <TIM6_DAC_IRQHandler+0x1f0>)
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7fb fd5f 	bl	80014c2 <TIM_SetCounter>
			TIM6->CR1 &= ~TIM_CR1_CEN;
 8005a04:	8823      	ldrh	r3, [r4, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	8023      	strh	r3, [r4, #0]
 8005a10:	e005      	b.n	8005a1e <TIM6_DAC_IRQHandler+0x7e>
	else if(clear_counter1 == 30 || clear_counter2 == 30)
 8005a12:	2b1e      	cmp	r3, #30
 8005a14:	d004      	beq.n	8005a20 <TIM6_DAC_IRQHandler+0x80>
 8005a16:	4b60      	ldr	r3, [pc, #384]	; (8005b98 <TIM6_DAC_IRQHandler+0x1f8>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b1e      	cmp	r3, #30
 8005a1c:	d000      	beq.n	8005a20 <TIM6_DAC_IRQHandler+0x80>
};
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
		LED_STEP_SendWord(0x0000);
 8005a20:	2000      	movs	r0, #0
 8005a22:	f7fc fb89 	bl	8002138 <LED_STEP_SendWord>
		delay_ms(500);
 8005a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a2a:	f7ff ff9f 	bl	800596c <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 8005a2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a32:	f7fc fb81 	bl	8002138 <LED_STEP_SendWord>
		delay_ms(500);
 8005a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a3a:	f7ff ff97 	bl	800596c <delay_ms>
		LED_STEP_SendWord(0x0000);
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f7fc fb7a 	bl	8002138 <LED_STEP_SendWord>
		delay_ms(500);
 8005a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a48:	f7ff ff90 	bl	800596c <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 8005a4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a50:	f7fc fb72 	bl	8002138 <LED_STEP_SendWord>
		delay_ms(500);
 8005a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a58:	f7ff ff88 	bl	800596c <delay_ms>
		LED_STEP_SendWord(0x0000);
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	f7fc fb6b 	bl	8002138 <LED_STEP_SendWord>
		delay_ms(500);
 8005a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a66:	f7ff ff81 	bl	800596c <delay_ms>
		LED_STEP_SendWord(0xFFFF);
 8005a6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a6e:	f7fc fb63 	bl	8002138 <LED_STEP_SendWord>
		TIM_SetCounter(TIM6, 0x00);
 8005a72:	4c47      	ldr	r4, [pc, #284]	; (8005b90 <TIM6_DAC_IRQHandler+0x1f0>)
 8005a74:	2100      	movs	r1, #0
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7fb fd23 	bl	80014c2 <TIM_SetCounter>
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8005a7c:	8823      	ldrh	r3, [r4, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8023      	strh	r3, [r4, #0]
		if(clear_counter1 == 30)
 8005a88:	4b42      	ldr	r3, [pc, #264]	; (8005b94 <TIM6_DAC_IRQHandler+0x1f4>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b1e      	cmp	r3, #30
 8005a8e:	d023      	beq.n	8005ad8 <TIM6_DAC_IRQHandler+0x138>
		else if(clear_counter2 == 30)
 8005a90:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <TIM6_DAC_IRQHandler+0x1f8>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b1e      	cmp	r3, #30
 8005a96:	d047      	beq.n	8005b28 <TIM6_DAC_IRQHandler+0x188>
		clear_counter1 = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4a3e      	ldr	r2, [pc, #248]	; (8005b94 <TIM6_DAC_IRQHandler+0x1f4>)
 8005a9c:	7013      	strb	r3, [r2, #0]
		clear_counter2 = 0;
 8005a9e:	4a3e      	ldr	r2, [pc, #248]	; (8005b98 <TIM6_DAC_IRQHandler+0x1f8>)
 8005aa0:	7013      	strb	r3, [r2, #0]
		if (gDisplayMode == DISPLAY_MODE_LOAD_1 || gDisplayMode == DISPLAY_MODE_SAVE_1) gDisplayMode = DISPLAY_MODE_VIEW_1;
 8005aa2:	4b3e      	ldr	r3, [pc, #248]	; (8005b9c <TIM6_DAC_IRQHandler+0x1fc>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b06      	cmp	r3, #6
 8005aaa:	d004      	beq.n	8005ab6 <TIM6_DAC_IRQHandler+0x116>
 8005aac:	4b3b      	ldr	r3, [pc, #236]	; (8005b9c <TIM6_DAC_IRQHandler+0x1fc>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d102      	bne.n	8005abc <TIM6_DAC_IRQHandler+0x11c>
 8005ab6:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <TIM6_DAC_IRQHandler+0x1fc>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
		if (gDisplayMode == DISPLAY_MODE_LOAD_2 || gDisplayMode == DISPLAY_MODE_SAVE_2) gDisplayMode = DISPLAY_MODE_VIEW_2; 		
 8005abc:	4b37      	ldr	r3, [pc, #220]	; (8005b9c <TIM6_DAC_IRQHandler+0x1fc>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b07      	cmp	r3, #7
 8005ac4:	d004      	beq.n	8005ad0 <TIM6_DAC_IRQHandler+0x130>
 8005ac6:	4b35      	ldr	r3, [pc, #212]	; (8005b9c <TIM6_DAC_IRQHandler+0x1fc>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d1a6      	bne.n	8005a1e <TIM6_DAC_IRQHandler+0x7e>
 8005ad0:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <TIM6_DAC_IRQHandler+0x1fc>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
};
 8005ad6:	e7a2      	b.n	8005a1e <TIM6_DAC_IRQHandler+0x7e>
			Steps[0][0].val[3] = 0x00;
 8005ad8:	4a31      	ldr	r2, [pc, #196]	; (8005ba0 <TIM6_DAC_IRQHandler+0x200>)
 8005ada:	2300      	movs	r3, #0
 8005adc:	70d3      	strb	r3, [r2, #3]
			Steps[0][0].val[4] = 0x00;
 8005ade:	7113      	strb	r3, [r2, #4]
			Steps[0][0].val[5] = 0x00;
 8005ae0:	7153      	strb	r3, [r2, #5]
			Steps[0][0].b.TimeRange_p3 = 1;
 8005ae2:	6851      	ldr	r1, [r2, #4]
 8005ae4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005ae8:	6051      	str	r1, [r2, #4]
			Steps[0][0].b.FullRange = 1;
 8005aea:	6811      	ldr	r1, [r2, #0]
 8005aec:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005af0:	6011      	str	r1, [r2, #0]
			for(i=0; i<16; i++)
 8005af2:	e010      	b.n	8005b16 <TIM6_DAC_IRQHandler+0x176>
				Steps[0][i] = Steps[0][0];
 8005af4:	4a2a      	ldr	r2, [pc, #168]	; (8005ba0 <TIM6_DAC_IRQHandler+0x200>)
 8005af6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8005afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005afe:	e884 0003 	stmia.w	r4, {r0, r1}
				Steps[0][i+16] = Steps[0][0];
 8005b02:	f103 0410 	add.w	r4, r3, #16
 8005b06:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8005b0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b0e:	e884 0003 	stmia.w	r4, {r0, r1}
			for(i=0; i<16; i++)
 8005b12:	3301      	adds	r3, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d9ec      	bls.n	8005af4 <TIM6_DAC_IRQHandler+0x154>
			gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8005b1a:	4b22      	ldr	r3, [pc, #136]	; (8005ba4 <TIM6_DAC_IRQHandler+0x204>)
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	701a      	strb	r2, [r3, #0]
			gSequenceStepNumber_1 = 0;
 8005b20:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <TIM6_DAC_IRQHandler+0x208>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	e7b7      	b.n	8005a98 <TIM6_DAC_IRQHandler+0xf8>
			Steps[1][0].val[3] = 0x00;
 8005b28:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <TIM6_DAC_IRQHandler+0x200>)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103
			Steps[1][0].val[4] = 0x00;
 8005b30:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
			Steps[1][0].val[5] = 0x00;
 8005b34:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
			Steps[1][0].b.TimeRange_p3 = 1;
 8005b38:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 8005b3c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005b40:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			Steps[1][0].b.FullRange = 1;
 8005b44:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8005b48:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005b4c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			for(i=0; i<16; i++)
 8005b50:	e014      	b.n	8005b7c <TIM6_DAC_IRQHandler+0x1dc>
				Steps[1][i] = Steps[1][0];
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <TIM6_DAC_IRQHandler+0x200>)
 8005b54:	f103 0520 	add.w	r5, r3, #32
 8005b58:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005b5c:	f502 7480 	add.w	r4, r2, #256	; 0x100
 8005b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b64:	e885 0003 	stmia.w	r5, {r0, r1}
				Steps[1][i+16] = Steps[1][0];
 8005b68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b6c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005b70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b74:	e882 0003 	stmia.w	r2, {r0, r1}
			for(i=0; i<16; i++)
 8005b78:	3301      	adds	r3, #1
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b0f      	cmp	r3, #15
 8005b7e:	d9e8      	bls.n	8005b52 <TIM6_DAC_IRQHandler+0x1b2>
			gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <TIM6_DAC_IRQHandler+0x20c>)
 8005b82:	2202      	movs	r2, #2
 8005b84:	701a      	strb	r2, [r3, #0]
			gSequenceStepNumber_2 = 0;
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <TIM6_DAC_IRQHandler+0x210>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	e784      	b.n	8005a98 <TIM6_DAC_IRQHandler+0xf8>
 8005b8e:	bf00      	nop
 8005b90:	40001000 	.word	0x40001000
 8005b94:	200002aa 	.word	0x200002aa
 8005b98:	200002ab 	.word	0x200002ab
 8005b9c:	200002b0 	.word	0x200002b0
 8005ba0:	20000958 	.word	0x20000958
 8005ba4:	200002c1 	.word	0x200002c1
 8005ba8:	200002bf 	.word	0x200002bf
 8005bac:	200002c2 	.word	0x200002c2
 8005bb0:	200002c0 	.word	0x200002c0
 8005bb4:	00000000 	.word	0x00000000

08005bb8 <main>:
 {
 8005bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbc:	b08a      	sub	sp, #40	; 0x28
	DisplayUpdateFlags.value = 0x00;
 8005bbe:	4bb2      	ldr	r3, [pc, #712]	; (8005e88 <main+0x2d0>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.MainDisplay 	= 1;
 8005bc4:	781a      	ldrb	r2, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	701a      	strb	r2, [r3, #0]
	DisplayUpdateFlags.b.StepsDisplay = 1;
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	f042 0202 	orr.w	r2, r2, #2
 8005bd2:	701a      	strb	r2, [r3, #0]
	Steps[0][0].b.TimeRange_p3 = 1;
 8005bd4:	4bad      	ldr	r3, [pc, #692]	; (8005e8c <main+0x2d4>)
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bdc:	605a      	str	r2, [r3, #4]
	Steps[0][0].b.FullRange = 1;
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005be4:	601a      	str	r2, [r3, #0]
	Steps[1][0] = Steps[0][0];
 8005be6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005bea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005bee:	e882 0003 	stmia.w	r2, {r0, r1}
	for(_cnt=1;_cnt<=31;_cnt++) 
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e010      	b.n	8005c18 <main+0x60>
		Steps[0][_cnt] = Steps[0][0];		
 8005bf6:	4aa5      	ldr	r2, [pc, #660]	; (8005e8c <main+0x2d4>)
 8005bf8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8005bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c00:	e884 0003 	stmia.w	r4, {r0, r1}
		Steps[1][_cnt] = Steps[0][0];
 8005c04:	f103 0420 	add.w	r4, r3, #32
 8005c08:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8005c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c10:	e884 0003 	stmia.w	r4, {r0, r1}
	for(_cnt=1;_cnt<=31;_cnt++) 
 8005c14:	3301      	adds	r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b1f      	cmp	r3, #31
 8005c1a:	d9ec      	bls.n	8005bf6 <main+0x3e>
	RCC_GetClocksFreq(&RCC_Clocks);
 8005c1c:	489c      	ldr	r0, [pc, #624]	; (8005e90 <main+0x2d8>)
 8005c1e:	f7fb fa91 	bl	8001144 <RCC_GetClocksFreq>
	systickInit(1000); 
 8005c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c26:	f7fc fad1 	bl	80021cc <systickInit>
	PulsesInit();
 8005c2a:	f7fe f98d 	bl	8003f48 <PulsesInit>
	DisplayLedsIOInit();
 8005c2e:	f7fe f9d7 	bl	8003fe0 <DisplayLedsIOInit>
	DipConfig_init();	
 8005c32:	f7fc f955 	bl	8001ee0 <DipConfig_init>
	gDipConfig = GetDipConfig(); 
 8005c36:	f7fc f96d 	bl	8001f14 <GetDipConfig>
 8005c3a:	4c96      	ldr	r4, [pc, #600]	; (8005e94 <main+0x2dc>)
 8005c3c:	7020      	strb	r0, [r4, #0]
	LED_STEP_init();
 8005c3e:	f7fc fa13 	bl	8002068 <LED_STEP_init>
	LED_STEP_SendWord(0xFFFF);
 8005c42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005c46:	f7fc fa77 	bl	8002138 <LED_STEP_SendWord>
	delay_ms(1000);
 8005c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c4e:	f7ff fe8d 	bl	800596c <delay_ms>
	LED_STEP_SendWord(0xFFF0|(*((uint8_t*) (&gDipConfig))));
 8005c52:	7820      	ldrb	r0, [r4, #0]
 8005c54:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00
 8005c58:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
 8005c5c:	f7fc fa6c 	bl	8002138 <LED_STEP_SendWord>
	delay_ms(1000);
 8005c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c64:	f7ff fe82 	bl	800596c <delay_ms>
	CAT25512_init();
 8005c68:	f7fb fcae 	bl	80015c8 <CAT25512_init>
	LEDS_modes_init();	
 8005c6c:	f7fc f980 	bl	8001f70 <LEDS_modes_init>
	mLeds.value[0] = 0xFF;
 8005c70:	23ff      	movs	r3, #255	; 0xff
	mLeds.value[1] = 0xFF;
 8005c72:	f88d 301d 	strb.w	r3, [sp, #29]
	mLeds.value[2] = 0xFF;
 8005c76:	f88d 301e 	strb.w	r3, [sp, #30]
	mLeds.value[3] = 0xFF;
 8005c7a:	f88d 301f 	strb.w	r3, [sp, #31]
	mLeds.b.Seq2Stop = 0;
 8005c7e:	a80a      	add	r0, sp, #40	; 0x28
 8005c80:	f06f 0309 	mvn.w	r3, #9
 8005c84:	f800 3d0c 	strb.w	r3, [r0, #-12]!
	LEDS_modes_SendStruct(&mLeds);
 8005c88:	f7fc f9d4 	bl	8002034 <LEDS_modes_SendStruct>
	init_HC165();
 8005c8c:	f7fb fdf2 	bl	8001874 <init_HC165>
	key_state = GetButton();
 8005c90:	f7fb fef4 	bl	8001a7c <GetButton>
 8005c94:	e9cd 0104 	strd	r0, r1, [sp, #16]
	prev_key_state = 0x7fbf67f7fffdff;//key_state;
 8005c98:	a379      	add	r3, pc, #484	; (adr r3, 8005e80 <main+0x2c8>)
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	MAX5135init();
 8005ca2:	f7fb ff37 	bl	8001b14 <MAX5135init>
	ADC_POTS_selector_init();
 8005ca6:	f7fb ffcf 	bl	8001c48 <ADC_POTS_selector_init>
	ADC_POTS_selector_Ch(0);
 8005caa:	2000      	movs	r0, #0
 8005cac:	f7fc f886 	bl	8001dbc <ADC_POTS_selector_Ch>
	mADC_init();
 8005cb0:	f7fc fab4 	bl	800221c <mADC_init>
	mTimersInit();
 8005cb4:	f7fd ff1e 	bl	8003af4 <mTimersInit>
	mInterruptInit();
 8005cb8:	f7fc fb6e 	bl	8002398 <mInterruptInit>
	InternalDACInit();
 8005cbc:	f7fe f9aa 	bl	8004014 <InternalDACInit>
	Init_Expander_GPIO();
 8005cc0:	f7fc f94a 	bl	8001f58 <Init_Expander_GPIO>
	gSequencerMode_1 = SEQUENCER_MODE_STOP;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	4a74      	ldr	r2, [pc, #464]	; (8005e98 <main+0x2e0>)
 8005cc8:	7013      	strb	r3, [r2, #0]
	gSequencerMode_2 = SEQUENCER_MODE_STOP;
 8005cca:	4a74      	ldr	r2, [pc, #464]	; (8005e9c <main+0x2e4>)
 8005ccc:	7013      	strb	r3, [r2, #0]
	versionInit();
 8005cce:	f000 fcaf 	bl	8006630 <versionInit>
	rev = versionRevised();
 8005cd2:	f000 fcc9 	bl	8006668 <versionRevised>
 8005cd6:	4b72      	ldr	r3, [pc, #456]	; (8005ea0 <main+0x2e8>)
 8005cd8:	7018      	strb	r0, [r3, #0]
	key_state = GetButton();
 8005cda:	f7fb fecf 	bl	8001a7c <GetButton>
 8005cde:	e9cd 0104 	strd	r0, r1, [sp, #16]
	myButtons.value = key_state;
 8005ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce6:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if(!myButtons.b.StageAddress1Advance)
 8005cea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005cee:	d129      	bne.n	8005d44 <main+0x18c>
		Calibration();
 8005cf0:	f7ff fdbc 	bl	800586c <Calibration>
		for(i = 0; i < 8; i++)
 8005cf4:	f04f 0800 	mov.w	r8, #0
 8005cf8:	4645      	mov	r5, r8
 8005cfa:	4644      	mov	r4, r8
		if(gDipConfig.b.V_OUT_1V == 1) 
 8005cfc:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <main+0x2dc>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f013 0f02 	tst.w	r3, #2
 8005d04:	d142      	bne.n	8005d8c <main+0x1d4>
			if(gDipConfig.b.V_OUT_1V2 == 1)
 8005d06:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <main+0x2dc>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f013 0f01 	tst.w	r3, #1
 8005d0e:	d145      	bne.n	8005d9c <main+0x1e4>
				offset = (4095.0/5.0);
 8005d10:	4b64      	ldr	r3, [pc, #400]	; (8005ea4 <main+0x2ec>)
 8005d12:	f240 3233 	movw	r2, #819	; 0x333
 8005d16:	601a      	str	r2, [r3, #0]
				divider = 5.0;
 8005d18:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <main+0x2f0>)
 8005d1a:	4a64      	ldr	r2, [pc, #400]	; (8005eac <main+0x2f4>)
 8005d1c:	601a      	str	r2, [r3, #0]
		if ((uint16_t)(millis - key_timestamp) > KEY_TIMER) { // time to scan the switches
 8005d1e:	4b64      	ldr	r3, [pc, #400]	; (8005eb0 <main+0x2f8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	1b1b      	subs	r3, r3, r4
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d840      	bhi.n	8005dac <main+0x1f4>
		if (DisplayUpdateFlags.b.MainDisplay) {
 8005d2a:	4b57      	ldr	r3, [pc, #348]	; (8005e88 <main+0x2d0>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	f013 0f01 	tst.w	r3, #1
 8005d32:	d178      	bne.n	8005e26 <main+0x26e>
		if (DisplayUpdateFlags.b.StepsDisplay) {			
 8005d34:	4b54      	ldr	r3, [pc, #336]	; (8005e88 <main+0x2d0>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f013 0f02 	tst.w	r3, #2
 8005d3c:	f040 8095 	bne.w	8005e6a <main+0x2b2>
			for(i =0; i<10; i++)
 8005d40:	2600      	movs	r6, #0
 8005d42:	e137      	b.n	8005fb4 <main+0x3fc>
	else if (!myButtons.b.Pulse1Off && !myButtons.b.Pulse2Off)
 8005d44:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8005d48:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8005d4c:	d102      	bne.n	8005d54 <main+0x19c>
	    PermutePulses(); 
 8005d4e:	f7ff fd29 	bl	80057a4 <PermutePulses>
 8005d52:	e7cf      	b.n	8005cf4 <main+0x13c>
		CAT25512_read_block(100*sizeof(Steps), (unsigned char *) CalConstants, sizeof(CalConstants));
 8005d54:	2220      	movs	r2, #32
 8005d56:	4957      	ldr	r1, [pc, #348]	; (8005eb4 <main+0x2fc>)
 8005d58:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8005d5c:	f7fb fd66 	bl	800182c <CAT25512_read_block>
		for(i = 0; i < 8; i++)
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b07      	cmp	r3, #7
 8005d64:	dd06      	ble.n	8005d74 <main+0x1bc>
		swapped_pulses = CAT25512_ReadByte(100*sizeof(Steps)+sizeof(CalConstants));
 8005d66:	f64c 0020 	movw	r0, #51232	; 0xc820
 8005d6a:	f7fb fcdd 	bl	8001728 <CAT25512_ReadByte>
 8005d6e:	4b52      	ldr	r3, [pc, #328]	; (8005eb8 <main+0x300>)
 8005d70:	7018      	strb	r0, [r3, #0]
 8005d72:	e7bf      	b.n	8005cf4 <main+0x13c>
			if(CalConstants[i] < 100) CalConstants[i] = 4095;
 8005d74:	4a4f      	ldr	r2, [pc, #316]	; (8005eb4 <main+0x2fc>)
 8005d76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d7a:	2a63      	cmp	r2, #99	; 0x63
 8005d7c:	d804      	bhi.n	8005d88 <main+0x1d0>
 8005d7e:	4a4d      	ldr	r2, [pc, #308]	; (8005eb4 <main+0x2fc>)
 8005d80:	f640 71ff 	movw	r1, #4095	; 0xfff
 8005d84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i = 0; i < 8; i++)
 8005d88:	3301      	adds	r3, #1
 8005d8a:	e7ea      	b.n	8005d62 <main+0x1aa>
			offset = (4095.0/10.0);
 8005d8c:	4b45      	ldr	r3, [pc, #276]	; (8005ea4 <main+0x2ec>)
 8005d8e:	f240 1299 	movw	r2, #409	; 0x199
 8005d92:	601a      	str	r2, [r3, #0]
			divider = 10.0;
 8005d94:	4b44      	ldr	r3, [pc, #272]	; (8005ea8 <main+0x2f0>)
 8005d96:	4a49      	ldr	r2, [pc, #292]	; (8005ebc <main+0x304>)
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e7c0      	b.n	8005d1e <main+0x166>
				offset = (4095.0/8.29);
 8005d9c:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <main+0x2ec>)
 8005d9e:	f240 12ed 	movw	r2, #493	; 0x1ed
 8005da2:	601a      	str	r2, [r3, #0]
				divider = 8.29;
 8005da4:	4b40      	ldr	r3, [pc, #256]	; (8005ea8 <main+0x2f0>)
 8005da6:	4a46      	ldr	r2, [pc, #280]	; (8005ec0 <main+0x308>)
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e7b8      	b.n	8005d1e <main+0x166>
			raw_key_state = GetButton();
 8005dac:	f7fb fe66 	bl	8001a7c <GetButton>
 8005db0:	e9cd 0100 	strd	r0, r1, [sp]
			key_timestamp = millis;
 8005db4:	4b3e      	ldr	r3, [pc, #248]	; (8005eb0 <main+0x2f8>)
 8005db6:	681c      	ldr	r4, [r3, #0]
			if (raw_key_state == key_state) {
 8005db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	bf08      	it	eq
 8005dc4:	4290      	cmpeq	r0, r2
 8005dc6:	d007      	beq.n	8005dd8 <main+0x220>
			  key_state = raw_key_state;
 8005dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
			  keys_stable = 0; 
 8005dd0:	f04f 0800 	mov.w	r8, #0
			  keys_debounce = KEY_DEBOUNCE_COUNT;
 8005dd4:	2503      	movs	r5, #3
 8005dd6:	e7a8      	b.n	8005d2a <main+0x172>
			  if (--keys_debounce == 0) { // stable now
 8005dd8:	3d01      	subs	r5, #1
 8005dda:	b2ad      	uxth	r5, r5
 8005ddc:	b11d      	cbz	r5, 8005de6 <main+0x22e>
			if (keys_stable) {
 8005dde:	f1b8 0f00 	cmp.w	r8, #0
 8005de2:	d0a2      	beq.n	8005d2a <main+0x172>
 8005de4:	e002      	b.n	8005dec <main+0x234>
			    keys_stable = 1;
 8005de6:	f04f 0801 	mov.w	r8, #1
			    keys_debounce = KEY_DEBOUNCE_COUNT;
 8005dea:	2503      	movs	r5, #3
			  myButtons.value = key_state;			
 8005dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df0:	e9cd 2308 	strd	r2, r3, [sp, #32]
			  if (key_state != prev_key_state || myButtons.b.StepRight == 0 || myButtons.b.StepLeft == 0) {
 8005df4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8005df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dfc:	428f      	cmp	r7, r1
 8005dfe:	bf08      	it	eq
 8005e00:	4286      	cmpeq	r6, r0
 8005e02:	d103      	bne.n	8005e0c <main+0x254>
 8005e04:	f002 020c 	and.w	r2, r2, #12
 8005e08:	2a0c      	cmp	r2, #12
 8005e0a:	d08e      	beq.n	8005d2a <main+0x172>
			    tick = 0; 
 8005e0c:	4e2d      	ldr	r6, [pc, #180]	; (8005ec4 <main+0x30c>)
 8005e0e:	2300      	movs	r3, #0
 8005e10:	8033      	strh	r3, [r6, #0]
			    keyb_proc(&myButtons);
 8005e12:	a808      	add	r0, sp, #32
 8005e14:	f7fe f938 	bl	8004088 <keyb_proc>
			    tick = 1; 
 8005e18:	2301      	movs	r3, #1
 8005e1a:	8033      	strh	r3, [r6, #0]
			    prev_key_state = key_state;
 8005e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e24:	e781      	b.n	8005d2a <main+0x172>
			UpdateModeSection();
 8005e26:	f7ff fa07 	bl	8005238 <UpdateModeSection>
			DisplayUpdateFlags.b.MainDisplay = 0;
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <main+0x2d0>)
 8005e2c:	7813      	ldrb	r3, [r2, #0]
 8005e2e:	f36f 0300 	bfc	r3, #0, #1
 8005e32:	7013      	strb	r3, [r2, #0]
			if ( 	(gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8005e34:	4b24      	ldr	r3, [pc, #144]	; (8005ec8 <main+0x310>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d00f      	beq.n	8005e5e <main+0x2a6>
 8005e3e:	4b22      	ldr	r3, [pc, #136]	; (8005ec8 <main+0x310>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d00a      	beq.n	8005e5e <main+0x2a6>
						(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) 
 8005e48:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <main+0x310>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b2db      	uxtb	r3, r3
			if ( 	(gDisplayMode == DISPLAY_MODE_SAVE_1) || (gDisplayMode == DISPLAY_MODE_SAVE_2) ||
 8005e4e:	2b06      	cmp	r3, #6
 8005e50:	d005      	beq.n	8005e5e <main+0x2a6>
						(gDisplayMode == DISPLAY_MODE_LOAD_1) || (gDisplayMode == DISPLAY_MODE_LOAD_2) ) 
 8005e52:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <main+0x310>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b07      	cmp	r3, #7
 8005e5a:	f47f af6b 	bne.w	8005d34 <main+0x17c>
				DisplayUpdateFlags.b.MainDisplay = 1;
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <main+0x2d0>)
 8005e60:	7813      	ldrb	r3, [r2, #0]
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	7013      	strb	r3, [r2, #0]
 8005e68:	e764      	b.n	8005d34 <main+0x17c>
			UpdateStepSection();
 8005e6a:	f7ff fc5d 	bl	8005728 <UpdateStepSection>
			DisplayUpdateFlags.b.StepsDisplay = 0;
 8005e6e:	4a06      	ldr	r2, [pc, #24]	; (8005e88 <main+0x2d0>)
 8005e70:	7813      	ldrb	r3, [r2, #0]
 8005e72:	f36f 0341 	bfc	r3, #1, #1
 8005e76:	7013      	strb	r3, [r2, #0]
 8005e78:	e762      	b.n	8005d40 <main+0x188>
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w
 8005e80:	f7fffdff 	.word	0xf7fffdff
 8005e84:	007fbf67 	.word	0x007fbf67
 8005e88:	200002f0 	.word	0x200002f0
 8005e8c:	20000958 	.word	0x20000958
 8005e90:	20000bd8 	.word	0x20000bd8
 8005e94:	200002e8 	.word	0x200002e8
 8005e98:	200002c1 	.word	0x200002c1
 8005e9c:	200002c2 	.word	0x200002c2
 8005ea0:	200008d2 	.word	0x200008d2
 8005ea4:	20000954 	.word	0x20000954
 8005ea8:	200008cc 	.word	0x200008cc
 8005eac:	40a00000 	.word	0x40a00000
 8005eb0:	20000c2c 	.word	0x20000c2c
 8005eb4:	20000250 	.word	0x20000250
 8005eb8:	200002da 	.word	0x200002da
 8005ebc:	41200000 	.word	0x41200000
 8005ec0:	4104a3d7 	.word	0x4104a3d7
 8005ec4:	2000084a 	.word	0x2000084a
 8005ec8:	200002b0 	.word	0x200002b0
			if(Is_Expander_Present()) max_step = 31;
 8005ecc:	f04f 0c1f 	mov.w	ip, #31
			previous_step[j] = pots_step[j];
 8005ed0:	4a41      	ldr	r2, [pc, #260]	; (8005fd8 <main+0x420>)
 8005ed2:	5d93      	ldrb	r3, [r2, r6]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	4941      	ldr	r1, [pc, #260]	; (8005fdc <main+0x424>)
 8005ed8:	558b      	strb	r3, [r1, r6]
			if(pots_step[j] < (max_step+1)) next_step_tres = (pots_step[j])*CalConstants[ADC_STAGEADDRESS_Ch_1+j]/(max_step+1) + 20;
 8005eda:	5d93      	ldrb	r3, [r2, r6]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f10c 0c01 	add.w	ip, ip, #1
 8005ee2:	4563      	cmp	r3, ip
 8005ee4:	da24      	bge.n	8005f30 <main+0x378>
 8005ee6:	5d97      	ldrb	r7, [r2, r6]
 8005ee8:	1db3      	adds	r3, r6, #6
 8005eea:	4a3d      	ldr	r2, [pc, #244]	; (8005fe0 <main+0x428>)
 8005eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef0:	fb07 f703 	mul.w	r7, r7, r3
 8005ef4:	fbb7 f7fc 	udiv	r7, r7, ip
 8005ef8:	b2bf      	uxth	r7, r7
 8005efa:	3714      	adds	r7, #20
 8005efc:	b2bf      	uxth	r7, r7
			if(pots_step[j] > 1) prev_step_tres = (pots_step[j]-1)*CalConstants[ADC_STAGEADDRESS_Ch_1+j]/(max_step+1) - 20;
 8005efe:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <main+0x420>)
 8005f00:	5d9b      	ldrb	r3, [r3, r6]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d915      	bls.n	8005f34 <main+0x37c>
 8005f08:	4b33      	ldr	r3, [pc, #204]	; (8005fd8 <main+0x420>)
 8005f0a:	5d98      	ldrb	r0, [r3, r6]
 8005f0c:	1e43      	subs	r3, r0, #1
 8005f0e:	1db2      	adds	r2, r6, #6
 8005f10:	4933      	ldr	r1, [pc, #204]	; (8005fe0 <main+0x428>)
 8005f12:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8005f16:	fb00 f003 	mul.w	r0, r0, r3
 8005f1a:	fbb0 f0fc 	udiv	r0, r0, ip
 8005f1e:	b280      	uxth	r0, r0
 8005f20:	3814      	subs	r0, #20
 8005f22:	b280      	uxth	r0, r0
			acc = 0;
 8005f24:	2100      	movs	r1, #0
			for(i =0; i<10; i++)
 8005f26:	460a      	mov	r2, r1
 8005f28:	e012      	b.n	8005f50 <main+0x398>
				max_step = 15;
 8005f2a:	f04f 0c0f 	mov.w	ip, #15
 8005f2e:	e7cf      	b.n	8005ed0 <main+0x318>
			next_step_tres = 0;
 8005f30:	2700      	movs	r7, #0
 8005f32:	e7e4      	b.n	8005efe <main+0x346>
			prev_step_tres = 0;
 8005f34:	2000      	movs	r0, #0
 8005f36:	e7f5      	b.n	8005f24 <main+0x36c>
				  temp = (AddData[ADC_STAGEADDRESS_Ch_1]); 
 8005f38:	4b2a      	ldr	r3, [pc, #168]	; (8005fe4 <main+0x42c>)
 8005f3a:	899b      	ldrh	r3, [r3, #12]
 8005f3c:	b29b      	uxth	r3, r3
					if(temp > 4095) temp = 4095; 
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f42:	d301      	bcc.n	8005f48 <main+0x390>
 8005f44:	f640 73ff 	movw	r3, #4095	; 0xfff
					acc += temp;
 8005f48:	4419      	add	r1, r3
 8005f4a:	e000      	b.n	8005f4e <main+0x396>
					acc += temp;
 8005f4c:	4419      	add	r1, r3
			for(i =0; i<10; i++)
 8005f4e:	3201      	adds	r2, #1
 8005f50:	2a09      	cmp	r2, #9
 8005f52:	dc0a      	bgt.n	8005f6a <main+0x3b2>
				if(j == 0) 
 8005f54:	2e00      	cmp	r6, #0
 8005f56:	d0ef      	beq.n	8005f38 <main+0x380>
				  temp = (AddData[ADC_STAGEADDRESS_Ch_2]); 
 8005f58:	4b22      	ldr	r3, [pc, #136]	; (8005fe4 <main+0x42c>)
 8005f5a:	89db      	ldrh	r3, [r3, #14]
 8005f5c:	b29b      	uxth	r3, r3
					if(temp > 4095) temp = 4095; 
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f62:	d3f3      	bcc.n	8005f4c <main+0x394>
 8005f64:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005f68:	e7f0      	b.n	8005f4c <main+0x394>
			if(pots_step[j] < (max_step+1)) {if(acc/10 > next_step_tres) 
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <main+0x420>)
 8005f6c:	5d9b      	ldrb	r3, [r3, r6]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	459c      	cmp	ip, r3
 8005f72:	dd0c      	ble.n	8005f8e <main+0x3d6>
 8005f74:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <main+0x430>)
 8005f76:	fb82 3201 	smull	r3, r2, r2, r1
 8005f7a:	17cb      	asrs	r3, r1, #31
 8005f7c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8005f80:	42bb      	cmp	r3, r7
 8005f82:	dd04      	ble.n	8005f8e <main+0x3d6>
				pots_step[j]++;
 8005f84:	4a14      	ldr	r2, [pc, #80]	; (8005fd8 <main+0x420>)
 8005f86:	5d93      	ldrb	r3, [r2, r6]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	5593      	strb	r3, [r2, r6]
			if(pots_step[j] > 1) {if(acc/10 < prev_step_tres) 
 8005f8e:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <main+0x420>)
 8005f90:	5d9b      	ldrb	r3, [r3, r6]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d90c      	bls.n	8005fb2 <main+0x3fa>
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <main+0x430>)
 8005f9a:	fb83 2301 	smull	r2, r3, r3, r1
 8005f9e:	17c9      	asrs	r1, r1, #31
 8005fa0:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
 8005fa4:	4281      	cmp	r1, r0
 8005fa6:	da04      	bge.n	8005fb2 <main+0x3fa>
				pots_step[j]--;
 8005fa8:	4a0b      	ldr	r2, [pc, #44]	; (8005fd8 <main+0x420>)
 8005faa:	5d93      	ldrb	r3, [r2, r6]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	5593      	strb	r3, [r2, r6]
	for(j = 0; j < 2; j++)
 8005fb2:	3601      	adds	r6, #1
 8005fb4:	2e01      	cmp	r6, #1
 8005fb6:	f73f aea1 	bgt.w	8005cfc <main+0x144>
			if(Is_Expander_Present()) max_step = 31;
 8005fba:	f7fb ffce 	bl	8001f5a <Is_Expander_Present>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d184      	bne.n	8005ecc <main+0x314>
				if(pots_step[j] > 16) pots_step[j] = 1;
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <main+0x420>)
 8005fc4:	5d9b      	ldrb	r3, [r3, r6]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d9ae      	bls.n	8005f2a <main+0x372>
 8005fcc:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <main+0x420>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	559a      	strb	r2, [r3, r6]
				max_step = 15;
 8005fd2:	f04f 0c0f 	mov.w	ip, #15
 8005fd6:	e77b      	b.n	8005ed0 <main+0x318>
 8005fd8:	20000274 	.word	0x20000274
 8005fdc:	20000278 	.word	0x20000278
 8005fe0:	20000250 	.word	0x20000250
 8005fe4:	20000838 	.word	0x20000838
 8005fe8:	66666667 	.word	0x66666667

08005fec <delay_us>:

void delay_us(unsigned int us)
{
 8005fec:	b510      	push	{r4, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 8005ff2:	a801      	add	r0, sp, #4
 8005ff4:	f7fb f8a6 	bl	8001144 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000000)*us;
 8005ff8:	9b02      	ldr	r3, [sp, #8]
 8005ffa:	4a08      	ldr	r2, [pc, #32]	; (800601c <delay_us+0x30>)
 8005ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8006000:	0d9b      	lsrs	r3, r3, #22
 8006002:	fb04 f303 	mul.w	r3, r4, r3
 8006006:	9305      	str	r3, [sp, #20]
	for (; nCount!=0; nCount--);
 8006008:	e002      	b.n	8006010 <delay_us+0x24>
 800600a:	9b05      	ldr	r3, [sp, #20]
 800600c:	3b01      	subs	r3, #1
 800600e:	9305      	str	r3, [sp, #20]
 8006010:	9b05      	ldr	r3, [sp, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f9      	bne.n	800600a <delay_us+0x1e>
}
 8006016:	b006      	add	sp, #24
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	6b5fca6b 	.word	0x6b5fca6b

08006020 <ADC_IRQHandler>:
{
 8006020:	b570      	push	{r4, r5, r6, lr}
  if (ADC_POT_sel_cnt < 16) {
 8006022:	4ba9      	ldr	r3, [pc, #676]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b0f      	cmp	r3, #15
 800602a:	d80d      	bhi.n	8006048 <ADC_IRQHandler+0x28>
    stage = ADC_POT_sel_cnt; 
 800602c:	4ba6      	ldr	r3, [pc, #664]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 800602e:	781c      	ldrb	r4, [r3, #0]
 8006030:	b2e4      	uxtb	r4, r4
    pottype = POT_TYPE_VOLTAGE;
 8006032:	2564      	movs	r5, #100	; 0x64
	if ( ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET) {
 8006034:	2102      	movs	r1, #2
 8006036:	48a5      	ldr	r0, [pc, #660]	; (80062cc <ADC_IRQHandler+0x2ac>)
 8006038:	f7fa ff4f 	bl	8000eda <ADC_GetFlagStatus>
 800603c:	2801      	cmp	r0, #1
 800603e:	d036      	beq.n	80060ae <ADC_IRQHandler+0x8e>
  delay_us(10);
 8006040:	200a      	movs	r0, #10
 8006042:	f7ff ffd3 	bl	8005fec <delay_us>
};
 8006046:	bd70      	pop	{r4, r5, r6, pc}
  else if (ADC_POT_sel_cnt < 24) {
 8006048:	4b9f      	ldr	r3, [pc, #636]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b17      	cmp	r3, #23
 8006050:	d90a      	bls.n	8006068 <ADC_IRQHandler+0x48>
  else if (ADC_POT_sel_cnt < 40) {
 8006052:	4b9d      	ldr	r3, [pc, #628]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b27      	cmp	r3, #39	; 0x27
 800605a:	d817      	bhi.n	800608c <ADC_IRQHandler+0x6c>
    stage=ADC_POT_sel_cnt - 24; 
 800605c:	4b9a      	ldr	r3, [pc, #616]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 800605e:	781c      	ldrb	r4, [r3, #0]
 8006060:	3c18      	subs	r4, #24
 8006062:	b2e4      	uxtb	r4, r4
    pottype = POT_TYPE_TIME;
 8006064:	2565      	movs	r5, #101	; 0x65
 8006066:	e7e5      	b.n	8006034 <ADC_IRQHandler+0x14>
    stage = ADC_POT_sel_cnt-16; 
 8006068:	4b97      	ldr	r3, [pc, #604]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 800606a:	781c      	ldrb	r4, [r3, #0]
 800606c:	3c10      	subs	r4, #16
 800606e:	b2e4      	uxtb	r4, r4
    	if ( ADC_GetFlagStatus(ADC2, ADC_FLAG_EOC) == SET) {
 8006070:	2102      	movs	r1, #2
 8006072:	4897      	ldr	r0, [pc, #604]	; (80062d0 <ADC_IRQHandler+0x2b0>)
 8006074:	f7fa ff31 	bl	8000eda <ADC_GetFlagStatus>
 8006078:	2801      	cmp	r0, #1
 800607a:	d1e1      	bne.n	8006040 <ADC_IRQHandler+0x20>
	  adcreading = (uint16_t) ADC2->DR & 0xfff;
 800607c:	4b94      	ldr	r3, [pc, #592]	; (80062d0 <ADC_IRQHandler+0x2b0>)
 800607e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006084:	4a93      	ldr	r2, [pc, #588]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 8006086:	8013      	strh	r3, [r2, #0]
    pottype = POT_TYPE_OTHER;
 8006088:	2566      	movs	r5, #102	; 0x66
 800608a:	e02d      	b.n	80060e8 <ADC_IRQHandler+0xc8>
  else if (ADC_POT_sel_cnt < 56) {
 800608c:	4b8e      	ldr	r3, [pc, #568]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b37      	cmp	r3, #55	; 0x37
 8006094:	d805      	bhi.n	80060a2 <ADC_IRQHandler+0x82>
    stage = ADC_POT_sel_cnt - 24; 
 8006096:	4b8c      	ldr	r3, [pc, #560]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 8006098:	781c      	ldrb	r4, [r3, #0]
 800609a:	3c18      	subs	r4, #24
 800609c:	b2e4      	uxtb	r4, r4
    pottype = POT_TYPE_VOLTAGE;
 800609e:	2564      	movs	r5, #100	; 0x64
 80060a0:	e7c8      	b.n	8006034 <ADC_IRQHandler+0x14>
    stage = ADC_POT_sel_cnt - 40; 
 80060a2:	4b89      	ldr	r3, [pc, #548]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 80060a4:	781c      	ldrb	r4, [r3, #0]
 80060a6:	3c28      	subs	r4, #40	; 0x28
 80060a8:	b2e4      	uxtb	r4, r4
    pottype=POT_TYPE_TIME;
 80060aa:	2565      	movs	r5, #101	; 0x65
 80060ac:	e7c2      	b.n	8006034 <ADC_IRQHandler+0x14>
	  adcreading = (uint16_t) ADC1->DR & 0xfff;
 80060ae:	4b87      	ldr	r3, [pc, #540]	; (80062cc <ADC_IRQHandler+0x2ac>)
 80060b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b6:	4a87      	ldr	r2, [pc, #540]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 80060b8:	8013      	strh	r3, [r2, #0]
	  adcreading =scale(adcreading); // trim and scale slider readings
 80060ba:	8813      	ldrh	r3, [r2, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b1d      	cmp	r3, #29
 80060c0:	d90f      	bls.n	80060e2 <ADC_IRQHandler+0xc2>
 80060c2:	8813      	ldrh	r3, [r2, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f640 72be 	movw	r2, #4030	; 0xfbe
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d827      	bhi.n	800611e <ADC_IRQHandler+0xfe>
 80060ce:	4b81      	ldr	r3, [pc, #516]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 80060d0:	881a      	ldrh	r2, [r3, #0]
 80060d2:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80060d6:	0093      	lsls	r3, r2, #2
 80060d8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 80060dc:	3b1e      	subs	r3, #30
 80060de:	b29b      	uxth	r3, r3
 80060e0:	e000      	b.n	80060e4 <ADC_IRQHandler+0xc4>
 80060e2:	2300      	movs	r3, #0
 80060e4:	4a7b      	ldr	r2, [pc, #492]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 80060e6:	8013      	strh	r3, [r2, #0]
    switch (pottype) {
 80060e8:	2d65      	cmp	r5, #101	; 0x65
 80060ea:	f000 809e 	beq.w	800622a <ADC_IRQHandler+0x20a>
 80060ee:	2d66      	cmp	r5, #102	; 0x66
 80060f0:	f000 812d 	beq.w	800634e <ADC_IRQHandler+0x32e>
 80060f4:	2d64      	cmp	r5, #100	; 0x64
 80060f6:	d015      	beq.n	8006124 <ADC_IRQHandler+0x104>
    ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
 80060f8:	2102      	movs	r1, #2
 80060fa:	4874      	ldr	r0, [pc, #464]	; (80062cc <ADC_IRQHandler+0x2ac>)
 80060fc:	f7fa fef4 	bl	8000ee8 <ADC_ClearFlag>
    ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
 8006100:	2102      	movs	r1, #2
 8006102:	4873      	ldr	r0, [pc, #460]	; (80062d0 <ADC_IRQHandler+0x2b0>)
 8006104:	f7fa fef0 	bl	8000ee8 <ADC_ClearFlag>
    if(Is_Expander_Present()) {
 8006108:	f7fb ff27 	bl	8001f5a <Is_Expander_Present>
 800610c:	2800      	cmp	r0, #0
 800610e:	f040 815c 	bne.w	80063ca <ADC_IRQHandler+0x3aa>
      ADC_POT_sel_cnt = ADC_inc(ADC_POT_sel_cnt); // figure out next pot and switch the mux
 8006112:	4c6d      	ldr	r4, [pc, #436]	; (80062c8 <ADC_IRQHandler+0x2a8>)
 8006114:	7820      	ldrb	r0, [r4, #0]
 8006116:	f7fb fe5d 	bl	8001dd4 <ADC_inc>
 800611a:	7020      	strb	r0, [r4, #0]
 800611c:	e790      	b.n	8006040 <ADC_IRQHandler+0x20>
	  adcreading =scale(adcreading); // trim and scale slider readings
 800611e:	f241 031d 	movw	r3, #4125	; 0x101d
 8006122:	e7df      	b.n	80060e4 <ADC_IRQHandler+0xc4>
      voltages_lp[stage] += (adcreading - voltages_lp[stage])>>4;
 8006124:	4b6b      	ldr	r3, [pc, #428]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	4620      	mov	r0, r4
 800612a:	4a6b      	ldr	r2, [pc, #428]	; (80062d8 <ADC_IRQHandler+0x2b8>)
 800612c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 8006130:	1a59      	subs	r1, r3, r1
 8006132:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8006136:	eb03 1321 	add.w	r3, r3, r1, asr #4
 800613a:	b29b      	uxth	r3, r3
 800613c:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
      for (int j=0; j<2; j++) {
 8006140:	2300      	movs	r3, #0
 8006142:	e01d      	b.n	8006180 <ADC_IRQHandler+0x160>
	  if (adcreading - Steps[j][stage].b.VLevel > JUMP_THRESHOLD) { // big jumps happen immediately
 8006144:	4a63      	ldr	r2, [pc, #396]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 8006146:	8812      	ldrh	r2, [r2, #0]
 8006148:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800614c:	4c63      	ldr	r4, [pc, #396]	; (80062dc <ADC_IRQHandler+0x2bc>)
 800614e:	f854 1031 	ldr.w	r1, [r4, r1, lsl #3]
 8006152:	f3c1 010b 	ubfx	r1, r1, #0, #12
 8006156:	1a52      	subs	r2, r2, r1
 8006158:	2a96      	cmp	r2, #150	; 0x96
 800615a:	dd31      	ble.n	80061c0 <ADC_IRQHandler+0x1a0>
	    Steps[j][stage].b.VLevel = adcreading-30;
 800615c:	495d      	ldr	r1, [pc, #372]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 800615e:	880a      	ldrh	r2, [r1, #0]
 8006160:	3a1e      	subs	r2, #30
 8006162:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8006166:	f854 6035 	ldr.w	r6, [r4, r5, lsl #3]
 800616a:	f362 060b 	bfi	r6, r2, #0, #12
 800616e:	f844 6035 	str.w	r6, [r4, r5, lsl #3]
	    voltages_lp[stage]=adcreading-15; 
 8006172:	880a      	ldrh	r2, [r1, #0]
 8006174:	3a0f      	subs	r2, #15
 8006176:	b292      	uxth	r2, r2
 8006178:	4957      	ldr	r1, [pc, #348]	; (80062d8 <ADC_IRQHandler+0x2b8>)
 800617a:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
      for (int j=0; j<2; j++) {
 800617e:	3301      	adds	r3, #1
 8006180:	2b01      	cmp	r3, #1
 8006182:	dcb9      	bgt.n	80060f8 <ADC_IRQHandler+0xd8>
	if (Steps[j][stage].b.WaitVoltageSlider) { // stuck on a preset; shall we unstick?
 8006184:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8006188:	4954      	ldr	r1, [pc, #336]	; (80062dc <ADC_IRQHandler+0x2bc>)
 800618a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8006194:	d0d6      	beq.n	8006144 <ADC_IRQHandler+0x124>
	  if (adcreading>>4 == Steps[j][stage].b.VLevel >>4) {
 8006196:	4a4f      	ldr	r2, [pc, #316]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 8006198:	8811      	ldrh	r1, [r2, #0]
 800619a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800619e:	4c4f      	ldr	r4, [pc, #316]	; (80062dc <ADC_IRQHandler+0x2bc>)
 80061a0:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80061a4:	f3c2 1207 	ubfx	r2, r2, #4, #8
 80061a8:	ebb2 1f11 	cmp.w	r2, r1, lsr #4
 80061ac:	d1e7      	bne.n	800617e <ADC_IRQHandler+0x15e>
	    Steps[j][stage].b.WaitVoltageSlider=0; 
 80061ae:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 80061b2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80061b6:	6851      	ldr	r1, [r2, #4]
 80061b8:	f36f 314d 	bfc	r1, #13, #1
 80061bc:	6051      	str	r1, [r2, #4]
 80061be:	e7de      	b.n	800617e <ADC_IRQHandler+0x15e>
	  else if (Steps[j][stage].b.VLevel - adcreading > JUMP_THRESHOLD) {
 80061c0:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 80061c4:	4945      	ldr	r1, [pc, #276]	; (80062dc <ADC_IRQHandler+0x2bc>)
 80061c6:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80061ca:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80061ce:	4941      	ldr	r1, [pc, #260]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 80061d0:	8809      	ldrh	r1, [r1, #0]
 80061d2:	1a52      	subs	r2, r2, r1
 80061d4:	2a96      	cmp	r2, #150	; 0x96
 80061d6:	dd10      	ble.n	80061fa <ADC_IRQHandler+0x1da>
	    Steps[j][stage].b.VLevel = adcreading; 
 80061d8:	4a3e      	ldr	r2, [pc, #248]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 80061da:	8816      	ldrh	r6, [r2, #0]
 80061dc:	493f      	ldr	r1, [pc, #252]	; (80062dc <ADC_IRQHandler+0x2bc>)
 80061de:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80061e2:	f851 5034 	ldr.w	r5, [r1, r4, lsl #3]
 80061e6:	f366 050b 	bfi	r5, r6, #0, #12
 80061ea:	f841 5034 	str.w	r5, [r1, r4, lsl #3]
	    voltages_lp[stage]=adcreading; 
 80061ee:	8812      	ldrh	r2, [r2, #0]
 80061f0:	b292      	uxth	r2, r2
 80061f2:	4939      	ldr	r1, [pc, #228]	; (80062d8 <ADC_IRQHandler+0x2b8>)
 80061f4:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
 80061f8:	e7c1      	b.n	800617e <ADC_IRQHandler+0x15e>
	  Steps[j][stage].b.VLevel += (voltages_lp[stage] - Steps[j][stage].b.VLevel) >> 4;
 80061fa:	4a37      	ldr	r2, [pc, #220]	; (80062d8 <ADC_IRQHandler+0x2b8>)
 80061fc:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8006200:	4936      	ldr	r1, [pc, #216]	; (80062dc <ADC_IRQHandler+0x2bc>)
 8006202:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8006206:	f851 5034 	ldr.w	r5, [r1, r4, lsl #3]
 800620a:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800620e:	1b55      	subs	r5, r2, r5
 8006210:	f851 2034 	ldr.w	r2, [r1, r4, lsl #3]
 8006214:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006218:	eb02 1225 	add.w	r2, r2, r5, asr #4
 800621c:	f851 5034 	ldr.w	r5, [r1, r4, lsl #3]
 8006220:	f362 050b 	bfi	r5, r2, #0, #12
 8006224:	f841 5034 	str.w	r5, [r1, r4, lsl #3]
 8006228:	e7a9      	b.n	800617e <ADC_IRQHandler+0x15e>
      times_lp[stage] += (adcreading - times_lp[stage])>>4;
 800622a:	4b2a      	ldr	r3, [pc, #168]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	4620      	mov	r0, r4
 8006230:	4a2b      	ldr	r2, [pc, #172]	; (80062e0 <ADC_IRQHandler+0x2c0>)
 8006232:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 8006236:	1a59      	subs	r1, r3, r1
 8006238:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800623c:	eb03 1321 	add.w	r3, r3, r1, asr #4
 8006240:	b29b      	uxth	r3, r3
 8006242:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
      for (int j=0; j<2; j++) {
 8006246:	2300      	movs	r3, #0
 8006248:	e01d      	b.n	8006286 <ADC_IRQHandler+0x266>
	  if (adcreading - Steps[j][stage].b.TLevel > JUMP_THRESHOLD) { // big jumps happen immediately
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 800624c:	8812      	ldrh	r2, [r2, #0]
 800624e:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8006252:	4c22      	ldr	r4, [pc, #136]	; (80062dc <ADC_IRQHandler+0x2bc>)
 8006254:	f854 1031 	ldr.w	r1, [r4, r1, lsl #3]
 8006258:	f3c1 310b 	ubfx	r1, r1, #12, #12
 800625c:	1a52      	subs	r2, r2, r1
 800625e:	2a96      	cmp	r2, #150	; 0x96
 8006260:	dd40      	ble.n	80062e4 <ADC_IRQHandler+0x2c4>
	    Steps[j][stage].b.TLevel = adcreading-30;
 8006262:	491c      	ldr	r1, [pc, #112]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 8006264:	880a      	ldrh	r2, [r1, #0]
 8006266:	3a1e      	subs	r2, #30
 8006268:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 800626c:	f854 6035 	ldr.w	r6, [r4, r5, lsl #3]
 8006270:	f362 3617 	bfi	r6, r2, #12, #12
 8006274:	f844 6035 	str.w	r6, [r4, r5, lsl #3]
	    times_lp[stage]=adcreading-15; 
 8006278:	880a      	ldrh	r2, [r1, #0]
 800627a:	3a0f      	subs	r2, #15
 800627c:	b292      	uxth	r2, r2
 800627e:	4918      	ldr	r1, [pc, #96]	; (80062e0 <ADC_IRQHandler+0x2c0>)
 8006280:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
      for (int j=0; j<2; j++) {
 8006284:	3301      	adds	r3, #1
 8006286:	2b01      	cmp	r3, #1
 8006288:	f73f af36 	bgt.w	80060f8 <ADC_IRQHandler+0xd8>
	if (Steps[j][stage].b.WaitTimeSlider) { // stuck on a preset; shall we unstick?
 800628c:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8006290:	4912      	ldr	r1, [pc, #72]	; (80062dc <ADC_IRQHandler+0x2bc>)
 8006292:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006296:	6852      	ldr	r2, [r2, #4]
 8006298:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800629c:	d0d5      	beq.n	800624a <ADC_IRQHandler+0x22a>
	  if (adcreading>>4 == Steps[j][stage].b.TLevel >>4) {
 800629e:	4a0d      	ldr	r2, [pc, #52]	; (80062d4 <ADC_IRQHandler+0x2b4>)
 80062a0:	8811      	ldrh	r1, [r2, #0]
 80062a2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 80062a6:	4c0d      	ldr	r4, [pc, #52]	; (80062dc <ADC_IRQHandler+0x2bc>)
 80062a8:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80062ac:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80062b0:	ebb2 1f11 	cmp.w	r2, r1, lsr #4
 80062b4:	d1e6      	bne.n	8006284 <ADC_IRQHandler+0x264>
	    Steps[j][stage].b.WaitTimeSlider=0; 
 80062b6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 80062ba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80062be:	6851      	ldr	r1, [r2, #4]
 80062c0:	f36f 318e 	bfc	r1, #14, #1
 80062c4:	6051      	str	r1, [r2, #4]
 80062c6:	e7dd      	b.n	8006284 <ADC_IRQHandler+0x264>
 80062c8:	2000029c 	.word	0x2000029c
 80062cc:	40012000 	.word	0x40012000
 80062d0:	40012100 	.word	0x40012100
 80062d4:	20000be8 	.word	0x20000be8
 80062d8:	200007f4 	.word	0x200007f4
 80062dc:	20000958 	.word	0x20000958
 80062e0:	20000bec 	.word	0x20000bec
	  else if (Steps[j][stage].b.TLevel - adcreading > JUMP_THRESHOLD) {
 80062e4:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 80062e8:	493b      	ldr	r1, [pc, #236]	; (80063d8 <ADC_IRQHandler+0x3b8>)
 80062ea:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80062ee:	f3c2 320b 	ubfx	r2, r2, #12, #12
 80062f2:	493a      	ldr	r1, [pc, #232]	; (80063dc <ADC_IRQHandler+0x3bc>)
 80062f4:	8809      	ldrh	r1, [r1, #0]
 80062f6:	1a52      	subs	r2, r2, r1
 80062f8:	2a96      	cmp	r2, #150	; 0x96
 80062fa:	dd10      	ble.n	800631e <ADC_IRQHandler+0x2fe>
	    Steps[j][stage].b.TLevel = adcreading; 
 80062fc:	4a37      	ldr	r2, [pc, #220]	; (80063dc <ADC_IRQHandler+0x3bc>)
 80062fe:	8816      	ldrh	r6, [r2, #0]
 8006300:	4935      	ldr	r1, [pc, #212]	; (80063d8 <ADC_IRQHandler+0x3b8>)
 8006302:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8006306:	f851 5034 	ldr.w	r5, [r1, r4, lsl #3]
 800630a:	f366 3517 	bfi	r5, r6, #12, #12
 800630e:	f841 5034 	str.w	r5, [r1, r4, lsl #3]
	    times_lp[stage]=adcreading; 
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	b292      	uxth	r2, r2
 8006316:	4932      	ldr	r1, [pc, #200]	; (80063e0 <ADC_IRQHandler+0x3c0>)
 8006318:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
 800631c:	e7b2      	b.n	8006284 <ADC_IRQHandler+0x264>
	  Steps[j][stage].b.TLevel += (times_lp[stage] - Steps[j][stage].b.TLevel) >> 4;
 800631e:	4a30      	ldr	r2, [pc, #192]	; (80063e0 <ADC_IRQHandler+0x3c0>)
 8006320:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8006324:	492c      	ldr	r1, [pc, #176]	; (80063d8 <ADC_IRQHandler+0x3b8>)
 8006326:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800632a:	f851 5034 	ldr.w	r5, [r1, r4, lsl #3]
 800632e:	f3c5 350b 	ubfx	r5, r5, #12, #12
 8006332:	1b55      	subs	r5, r2, r5
 8006334:	f851 2034 	ldr.w	r2, [r1, r4, lsl #3]
 8006338:	f3c2 320b 	ubfx	r2, r2, #12, #12
 800633c:	eb02 1225 	add.w	r2, r2, r5, asr #4
 8006340:	f851 5034 	ldr.w	r5, [r1, r4, lsl #3]
 8006344:	f362 3517 	bfi	r5, r2, #12, #12
 8006348:	f841 5034 	str.w	r5, [r1, r4, lsl #3]
 800634c:	e79a      	b.n	8006284 <ADC_IRQHandler+0x264>
      switch (stage) {
 800634e:	1fa3      	subs	r3, r4, #6
 8006350:	2b01      	cmp	r3, #1
 8006352:	d82c      	bhi.n	80063ae <ADC_IRQHandler+0x38e>
	if (adcreading - AddData[stage] > JUMP_THRESHOLD) {
 8006354:	4b21      	ldr	r3, [pc, #132]	; (80063dc <ADC_IRQHandler+0x3bc>)
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	4922      	ldr	r1, [pc, #136]	; (80063e4 <ADC_IRQHandler+0x3c4>)
 800635a:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 800635e:	1a5b      	subs	r3, r3, r1
 8006360:	2b96      	cmp	r3, #150	; 0x96
 8006362:	dd07      	ble.n	8006374 <ADC_IRQHandler+0x354>
	  AddData[stage] = adcreading-3; 
 8006364:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <ADC_IRQHandler+0x3bc>)
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	3b03      	subs	r3, #3
 800636a:	b29b      	uxth	r3, r3
 800636c:	491d      	ldr	r1, [pc, #116]	; (80063e4 <ADC_IRQHandler+0x3c4>)
 800636e:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
 8006372:	e6c1      	b.n	80060f8 <ADC_IRQHandler+0xd8>
	else if (AddData[stage] - adcreading > JUMP_THRESHOLD) {
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <ADC_IRQHandler+0x3c4>)
 8006376:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800637a:	4918      	ldr	r1, [pc, #96]	; (80063dc <ADC_IRQHandler+0x3bc>)
 800637c:	8809      	ldrh	r1, [r1, #0]
 800637e:	1a5b      	subs	r3, r3, r1
 8006380:	2b96      	cmp	r3, #150	; 0x96
 8006382:	dd06      	ble.n	8006392 <ADC_IRQHandler+0x372>
	  AddData[stage] = adcreading; 
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <ADC_IRQHandler+0x3bc>)
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	4916      	ldr	r1, [pc, #88]	; (80063e4 <ADC_IRQHandler+0x3c4>)
 800638c:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
 8006390:	e6b2      	b.n	80060f8 <ADC_IRQHandler+0xd8>
	  AddData[stage] += (adcreading - AddData[stage])>>2;
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <ADC_IRQHandler+0x3bc>)
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	4913      	ldr	r1, [pc, #76]	; (80063e4 <ADC_IRQHandler+0x3c4>)
 8006398:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
 800639c:	1a18      	subs	r0, r3, r0
 800639e:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 80063a2:	eb03 03a0 	add.w	r3, r3, r0, asr #2
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
 80063ac:	e6a4      	b.n	80060f8 <ADC_IRQHandler+0xd8>
	AddData[stage] += (adcreading - AddData[stage])>>4;
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <ADC_IRQHandler+0x3bc>)
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	4a0c      	ldr	r2, [pc, #48]	; (80063e4 <ADC_IRQHandler+0x3c4>)
 80063b4:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 80063b8:	1a59      	subs	r1, r3, r1
 80063ba:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80063be:	eb03 1321 	add.w	r3, r3, r1, asr #4
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	break; 
 80063c8:	e696      	b.n	80060f8 <ADC_IRQHandler+0xd8>
      ADC_POT_sel_cnt = ADC_inc_expanded(ADC_POT_sel_cnt); // figure out next pot and switch the mux
 80063ca:	4c07      	ldr	r4, [pc, #28]	; (80063e8 <ADC_IRQHandler+0x3c8>)
 80063cc:	7820      	ldrb	r0, [r4, #0]
 80063ce:	f7fb fd43 	bl	8001e58 <ADC_inc_expanded>
 80063d2:	7020      	strb	r0, [r4, #0]
 80063d4:	e634      	b.n	8006040 <ADC_IRQHandler+0x20>
 80063d6:	bf00      	nop
 80063d8:	20000958 	.word	0x20000958
 80063dc:	20000be8 	.word	0x20000be8
 80063e0:	20000bec 	.word	0x20000bec
 80063e4:	20000838 	.word	0x20000838
 80063e8:	2000029c 	.word	0x2000029c
 80063ec:	00000000 	.word	0x00000000

080063f0 <delay_ns>:

void delay_ns(unsigned int ns)
{
 80063f0:	b510      	push	{r4, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	4604      	mov	r4, r0
	volatile uint32_t nCount;
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq (&RCC_Clocks);
 80063f6:	a801      	add	r0, sp, #4
 80063f8:	f7fa fea4 	bl	8001144 <RCC_GetClocksFreq>

	nCount=(RCC_Clocks.HCLK_Frequency/10000000000)*ns;
 80063fc:	a30a      	add	r3, pc, #40	; (adr r3, 8006428 <delay_ns+0x38>)
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	9802      	ldr	r0, [sp, #8]
 8006404:	2100      	movs	r1, #0
 8006406:	f7fa fad5 	bl	80009b4 <__aeabi_ldivmod>
 800640a:	fb04 f000 	mul.w	r0, r4, r0
 800640e:	9005      	str	r0, [sp, #20]
	for (; nCount!=0; nCount--);
 8006410:	e002      	b.n	8006418 <delay_ns+0x28>
 8006412:	9b05      	ldr	r3, [sp, #20]
 8006414:	3b01      	subs	r3, #1
 8006416:	9305      	str	r3, [sp, #20]
 8006418:	9b05      	ldr	r3, [sp, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f9      	bne.n	8006412 <delay_ns+0x22>
}
 800641e:	b006      	add	sp, #24
 8006420:	bd10      	pop	{r4, pc}
 8006422:	bf00      	nop
 8006424:	f3af 8000 	nop.w
 8006428:	540be400 	.word	0x540be400
 800642c:	00000002 	.word	0x00000002

08006430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006468 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006434:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006436:	e003      	b.n	8006440 <LoopCopyDataInit>

08006438 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800643a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800643c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800643e:	3104      	adds	r1, #4

08006440 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006440:	480b      	ldr	r0, [pc, #44]	; (8006470 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006444:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006446:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006448:	d3f6      	bcc.n	8006438 <CopyDataInit>
  ldr  r2, =_sbss
 800644a:	4a0b      	ldr	r2, [pc, #44]	; (8006478 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800644c:	e002      	b.n	8006454 <LoopFillZerobss>

0800644e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800644e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006450:	f842 3b04 	str.w	r3, [r2], #4

08006454 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006456:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006458:	d3f9      	bcc.n	800644e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800645a:	f000 f8a5 	bl	80065a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800645e:	f000 f90f 	bl	8006680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006462:	f7ff fba9 	bl	8005bb8 <main>
  bx  lr    
 8006466:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006468:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800646c:	08006700 	.word	0x08006700
  ldr  r0, =_sdata
 8006470:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006474:	2000027c 	.word	0x2000027c
  ldr  r2, =_sbss
 8006478:	20000280 	.word	0x20000280
  ldr  r3, = _ebss
 800647c:	20000c30 	.word	0x20000c30

08006480 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006480:	e7fe      	b.n	8006480 <CAN1_RX0_IRQHandler>

08006482 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006482:	4770      	bx	lr

08006484 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006484:	e7fe      	b.n	8006484 <HardFault_Handler>

08006486 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006486:	e7fe      	b.n	8006486 <MemManage_Handler>

08006488 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006488:	e7fe      	b.n	8006488 <BusFault_Handler>

0800648a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800648a:	e7fe      	b.n	800648a <UsageFault_Handler>

0800648c <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800648c:	4770      	bx	lr

0800648e <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 800648e:	4770      	bx	lr

08006490 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8006490:	4770      	bx	lr

08006492 <_write>:
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	 int i=0;
	  for(i=0 ; i<len ; i++)
 8006492:	2300      	movs	r3, #0
 8006494:	4293      	cmp	r3, r2
 8006496:	da22      	bge.n	80064de <_write+0x4c>
{
 8006498:	b410      	push	{r4}
 800649a:	e003      	b.n	80064a4 <_write+0x12>
	  for(i=0 ; i<len ; i++)
 800649c:	3301      	adds	r3, #1
	    ITM_SendChar((*ptr++));
 800649e:	4621      	mov	r1, r4
	  for(i=0 ; i<len ; i++)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	da18      	bge.n	80064d6 <_write+0x44>
	    ITM_SendChar((*ptr++));
 80064a4:	1c4c      	adds	r4, r1, #1
 80064a6:	7808      	ldrb	r0, [r1, #0]

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80064a8:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80064ac:	f8d1 1e80 	ldr.w	r1, [r1, #3712]	; 0xe80
 80064b0:	f011 0f01 	tst.w	r1, #1
 80064b4:	d0f2      	beq.n	800649c <_write+0xa>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 80064b6:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80064ba:	f8d1 1e00 	ldr.w	r1, [r1, #3584]	; 0xe00
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80064be:	f011 0f01 	tst.w	r1, #1
 80064c2:	d0eb      	beq.n	800649c <_write+0xa>
  {
    while (ITM->PORT[0].u32 == 0);
 80064c4:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80064c8:	6809      	ldr	r1, [r1, #0]
 80064ca:	2900      	cmp	r1, #0
 80064cc:	d0fa      	beq.n	80064c4 <_write+0x32>
    ITM->PORT[0].u8 = (uint8_t) ch;
 80064ce:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80064d2:	7008      	strb	r0, [r1, #0]
 80064d4:	e7e2      	b.n	800649c <_write+0xa>
	  return len;

	errno = ENOSYS;
	return -1;
}
 80064d6:	4610      	mov	r0, r2
 80064d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	4610      	mov	r0, r2
 80064e0:	4770      	bx	lr
	...

080064e4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80064e4:	b082      	sub	sp, #8
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	9300      	str	r3, [sp, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80064ec:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <SetSysClock+0xb4>)
 80064ee:	6813      	ldr	r3, [r2, #0]
 80064f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80064f6:	4b28      	ldr	r3, [pc, #160]	; (8006598 <SetSysClock+0xb4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fe:	9300      	str	r3, [sp, #0]
    StartUpCounter++;
 8006500:	9b01      	ldr	r3, [sp, #4]
 8006502:	3301      	adds	r3, #1
 8006504:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	b91b      	cbnz	r3, 8006512 <SetSysClock+0x2e>
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006510:	d1f1      	bne.n	80064f6 <SetSysClock+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8006512:	4b21      	ldr	r3, [pc, #132]	; (8006598 <SetSysClock+0xb4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800651a:	d006      	beq.n	800652a <SetSysClock+0x46>
  {
    HSEStatus = (uint32_t)0x01;
 800651c:	2301      	movs	r3, #1
 800651e:	9300      	str	r3, [sp, #0]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 8006520:	9b00      	ldr	r3, [sp, #0]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d004      	beq.n	8006530 <SetSysClock+0x4c>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8006526:	b002      	add	sp, #8
 8006528:	4770      	bx	lr
    HSEStatus = (uint32_t)0x00;
 800652a:	2300      	movs	r3, #0
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	e7f7      	b.n	8006520 <SetSysClock+0x3c>
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8006530:	4b19      	ldr	r3, [pc, #100]	; (8006598 <SetSysClock+0xb4>)
 8006532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006534:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800653a:	4918      	ldr	r1, [pc, #96]	; (800659c <SetSysClock+0xb8>)
 800653c:	680a      	ldr	r2, [r1, #0]
 800653e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006542:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800654e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8006550:	689a      	ldr	r2, [r3, #8]
 8006552:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8006556:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8006558:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <SetSysClock+0xbc>)
 800655a:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006562:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006564:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <SetSysClock+0xb4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800656c:	d0fa      	beq.n	8006564 <SetSysClock+0x80>
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <SetSysClock+0xc0>)
 8006570:	f240 6205 	movw	r2, #1541	; 0x605
 8006574:	601a      	str	r2, [r3, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006576:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	f022 0203 	bic.w	r2, r2, #3
 8006580:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	f042 0202 	orr.w	r2, r2, #2
 8006588:	609a      	str	r2, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800658a:	4b03      	ldr	r3, [pc, #12]	; (8006598 <SetSysClock+0xb4>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b08      	cmp	r3, #8
 8006594:	d1f9      	bne.n	800658a <SetSysClock+0xa6>
 8006596:	e7c6      	b.n	8006526 <SetSysClock+0x42>
 8006598:	40023800 	.word	0x40023800
 800659c:	40007000 	.word	0x40007000
 80065a0:	07405419 	.word	0x07405419
 80065a4:	40023c00 	.word	0x40023c00

080065a8 <SystemInit>:
{
 80065a8:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065aa:	4c10      	ldr	r4, [pc, #64]	; (80065ec <SystemInit+0x44>)
 80065ac:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80065b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <SystemInit+0x48>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f042 0201 	orr.w	r2, r2, #1
 80065c0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80065c2:	2100      	movs	r1, #0
 80065c4:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80065cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065d0:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80065d2:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <SystemInit+0x4c>)
 80065d4:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065dc:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 80065de:	60d9      	str	r1, [r3, #12]
  SetSysClock();
 80065e0:	f7ff ff80 	bl	80064e4 <SetSysClock>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065e8:	60a3      	str	r3, [r4, #8]
}
 80065ea:	bd10      	pop	{r4, pc}
 80065ec:	e000ed00 	.word	0xe000ed00
 80065f0:	40023800 	.word	0x40023800
 80065f4:	24003010 	.word	0x24003010

080065f8 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4605      	mov	r5, r0
	int length = strlen(s);
 80065fc:	f7f9 fde4 	bl	80001c8 <strlen>
 8006600:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 8006602:	4602      	mov	r2, r0
 8006604:	4629      	mov	r1, r5
 8006606:	2001      	movs	r0, #1
 8006608:	f7ff ff43 	bl	8006492 <_write>
 800660c:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800660e:	2201      	movs	r2, #1
 8006610:	4906      	ldr	r1, [pc, #24]	; (800662c <puts+0x34>)
 8006612:	4610      	mov	r0, r2
 8006614:	f7ff ff3d 	bl	8006492 <_write>
 8006618:	4428      	add	r0, r5

	if (numbytes == (length+1))
 800661a:	3401      	adds	r4, #1
 800661c:	4284      	cmp	r4, r0
 800661e:	d101      	bne.n	8006624 <puts+0x2c>
	{
		res = 0;
 8006620:	2000      	movs	r0, #0
	{
		res = EOF;
	}

	return res;
}
 8006622:	bd38      	pop	{r3, r4, r5, pc}
		res = EOF;
 8006624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return res;
 8006628:	e7fb      	b.n	8006622 <puts+0x2a>
 800662a:	bf00      	nop
 800662c:	080066ec 	.word	0x080066ec

08006630 <versionInit>:
#include <stm32f4xx_rcc.h>
#include <stm32f4xx_gpio.h>

#include "version.h"

void versionInit() {
 8006630:	b500      	push	{lr}
 8006632:	b083      	sub	sp, #12
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8006634:	2101      	movs	r1, #1
 8006636:	2002      	movs	r0, #2
 8006638:	f7fa fde0 	bl	80011fc <RCC_AHB1PeriphClockCmd>
  
    GPIO_InitTypeDef gpio_init;
    gpio_init.GPIO_Pin = GPIO_Pin_14;
 800663c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006640:	9300      	str	r3, [sp, #0]
    gpio_init.GPIO_Mode = GPIO_Mode_IN;
 8006642:	2300      	movs	r3, #0
 8006644:	f88d 3004 	strb.w	r3, [sp, #4]
    gpio_init.GPIO_OType = GPIO_OType_PP;
 8006648:	f88d 3006 	strb.w	r3, [sp, #6]
    gpio_init.GPIO_Speed = GPIO_Speed_25MHz;
 800664c:	2301      	movs	r3, #1
 800664e:	f88d 3005 	strb.w	r3, [sp, #5]
    gpio_init.GPIO_PuPd = GPIO_PuPd_UP;
 8006652:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIOB, &gpio_init);
 8006656:	4669      	mov	r1, sp
 8006658:	4802      	ldr	r0, [pc, #8]	; (8006664 <versionInit+0x34>)
 800665a:	f7fa fd03 	bl	8001064 <GPIO_Init>
}
 800665e:	b003      	add	sp, #12
 8006660:	f85d fb04 	ldr.w	pc, [sp], #4
 8006664:	40020400 	.word	0x40020400

08006668 <versionRevised>:

unsigned char versionRevised() {
 8006668:	b508      	push	{r3, lr}
  return !GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_14);
 800666a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800666e:	4803      	ldr	r0, [pc, #12]	; (800667c <versionRevised+0x14>)
 8006670:	f7fa fd46 	bl	8001100 <GPIO_ReadInputDataBit>
}
 8006674:	fab0 f080 	clz	r0, r0
 8006678:	0940      	lsrs	r0, r0, #5
 800667a:	bd08      	pop	{r3, pc}
 800667c:	40020400 	.word	0x40020400

08006680 <__libc_init_array>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4e0d      	ldr	r6, [pc, #52]	; (80066b8 <__libc_init_array+0x38>)
 8006684:	4c0d      	ldr	r4, [pc, #52]	; (80066bc <__libc_init_array+0x3c>)
 8006686:	1ba4      	subs	r4, r4, r6
 8006688:	10a4      	asrs	r4, r4, #2
 800668a:	2500      	movs	r5, #0
 800668c:	42a5      	cmp	r5, r4
 800668e:	d109      	bne.n	80066a4 <__libc_init_array+0x24>
 8006690:	4e0b      	ldr	r6, [pc, #44]	; (80066c0 <__libc_init_array+0x40>)
 8006692:	4c0c      	ldr	r4, [pc, #48]	; (80066c4 <__libc_init_array+0x44>)
 8006694:	f000 f818 	bl	80066c8 <_init>
 8006698:	1ba4      	subs	r4, r4, r6
 800669a:	10a4      	asrs	r4, r4, #2
 800669c:	2500      	movs	r5, #0
 800669e:	42a5      	cmp	r5, r4
 80066a0:	d105      	bne.n	80066ae <__libc_init_array+0x2e>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066a8:	4798      	blx	r3
 80066aa:	3501      	adds	r5, #1
 80066ac:	e7ee      	b.n	800668c <__libc_init_array+0xc>
 80066ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066b2:	4798      	blx	r3
 80066b4:	3501      	adds	r5, #1
 80066b6:	e7f2      	b.n	800669e <__libc_init_array+0x1e>
 80066b8:	080066f8 	.word	0x080066f8
 80066bc:	080066f8 	.word	0x080066f8
 80066c0:	080066f8 	.word	0x080066f8
 80066c4:	080066fc 	.word	0x080066fc

080066c8 <_init>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr

080066d4 <_fini>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr
